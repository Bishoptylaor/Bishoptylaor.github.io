<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Bishop</title>
  <icon>https://bishoptylaor.github.io/icon.png</icon>
  
  <link href="https://bishoptylaor.github.io/atom.xml" rel="self"/>
  
  <link href="https://bishoptylaor.github.io/"/>
  <updated>2024-09-27T13:01:15.000Z</updated>
  <id>https://bishoptylaor.github.io/</id>
  
  <author>
    <name>Bishop</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>follow</title>
    <link href="https://bishoptylaor.github.io/uncategorized/Follow%20Claim/"/>
    <id>https://bishoptylaor.github.io/uncategorized/Follow%20Claim/</id>
    <published>2024-09-27T13:01:15.000Z</published>
    <updated>2024-09-27T13:01:15.000Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;This message is used to verify that this feed (feedId:61681496545347584) belongs to me (userId:57309722915578880). Join me in enjoying the next generation information browser &lt;a</summary>
        
      
    
    
    
    
  </entry>
  
  <entry>
    <title>初识 chromedp</title>
    <link href="https://bishoptylaor.github.io/uncategorized/chromedp-101/"/>
    <id>https://bishoptylaor.github.io/uncategorized/chromedp-101/</id>
    <published>2024-07-21T10:13:49.000Z</published>
    <updated>2024-07-24T15:57:24.740Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;最近工作碰到了一些自动化的需求，要求可以自动化的上传文件。调研了 &lt;a href=&quot;https://pkg.go.dev/github.com/chromedp/chromedp#section-readme&quot;&gt;chromedp package - github.com&amp;#x2F;chromedp&amp;#x2F;chromedp - Go Packages&lt;/a&gt;  和 &lt;a href=&quot;https://pkg.go.dev/github.com/tebeka/selenium&quot;&gt;selenium package - github.com&amp;#x2F;tebeka&amp;#x2F;selenium - Go Packages&lt;/a&gt; 这两个库，最终根据场景选择了和 chrome 浏览器更适配的 chromedp。&lt;/p&gt;
&lt;h2 id=&quot;使用&quot;&gt;&lt;a href=&quot;#使用&quot; class=&quot;headerlink&quot; title=&quot;使用&quot;&gt;&lt;/a&gt;使用&lt;/h2&gt;&lt;h3 id=&quot;获取&quot;&gt;&lt;a href=&quot;#获取&quot; class=&quot;headerlink&quot; title=&quot;获取&quot;&gt;&lt;/a&gt;获取&lt;/h3&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;go get -u github.com/chromedp/chromedp&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;顺便可以去 &lt;a href=&quot;https://github.com/chromedp&quot;&gt;GitHub-chromedp&lt;/a&gt; 上找到源码看看官方样例~&lt;br&gt;目前官方给出的样例如下：&lt;/p&gt;
&lt;p&gt;The following examples are currently available:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Example&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;https://github.com/chromedp/examples/tree/master/click&quot;&gt;click&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;use a selector to click on an element&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;https://github.com/chromedp/examples/tree/master/cookie&quot;&gt;cookie&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;set a HTTP cookie on requests&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;https://github.com/chromedp/examples/tree/master/download_file&quot;&gt;download_file&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;do headless file downloads&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;https://github.com/chromedp/examples/tree/master/download_image&quot;&gt;download_image&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;do headless image downloads&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;https://github.com/chromedp/examples/tree/master/emulate&quot;&gt;emulate&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;emulate a specific device such as an iPhone&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;https://github.com/chromedp/examples/tree/master/eval&quot;&gt;eval&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;evaluate javascript and retrieve the result&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;https://github.com/chromedp/examples/tree/master/fast&quot;&gt;fast&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;extract and render data from a page&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;https://github.com/chromedp/examples/tree/master/forecast&quot;&gt;forecast&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;extract and render data from a page&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;https://github.com/chromedp/examples/tree/master/geoip&quot;&gt;geoip&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;extract and render data from a page&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;https://github.com/chromedp/examples/tree/master/headers&quot;&gt;headers&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;add extra HTTP headers to browser requests&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;https://github.com/chromedp/examples/tree/master/keys&quot;&gt;keys&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;send key events to an element&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;https://github.com/chromedp/examples/tree/master/latlon&quot;&gt;latlon&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;retrieve the latitude&amp;#x2F;longitude from google maps, using the browser’s target events&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;https://github.com/chromedp/examples/tree/master/logic&quot;&gt;logic&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;more complex logic beyond simple actions&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;https://github.com/chromedp/examples/tree/master/multi&quot;&gt;multi&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;use headless-shell and a container (Docker, Podman, other)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;https://github.com/chromedp/examples/tree/master/pdf&quot;&gt;pdf&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;capture a pdf of a page&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;https://github.com/chromedp/examples/tree/master/proxy&quot;&gt;proxy&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;authenticate a proxy server which requires authentication&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;https://github.com/chromedp/examples/tree/master/remote&quot;&gt;remote&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;connect to an existing Chrome DevTools instance using a remote WebSocket URL&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;https://github.com/chromedp/examples/tree/master/screenshot&quot;&gt;screenshot&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;take a screenshot of a specific element and of the entire browser viewport&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;https://github.com/chromedp/examples/tree/master/submit&quot;&gt;submit&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;fill out and submit a form&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;https://github.com/chromedp/examples/tree/master/subtree&quot;&gt;subtree&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;populate and travel a subtree of the DOM&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;https://github.com/chromedp/examples/tree/master/text&quot;&gt;text&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;从选中的 element 中提取 text 文本&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;https://github.com/chromedp/examples/tree/master/upload&quot;&gt;upload&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;以表单的形式上传一个文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;https://github.com/chromedp/examples/tree/master/visible&quot;&gt;visible&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;等待某个 element</summary>
        
      
    
    
    
    
  </entry>
  
  <entry>
    <title>请根据场景设计缓存方案</title>
    <link href="https://bishoptylaor.github.io/research/design-prob/design-a-cache-sync/"/>
    <id>https://bishoptylaor.github.io/research/design-prob/design-a-cache-sync/</id>
    <published>2024-07-11T15:00:02.000Z</published>
    <updated>2024-07-11T23:47:33.938Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h2 id=&quot;有ABC三个请求，都是-uid-纬度的请求；分别涉及到配置-1，2，3；2，3，5；3，4，6。现在要求怎样在配置更新后及时将相关的请求缓存重置？&quot;&gt;&lt;a href=&quot;#有ABC三个请求，都是-uid-纬度的请求；分别涉及到配置-1，2，3；2，3，5；3，4，6。现在要求怎样在配置更新后及时将相关的请求缓存重置？&quot; class=&quot;headerlink&quot; title=&quot;有ABC三个请求，都是 uid 纬度的请求；分别涉及到配置 1，2，3；2，3，5；3，4，6。现在要求怎样在配置更新后及时将相关的请求缓存重置？&quot;&gt;&lt;/a&gt;有ABC三个请求，都是 uid 纬度的请求；分别涉及到配置 1，2，3；2，3，5；3，4，6。现在要求怎样在配置更新后及时将相关的请求缓存重置？&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;可以将配置变化的 binlog 加入消息队列&lt;/li&gt;
&lt;li&gt;配置关联的请求前缀提前存入 redis&lt;/li&gt;
&lt;li&gt;请求缓存的 key 做拆分：前缀为 2 中提到的前缀，以前缀为 key 存 uid 和 缓存更新时间到 zset 中。另 前缀 + uid 单独存储某个用户某个请求具体的缓存内容&lt;/li&gt;
&lt;li&gt;当消息队列消费到配置变化时：获取该配置关联的请求桶前缀，将请求桶中时间小于当前时间的 uid 取出，并从桶中清除；将前缀和相关待过期 uid 组合获取真正缓存的 key，将其过期 or 删除。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;如何保证缓存和db的数据一致性&quot;&gt;&lt;a href=&quot;#如何保证缓存和db的数据一致性&quot; class=&quot;headerlink&quot; title=&quot;如何保证缓存和db的数据一致性&quot;&gt;&lt;/a&gt;如何保证缓存和db的数据一致性&lt;/h2&gt;&lt;p&gt;cache aside pattern&lt;br&gt;读请求：先读缓存-&amp;gt;缓存命中，返回数据-&amp;gt;缓存失败，读DB-&amp;gt;更新缓存&lt;br&gt;写请求：先更新DB-&amp;gt;再更新缓存 额外记录DB变更，比如1s内是否有 db:table:column 产生了修改，这样在读到相关缓存时，可以先判断这个 变更 缓存是否有内容。&lt;/p&gt;
&lt;p&gt;如果相邻时间窗口内没有更新操作，那么认为当前读到的缓存时相对最新的；如果相邻时间窗口内有更新操作，那么需要将此次读到的内容丢弃，重读DB，并删除 or</summary>
        
      
    
    
    
    <category term="研究所" scheme="https://bishoptylaor.github.io/categories/research/"/>
    
    <category term="场景设计" scheme="https://bishoptylaor.github.io/categories/research/design-prob/"/>
    
    
  </entry>
  
  <entry>
    <title>请设计一个限流器</title>
    <link href="https://bishoptylaor.github.io/research/design-prob/design-a-rate-limiter/"/>
    <id>https://bishoptylaor.github.io/research/design-prob/design-a-rate-limiter/</id>
    <published>2024-07-11T14:00:59.000Z</published>
    <updated>2024-07-11T23:47:33.938Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h2 id=&quot;要求做一个限流器，限流范围是-10-千万qps，要求限流精度-99-，可以指定接口做限流配置&quot;&gt;&lt;a href=&quot;#要求做一个限流器，限流范围是-10-千万qps，要求限流精度-99-，可以指定接口做限流配置&quot; class=&quot;headerlink&quot; title=&quot;要求做一个限流器，限流范围是 10-千万qps，要求限流精度 99% ，可以指定接口做限流配置&quot;&gt;&lt;/a&gt;要求做一个限流器，限流范围是 10-千万qps，要求限流精度 99% ，可以指定接口做限流配置&lt;/h2&gt;&lt;p&gt;要实现一个具有高效限流和高精度的限流器，可以使用令牌桶（Token Bucket）算法。令牌桶算法能够处理高吞吐量的请求，同时具有较高的精度。&lt;/p&gt;
&lt;p&gt;以下是一个使用 Go 语言实现的限流器示例，包含以下特性：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;令牌桶算法&lt;/strong&gt;：用于控制请求的速率。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;接口限流配置&lt;/strong&gt;：可以指定不同的接口进行限流配置。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;高吞吐量支持&lt;/strong&gt;：支持 10 到千万 QPS 的范围。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;高精度&lt;/strong&gt;：限流精度 99%。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;Go-语言实现限流器&quot;&gt;&lt;a href=&quot;#Go-语言实现限流器&quot; class=&quot;headerlink&quot; title=&quot;Go 语言实现限流器&quot;&gt;&lt;/a&gt;Go 语言实现限流器&lt;/h3&gt;&lt;p&gt;首先，我们定义一个 &lt;code&gt;RateLimiter&lt;/code&gt; 结构体，使用令牌桶算法来实现限流器。&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;92&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; main&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;string&quot;&gt;&amp;quot;sync&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;string&quot;&gt;&amp;quot;time&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// RateLimiter implements a token bucket rate limiter.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; RateLimiter &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	rate         &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;           &lt;span class=&quot;comment&quot;&gt;// tokens generated per second&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	burst        &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;           &lt;span class=&quot;comment&quot;&gt;// max tokens in the bucket&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	tokens       &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;           &lt;span class=&quot;comment&quot;&gt;// current available tokens&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	lastRefill   time.Time     &lt;span class=&quot;comment&quot;&gt;// last refill time&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	mu           sync.Mutex    &lt;span class=&quot;comment&quot;&gt;// mutex for concurrent access&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// NewRateLimiter creates a new RateLimiter.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;NewRateLimiter&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(rate &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;, burst &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; *RateLimiter &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;amp;RateLimiter&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		rate:       rate,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		burst:      burst,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		tokens:     burst,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		lastRefill: time.Now(),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Allow checks if a request can proceed and decrements the token count.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(rl *RateLimiter)&lt;/span&gt;&lt;/span&gt; Allow() &lt;span class=&quot;type&quot;&gt;bool&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	rl.mu.Lock()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;defer&lt;/span&gt; rl.mu.Unlock()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	now := time.Now()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	elapsed := now.Sub(rl.lastRefill).Seconds()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	rl.tokens += &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;(elapsed * &lt;span class=&quot;type&quot;&gt;float64&lt;/span&gt;(rl.rate))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; rl.tokens &amp;gt; rl.burst &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		rl.tokens = rl.burst&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	rl.lastRefill = now&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; rl.tokens &amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		rl.tokens--&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; RateLimiterManager &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	limiters &lt;span class=&quot;keyword&quot;&gt;map&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;string&lt;/span&gt;]*RateLimiter&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	mu       sync.Mutex&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// NewRateLimiterManager creates a new RateLimiterManager.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;NewRateLimiterManager&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; *RateLimiterManager &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;amp;RateLimiterManager&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		limiters: &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;map&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;string&lt;/span&gt;]*RateLimiter),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// GetRateLimiter returns the RateLimiter for a given endpoint.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(manager *RateLimiterManager)&lt;/span&gt;&lt;/span&gt; GetRateLimiter(endpoint &lt;span class=&quot;type&quot;&gt;string&lt;/span&gt;, rate &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;, burst &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;) *RateLimiter &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	manager.mu.Lock()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;defer&lt;/span&gt; manager.mu.Unlock()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; limiter, exists := manager.limiters[endpoint]; exists &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; limiter&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	limiter := NewRateLimiter(rate, burst)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	manager.limiters[endpoint] = limiter&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; limiter&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Example usage&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	manager := NewRateLimiterManager()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	endpoint := &lt;span class=&quot;string&quot;&gt;&amp;quot;/api/test&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	rate := &lt;span class=&quot;number&quot;&gt;1000000&lt;/span&gt;   &lt;span class=&quot;comment&quot;&gt;// 1 million QPS&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	burst := &lt;span class=&quot;number&quot;&gt;1000000&lt;/span&gt;  &lt;span class=&quot;comment&quot;&gt;// burst capacity&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	limiter := manager.GetRateLimiter(endpoint, rate, burst)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i := &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;; i++ &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; limiter.Allow() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;comment&quot;&gt;// Process request&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;built_in&quot;&gt;println&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;Request allowed&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;comment&quot;&gt;// Reject request&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;built_in&quot;&gt;println&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;Request rejected&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&quot;详细解释&quot;&gt;&lt;a href=&quot;#详细解释&quot; class=&quot;headerlink&quot; title=&quot;详细解释&quot;&gt;&lt;/a&gt;详细解释&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;RateLimiter 结构体&lt;/strong&gt;：包含速率（rate）、突发容量（burst）、当前令牌数（tokens）以及上次补充令牌的时间（lastRefill）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;NewRateLimiter 函数&lt;/strong&gt;：用于创建一个新的限流器实例。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Allow 方法&lt;/strong&gt;：检查请求是否可以通过，并相应地减少令牌数量。通过计算时间间隔来补充令牌。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;RateLimiterManager 结构体&lt;/strong&gt;：用于管理不同接口的限流器。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;NewRateLimiterManager 函数&lt;/strong&gt;：创建一个新的限流器管理器实例。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;GetRateLimiter 方法&lt;/strong&gt;：获取指定接口的限流器，如果不存在则创建一个新的限流器。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;使用示例&quot;&gt;&lt;a href=&quot;#使用示例&quot; class=&quot;headerlink&quot; title=&quot;使用示例&quot;&gt;&lt;/a&gt;使用示例&lt;/h3&gt;&lt;p&gt;在 &lt;code&gt;main&lt;/code&gt; 函数中，创建了一个限流器管理器，并为 &lt;code&gt;/api/test&lt;/code&gt; 接口设置了限流参数。然后模拟 100 个请求，检查请求是否被允许。&lt;/p&gt;
&lt;p&gt;这个限流器实现可以处理高吞吐量的请求，并且具有限流精度。你可以根据需要调整速率和突发容量，以适应不同的 QPS</summary>
        
      
    
    
    
    <category term="研究所" scheme="https://bishoptylaor.github.io/categories/research/"/>
    
    <category term="场景设计" scheme="https://bishoptylaor.github.io/categories/research/design-prob/"/>
    
    
  </entry>
  
  <entry>
    <title>给定数字组成的比目标数字小的最大值</title>
    <link href="https://bishoptylaor.github.io/interview/juan/bytedance-common-alg/smaller-largest-num-in-given-digits/"/>
    <id>https://bishoptylaor.github.io/interview/juan/bytedance-common-alg/smaller-largest-num-in-given-digits/</id>
    <published>2024-07-11T13:44:23.000Z</published>
    <updated>2024-07-11T23:47:33.938Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;给定一个目标数 n，给定一组数组 nums，求由 nums 组成的比 n 小的最大数。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例 1：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：n = 23112, nums = [2, 4, 9]
输出：0
&lt;/code&gt;&lt;/pre&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;79&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; main  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; (  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;string&quot;&gt;&amp;quot;fmt&amp;quot;&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;string&quot;&gt;&amp;quot;sort&amp;quot;&lt;/span&gt;   &lt;span class=&quot;string&quot;&gt;&amp;quot;strconv&amp;quot;&lt;/span&gt;)  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;findMaxLessThanN&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(target &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;, nums []&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; (result &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;) &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   targetStr := strconv.Itoa(target)  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; targetNums []&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i, _ := &lt;span class=&quot;keyword&quot;&gt;range&lt;/span&gt; targetStr &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      targetNums = &lt;span class=&quot;built_in&quot;&gt;append&lt;/span&gt;(targetNums, &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;(targetStr[i]-&lt;span class=&quot;string&quot;&gt;&amp;#x27;0&amp;#x27;&lt;/span&gt;))  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;comment&quot;&gt;// Sort A in descending order  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   sort.Sort(sort.Reverse(sort.IntSlice(nums)))  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   ASet := &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;map&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;]&lt;span class=&quot;type&quot;&gt;bool&lt;/span&gt;)  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; _, a := &lt;span class=&quot;keyword&quot;&gt;range&lt;/span&gt; nums &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      ASet[a] = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   length := &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(targetNums)  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i := &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; length; i++ &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      currentDigit := targetNums[i]  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      largestLess, found := findLargestLessThan(currentDigit, nums)  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; found &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;comment&quot;&gt;// Replace the current digit with the largest less than itself  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         targetNums[i] = largestLess  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;comment&quot;&gt;// Fill the rest of the digits with the largest in A  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; j := i + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; j &amp;lt; length; j++ &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            targetNums[j] = nums[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; !ASet[currentDigit] &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;comment&quot;&gt;// If current digit is not in A and we cannot find a smaller digit, backtrack  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i &amp;gt;= &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;amp;&amp;amp; !ASet[targetNums[i]] &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            i--  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; i &amp;lt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;// If no valid digit was found, return the largest possible number with one less digit  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            result := &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; j := &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; j &amp;lt; length&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;; j++ &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               result = result*&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt; + nums[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; result  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;comment&quot;&gt;// Replace the found digit with the largest less than itself and fill the rest  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         largestLess, _ = findLargestLessThan(targetNums[i], nums)  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         targetNums[i] = largestLess  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; j := i + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; j &amp;lt; length; j++ &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            targetNums[j] = nums[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;comment&quot;&gt;// Convert the runes back to an integer  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; _, n := &lt;span class=&quot;keyword&quot;&gt;range&lt;/span&gt; targetNums &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      result = result*&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt; + n  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; result  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// findLargestLessThan finds the largest digit in A that is less than the given digitfunc findLargestLessThan(digit int, A []int) (int, bool) &amp;#123;  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; _, a := &lt;span class=&quot;keyword&quot;&gt;range&lt;/span&gt; A &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; a &amp;lt; digit &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; a, &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   n := &lt;span class=&quot;number&quot;&gt;23121&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   A := []&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;&amp;#123;&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;&amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   fmt.Println(findMaxLessThanN(n, A)) &lt;span class=&quot;comment&quot;&gt;// Output: 22999  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&quot;详细解释&quot;&gt;&lt;a href=&quot;#详细解释&quot; class=&quot;headerlink&quot; title=&quot;详细解释&quot;&gt;&lt;/a&gt;详细解释&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;findLargestLessThan&lt;/strong&gt;: 一个辅助函数，用于找到集合 A 中小于给定数字的最大数字。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;findMaxLessThanN&lt;/strong&gt;: 主要函数，根据给定数字 n 和集合 A，逐位处理，找到满足条件的最大数字。&lt;ul&gt;
&lt;li&gt;将 n 转换为字符串以便逐位处理。&lt;/li&gt;
&lt;li&gt;对集合 A 进行排序，并构建一个快速查找的集合 ASet。&lt;/li&gt;
&lt;li&gt;从高位开始逐位处理 n，如果找到可以替换的数字则进行替换，并将后续位设为集合 A</summary>
        
      
    
    
    
    <category term="面试" scheme="https://bishoptylaor.github.io/categories/interview/"/>
    
    <category term="刷题" scheme="https://bishoptylaor.github.io/categories/interview/juan/"/>
    
    <category term="字节常见题" scheme="https://bishoptylaor.github.io/categories/interview/juan/bytedance-common-alg/"/>
    
    
  </entry>
  
  <entry>
    <title>Leetcode.150 逆波兰表达式求值</title>
    <link href="https://bishoptylaor.github.io/interview/juan/neet150/stack/leet-150-valid-parentheses1/"/>
    <id>https://bishoptylaor.github.io/interview/juan/neet150/stack/leet-150-valid-parentheses1/</id>
    <published>2024-07-08T15:20:26.000Z</published>
    <updated>2024-07-24T16:56:29.551Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://leetcode.cn/problems/evaluate-reverse-polish-notation/&quot;&gt;150. 逆波兰表达式求值&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;给你一个字符串数组 &lt;code&gt;tokens&lt;/code&gt; ，表示一个根据 &lt;a href=&quot;https://baike.baidu.com/item/%E9%80%86%E6%B3%A2%E5%85%B0%E5%BC%8F/128437&quot;&gt;逆波兰表示法&lt;/a&gt; 表示的算术表达式。&lt;/p&gt;
&lt;p&gt;请你计算该表达式。返回一个表示表达式值的整数。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;有效的算符为 &lt;code&gt;&amp;#39;+&amp;#39;&lt;/code&gt;、&lt;code&gt;&amp;#39;-&amp;#39;&lt;/code&gt;、&lt;code&gt;&amp;#39;*&amp;#39;&lt;/code&gt; 和 &lt;code&gt;&amp;#39;/&amp;#39;&lt;/code&gt; 。&lt;/li&gt;
&lt;li&gt;每个操作数（运算对象）都可以是一个整数或者另一个表达式。&lt;/li&gt;
&lt;li&gt;两个整数之间的除法总是 &lt;strong&gt;向零截断&lt;/strong&gt; 。&lt;/li&gt;
&lt;li&gt;表达式中不含除零运算。&lt;/li&gt;
&lt;li&gt;输入是一个根据逆波兰表示法表示的算术表达式。&lt;/li&gt;
&lt;li&gt;答案及所有中间计算结果可以用 &lt;strong&gt;32 位&lt;/strong&gt; 整数表示。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;示例 1：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：tokens = [&amp;quot;2&amp;quot;,&amp;quot;1&amp;quot;,&amp;quot;+&amp;quot;,&amp;quot;3&amp;quot;,&amp;quot;*&amp;quot;]
输出：9
解释：该算式转化为常见的中缀算术表达式为：((2 + 1) * 3) = 9
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;示例 2：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：tokens = [&amp;quot;4&amp;quot;,&amp;quot;13&amp;quot;,&amp;quot;5&amp;quot;,&amp;quot;/&amp;quot;,&amp;quot;+&amp;quot;]
输出：6
解释：该算式转化为常见的中缀算术表达式为：(4 + (13 / 5)) = 6
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;示例 3：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：tokens = [&amp;quot;10&amp;quot;,&amp;quot;6&amp;quot;,&amp;quot;9&amp;quot;,&amp;quot;3&amp;quot;,&amp;quot;+&amp;quot;,&amp;quot;-11&amp;quot;,&amp;quot;*&amp;quot;,&amp;quot;/&amp;quot;,&amp;quot;*&amp;quot;,&amp;quot;17&amp;quot;,&amp;quot;+&amp;quot;,&amp;quot;5&amp;quot;,&amp;quot;+&amp;quot;]
输出：22
解释：该算式转化为常见的中缀算术表达式为：
  ((10 * (6 / ((9 + 3) * -11))) + 17) + 5
= ((10 * (6 / (12 * -11))) + 17) + 5
= ((10 * (6 / -132)) + 17) + 5
= ((10 * 0) + 17) + 5
= (0 + 17) + 5
= 17 + 5
= 22
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;提示：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= tokens.length &amp;lt;= 104&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tokens[i]&lt;/code&gt; 是一个算符（&lt;code&gt;&amp;quot;+&amp;quot;&lt;/code&gt;、&lt;code&gt;&amp;quot;-&amp;quot;&lt;/code&gt;、&lt;code&gt;&amp;quot;*&amp;quot;&lt;/code&gt; 或 &lt;code&gt;&amp;quot;/&amp;quot;&lt;/code&gt;），或是在范围 &lt;code&gt;[-200, 200]&lt;/code&gt; 内的一个整数&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;逆波兰表达式：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;逆波兰表达式是一种后缀表达式，所谓后缀就是指算符写在后面。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;平常使用的算式则是一种中缀表达式，如 &lt;code&gt;( 1 + 2 ) * ( 3 + 4 )&lt;/code&gt; 。&lt;/li&gt;
&lt;li&gt;该算式的逆波兰表达式写法为 &lt;code&gt;( ( 1 2 + ) ( 3 4 + ) * )&lt;/code&gt; 。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;逆波兰表达式主要有以下两个优点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;去掉括号后表达式无歧义，上式即便写成 &lt;code&gt;1 2 + 3 4 + *&lt;/code&gt; 也可以依据次序计算出正确结果。&lt;/li&gt;
&lt;li&gt;适合用栈操作运算：遇到数字则入栈；遇到算符则取出栈顶两个数字进行计算，并将结果压入栈中&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;根据题意可知：栈中应当只有数字；表达式认为都是合法的，暂时不需要完备性校验&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;evalRPN&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(tokens []&lt;span class=&quot;type&quot;&gt;string&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	stack := []&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; _, token := &lt;span class=&quot;keyword&quot;&gt;range&lt;/span&gt; tokens &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		val, err := strconv.Atoi(token)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err == &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			stack = &lt;span class=&quot;built_in&quot;&gt;append&lt;/span&gt;(stack, val)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			num1, num2 := stack[&lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(stack)&lt;span class=&quot;number&quot;&gt;-2&lt;/span&gt;], stack[&lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(stack)&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			stack = stack[:&lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(stack)&lt;span class=&quot;number&quot;&gt;-2&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;switch&lt;/span&gt; token &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;quot;+&amp;quot;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				stack = &lt;span class=&quot;built_in&quot;&gt;append&lt;/span&gt;(stack, num1 + num2)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;quot;-&amp;quot;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				stack = &lt;span class=&quot;built_in&quot;&gt;append&lt;/span&gt;(stack, num1 - num2)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;quot;*&amp;quot;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				stack = &lt;span class=&quot;built_in&quot;&gt;append&lt;/span&gt;(stack, num1 * num2)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;quot;/&amp;quot;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				stack = &lt;span class=&quot;built_in&quot;&gt;append&lt;/span&gt;(stack, num1 / num2)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; stack[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span</summary>
        
      
    
    
    
    <category term="面试" scheme="https://bishoptylaor.github.io/categories/interview/"/>
    
    <category term="刷题" scheme="https://bishoptylaor.github.io/categories/interview/juan/"/>
    
    <category term="NeetCode150" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/"/>
    
    <category term="Stack" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/stack/"/>
    
    
  </entry>
  
  <entry>
    <title>Leetcode.84 柱状图中最大的矩形</title>
    <link href="https://bishoptylaor.github.io/interview/juan/neet150/stack/leet-84-largest-rectangle-in-histogram/"/>
    <id>https://bishoptylaor.github.io/interview/juan/neet150/stack/leet-84-largest-rectangle-in-histogram/</id>
    <published>2024-07-08T07:58:19.000Z</published>
    <updated>2024-07-12T14:15:22.485Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://leetcode.cn/problems/largest-rectangle-in-histogram/&quot;&gt;84. 柱状图中最大的矩形&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;给定 &lt;em&gt;n&lt;/em&gt; 个非负整数，用来表示柱状图中各个柱子的高度。每个柱子彼此相邻，且宽度为 1 。&lt;/p&gt;
&lt;p&gt;求在该柱状图中，能够勾勒出来的矩形的最大面积。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例 1:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://assets.leetcode.com/uploads/2021/01/04/histogram.jpg&quot;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：heights = [2,1,5,6,2,3]
输出：10
解释：最大的矩形为图中红色区域，面积为 10
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;示例 2：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://assets.leetcode.com/uploads/2021/01/04/histogram-1.jpg&quot;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入： heights = [2,4]
输出： 4
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;提示：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= heights.length &amp;lt;=105&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;0 &amp;lt;= heights[i] &amp;lt;= 104&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span</summary>
        
      
    
    
    
    <category term="面试" scheme="https://bishoptylaor.github.io/categories/interview/"/>
    
    <category term="刷题" scheme="https://bishoptylaor.github.io/categories/interview/juan/"/>
    
    <category term="NeetCode150" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/"/>
    
    <category term="Stack" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/stack/"/>
    
    
  </entry>
  
  <entry>
    <title>Leetcode.155 最小栈</title>
    <link href="https://bishoptylaor.github.io/interview/juan/neet150/stack/leet-155-min-stack/"/>
    <id>https://bishoptylaor.github.io/interview/juan/neet150/stack/leet-155-min-stack/</id>
    <published>2024-07-08T07:43:41.000Z</published>
    <updated>2024-07-12T14:15:22.485Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://leetcode.cn/problems/min-stack/&quot;&gt;155. 最小栈&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;设计一个支持 &lt;code&gt;push&lt;/code&gt; ，&lt;code&gt;pop&lt;/code&gt; ，&lt;code&gt;top&lt;/code&gt; 操作，并能在常数时间内检索到最小元素的栈。&lt;/p&gt;
&lt;p&gt;实现 &lt;code&gt;MinStack&lt;/code&gt; 类:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;MinStack()&lt;/code&gt; 初始化堆栈对象。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;void push(int val)&lt;/code&gt; 将元素val推入堆栈。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;void pop()&lt;/code&gt; 删除堆栈顶部的元素。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;int top()&lt;/code&gt; 获取堆栈顶部的元素。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;int getMin()&lt;/code&gt; 获取堆栈中的最小元素。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;示例 1:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：
[&amp;quot;MinStack&amp;quot;,&amp;quot;push&amp;quot;,&amp;quot;push&amp;quot;,&amp;quot;push&amp;quot;,&amp;quot;getMin&amp;quot;,&amp;quot;pop&amp;quot;,&amp;quot;top&amp;quot;,&amp;quot;getMin&amp;quot;]
[[],[-2],[0],[-3],[],[],[],[]]

输出：
[null,null,null,null,-3,null,0,-2]

解释：
MinStack minStack = new MinStack();
minStack.push(-2);
minStack.push(0);
minStack.push(-3);
minStack.getMin();   --&amp;gt; 返回 -3.
minStack.pop();
minStack.top();      --&amp;gt; 返回 0.
minStack.getMin();   --&amp;gt; 返回 -2.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;提示：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-231 &amp;lt;= val &amp;lt;= 231 - 1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pop&lt;/code&gt;、&lt;code&gt;top&lt;/code&gt; 和 &lt;code&gt;getMin&lt;/code&gt; 操作总是在 &lt;strong&gt;非空栈&lt;/strong&gt; 上调用&lt;/li&gt;
&lt;li&gt;&lt;code&gt;push&lt;/code&gt;, &lt;code&gt;pop&lt;/code&gt;, &lt;code&gt;top&lt;/code&gt;, and &lt;code&gt;getMin&lt;/code&gt;最多被调用 &lt;code&gt;3 * 104&lt;/code&gt; 次&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;题目已经给好了大致的方法，因此定义结构和函数具体内容即可：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;根据要求需要常数级检索最小元素，因此一般单独字段直接存即可；&lt;/li&gt;
&lt;li&gt;又因为 stack 先进后出的性质，在 pop 操作后，为了保证 getMin 扔能正确执行，还应该更新最小值，因此还应该记录每次 push 的时候当时最小值的更新现场。&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; MinStack &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	MinVal &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	Data []&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Constructor&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; MinStack &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; MinStack&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		Data: &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;([]&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		MinVal: &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(this *MinStack)&lt;/span&gt;&lt;/span&gt; Push(val &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(this.Data) == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		this.Data = &lt;span class=&quot;built_in&quot;&gt;append&lt;/span&gt;(this.Data, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		this.MinVal = val&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		diff := val - this.MinVal&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; diff &amp;lt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			this.MinVal = val&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		this.Data = &lt;span class=&quot;built_in&quot;&gt;append&lt;/span&gt;(this.Data, diff)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(this *MinStack)&lt;/span&gt;&lt;/span&gt; Pop() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(this.Data) == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	diff := this.Data[&lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(this.Data)&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; diff &amp;lt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		this.MinVal = this.MinVal - diff&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	this.Data = this.Data[:&lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(this.Data)&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(this *MinStack)&lt;/span&gt;&lt;/span&gt; Top() &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(this.Data) == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	diff := this.Data[&lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(this.Data)&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; diff &amp;lt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; this.MinVal&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; this.MinVal + diff&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(this *MinStack)&lt;/span&gt;&lt;/span&gt; GetMin() &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; this.MinVal&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;* Your MinStack object will be instantiated and called as such:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;* obj := Constructor();&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;* obj.Push(val);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;* obj.Pop();&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;* param_3 := obj.Top();&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;* param_4 := obj.GetMin();&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span</summary>
        
      
    
    
    
    <category term="面试" scheme="https://bishoptylaor.github.io/categories/interview/"/>
    
    <category term="刷题" scheme="https://bishoptylaor.github.io/categories/interview/juan/"/>
    
    <category term="NeetCode150" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/"/>
    
    <category term="Stack" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/stack/"/>
    
    
  </entry>
  
  <entry>
    <title>Leetcode.572 另一棵树的子树</title>
    <link href="https://bishoptylaor.github.io/interview/juan/neet150/trees/leet-572-subtree-of-another-tree/"/>
    <id>https://bishoptylaor.github.io/interview/juan/neet150/trees/leet-572-subtree-of-another-tree/</id>
    <published>2024-07-07T15:24:19.000Z</published>
    <updated>2024-07-12T14:15:22.486Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://leetcode.cn/problems/subtree-of-another-tree/&quot;&gt;572. 另一棵树的子树&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;给你两棵二叉树 &lt;code&gt;root&lt;/code&gt; 和 &lt;code&gt;subRoot&lt;/code&gt; 。检验 &lt;code&gt;root&lt;/code&gt; 中是否包含和 &lt;code&gt;subRoot&lt;/code&gt; 具有相同结构和节点值的子树。如果存在，返回 &lt;code&gt;true&lt;/code&gt; ；否则，返回 &lt;code&gt;false&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;二叉树 &lt;code&gt;tree&lt;/code&gt; 的一棵子树包括 &lt;code&gt;tree&lt;/code&gt; 的某个节点和这个节点的所有后代节点。&lt;code&gt;tree&lt;/code&gt; 也可以看做它自身的一棵子树。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例 1：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://assets.leetcode.com/uploads/2021/04/28/subtree1-tree.jpg&quot;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：root = [3,4,5,1,2], subRoot = [4,1,2]
输出：true
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;示例 2：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://assets.leetcode.com/uploads/2021/04/28/subtree2-tree.jpg&quot;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：root = [3,4,5,1,2,null,null,null,null,0], subRoot = [4,1,2]
输出：false
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;提示：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;root&lt;/code&gt; 树上的节点数量范围是 &lt;code&gt;[1, 2000]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;subRoot&lt;/code&gt; 树上的节点数量范围是 &lt;code&gt;[1, 1000]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-104 &amp;lt;= root.val &amp;lt;= 104&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-104 &amp;lt;= subRoot.val &amp;lt;= 104&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;第一种方法：先深度优先 || 先序遍历主树，直到找到和 subRoot 相同值的节点，再以此为起点与 subRoot 做比较。属于暴力深搜的一种。&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;isSubtree&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(s *TreeNode, t *TreeNode)&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;bool&lt;/span&gt; &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; s == &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; check(s, t) || isSubtree(s.Left, t) || isSubtree(s.Right, t) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;check&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(a, b *TreeNode)&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;bool&lt;/span&gt; &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; a == &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;amp;&amp;amp; b == &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; a == &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; || b == &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; a.Val == b.Val &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; check(a.Left, b.Left) &amp;amp;&amp;amp; check(a.Right, b.Right) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;


&lt;p&gt;第二种方法：利用树的性质，将空子树补全，这样能得到唯一的一个先序遍历结果，然后判断 subRoot 的遍历结果是否是 root 遍历结果的子串，即可确认是否是题目要求的子树。&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;isSubtree&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(s *TreeNode, t *TreeNode)&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;bool&lt;/span&gt; &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	maxEle := math.MinInt32 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	getMaxElement(s, &amp;amp;maxEle) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	getMaxElement(t, &amp;amp;maxEle) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	lNull := maxEle + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	rNull := maxEle + &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	sl, tl := getDfsOrder(s, []&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;&amp;#123;&amp;#125;, lNull, rNull), getDfsOrder(t, []&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;&amp;#123;&amp;#125;, lNull, rNull) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; kmp(sl, tl) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;kmp&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(s, t []&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;bool&lt;/span&gt; &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	sLen, tLen := &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(s), &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(t) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	fail := &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;([]&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;, sLen) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i := &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; sLen; i++ &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		fail[i] = &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i, j := &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;; i &amp;lt; tLen; i++ &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; j != &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt; &amp;amp;&amp;amp; t[i] != t[j+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;] &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			j = fail[j] &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; t[i] == t[j+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;] &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			j++ &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		fail[i] = j &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i, j := &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;; i &amp;lt; sLen; i++ &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; j != &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt; &amp;amp;&amp;amp; s[i] != t[j+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;] &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			j = fail[j] &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; s[i] == t[j+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;] &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			j++ &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; j == tLen - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getDfsOrder&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(t *TreeNode, list []&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;, lNull, rNull &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; []&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; t == &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; list &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	list = &lt;span class=&quot;built_in&quot;&gt;append&lt;/span&gt;(list, t.Val) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; t.Left != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		list = getDfsOrder(t.Left, list, lNull, rNull) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		list = &lt;span class=&quot;built_in&quot;&gt;append&lt;/span&gt;(list, lNull) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; t.Right != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		list = getDfsOrder(t.Right, list, lNull, rNull) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		list = &lt;span class=&quot;built_in&quot;&gt;append&lt;/span&gt;(list, rNull) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; list &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getMaxElement&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(t *TreeNode, maxEle *&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; t == &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; t.Val &amp;gt; *maxEle &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		*maxEle = t.Val &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	getMaxElement(t.Left, maxEle) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	getMaxElement(t.Right, maxEle) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;</summary>
        
      
    
    
    
    <category term="面试" scheme="https://bishoptylaor.github.io/categories/interview/"/>
    
    <category term="刷题" scheme="https://bishoptylaor.github.io/categories/interview/juan/"/>
    
    <category term="NeetCode150" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/"/>
    
    <category term="Trees" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/trees/"/>
    
    
  </entry>
  
  <entry>
    <title>Leetcode.50 Pow(x, n)</title>
    <link href="https://bishoptylaor.github.io/uncategorized/leet-50-powx-n/"/>
    <id>https://bishoptylaor.github.io/uncategorized/leet-50-powx-n/</id>
    <published>2024-07-07T12:56:35.000Z</published>
    <updated>2024-07-10T13:14:08.359Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://leetcode.cn/problems/powx-n/&quot;&gt;50. Pow(x, n)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;实现 &lt;a href=&quot;https://www.cplusplus.com/reference/valarray/pow/&quot;&gt;pow(&lt;em&gt;x&lt;/em&gt;, &lt;em&gt;n&lt;/em&gt;)&lt;/a&gt; ，即计算 &lt;code&gt;x&lt;/code&gt; 的整数 &lt;code&gt;n&lt;/code&gt; 次幂函数（即，&lt;code&gt;xn&lt;/code&gt; ）。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例 1：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：x = 2.00000, n = 10
输出：1024.00000
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;示例 2：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：x = 2.10000, n = 3
输出：9.26100
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;示例 3：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：x = 2.00000, n = -2
输出：0.25000
解释：2-2 = 1/22 = 1/4 = 0.25
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;提示：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-100.0 &amp;lt; x &amp;lt; 100.0&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-231 &amp;lt;= n &amp;lt;= 231-1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;n&lt;/code&gt; 是一个整数&lt;/li&gt;
&lt;li&gt;要么 &lt;code&gt;x&lt;/code&gt; 不为零，要么 &lt;code&gt;n &amp;gt; 0&lt;/code&gt; 。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-104 &amp;lt;= xn &amp;lt;= 104&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;myPow&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(x &lt;span class=&quot;type&quot;&gt;float64&lt;/span&gt;, n &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;float64&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; n &amp;gt;= &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; quickMul(x, n)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1.0&lt;/span&gt; / quickMul(x, -n)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;quickMul&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(x &lt;span class=&quot;type&quot;&gt;float64&lt;/span&gt;, N &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;float64&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	ans := &lt;span class=&quot;number&quot;&gt;1.0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// 贡献的初始值为 x&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	x_contribute := x&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// 在对 N 进行二进制拆分的同时计算答案&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; N &amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; N % &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; == &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;comment&quot;&gt;// 如果 N 二进制表示的最低位为 1，那么需要计入贡献&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			ans *= x_contribute&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// 将贡献不断地平方&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		x_contribute *= x_contribute&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// 舍弃 N 二进制表示的最低位，这样我们每次只要判断最低位即可&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		N /= &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; ans&lt;/span&gt;&lt;br&gt;&lt;span</summary>
        
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Leetcode.1186 删除一次得到子数组最大和</title>
    <link href="https://bishoptylaor.github.io/uncategorized/leet-1186-maximum-subarray-sum-with-one-deletion/"/>
    <id>https://bishoptylaor.github.io/uncategorized/leet-1186-maximum-subarray-sum-with-one-deletion/</id>
    <published>2024-07-02T14:20:39.000Z</published>
    <updated>2024-07-10T13:14:08.360Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://leetcode.cn/problems/maximum-subarray-sum-with-one-deletion/&quot;&gt;1186. 删除一次得到子数组最大和&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;给你一个整数数组，返回它的某个 &lt;strong&gt;非空&lt;/strong&gt; 子数组（连续元素）在执行一次可选的删除操作后，所能得到的最大元素总和。换句话说，你可以从原数组中选出一个子数组，并可以决定要不要从中删除一个元素（只能删一次哦），（删除后）子数组中至少应当有一个元素，然后该子数组（剩下）的元素总和是所有子数组之中最大的。&lt;/p&gt;
&lt;p&gt;注意，删除一个元素后，子数组 &lt;strong&gt;不能为空&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例 1：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：arr = [1,-2,0,3]
输出：4
解释：我们可以选出 [1, -2, 0, 3]，然后删掉 -2，这样得到 [1, 0, 3]，和最大。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;示例 2：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：arr = [1,-2,-2,3]
输出：3
解释：我们直接选出 [3]，这就是最大和。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;示例 3：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：arr = [-1,-1,-1,-1]
输出：-1
解释：最后得到的子数组不能为空，所以我们不能选择 [-1] 并从中删去 -1 来得到 0。
     我们应该直接选择 [-1]，或者选择 [-1, -1] 再从中删去一个 -1。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;提示：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= arr.length &amp;lt;= 105&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-104 &amp;lt;= arr[i] &amp;lt;= 104&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span</summary>
        
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Leetcode.322 零钱兑换</title>
    <link href="https://bishoptylaor.github.io/interview/juan/neet150/1-d-dp/leet-322-coin-change/"/>
    <id>https://bishoptylaor.github.io/interview/juan/neet150/1-d-dp/leet-322-coin-change/</id>
    <published>2024-06-27T15:14:11.000Z</published>
    <updated>2024-07-16T13:22:20.666Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://leetcode.cn/problems/coin-change/&quot;&gt;322. 零钱兑换&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;给你一个整数数组 &lt;code&gt;coins&lt;/code&gt; ，表示不同面额的硬币；以及一个整数 &lt;code&gt;amount&lt;/code&gt; ，表示总金额。&lt;/p&gt;
&lt;p&gt;计算并返回可以凑成总金额所需的 &lt;strong&gt;最少的硬币个数&lt;/strong&gt; 。如果没有任何一种硬币组合能组成总金额，返回 &lt;code&gt;-1&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;你可以认为每种硬币的数量是无限的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例 1：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：coins = `[1, 2, 5]`, amount = `11`
输出：`3` 
解释：11 = 5 + 5 + 1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;示例 2：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：coins = `[2]`, amount = `3`
输出：-1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;示例 3：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：coins = [1], amount = 0
输出：0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;提示：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= coins.length &amp;lt;= 12&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= coins[i] &amp;lt;= 231 - 1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;0 &amp;lt;= amount &amp;lt;= 104&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span</summary>
        
      
    
    
    
    <category term="面试" scheme="https://bishoptylaor.github.io/categories/interview/"/>
    
    <category term="刷题" scheme="https://bishoptylaor.github.io/categories/interview/juan/"/>
    
    <category term="NeetCode150" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/"/>
    
    <category term="1-D DP" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/1-d-dp/"/>
    
    
  </entry>
  
  <entry>
    <title>Leetcode.213 打家劫舍 II</title>
    <link href="https://bishoptylaor.github.io/interview/juan/neet150/1-d-dp/leet-213-house-robber-ii/"/>
    <id>https://bishoptylaor.github.io/interview/juan/neet150/1-d-dp/leet-213-house-robber-ii/</id>
    <published>2024-06-23T15:14:11.000Z</published>
    <updated>2024-07-12T14:15:22.483Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://leetcode.cn/problems/house-robber-ii/&quot;&gt;213. 打家劫舍 II&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;你是一个专业的小偷，计划偷窃沿街的房屋，每间房内都藏有一定的现金。这个地方所有的房屋都 &lt;strong&gt;围成一圈&lt;/strong&gt; ，这意味着第一个房屋和最后一个房屋是紧挨着的。同时，相邻的房屋装有相互连通的防盗系统，&lt;strong&gt;如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警&lt;/strong&gt; 。&lt;/p&gt;
&lt;p&gt;给定一个代表每个房屋存放金额的非负整数数组，计算你 &lt;strong&gt;在不触动警报装置的情况下&lt;/strong&gt; ，今晚能够偷窃到的最高金额。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例 1：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：nums = [2,3,2]
输出：3
解释：你不能先偷窃 1 号房屋（金额 = 2），然后偷窃 3 号房屋（金额 = 2）, 因为他们是相邻的。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;示例 2：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：nums = [1,2,3,1]
输出：4
解释：你可以先偷窃 1 号房屋（金额 = 1），然后偷窃 3 号房屋（金额 = 3）。
     偷窃到的最高金额 = 1 + 3 = 4 。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;示例 3：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：nums = [1,2,3]
输出：3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;提示：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= nums.length &amp;lt;= 100&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;0 &amp;lt;= nums[i] &amp;lt;= 1000&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;考虑第一个要不要访问，如果访问了，就是原来 3&lt;del&gt;n-1 的非环形版本&lt;br&gt;如果第一个未访问，就是原来 2&lt;/del&gt;n-2 的非环形版本&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; _&lt;span class=&quot;title&quot;&gt;rob&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(nums []&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	first, second := nums[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;], max(nums[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;], nums[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; _, v := &lt;span class=&quot;keyword&quot;&gt;range&lt;/span&gt; nums[&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;:] &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		first, second = second, max(first+v, second)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; second&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;rob&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(nums []&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	n := &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(nums)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; n == &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; nums[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; n == &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; max(nums[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;], nums[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; max(_rob(nums[:n&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;]), _rob(nums[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;:]))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(a, b &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; a &amp;gt; b &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; a&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; b&lt;/span&gt;&lt;br&gt;&lt;span</summary>
        
      
    
    
    
    <category term="面试" scheme="https://bishoptylaor.github.io/categories/interview/"/>
    
    <category term="刷题" scheme="https://bishoptylaor.github.io/categories/interview/juan/"/>
    
    <category term="NeetCode150" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/"/>
    
    <category term="1-D DP" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/1-d-dp/"/>
    
    
  </entry>
  
  <entry>
    <title>Leetcode.416 分割等和子集</title>
    <link href="https://bishoptylaor.github.io/interview/juan/neet150/1-d-dp/leet-416-partition-equal-subset-sum/"/>
    <id>https://bishoptylaor.github.io/interview/juan/neet150/1-d-dp/leet-416-partition-equal-subset-sum/</id>
    <published>2024-06-23T12:14:11.000Z</published>
    <updated>2024-07-12T14:15:22.483Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://leetcode.cn/problems/partition-equal-subset-sum/&quot;&gt;416. 分割等和子集&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;给你一个 &lt;strong&gt;只包含正整数&lt;/strong&gt; 的 &lt;strong&gt;非空&lt;/strong&gt; 数组 &lt;code&gt;nums&lt;/code&gt; 。请你判断是否可以将这个数组分割成两个子集，使得两个子集的元素和相等。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例 1：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：nums = [1,5,11,5]
输出：true
解释：数组可以分割成 [1, 5, 5] 和 [11] 。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;示例 2：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：nums = [1,2,3,5]
输出：false
解释：数组不能分割成两个元素和相等的子集。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;提示：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= nums.length &amp;lt;= 200&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= nums[i] &amp;lt;= 100&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;canPartition&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(nums []&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;bool&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	n := &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(nums)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; n&amp;lt;&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	sum, max := &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; _, v := &lt;span class=&quot;keyword&quot;&gt;range&lt;/span&gt; nums &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		sum += v&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; v &amp;gt; max &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			max = v&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// 不能均分一半&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; sum%&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; != &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	tar := sum / &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// 如果有个元素比一半和还大，那么不可能找到&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; max &amp;gt; tar &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	dp := &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;([][]&lt;span class=&quot;type&quot;&gt;bool&lt;/span&gt;, n)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i:= &lt;span class=&quot;keyword&quot;&gt;range&lt;/span&gt; dp &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		dp[i] = &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;([]&lt;span class=&quot;type&quot;&gt;bool&lt;/span&gt;, tar + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		dp[i][&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;] = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	dp[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;][nums[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]] = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i:=&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; i&amp;lt;n; i++ &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		v := nums[i]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; j:=&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; j&amp;lt;=tar; j++ &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; j &amp;gt;= v &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				dp[i][j] = dp[i&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;][j] || dp[i&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;][j-v]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				dp[i][j] = dp[i&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;][j]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; dp[n&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;][tar]&lt;/span&gt;&lt;br&gt;&lt;span</summary>
        
      
    
    
    
    <category term="面试" scheme="https://bishoptylaor.github.io/categories/interview/"/>
    
    <category term="刷题" scheme="https://bishoptylaor.github.io/categories/interview/juan/"/>
    
    <category term="NeetCode150" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/"/>
    
    <category term="1-D DP" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/1-d-dp/"/>
    
    
  </entry>
  
  <entry>
    <title>index</title>
    <link href="https://bishoptylaor.github.io/interview/juan/neet150/advanced-graphs/index/"/>
    <id>https://bishoptylaor.github.io/interview/juan/neet150/advanced-graphs/index/</id>
    <published>2024-06-22T08:26:02.000Z</published>
    <updated>2024-07-12T14:15:22.484Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;332&lt;br&gt;1584&lt;br&gt;743&lt;br&gt;778&lt;br&gt;269&lt;br&gt;787&lt;/p&gt;
</summary>
        
      
    
    
    
    <category term="面试" scheme="https://bishoptylaor.github.io/categories/interview/"/>
    
    <category term="刷题" scheme="https://bishoptylaor.github.io/categories/interview/juan/"/>
    
    <category term="NeetCode150" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/"/>
    
    <category term="Advanced Graphs" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/advanced-graphs/"/>
    
    
  </entry>
  
  <entry>
    <title>index</title>
    <link href="https://bishoptylaor.github.io/interview/juan/neet150/2-d-dp/index/"/>
    <id>https://bishoptylaor.github.io/interview/juan/neet150/2-d-dp/index/</id>
    <published>2024-06-22T08:26:02.000Z</published>
    <updated>2024-07-12T14:15:22.484Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;10&lt;br&gt;97&lt;br&gt;115&lt;br&gt;309&lt;br&gt;312&lt;br&gt;329&lt;br&gt;494&lt;br&gt;518&lt;/p&gt;
</summary>
        
      
    
    
    
    <category term="面试" scheme="https://bishoptylaor.github.io/categories/interview/"/>
    
    <category term="刷题" scheme="https://bishoptylaor.github.io/categories/interview/juan/"/>
    
    <category term="NeetCode150" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/"/>
    
    <category term="2-D DP" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/2-d-dp/"/>
    
    
  </entry>
  
  <entry>
    <title>index</title>
    <link href="https://bishoptylaor.github.io/interview/juan/neet150/backtracking/index%202/"/>
    <id>https://bishoptylaor.github.io/interview/juan/neet150/backtracking/index%202/</id>
    <published>2024-06-22T08:26:02.000Z</published>
    <updated>2024-07-12T14:15:22.483Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;78&lt;br&gt;90&lt;br&gt;131&lt;br&gt;17&lt;br&gt;51&lt;/p&gt;
</summary>
        
      
    
    
    
    <category term="面试" scheme="https://bishoptylaor.github.io/categories/interview/"/>
    
    <category term="刷题" scheme="https://bishoptylaor.github.io/categories/interview/juan/"/>
    
    <category term="NeetCode150" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/"/>
    
    <category term="Backtracking" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/backtracking/"/>
    
    
  </entry>
  
  <entry>
    <title>index</title>
    <link href="https://bishoptylaor.github.io/interview/juan/neet150/arrays-hashing/index%201/"/>
    <id>https://bishoptylaor.github.io/interview/juan/neet150/arrays-hashing/index%201/</id>
    <published>2024-06-22T08:26:02.000Z</published>
    <updated>2024-07-12T14:15:22.483Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;271&lt;br&gt;36&lt;br&gt;347&lt;/p&gt;
</summary>
        
      
    
    
    
    <category term="面试" scheme="https://bishoptylaor.github.io/categories/interview/"/>
    
    <category term="刷题" scheme="https://bishoptylaor.github.io/categories/interview/juan/"/>
    
    <category term="NeetCode150" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/"/>
    
    <category term="Arrays &amp; Hashing" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/arrays-hashing/"/>
    
    
  </entry>
  
  <entry>
    <title>index</title>
    <link href="https://bishoptylaor.github.io/interview/juan/neet150/b-search/index%201/"/>
    <id>https://bishoptylaor.github.io/interview/juan/neet150/b-search/index%201/</id>
    <published>2024-06-22T08:26:02.000Z</published>
    <updated>2024-07-12T14:15:22.484Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;704&lt;br&gt;74&lt;br&gt;875&lt;br&gt;981&lt;/p&gt;
</summary>
        
      
    
    
    
    <category term="面试" scheme="https://bishoptylaor.github.io/categories/interview/"/>
    
    <category term="刷题" scheme="https://bishoptylaor.github.io/categories/interview/juan/"/>
    
    <category term="NeetCode150" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/"/>
    
    <category term="Binary Search" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/b-search/"/>
    
    
  </entry>
  
  <entry>
    <title>index</title>
    <link href="https://bishoptylaor.github.io/interview/juan/neet150/bit/index%204/"/>
    <id>https://bishoptylaor.github.io/interview/juan/neet150/bit/index%204/</id>
    <published>2024-06-22T08:26:02.000Z</published>
    <updated>2024-07-12T14:15:22.484Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;136&lt;br&gt;7&lt;br&gt;371&lt;/p&gt;
</summary>
        
      
    
    
    
    <category term="面试" scheme="https://bishoptylaor.github.io/categories/interview/"/>
    
    <category term="刷题" scheme="https://bishoptylaor.github.io/categories/interview/juan/"/>
    
    <category term="NeetCode150" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/"/>
    
    <category term="Bit Manipulation" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/bit/"/>
    
    
  </entry>
  
  <entry>
    <title>index</title>
    <link href="https://bishoptylaor.github.io/interview/juan/neet150/graphs/index%203/"/>
    <id>https://bishoptylaor.github.io/interview/juan/neet150/graphs/index%203/</id>
    <published>2024-06-22T08:26:02.000Z</published>
    <updated>2024-07-12T14:15:22.484Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;286&lt;br&gt;994&lt;br&gt;130&lt;br&gt;210&lt;br&gt;261&lt;br&gt;323&lt;br&gt;127&lt;br&gt;684&lt;/p&gt;
</summary>
        
      
    
    
    
    <category term="面试" scheme="https://bishoptylaor.github.io/categories/interview/"/>
    
    <category term="刷题" scheme="https://bishoptylaor.github.io/categories/interview/juan/"/>
    
    <category term="NeetCode150" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/"/>
    
    <category term="Graphs" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/graphs/"/>
    
    
  </entry>
  
  <entry>
    <title>index</title>
    <link href="https://bishoptylaor.github.io/interview/juan/neet150/greedy/index%202/"/>
    <id>https://bishoptylaor.github.io/interview/juan/neet150/greedy/index%202/</id>
    <published>2024-06-22T08:26:02.000Z</published>
    <updated>2024-07-12T14:15:22.486Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;45&lt;br&gt;134&lt;br&gt;846&lt;br&gt;1899&lt;br&gt;763&lt;br&gt;678&lt;/p&gt;
</summary>
        
      
    
    
    
    <category term="面试" scheme="https://bishoptylaor.github.io/categories/interview/"/>
    
    <category term="刷题" scheme="https://bishoptylaor.github.io/categories/interview/juan/"/>
    
    <category term="NeetCode150" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/"/>
    
    <category term="Greedy" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/greedy/"/>
    
    
  </entry>
  
  <entry>
    <title>index</title>
    <link href="https://bishoptylaor.github.io/interview/juan/neet150/heap-queue/index%201/"/>
    <id>https://bishoptylaor.github.io/interview/juan/neet150/heap-queue/index%201/</id>
    <published>2024-06-22T08:26:02.000Z</published>
    <updated>2024-07-12T14:15:22.485Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;703&lt;br&gt;1046&lt;br&gt;621&lt;br&gt;355&lt;/p&gt;
</summary>
        
      
    
    
    
    <category term="面试" scheme="https://bishoptylaor.github.io/categories/interview/"/>
    
    <category term="刷题" scheme="https://bishoptylaor.github.io/categories/interview/juan/"/>
    
    <category term="NeetCode150" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/"/>
    
    <category term="Heap &amp; Priority Queue" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/heap-queue/"/>
    
    
  </entry>
  
  <entry>
    <title>index</title>
    <link href="https://bishoptylaor.github.io/interview/juan/neet150/interval/index%205/"/>
    <id>https://bishoptylaor.github.io/interview/juan/neet150/interval/index%205/</id>
    <published>2024-06-22T08:26:02.000Z</published>
    <updated>2024-07-12T14:15:22.484Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;252&lt;br&gt;253&lt;br&gt;1851&lt;/p&gt;
</summary>
        
      
    
    
    
    <category term="面试" scheme="https://bishoptylaor.github.io/categories/interview/"/>
    
    <category term="刷题" scheme="https://bishoptylaor.github.io/categories/interview/juan/"/>
    
    <category term="NeetCode150" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/"/>
    
    <category term="Intervals" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/interval/"/>
    
    
  </entry>
  
  <entry>
    <title>index</title>
    <link href="https://bishoptylaor.github.io/interview/juan/neet150/linked-list/index%206/"/>
    <id>https://bishoptylaor.github.io/interview/juan/neet150/linked-list/index%206/</id>
    <published>2024-06-22T08:26:02.000Z</published>
    <updated>2024-07-12T14:15:22.485Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;138&lt;br&gt;287&lt;/p&gt;
</summary>
        
      
    
    
    
    <category term="面试" scheme="https://bishoptylaor.github.io/categories/interview/"/>
    
    <category term="刷题" scheme="https://bishoptylaor.github.io/categories/interview/juan/"/>
    
    <category term="NeetCode150" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/"/>
    
    <category term="Linked List" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/linked-list/"/>
    
    
  </entry>
  
  <entry>
    <title>index</title>
    <link href="https://bishoptylaor.github.io/interview/juan/neet150/math/index%207/"/>
    <id>https://bishoptylaor.github.io/interview/juan/neet150/math/index%207/</id>
    <published>2024-06-22T08:26:02.000Z</published>
    <updated>2024-07-12T14:15:22.484Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;202&lt;br&gt;66&lt;br&gt;50&lt;br&gt;43&lt;br&gt;2013&lt;/p&gt;
</summary>
        
      
    
    
    
    <category term="面试" scheme="https://bishoptylaor.github.io/categories/interview/"/>
    
    <category term="刷题" scheme="https://bishoptylaor.github.io/categories/interview/juan/"/>
    
    <category term="NeetCode150" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/"/>
    
    <category term="Math &amp; Geometry" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/math/"/>
    
    
  </entry>
  
  <entry>
    <title>index</title>
    <link href="https://bishoptylaor.github.io/interview/juan/neet150/s-window/index%207%201/"/>
    <id>https://bishoptylaor.github.io/interview/juan/neet150/s-window/index%207%201/</id>
    <published>2024-06-22T08:26:02.000Z</published>
    <updated>2024-07-12T14:15:22.485Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;239&lt;/p&gt;
&lt;p&gt;567&lt;/p&gt;
</summary>
        
      
    
    
    
    <category term="面试" scheme="https://bishoptylaor.github.io/categories/interview/"/>
    
    <category term="刷题" scheme="https://bishoptylaor.github.io/categories/interview/juan/"/>
    
    <category term="NeetCode150" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/"/>
    
    <category term="Sliding Window" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/s-window/"/>
    
    
  </entry>
  
  <entry>
    <title>index</title>
    <link href="https://bishoptylaor.github.io/interview/juan/neet150/stack/index%209/"/>
    <id>https://bishoptylaor.github.io/interview/juan/neet150/stack/index%209/</id>
    <published>2024-06-22T08:26:02.000Z</published>
    <updated>2024-07-12T14:15:22.485Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;22&lt;br&gt;739&lt;br&gt;853&lt;/p&gt;
</summary>
        
      
    
    
    
    <category term="面试" scheme="https://bishoptylaor.github.io/categories/interview/"/>
    
    <category term="刷题" scheme="https://bishoptylaor.github.io/categories/interview/juan/"/>
    
    <category term="NeetCode150" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/"/>
    
    <category term="Stack" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/stack/"/>
    
    
  </entry>
  
  <entry>
    <title>Leetcode.167 两数之和 II - 输入有序数组</title>
    <link href="https://bishoptylaor.github.io/interview/juan/neet150/two-ptr/leet-167-two-sum-ii-input-array-is-sorted/"/>
    <id>https://bishoptylaor.github.io/interview/juan/neet150/two-ptr/leet-167-two-sum-ii-input-array-is-sorted/</id>
    <published>2024-06-22T08:26:02.000Z</published>
    <updated>2024-07-12T14:15:22.486Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://leetcode.cn/problems/two-sum-ii-input-array-is-sorted/&quot;&gt;167. 两数之和 II - 输入有序数组&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;给你一个下标从 &lt;strong&gt;1&lt;/strong&gt; 开始的整数数组 &lt;code&gt;numbers&lt;/code&gt; ，该数组已按 &lt;strong&gt;非递减顺序排列&lt;/strong&gt;  ，请你从数组中找出满足相加之和等于目标数 &lt;code&gt;target&lt;/code&gt; 的两个数。如果设这两个数分别是 &lt;code&gt;numbers[index1]&lt;/code&gt; 和 &lt;code&gt;numbers[index2]&lt;/code&gt; ，则 &lt;code&gt;1 &amp;lt;= index1 &amp;lt; index2 &amp;lt;= numbers.length&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;以长度为 2 的整数数组 &lt;code&gt;[index1, index2]&lt;/code&gt; 的形式返回这两个整数的下标 &lt;code&gt;index1&lt;/code&gt; 和 &lt;code&gt;index2&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;你可以假设每个输入 &lt;strong&gt;只对应唯一的答案&lt;/strong&gt; ，而且你 &lt;strong&gt;不可以&lt;/strong&gt; 重复使用相同的元素。&lt;/p&gt;
&lt;p&gt;你所设计的解决方案必须只使用常量级的额外空间。&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例 1：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：numbers = [_2_,_7_,11,15], target = 9
输出：[1,2]
解释：2 与 7 之和等于目标数 9 。因此 index1 = 1, index2 = 2 。返回 [1, 2] 。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;示例 2：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：numbers = [_2_,3,_4_], target = 6
输出：[1,3]
解释：2 与 4 之和等于目标数 6 。因此 index1 = 1, index2 = 3 。返回 [1, 3] 。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;示例 3：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：numbers = [_-1_,_0_], target = -1
输出：[1,2]
解释：-1 与 0 之和等于目标数 -1 。因此 index1 = 1, index2 = 2 。返回 [1, 2] 。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;提示：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;2 &amp;lt;= numbers.length &amp;lt;= 3 * 104&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-1000 &amp;lt;= numbers[i] &amp;lt;= 1000&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;numbers&lt;/code&gt; 按 &lt;strong&gt;非递减顺序&lt;/strong&gt; 排列&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-1000 &amp;lt;= target &amp;lt;= 1000&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;仅存在一个有效答案&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;从左右两边出发，如果和比目标值小，那么左边 ++ ，如果比目标值大，那么右边 –，直到找到目标答案&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;twoSum&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(numbers []&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;, target &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; []&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	low, high := &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(numbers) - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; low &amp;lt; high &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		sum := numbers[low] + numbers[high]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; sum == target &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; []&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;&amp;#123;low + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, high + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; sum &amp;lt; target &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			low++&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			high--&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; []&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;&amp;#123;&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;


&lt;p&gt;按照普通 2sum 的方法，因为是有序的数组，原先普通遍历的方案可以改成 二分查找 target - num[i]&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;twoSum&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(numbers []&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;, target &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; []&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i:=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i&amp;lt;&lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(numbers); i++ &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		low, high := i+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(numbers)&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		nextTar := target - numbers[i]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; low &amp;lt;= high &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			mid := (high-low)/&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; + low&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; numbers[mid] == nextTar &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; []&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;&amp;#123;i+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, mid+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; numbers[mid] &amp;gt; nextTar &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				high = mid&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				low = mid+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; []&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;&amp;#123;&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span</summary>
        
      
    
    
    
    <category term="面试" scheme="https://bishoptylaor.github.io/categories/interview/"/>
    
    <category term="刷题" scheme="https://bishoptylaor.github.io/categories/interview/juan/"/>
    
    <category term="NeetCode150" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/"/>
    
    <category term="Two Pointers" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/two-ptr/"/>
    
    
  </entry>
  
  <entry>
    <title>leet221</title>
    <link href="https://bishoptylaor.github.io/uncategorized/leet221/"/>
    <id>https://bishoptylaor.github.io/uncategorized/leet221/</id>
    <published>2024-06-17T11:01:48.000Z</published>
    <updated>2024-06-22T10:03:44.278Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>字节跳动高频题——圆环回原点问题</title>
    <link href="https://bishoptylaor.github.io/interview/juan/bytedance-common-alg/back-2-start-in-circle/"/>
    <id>https://bishoptylaor.github.io/interview/juan/bytedance-common-alg/back-2-start-in-circle/</id>
    <published>2024-06-17T06:35:30.000Z</published>
    <updated>2024-07-10T13:14:08.358Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;圆环上有10个点，编号为0~9。从0点出发，每次可以逆时针和顺时针走一步，问走n步回到0点共有多少种走法。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入: 2输出: 2解释：有2种方案。分别是0-&amp;gt;1-&amp;gt;0和0-&amp;gt;9-&amp;gt;0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;采用动态规划，类似 &lt;a href=&quot;https://leetcode.cn/problems/climbing-stairs/&quot;&gt;70. 爬楼梯&lt;/a&gt;&lt;br&gt;走 n 步到 0 的方案数 &amp;#x3D; 走 n-1 步到 1 的方案数 + 走 n-1 步到 9 的方案数。&lt;br&gt;由于本题目中有环，所以相关方程需要有取余的步骤。&lt;/p&gt;
&lt;p&gt;dp[i][j] &amp;#x3D; dp[i-1][(j-1+length) % length] + dp[i-1][(j+1) % length]&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;backToOrigin&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(n)&lt;/span&gt;&lt;/span&gt;:  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// 点的个数为10  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	length := &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	dp := &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;([][]&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;, n+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i:= &lt;span class=&quot;keyword&quot;&gt;range&lt;/span&gt; dp &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		dp[i] = &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;([]&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;, length)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	dp[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;][&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;] = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i:=&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; i&amp;lt;n+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; i++ &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; j:=&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; j&amp;lt;length; j++ &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;comment&quot;&gt;// dp[i][j]表示从0出发，走i步到j的方案数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			dp[i][j] = dp[i&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;][(j&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;+length)%length] + dp[i&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;][(j+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)%length]  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;		&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; dp[n][&lt;span</summary>
        
      
    
    
    
    <category term="面试" scheme="https://bishoptylaor.github.io/categories/interview/"/>
    
    <category term="刷题" scheme="https://bishoptylaor.github.io/categories/interview/juan/"/>
    
    <category term="字节常见题" scheme="https://bishoptylaor.github.io/categories/interview/juan/bytedance-common-alg/"/>
    
    
  </entry>
  
  <entry>
    <title>Leetcode.77 组合</title>
    <link href="https://bishoptylaor.github.io/uncategorized/leet-77-combinations/"/>
    <id>https://bishoptylaor.github.io/uncategorized/leet-77-combinations/</id>
    <published>2024-06-12T16:23:20.000Z</published>
    <updated>2024-06-22T10:03:44.278Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://leetcode.cn/problems/combinations/&quot;&gt;77. 组合&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;给定两个整数 &lt;code&gt;n&lt;/code&gt; 和 &lt;code&gt;k&lt;/code&gt;，返回范围 &lt;code&gt;[1, n]&lt;/code&gt; 中所有可能的 &lt;code&gt;k&lt;/code&gt; 个数的组合。&lt;/p&gt;
&lt;p&gt;你可以按 &lt;strong&gt;任何顺序&lt;/strong&gt; 返回答案。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例 1：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：n = 4, k = 2
输出：
[
  [2,4],
  [3,4],
  [2,3],
  [1,2],
  [1,3],
  [1,4],
]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;示例 2：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：n = 1, k = 1
输出：[[1]]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;提示：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= n &amp;lt;= 20&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= k &amp;lt;= n&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span</summary>
        
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Leetcode.746 使用最小花费爬楼梯</title>
    <link href="https://bishoptylaor.github.io/interview/juan/neet150/1-d-dp/leet-746-min-cost-climbing-stairs/"/>
    <id>https://bishoptylaor.github.io/interview/juan/neet150/1-d-dp/leet-746-min-cost-climbing-stairs/</id>
    <published>2024-06-12T16:07:06.000Z</published>
    <updated>2024-07-12T14:15:22.484Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://leetcode.cn/problems/min-cost-climbing-stairs/&quot;&gt;746. 使用最小花费爬楼梯&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;给你一个整数数组 &lt;code&gt;cost&lt;/code&gt; ，其中 &lt;code&gt;cost[i]&lt;/code&gt; 是从楼梯第 &lt;code&gt;i&lt;/code&gt; 个台阶向上爬需要支付的费用。一旦你支付此费用，即可选择向上爬一个或者两个台阶。&lt;/p&gt;
&lt;p&gt;你可以选择从下标为 &lt;code&gt;0&lt;/code&gt; 或下标为 &lt;code&gt;1&lt;/code&gt; 的台阶开始爬楼梯。&lt;/p&gt;
&lt;p&gt;请你计算并返回达到楼梯顶部的最低花费。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例 1：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：cost = [10,_**15**_,20]
输出：15
解释：你将从下标为 1 的台阶开始。
- 支付 15 ，向上爬两个台阶，到达楼梯顶部。
总花费为 15 。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;示例 2：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：cost = [_**1**_,100,_**1**_,1,_**1**_,100,_**1**_,_**1**_,100,_**1**_]
输出：6
解释：你将从下标为 0 的台阶开始。
- 支付 1 ，向上爬两个台阶，到达下标为 2 的台阶。
- 支付 1 ，向上爬两个台阶，到达下标为 4 的台阶。
- 支付 1 ，向上爬两个台阶，到达下标为 6 的台阶。
- 支付 1 ，向上爬一个台阶，到达下标为 7 的台阶。
- 支付 1 ，向上爬两个台阶，到达下标为 9 的台阶。
- 支付 1 ，向上爬一个台阶，到达楼梯顶部。
总花费为 6 。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;提示：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;2 &amp;lt;= cost.length &amp;lt;= 1000&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;0 &amp;lt;= cost[i] &amp;lt;= 999&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;minCostClimbingStairs&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(cost []&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(cost) == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(cost) == &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; cost[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	spent := &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;([]&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(cost)+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// 相当于第一步免费，可以走0步或者1步&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	spent[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;] = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	spent[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;] = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i:=&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;; i&amp;lt;=&lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(cost); i++ &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		spent[i] = min(spent[i&lt;span class=&quot;number&quot;&gt;-2&lt;/span&gt;] + cost[i&lt;span class=&quot;number&quot;&gt;-2&lt;/span&gt;], spent[i&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;] + cost[i&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; spent[&lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(cost)]&lt;/span&gt;&lt;br&gt;&lt;span</summary>
        
      
    
    
    
    <category term="面试" scheme="https://bishoptylaor.github.io/categories/interview/"/>
    
    <category term="刷题" scheme="https://bishoptylaor.github.io/categories/interview/juan/"/>
    
    <category term="NeetCode150" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/"/>
    
    <category term="1-D DP" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/1-d-dp/"/>
    
    
  </entry>
  
  <entry>
    <title>leet1143</title>
    <link href="https://bishoptylaor.github.io/uncategorized/leet1143/"/>
    <id>https://bishoptylaor.github.io/uncategorized/leet1143/</id>
    <published>2024-06-12T15:35:17.000Z</published>
    <updated>2024-06-22T10:03:44.278Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>Leetcode.380 O(1) 时间插入、删除和获取随机元素</title>
    <link href="https://bishoptylaor.github.io/interview/juan/bytedance-common-alg/leet-380-insert-delete-getrandom-o1/"/>
    <id>https://bishoptylaor.github.io/interview/juan/bytedance-common-alg/leet-380-insert-delete-getrandom-o1/</id>
    <published>2024-06-12T14:49:28.000Z</published>
    <updated>2024-06-22T10:03:44.278Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://leetcode.cn/problems/insert-delete-getrandom-o1/&quot;&gt;380. O(1) 时间插入、删除和获取随机元素&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;实现&lt;code&gt;RandomizedSet&lt;/code&gt; 类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;RandomizedSet()&lt;/code&gt; 初始化 &lt;code&gt;RandomizedSet&lt;/code&gt; 对象&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bool insert(int val)&lt;/code&gt; 当元素 &lt;code&gt;val&lt;/code&gt; 不存在时，向集合中插入该项，并返回 &lt;code&gt;true&lt;/code&gt; ；否则，返回 &lt;code&gt;false&lt;/code&gt; 。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bool remove(int val)&lt;/code&gt; 当元素 &lt;code&gt;val&lt;/code&gt; 存在时，从集合中移除该项，并返回 &lt;code&gt;true&lt;/code&gt; ；否则，返回 &lt;code&gt;false&lt;/code&gt; 。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;int getRandom()&lt;/code&gt; 随机返回现有集合中的一项（测试用例保证调用此方法时集合中至少存在一个元素）。每个元素应该有 &lt;strong&gt;相同的概率&lt;/strong&gt; 被返回。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;你必须实现类的所有函数，并满足每个函数的 &lt;strong&gt;平均&lt;/strong&gt; 时间复杂度为 &lt;code&gt;O(1)&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入
[&amp;quot;RandomizedSet&amp;quot;, &amp;quot;insert&amp;quot;, &amp;quot;remove&amp;quot;, &amp;quot;insert&amp;quot;, &amp;quot;getRandom&amp;quot;, &amp;quot;remove&amp;quot;, &amp;quot;insert&amp;quot;, &amp;quot;getRandom&amp;quot;]
[[], [1], [2], [2], [], [1], [2], []]
输出
[null, true, false, true, 2, true, false, 2]

解释
RandomizedSet randomizedSet = new RandomizedSet();
randomizedSet.insert(1); // 向集合中插入 1 。返回 true 表示 1 被成功地插入。
randomizedSet.remove(2); // 返回 false ，表示集合中不存在 2 。
randomizedSet.insert(2); // 向集合中插入 2 。返回 true 。集合现在包含 [1,2] 。
randomizedSet.getRandom(); // getRandom 应随机返回 1 或 2 。
randomizedSet.remove(1); // 从集合中移除 1 ，返回 true 。集合现在包含 [2] 。
randomizedSet.insert(2); // 2 已在集合中，所以返回 false 。
randomizedSet.getRandom(); // 由于 2 是集合中唯一的数字，getRandom 总是返回 2 。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;提示：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-231 &amp;lt;= val &amp;lt;= 231 - 1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;最多调用 &lt;code&gt;insert&lt;/code&gt;、&lt;code&gt;remove&lt;/code&gt; 和 &lt;code&gt;getRandom&lt;/code&gt; 函数 &lt;code&gt;2 *&lt;/code&gt; &lt;code&gt;105&lt;/code&gt; 次&lt;/li&gt;
&lt;li&gt;在调用 &lt;code&gt;getRandom&lt;/code&gt; 方法时，数据结构中 &lt;strong&gt;至少存在一个&lt;/strong&gt; 元素。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; RandomizedSet &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// map 中存储元素和所在的 idx&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	MemberM &lt;span class=&quot;keyword&quot;&gt;map&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;]&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	MemberL []&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Constructor&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; RandomizedSet &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; RandomizedSet&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		MemberM: &lt;span class=&quot;keyword&quot;&gt;map&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;]&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;&amp;#123;&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		MemberL: []&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;&amp;#123;&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(this *RandomizedSet)&lt;/span&gt;&lt;/span&gt; Insert(val &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;) &lt;span class=&quot;type&quot;&gt;bool&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; _, ok := this.MemberM[val]; ok &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	this.MemberL = &lt;span class=&quot;built_in&quot;&gt;append&lt;/span&gt;(this.MemberL, val)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	this.MemberM[val] = &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(this.MemberL)&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(this *RandomizedSet)&lt;/span&gt;&lt;/span&gt; Remove(val &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;) &lt;span class=&quot;type&quot;&gt;bool&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	idx, ok := this.MemberM[val]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; !ok &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// 为了保持 o1 将 list 末尾元素替换到已删除的位置&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	last := &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(this.MemberL)&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	this.MemberL[idx] = this.MemberL[last]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	this.MemberM[this.MemberL[idx]] = idx&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	this.MemberL = this.MemberL[:last]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// 同时清理 map 相关内存&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;delete&lt;/span&gt;(this.MemberM, val)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(this *RandomizedSet)&lt;/span&gt;&lt;/span&gt; GetRandom() &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; this.MemberL[rand.Intn(&lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(this.MemberL))]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;* Your RandomizedSet object will be instantiated and called as such:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;* obj := Constructor();&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;* param_1 := obj.Insert(val);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;* param_2 := obj.Remove(val);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;* param_3 := obj.GetRandom();&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span</summary>
        
      
    
    
    
    <category term="面试" scheme="https://bishoptylaor.github.io/categories/interview/"/>
    
    <category term="刷题" scheme="https://bishoptylaor.github.io/categories/interview/juan/"/>
    
    <category term="字节常见题" scheme="https://bishoptylaor.github.io/categories/interview/juan/bytedance-common-alg/"/>
    
    
  </entry>
  
  <entry>
    <title>Leetcode.114 二叉树展开为链表</title>
    <link href="https://bishoptylaor.github.io/interview/juan/bytedance-common-alg/leet-114-flatten-binary-tree-to-linked-list/"/>
    <id>https://bishoptylaor.github.io/interview/juan/bytedance-common-alg/leet-114-flatten-binary-tree-to-linked-list/</id>
    <published>2024-06-12T13:54:00.000Z</published>
    <updated>2024-06-22T10:03:44.278Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://leetcode.cn/problems/flatten-binary-tree-to-linked-list/&quot;&gt;114. 二叉树展开为链表&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;给你二叉树的根结点 &lt;code&gt;root&lt;/code&gt; ，请你将它展开为一个单链表：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;展开后的单链表应该同样使用 &lt;code&gt;TreeNode&lt;/code&gt; ，其中 &lt;code&gt;right&lt;/code&gt; 子指针指向链表中下一个结点，而左子指针始终为 &lt;code&gt;null&lt;/code&gt; 。&lt;/li&gt;
&lt;li&gt;展开后的单链表应该与二叉树 &lt;a href=&quot;https://baike.baidu.com/item/%E5%85%88%E5%BA%8F%E9%81%8D%E5%8E%86/6442839?fr=aladdin&quot;&gt;&lt;strong&gt;先序遍历&lt;/strong&gt;&lt;/a&gt; 顺序相同。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;示例 1：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://assets.leetcode.com/uploads/2021/01/14/flaten.jpg&quot;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：root = [1,2,5,3,4,null,6]
输出：[1,null,2,null,3,null,4,null,5,null,6]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;示例 2：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：root = []
输出：[]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;示例 3：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：root = [0]
输出：[0]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;提示：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;树中结点数在范围 &lt;code&gt;[0, 2000]&lt;/code&gt; 内&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-100 &amp;lt;= Node.val &amp;lt;= 100&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;进阶：&lt;/strong&gt;你可以使用原地算法（&lt;code&gt;O(1)&lt;/code&gt; 额外空间）展开这棵树吗？&lt;/p&gt;
&lt;p&gt;注意要按照题目要求将原来树的左右更换指向，构成如图的斜树&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;* Definition for a binary tree node.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;* type TreeNode struct &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;* Val int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;* Left *TreeNode&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;* Right *TreeNode&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;* &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;flatten&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(root *TreeNode)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	nodes := preOrder(root)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i:=&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; i&amp;lt;&lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(nodes); i++ &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		pre, cur := nodes[i&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;], nodes[i]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		pre.Left, pre.Right = &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;, cur&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;preOrder&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(root *TreeNode)&lt;/span&gt;&lt;/span&gt; []*TreeNode &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	nodes := []*TreeNode&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; root != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		nodes = &lt;span class=&quot;built_in&quot;&gt;append&lt;/span&gt;(nodes, root)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		nodes = &lt;span class=&quot;built_in&quot;&gt;append&lt;/span&gt;(nodes, preOrder(root.Left)...)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		nodes = &lt;span class=&quot;built_in&quot;&gt;append&lt;/span&gt;(nodes, preOrder(root.Right)...)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; nodes&lt;/span&gt;&lt;br&gt;&lt;span</summary>
        
      
    
    
    
    <category term="面试" scheme="https://bishoptylaor.github.io/categories/interview/"/>
    
    <category term="刷题" scheme="https://bishoptylaor.github.io/categories/interview/juan/"/>
    
    <category term="字节常见题" scheme="https://bishoptylaor.github.io/categories/interview/juan/bytedance-common-alg/"/>
    
    
  </entry>
  
  <entry>
    <title>Leetcode.41 缺失的第一个正数</title>
    <link href="https://bishoptylaor.github.io/interview/juan/bytedance-common-alg/leet-41-first-missing-positive/"/>
    <id>https://bishoptylaor.github.io/interview/juan/bytedance-common-alg/leet-41-first-missing-positive/</id>
    <published>2024-06-12T12:28:01.000Z</published>
    <updated>2024-06-22T10:03:44.278Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://leetcode.cn/problems/first-missing-positive/&quot;&gt;41. 缺失的第一个正数&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;给你一个未排序的整数数组 &lt;code&gt;nums&lt;/code&gt; ，请你找出其中没有出现的最小的正整数。&lt;/p&gt;
&lt;p&gt;请你实现时间复杂度为 &lt;code&gt;O(n)&lt;/code&gt; 并且只使用常数级别额外空间的解决方案。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例 1：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：nums = [1,2,0]
输出：3
解释：范围 [1,2] 中的数字都在数组中。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;示例 2：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：nums = [3,4,-1,1]
输出：2
解释：1 在数组中，但 2 没有。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;示例 3：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：nums = [7,8,9,11,12]
输出：1
解释：最小的正数 1 没有出现。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;提示：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= nums.length &amp;lt;= 105&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-231 &amp;lt;= nums[i] &amp;lt;= 231 - 1&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;firstMissingPositive&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(nums []&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	n := &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(nums)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i:=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i&amp;lt;n; i++ &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; nums[i] &amp;lt;= &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			nums[i] = n+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// fmt.Println(nums)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i:=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i&amp;lt;n; i++ &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		num := abs(nums[i])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; num &amp;lt;= n &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			nums[num&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;] = &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt; * abs(nums[num&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i:=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i&amp;lt;n; i++ &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; nums[i] &amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; i+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; n+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;abs&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(x &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; x &amp;lt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; -x&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; x&lt;/span&gt;&lt;br&gt;&lt;span</summary>
        
      
    
    
    
    <category term="面试" scheme="https://bishoptylaor.github.io/categories/interview/"/>
    
    <category term="刷题" scheme="https://bishoptylaor.github.io/categories/interview/juan/"/>
    
    <category term="字节常见题" scheme="https://bishoptylaor.github.io/categories/interview/juan/bytedance-common-alg/"/>
    
    
  </entry>
  
  <entry>
    <title>Leetcode.8 字符串转换整数 (atoi)</title>
    <link href="https://bishoptylaor.github.io/interview/juan/bytedance-common-alg/leet-8-string-to-integer-atoi/"/>
    <id>https://bishoptylaor.github.io/interview/juan/bytedance-common-alg/leet-8-string-to-integer-atoi/</id>
    <published>2024-06-12T04:02:40.000Z</published>
    <updated>2024-06-22T10:03:44.305Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://leetcode.cn/problems/string-to-integer-atoi/&quot;&gt;8. 字符串转换整数 (atoi)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;请你来实现一个 &lt;code&gt;myAtoi(string s)&lt;/code&gt; 函数，使其能将字符串转换成一个 32 位有符号整数。&lt;/p&gt;
&lt;p&gt;函数 &lt;code&gt;myAtoi(string s)&lt;/code&gt; 的算法如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;空格：&lt;/strong&gt;读入字符串并丢弃无用的前导空格（&lt;code&gt;&amp;quot; &amp;quot;&lt;/code&gt;）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;符号：&lt;/strong&gt;检查下一个字符（假设还未到字符末尾）为 &lt;code&gt;&amp;#39;-&amp;#39;&lt;/code&gt; 还是 &lt;code&gt;&amp;#39;+&amp;#39;&lt;/code&gt;。如果两者都不存在，则假定结果为正。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;转换：&lt;/strong&gt;通过跳过前置零来读取该整数，直到遇到非数字字符或到达字符串的结尾。如果没有读取数字，则结果为0。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;舍入：&lt;/strong&gt;如果整数数超过 32 位有符号整数范围 &lt;code&gt;[−231,  231 − 1]&lt;/code&gt; ，需要截断这个整数，使其保持在这个范围内。具体来说，小于 &lt;code&gt;−231&lt;/code&gt; 的整数应该被舍入为 &lt;code&gt;−231&lt;/code&gt; ，大于 &lt;code&gt;231 − 1&lt;/code&gt; 的整数应该被舍入为 &lt;code&gt;231 − 1&lt;/code&gt; 。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;返回整数作为最终结果。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例 1：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：s = &amp;quot;42&amp;quot;
输出：42
解释：加粗的字符串为已经读入的字符，插入符号是当前读取的字符。
带下划线线的字符是所读的内容，插入符号是当前读入位置。
第 1 步：&amp;quot;42&amp;quot;（当前没有读入字符，因为没有前导空格）
         ^
第 2 步：&amp;quot;42&amp;quot;（当前没有读入字符，因为这里不存在 &amp;#39;-&amp;#39; 或者 &amp;#39;+&amp;#39;）
         ^
第 3 步：&amp;quot;42&amp;quot;（读入 &amp;quot;42&amp;quot;）
           ^
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;示例 2：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：s = &amp;quot; -042&amp;quot;
输出：-42
解释：
第 1 步：&amp;quot;   -042&amp;quot;（读入前导空格，但忽视掉）
            ^
第 2 步：&amp;quot;   -042&amp;quot;（读入 &amp;#39;-&amp;#39; 字符，所以结果应该是负数）
             ^
第 3 步：&amp;quot;   -042&amp;quot;（读入 &amp;quot;042&amp;quot;，在结果中忽略前导零）
               ^
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;示例 3：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：s = &amp;quot;1337c0d3&amp;quot;
输出：1337
解释：
第 1 步：&amp;quot;1337c0d3&amp;quot;（当前没有读入字符，因为没有前导空格）
         ^
第 2 步：&amp;quot;1337c0d3&amp;quot;（当前没有读入字符，因为这里不存在 &amp;#39;-&amp;#39; 或者 &amp;#39;+&amp;#39;）
         ^
第 3 步：&amp;quot;1337c0d3&amp;quot;（读入 &amp;quot;1337&amp;quot;；由于下一个字符不是一个数字，所以读入停止）
             ^
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;示例 4：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：s = &amp;quot;0-1&amp;quot;
输出：0
解释：
第 1 步：&amp;quot;0-1&amp;quot; (当前没有读入字符，因为没有前导空格)
         ^
第 2 步：&amp;quot;0-1&amp;quot; (当前没有读入字符，因为这里不存在 &amp;#39;-&amp;#39; 或者 &amp;#39;+&amp;#39;)
         ^
第 3 步：&amp;quot;0-1&amp;quot; (读入 &amp;quot;0&amp;quot;；由于下一个字符不是一个数字，所以读入停止)
          ^
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;示例 5：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：s = &amp;quot;words and 987&amp;quot;
输出：0
解释：
读取在第一个非数字字符“w”处停止。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;提示：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;0 &amp;lt;= s.length &amp;lt;= 200&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;s&lt;/code&gt; 由英文字母（大写和小写）、数字（&lt;code&gt;0-9&lt;/code&gt;）、&lt;code&gt;&amp;#39; &amp;#39;&lt;/code&gt;、&lt;code&gt;&amp;#39;+&amp;#39;&lt;/code&gt;、&lt;code&gt;&amp;#39;-&amp;#39;&lt;/code&gt; 和 &lt;code&gt;&amp;#39;.&amp;#39;&lt;/code&gt; 组成&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;myAtoi&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(s &lt;span class=&quot;type&quot;&gt;string&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; ans &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	sign := &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; MinInt32, MaxInt32 = &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt; * &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=&quot;number&quot;&gt;31&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=&quot;number&quot;&gt;31&lt;/span&gt; - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; ; i&amp;lt;&lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(s) &amp;amp;&amp;amp; s[i] == &lt;span class=&quot;string&quot;&gt;&amp;#x27; &amp;#x27;&lt;/span&gt;; i++ &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; i&amp;gt;=&lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(s) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; s[i] == &lt;span class=&quot;string&quot;&gt;&amp;#x27;-&amp;#x27;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		sign = &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		i++&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; s[i] == &lt;span class=&quot;string&quot;&gt;&amp;#x27;+&amp;#x27;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		i++&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; ; i&amp;lt;&lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(s); i++ &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; s[i]-&lt;span class=&quot;string&quot;&gt;&amp;#x27;0&amp;#x27;&lt;/span&gt; &amp;lt;&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; || s[i]-&lt;span class=&quot;string&quot;&gt;&amp;#x27;0&amp;#x27;&lt;/span&gt;&amp;gt;&lt;span class=&quot;number&quot;&gt;9&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		ans = ans * &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt; + &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;(s[i] - &lt;span class=&quot;string&quot;&gt;&amp;#x27;0&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ans * sign &amp;lt; MinInt32 &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; MinInt32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ans * sign &amp;gt; MaxInt32 &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; MaxInt32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; ans * sign&lt;/span&gt;&lt;br&gt;&lt;span</summary>
        
      
    
    
    
    <category term="面试" scheme="https://bishoptylaor.github.io/categories/interview/"/>
    
    <category term="刷题" scheme="https://bishoptylaor.github.io/categories/interview/juan/"/>
    
    <category term="字节常见题" scheme="https://bishoptylaor.github.io/categories/interview/juan/bytedance-common-alg/"/>
    
    
  </entry>
  
  <entry>
    <title>Leetcode.232 用栈实现队列</title>
    <link href="https://bishoptylaor.github.io/interview/juan/bytedance-common-alg/leet-232-implement-queue-using-stacks/"/>
    <id>https://bishoptylaor.github.io/interview/juan/bytedance-common-alg/leet-232-implement-queue-using-stacks/</id>
    <published>2024-06-12T02:37:13.000Z</published>
    <updated>2024-06-22T10:03:44.278Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://leetcode.cn/problems/implement-queue-using-stacks/&quot;&gt;232. 用栈实现队列&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;请你仅使用两个栈实现先入先出队列。队列应当支持一般队列支持的所有操作（&lt;code&gt;push&lt;/code&gt;、&lt;code&gt;pop&lt;/code&gt;、&lt;code&gt;peek&lt;/code&gt;、&lt;code&gt;empty&lt;/code&gt;）：&lt;/p&gt;
&lt;p&gt;实现 &lt;code&gt;MyQueue&lt;/code&gt; 类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;void push(int x)&lt;/code&gt; 将元素 x 推到队列的末尾&lt;/li&gt;
&lt;li&gt;&lt;code&gt;int pop()&lt;/code&gt; 从队列的开头移除并返回元素&lt;/li&gt;
&lt;li&gt;&lt;code&gt;int peek()&lt;/code&gt; 返回队列开头的元素&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boolean empty()&lt;/code&gt; 如果队列为空，返回 &lt;code&gt;true&lt;/code&gt; ；否则，返回 &lt;code&gt;false&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;说明：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;你 &lt;strong&gt;只能&lt;/strong&gt; 使用标准的栈操作 —— 也就是只有 &lt;code&gt;push to top&lt;/code&gt;, &lt;code&gt;peek/pop from top&lt;/code&gt;, &lt;code&gt;size&lt;/code&gt;, 和 &lt;code&gt;is empty&lt;/code&gt; 操作是合法的。&lt;/li&gt;
&lt;li&gt;你所使用的语言也许不支持栈。你可以使用 list 或者 deque（双端队列）来模拟一个栈，只要是标准的栈操作即可。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;示例 1：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：
[&amp;quot;MyQueue&amp;quot;, &amp;quot;push&amp;quot;, &amp;quot;push&amp;quot;, &amp;quot;peek&amp;quot;, &amp;quot;pop&amp;quot;, &amp;quot;empty&amp;quot;]
[[], [1], [2], [], [], []]
输出：
[null, null, null, 1, 1, false]

解释：
MyQueue myQueue = new MyQueue();
myQueue.push(1); // queue is: [1]
myQueue.push(2); // queue is: [1, 2] (leftmost is front of the queue)
myQueue.peek(); // return 1
myQueue.pop(); // return 1, queue is [2]
myQueue.empty(); // return false
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;提示：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= x &amp;lt;= 9&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;最多调用 &lt;code&gt;100&lt;/code&gt; 次 &lt;code&gt;push&lt;/code&gt;、&lt;code&gt;pop&lt;/code&gt;、&lt;code&gt;peek&lt;/code&gt; 和 &lt;code&gt;empty&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;假设所有操作都是有效的 （例如，一个空的队列不会调用 &lt;code&gt;pop&lt;/code&gt; 或者 &lt;code&gt;peek&lt;/code&gt; 操作）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;进阶：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;你能否实现每个操作均摊时间复杂度为 &lt;code&gt;O(1)&lt;/code&gt; 的队列？换句话说，执行 &lt;code&gt;n&lt;/code&gt; 个操作的总时间复杂度为 &lt;code&gt;O(n)&lt;/code&gt; ，即使其中一个操作可能花费较长时间。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因为题目要求使用栈来完成，所以对于 []int 的相关操作还是要按照栈的模式来处理&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; MyQueue &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	inStack, outStack []&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Constructor&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; MyQueue &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; MyQueue&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(this *MyQueue)&lt;/span&gt;&lt;/span&gt; Push(x &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	this.inStack = &lt;span class=&quot;built_in&quot;&gt;append&lt;/span&gt;(this.inStack, x)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(this *MyQueue)&lt;/span&gt;&lt;/span&gt; in2out() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(this.inStack) &amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		this.outStack = &lt;span class=&quot;built_in&quot;&gt;append&lt;/span&gt;(this.outStack, this.inStack[&lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(this.inStack)&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		this.inStack = this.inStack[:&lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(this.inStack)&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(this *MyQueue)&lt;/span&gt;&lt;/span&gt; Pop() &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(this.outStack) == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		this.in2out()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	x := this.outStack[&lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(this.outStack)&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	this.outStack = this.outStack[:&lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(this.outStack)&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; x&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(this *MyQueue)&lt;/span&gt;&lt;/span&gt; Peek() &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(this.outStack) == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		this.in2out()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; this.outStack[&lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(this.outStack)&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(this *MyQueue)&lt;/span&gt;&lt;/span&gt; Empty() &lt;span class=&quot;type&quot;&gt;bool&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(this.inStack) == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;amp;&amp;amp; &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(this.outStack) == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;* Your MyQueue object will be instantiated and called as such:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;* obj := Constructor();&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;* obj.Push(x);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;* param_2 := obj.Pop();&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;* param_3 := obj.Peek();&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;* param_4 := obj.Empty();&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span</summary>
        
      
    
    
    
    <category term="面试" scheme="https://bishoptylaor.github.io/categories/interview/"/>
    
    <category term="刷题" scheme="https://bishoptylaor.github.io/categories/interview/juan/"/>
    
    <category term="字节常见题" scheme="https://bishoptylaor.github.io/categories/interview/juan/bytedance-common-alg/"/>
    
    
  </entry>
  
  <entry>
    <title>Leetcode.4 寻找两个正序数组的中位数</title>
    <link href="https://bishoptylaor.github.io/interview/juan/neet150/b-search/leet-4-median-of-two-sorted-arrays/"/>
    <id>https://bishoptylaor.github.io/interview/juan/neet150/b-search/leet-4-median-of-two-sorted-arrays/</id>
    <published>2024-06-11T12:31:29.000Z</published>
    <updated>2024-07-12T14:15:22.484Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://leetcode.cn/problems/median-of-two-sorted-arrays/&quot;&gt;4. 寻找两个正序数组的中位数&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;给定两个大小分别为 &lt;code&gt;m&lt;/code&gt; 和 &lt;code&gt;n&lt;/code&gt; 的正序（从小到大）数组 &lt;code&gt;nums1&lt;/code&gt; 和 &lt;code&gt;nums2&lt;/code&gt;。请你找出并返回这两个正序数组的 &lt;strong&gt;中位数&lt;/strong&gt; 。&lt;/p&gt;
&lt;p&gt;算法的时间复杂度应该为 &lt;code&gt;O(log (m+n))&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例 1：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：nums1 = [1,3], nums2 = [2]
输出：2.00000
解释：合并数组 = [1,2,3] ，中位数 2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;示例 2：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：nums1 = [1,2], nums2 = [3,4]
输出：2.50000
解释：合并数组 = [1,2,3,4] ，中位数 (2 + 3) / 2 = 2.5
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;提示：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;nums1.length == m&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nums2.length == n&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;0 &amp;lt;= m &amp;lt;= 1000&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;0 &amp;lt;= n &amp;lt;= 1000&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= m + n &amp;lt;= 2000&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-106 &amp;lt;= nums1[i], nums2[i] &amp;lt;=</summary>
        
      
    
    
    
    <category term="面试" scheme="https://bishoptylaor.github.io/categories/interview/"/>
    
    <category term="刷题" scheme="https://bishoptylaor.github.io/categories/interview/juan/"/>
    
    <category term="NeetCode150" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/"/>
    
    <category term="Binary Search" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/b-search/"/>
    
    
  </entry>
  
  <entry>
    <title>Leetcode.72 编辑距离</title>
    <link href="https://bishoptylaor.github.io/interview/juan/neet150/2-d-dp/leet-72-edit-distance/"/>
    <id>https://bishoptylaor.github.io/interview/juan/neet150/2-d-dp/leet-72-edit-distance/</id>
    <published>2024-06-11T12:24:08.000Z</published>
    <updated>2024-07-12T14:15:22.484Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://leetcode.cn/problems/edit-distance/&quot;&gt;72. 编辑距离&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;给你两个单词 &lt;code&gt;word1&lt;/code&gt; 和 &lt;code&gt;word2&lt;/code&gt;， &lt;em&gt;请返回将 &lt;code&gt;word1&lt;/code&gt; 转换成 &lt;code&gt;word2&lt;/code&gt; 所使用的最少操作数&lt;/em&gt;  。&lt;/p&gt;
&lt;p&gt;你可以对一个单词进行如下三种操作：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;插入一个字符&lt;/li&gt;
&lt;li&gt;删除一个字符&lt;/li&gt;
&lt;li&gt;替换一个字符&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;示例 1：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：word1 = &amp;quot;horse&amp;quot;, word2 = &amp;quot;ros&amp;quot;
输出：3
解释：
horse -&amp;gt; rorse (将 &amp;#39;h&amp;#39; 替换为 &amp;#39;r&amp;#39;)
rorse -&amp;gt; rose (删除 &amp;#39;r&amp;#39;)
rose -&amp;gt; ros (删除 &amp;#39;e&amp;#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;示例 2：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：word1 = &amp;quot;intention&amp;quot;, word2 = &amp;quot;execution&amp;quot;
输出：5
解释：
intention -&amp;gt; inention (删除 &amp;#39;t&amp;#39;)
inention -&amp;gt; enention (将 &amp;#39;i&amp;#39; 替换为 &amp;#39;e&amp;#39;)
enention -&amp;gt; exention (将 &amp;#39;n&amp;#39; 替换为 &amp;#39;x&amp;#39;)
exention -&amp;gt; exection (将 &amp;#39;n&amp;#39; 替换为 &amp;#39;c&amp;#39;)
exection -&amp;gt; execution (插入 &amp;#39;u&amp;#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;提示：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;0 &amp;lt;= word1.length, word2.length &amp;lt;= 500&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;word1&lt;/code&gt; 和 &lt;code&gt;word2&lt;/code&gt; 由小写英文字母组成&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一般来说，如果涉及两个对象之间的 dp，常规方案是一个二维 dp&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;minDistance&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(word1 &lt;span class=&quot;type&quot;&gt;string&lt;/span&gt;, word2 &lt;span class=&quot;type&quot;&gt;string&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	l1, l2 := &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(word1), &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(word2)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; l1 * l2 == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; l1 + l2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	dp := &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;([][]&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;, l1+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i := &lt;span class=&quot;keyword&quot;&gt;range&lt;/span&gt; dp &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		dp[i] = &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;([]&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;, l2+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// dp[0][0] = 0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// 初始化&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i:=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i&amp;lt;l1+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; i++ &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; j:=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; j&amp;lt;l2+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; j++ &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; i == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				dp[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;][j] = j&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; j == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				dp[i][&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;] = i&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i:=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i&amp;lt;l1; i++ &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; j:=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; j&amp;lt;l2; j++ &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; word1[i] == word2[j] &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				dp[i+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;][j+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;] = dp[i][j]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				dp[i+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;][j+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;] = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; + min(dp[i+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;][j], min(dp[i][j+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;], dp[i][j]))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; dp[l1][l2]&lt;/span&gt;&lt;br&gt;&lt;span</summary>
        
      
    
    
    
    <category term="面试" scheme="https://bishoptylaor.github.io/categories/interview/"/>
    
    <category term="刷题" scheme="https://bishoptylaor.github.io/categories/interview/juan/"/>
    
    <category term="NeetCode150" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/"/>
    
    <category term="2-D DP" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/2-d-dp/"/>
    
    
  </entry>
  
  <entry>
    <title>Leetcode.93 复原 IP 地址</title>
    <link href="https://bishoptylaor.github.io/interview/juan/bytedance-common-alg/leet-93-restore-ip-addresses/"/>
    <id>https://bishoptylaor.github.io/interview/juan/bytedance-common-alg/leet-93-restore-ip-addresses/</id>
    <published>2024-06-11T11:01:26.000Z</published>
    <updated>2024-06-22T10:03:44.299Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://leetcode.cn/problems/restore-ip-addresses/&quot;&gt;93. 复原 IP 地址&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;有效 IP 地址&lt;/strong&gt; 正好由四个整数（每个整数位于 &lt;code&gt;0&lt;/code&gt; 到 &lt;code&gt;255&lt;/code&gt; 之间组成，且不能含有前导 &lt;code&gt;0&lt;/code&gt;），整数之间用 &lt;code&gt;&amp;#39;.&amp;#39;&lt;/code&gt; 分隔。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;例如：&lt;code&gt;&amp;quot;0.1.2.201&amp;quot;&lt;/code&gt; 和 &lt;code&gt;&amp;quot;192.168.1.1&amp;quot;&lt;/code&gt; 是 &lt;strong&gt;有效&lt;/strong&gt; IP 地址，但是 &lt;code&gt;&amp;quot;0.011.255.245&amp;quot;&lt;/code&gt;、&lt;code&gt;&amp;quot;192.168.1.312&amp;quot;&lt;/code&gt; 和 &lt;code&gt;&amp;quot;192.168@1.1&amp;quot;&lt;/code&gt; 是 &lt;strong&gt;无效&lt;/strong&gt; IP 地址。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;给定一个只包含数字的字符串 &lt;code&gt;s&lt;/code&gt; ，用以表示一个 IP 地址，返回所有可能的&lt;strong&gt;有效 IP 地址&lt;/strong&gt;，这些地址可以通过在 &lt;code&gt;s&lt;/code&gt; 中插入 &lt;code&gt;&amp;#39;.&amp;#39;&lt;/code&gt; 来形成。你 &lt;strong&gt;不能&lt;/strong&gt; 重新排序或删除 &lt;code&gt;s&lt;/code&gt; 中的任何数字。你可以按 &lt;strong&gt;任何&lt;/strong&gt; 顺序返回答案。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例 1：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：s = &amp;quot;25525511135&amp;quot;
输出：[&amp;quot;255.255.11.135&amp;quot;,&amp;quot;255.255.111.35&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;示例 2：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：s = &amp;quot;0000&amp;quot;
输出：[&amp;quot;0.0.0.0&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;示例 3：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：s = &amp;quot;101023&amp;quot;
输出：[&amp;quot;1.0.10.23&amp;quot;,&amp;quot;1.0.102.3&amp;quot;,&amp;quot;10.1.0.23&amp;quot;,&amp;quot;10.10.2.3&amp;quot;,&amp;quot;101.0.2.3&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;提示：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= s.length &amp;lt;= 20&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;s&lt;/code&gt; 仅由数字组成&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;restoreIpAddresses&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(s &lt;span class=&quot;type&quot;&gt;string&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; []&lt;span class=&quot;type&quot;&gt;string&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	ans := []&lt;span class=&quot;type&quot;&gt;string&lt;/span&gt;&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	segs := &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;([]&lt;span class=&quot;type&quot;&gt;string&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; dfs &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;string&lt;/span&gt;, &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;, &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	dfs = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(s &lt;span class=&quot;type&quot;&gt;string&lt;/span&gt;, segId, idx &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; segId == &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; idx == &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(s) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				ip := strings.Join(segs, &lt;span class=&quot;string&quot;&gt;&amp;quot;.&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				ans = &lt;span class=&quot;built_in&quot;&gt;append&lt;/span&gt;(ans, ip)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// 到头了没成型 4 段&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; idx == &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(s) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// 没有前导零&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; s[idx] == &lt;span class=&quot;string&quot;&gt;&amp;#x27;0&amp;#x27;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			segs[segId] = &lt;span class=&quot;string&quot;&gt;&amp;quot;0&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			dfs(s, segId+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, idx+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// 常规情况&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		cur := &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; j:=idx; j&amp;lt;&lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(s); j++ &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			cur = cur * &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt; + &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;(s[j]-&lt;span class=&quot;string&quot;&gt;&amp;#x27;0&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;comment&quot;&gt;// 比如 11153 会按照 11,111 分别截断去 dfs&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; cur &amp;gt;&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;amp;&amp;amp; cur &amp;lt;=&lt;span class=&quot;number&quot;&gt;255&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				segs[segId] = fmt.Sprintf(&lt;span class=&quot;string&quot;&gt;&amp;quot;%d&amp;quot;&lt;/span&gt;, cur)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				dfs(s, segId+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, j+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	dfs(s, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; ans&lt;/span&gt;&lt;br&gt;&lt;span</summary>
        
      
    
    
    
    <category term="面试" scheme="https://bishoptylaor.github.io/categories/interview/"/>
    
    <category term="刷题" scheme="https://bishoptylaor.github.io/categories/interview/juan/"/>
    
    <category term="字节常见题" scheme="https://bishoptylaor.github.io/categories/interview/juan/bytedance-common-alg/"/>
    
    
  </entry>
  
  <entry>
    <title>算法题：找到两个有序数组中第 k 大的数字</title>
    <link href="https://bishoptylaor.github.io/interview/juan/bytedance-common-alg/find-kth-num-in-2-sorted-list/"/>
    <id>https://bishoptylaor.github.io/interview/juan/bytedance-common-alg/find-kth-num-in-2-sorted-list/</id>
    <published>2024-06-11T09:54:50.000Z</published>
    <updated>2024-07-10T13:14:08.358Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;给定两个分别有序的数组nums1，nums2，输出这两个数组总体排序后的第K小的元素&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;findKthElement&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(nums1, nums2 []&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;, k &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; getKthElement &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;([]&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;, []&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;, &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    getKthElement = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(arr1 []&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;, arr2 []&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;, k &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        l1, l2 := &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(arr1), &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(arr2)  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; l1 &amp;gt; l2 &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; getKthElement(arr2, arr1, k)  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; l1 == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; arr2[k&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;]  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; k == &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; min(arr1[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;], arr2[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;])  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        i := min(l1, k/&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        j := min(l2, k/&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; arr1[i&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;] &amp;gt; arr2[j&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;] &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; getKthElement(arr1, arr2[j:], k-j)  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; getKthElement(arr1[i:], arr2, k-i)  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; getKthElement(nums1, nums2, k)  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(a, b &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; a &amp;gt; b &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; b  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; a  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    fmt.Println(findKthElement([]&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;&amp;#123;&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;&amp;#125;, []&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;&amp;#123;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;&amp;#125;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;))  &lt;/span&gt;&lt;br&gt;&lt;span</summary>
        
      
    
    
    
    <category term="面试" scheme="https://bishoptylaor.github.io/categories/interview/"/>
    
    <category term="刷题" scheme="https://bishoptylaor.github.io/categories/interview/juan/"/>
    
    <category term="字节常见题" scheme="https://bishoptylaor.github.io/categories/interview/juan/bytedance-common-alg/"/>
    
    
  </entry>
  
  <entry>
    <title>Leetcode.82 删除排序链表中的重复元素 II</title>
    <link href="https://bishoptylaor.github.io/interview/juan/bytedance-common-alg/leet-82-remove-duplicates-from-sorted-list-ii/"/>
    <id>https://bishoptylaor.github.io/interview/juan/bytedance-common-alg/leet-82-remove-duplicates-from-sorted-list-ii/</id>
    <published>2024-06-11T03:01:50.000Z</published>
    <updated>2024-06-22T10:03:44.302Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://leetcode.cn/problems/remove-duplicates-from-sorted-list-ii/&quot;&gt;82. 删除排序链表中的重复元素 II&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;给定一个已排序的链表的头 &lt;code&gt;head&lt;/code&gt; ， &lt;em&gt;删除原始链表中所有重复数字的节点，只留下不同的数字&lt;/em&gt; 。返回 &lt;em&gt;已排序的链表&lt;/em&gt; 。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例 1：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://assets.leetcode.com/uploads/2021/01/04/linkedlist1.jpg&quot;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：head = [1,2,3,3,4,4,5]
输出：[1,2,5]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;示例 2：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://assets.leetcode.com/uploads/2021/01/04/linkedlist2.jpg&quot;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：head = [1,1,1,2,3]
输出：[2,3]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;提示：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;链表中节点数目在范围 &lt;code&gt;[0, 300]&lt;/code&gt; 内&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-100 &amp;lt;= Node.val &amp;lt;= 100&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;题目数据保证链表已经按升序 &lt;strong&gt;排列&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;* Definition for singly-linked list.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;* type ListNode struct &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;* Val int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;* Next *ListNode&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;* &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;deleteDuplicates&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(head *ListNode)&lt;/span&gt;&lt;/span&gt; *ListNode &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; head == &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	dummy := &amp;amp;ListNode&amp;#123;Next: head&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	cur := dummy&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; cur.Next != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;amp;&amp;amp; cur.Next.Next != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; cur.Next.Val == cur.Next.Next.Val &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			x := cur.Next.Val&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; cur.Next != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;amp;&amp;amp; cur.Next.Val == x &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				cur.Next = cur.Next.Next&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			cur = cur.Next&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; dummy.Next&lt;/span&gt;&lt;br&gt;&lt;span</summary>
        
      
    
    
    
    <category term="面试" scheme="https://bishoptylaor.github.io/categories/interview/"/>
    
    <category term="刷题" scheme="https://bishoptylaor.github.io/categories/interview/juan/"/>
    
    <category term="字节常见题" scheme="https://bishoptylaor.github.io/categories/interview/juan/bytedance-common-alg/"/>
    
    
  </entry>
  
  <entry>
    <title>Leetcode.56 合并区间</title>
    <link href="https://bishoptylaor.github.io/interview/juan/neet150/interval/leet-56-merge-intervals/"/>
    <id>https://bishoptylaor.github.io/interview/juan/neet150/interval/leet-56-merge-intervals/</id>
    <published>2024-06-11T02:45:10.000Z</published>
    <updated>2024-07-12T14:15:22.484Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://leetcode.cn/problems/merge-intervals/&quot;&gt;56. 合并区间&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;以数组 &lt;code&gt;intervals&lt;/code&gt; 表示若干个区间的集合，其中单个区间为 &lt;code&gt;intervals[i] = [starti, endi]&lt;/code&gt; 。请你合并所有重叠的区间，并返回 &lt;em&gt;一个不重叠的区间数组，该数组需恰好覆盖输入中的所有区间&lt;/em&gt; 。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例 1：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：intervals = [[1,3],[2,6],[8,10],[15,18]]
输出：[[1,6],[8,10],[15,18]]
解释：区间 [1,3] 和 [2,6] 重叠, 将它们合并为 [1,6].
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;示例 2：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：intervals = [[1,4],[4,5]]
输出：[[1,5]]
解释：区间 [1,4] 和 [4,5] 可被视为重叠区间。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;提示：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= intervals.length &amp;lt;= 104&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;intervals[i].length == 2&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;0 &amp;lt;= starti &amp;lt;= endi &amp;lt;= 104&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;merge&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(intervals [][]&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; [][]&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(intervals) &amp;lt;= &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; intervals&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// 其实只按照 第一位 排序就可以了，但是考虑到 第二位 交错的情况，我觉得还是应该有序&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	sort.Slice(intervals, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(i, j &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;bool&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; intervals[i][&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;] &amp;lt; intervals[j][&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;] || (intervals[i][&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;] == intervals[j][&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;] &amp;amp;&amp;amp; intervals[i][&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;] &amp;lt; intervals[j][&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	ans := [][]&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;&amp;#123;intervals[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i:=&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; i&amp;lt;&lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(intervals); i++ &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		cur := ans[&lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(ans)&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; cur[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;] &amp;gt;= intervals[i][&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;] &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			ans = ans[:&lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(ans)&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			cur[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;] = max(cur[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;], intervals[i][&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			ans = &lt;span class=&quot;built_in&quot;&gt;append&lt;/span&gt;(ans, cur)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			ans = &lt;span class=&quot;built_in&quot;&gt;append&lt;/span&gt;(ans, intervals[i])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; ans&lt;/span&gt;&lt;br&gt;&lt;span</summary>
        
      
    
    
    
    <category term="面试" scheme="https://bishoptylaor.github.io/categories/interview/"/>
    
    <category term="刷题" scheme="https://bishoptylaor.github.io/categories/interview/juan/"/>
    
    <category term="NeetCode150" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/"/>
    
    <category term="Intervals" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/interval/"/>
    
    
  </entry>
  
  <entry>
    <title>Leetcode.142 环形链表 II</title>
    <link href="https://bishoptylaor.github.io/interview/juan/bytedance-common-alg/leet-142-linked-list-cycle-ii/"/>
    <id>https://bishoptylaor.github.io/interview/juan/bytedance-common-alg/leet-142-linked-list-cycle-ii/</id>
    <published>2024-06-10T15:36:31.000Z</published>
    <updated>2024-06-22T10:03:44.278Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://leetcode.cn/problems/linked-list-cycle-ii/&quot;&gt;142. 环形链表 II&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;给定一个链表的头节点  &lt;code&gt;head&lt;/code&gt; ，返回链表开始入环的第一个节点。 &lt;em&gt;如果链表无环，则返回 &lt;code&gt;null&lt;/code&gt;。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;如果链表中有某个节点，可以通过连续跟踪 &lt;code&gt;next&lt;/code&gt; 指针再次到达，则链表中存在环。 为了表示给定链表中的环，评测系统内部使用整数 &lt;code&gt;pos&lt;/code&gt; 来表示链表尾连接到链表中的位置（&lt;strong&gt;索引从 0 开始&lt;/strong&gt;）。如果 &lt;code&gt;pos&lt;/code&gt; 是 &lt;code&gt;-1&lt;/code&gt;，则在该链表中没有环。&lt;strong&gt;注意：&lt;code&gt;pos&lt;/code&gt; 不作为参数进行传递&lt;/strong&gt;，仅仅是为了标识链表的实际情况。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;不允许修改&lt;/strong&gt; 链表。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例 1：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://assets.leetcode.com/uploads/2018/12/07/circularlinkedlist.png&quot;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：head = [3,2,0,-4], pos = 1
输出：返回索引为 1 的链表节点
解释：链表中有一个环，其尾部连接到第二个节点。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;示例 2：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/07/circularlinkedlist_test2.png&quot;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：head = [1,2], pos = 0
输出：返回索引为 0 的链表节点
解释：链表中有一个环，其尾部连接到第一个节点。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;示例 3：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/07/circularlinkedlist_test3.png&quot;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：head = [1], pos = -1
输出：返回 null
解释：链表中没有环。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;提示：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;链表中节点的数目范围在范围 &lt;code&gt;[0, 104]&lt;/code&gt; 内&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-105 &amp;lt;= Node.val &amp;lt;= 105&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pos&lt;/code&gt; 的值为 &lt;code&gt;-1&lt;/code&gt; 或者链表中的一个有效索引&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;进阶：&lt;/strong&gt;你是否可以使用 &lt;code&gt;O(1)&lt;/code&gt; 空间解决此题？&lt;/p&gt;
&lt;p&gt;方法1：哈希表，struct 是可比较结构，因此可以作为 map 的 key 来使用&lt;/p&gt;
&lt;p&gt;方法2：快慢指针&lt;br&gt;任意时刻，fast 指针走过的距离都为 slow 指针的 2 倍。因此，我们有&lt;/p&gt;
&lt;p&gt;a+(n+1)b+nc&amp;#x3D;2(a+b)  ⟹  a&amp;#x3D;c+(n−1)(b+c)&lt;/p&gt;
&lt;p&gt;我们会发现：从相遇点到入环点的距离加上 n−1 圈的环长，恰好等于从链表头部到入环点的距离。&lt;/p&gt;
&lt;p&gt;因此，当发现 slow 与 fast 相遇时，我们再额外使用一个指针 ptr。起始，它指向链表头部；随后，它和 slow 每次向后移动一个位置。最终，它们会在入环点相遇。&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;* Definition for singly-linked list.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;* type ListNode struct &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;* Val int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;* Next *ListNode&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;* &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;detectCycle&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(head *ListNode)&lt;/span&gt;&lt;/span&gt; *ListNode &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	s, f := head, head&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; f != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		s = s.Next&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; f.Next == &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		f = f.Next.Next&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; f == s &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			p := head&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; p!= s &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				p = p.Next&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				s = s.Next&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; p&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span</summary>
        
      
    
    
    
    <category term="面试" scheme="https://bishoptylaor.github.io/categories/interview/"/>
    
    <category term="刷题" scheme="https://bishoptylaor.github.io/categories/interview/juan/"/>
    
    <category term="字节常见题" scheme="https://bishoptylaor.github.io/categories/interview/juan/bytedance-common-alg/"/>
    
    
  </entry>
  
  <entry>
    <title>Leetcode.912 排序数组</title>
    <link href="https://bishoptylaor.github.io/interview/juan/bytedance-common-alg/leet-912-sort-an-array/"/>
    <id>https://bishoptylaor.github.io/interview/juan/bytedance-common-alg/leet-912-sort-an-array/</id>
    <published>2024-06-10T13:43:25.000Z</published>
    <updated>2024-06-22T10:03:44.300Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://leetcode.cn/problems/sort-an-array/&quot;&gt;912. 排序数组&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;给你一个整数数组 &lt;code&gt;nums&lt;/code&gt;，请你将该数组升序排列。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例 1：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：nums = [5,2,3,1]
输出：[1,2,3,5]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;示例 2：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：nums = [5,1,1,2,0,0]
输出：[0,0,1,1,2,5]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;提示：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= nums.length &amp;lt;= 5 * 104&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-5 * 104 &amp;lt;= nums[i] &amp;lt;= 5 * 104&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;冒泡排序，&quot;&gt;&lt;a href=&quot;#冒泡排序，&quot; class=&quot;headerlink&quot; title=&quot;冒泡排序，&quot;&gt;&lt;/a&gt;冒泡排序，&lt;/h3&gt;&lt;p&gt;比较交换，稳定算法，时间O(n^2), 空间O(1)&lt;br&gt;每一轮遍历，将该轮最大值放到后面，同时小的往前冒&lt;br&gt;从而形成后部是有序区&lt;br&gt;compare and swap &lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;sortArray&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(nums []&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; []&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i:=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;i&amp;lt;&lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(nums);i++ &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// 适当剪枝，len()-i到最后的部分都是有序区，避免再排 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; j:=&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;j&amp;lt;&lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(nums)-i;j++ &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; nums[j&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;] &amp;gt; nums[j] &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				nums[j&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;], nums[j] = nums[j], nums[j&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;] &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; nums &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&quot;选择排序&quot;&gt;&lt;a href=&quot;#选择排序&quot; class=&quot;headerlink&quot; title=&quot;选择排序&quot;&gt;&lt;/a&gt;选择排序&lt;/h3&gt;&lt;p&gt;比较交换，不稳定算法，时间O(n^2)，空间O(1)&lt;br&gt;每一轮遍历，该轮的最小值前挪，从而形成前面部分是有序区&lt;br&gt;compare and swap&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;sortArray&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(nums []&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; []&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i:=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;i&amp;lt;&lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(nums);i++ &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// 剪枝前面部分，比较后面部分&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; j:=i+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;j&amp;lt;&lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(nums);j++ &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; nums[i] &amp;gt; nums[j] &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				nums[i], nums[j] = nums[j], nums[i] &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; nums &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;


&lt;h3 id=&quot;插入排序&quot;&gt;&lt;a href=&quot;#插入排序&quot; class=&quot;headerlink&quot; title=&quot;插入排序&quot;&gt;&lt;/a&gt;插入排序&lt;/h3&gt;&lt;p&gt;比较交换，稳定算法，时间O(n^2)，空间O(1)&lt;br&gt;0-&amp;gt;len方向，每轮从后往前比较，相当于找到合适位置，插入进去&lt;br&gt;数据规模小的时候，或基本有序，效率高&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;sortArray&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(nums []&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; []&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	n := &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(nums) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i := &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; i &amp;lt; n; i++ &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		tmp := nums[i] &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		j := i - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; j &amp;gt;= &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;amp;&amp;amp; nums[j] &amp;gt; tmp &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;comment&quot;&gt;//左边比右边大 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			nums[j+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;] = nums[j] &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;comment&quot;&gt;//右移1位 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			j-- &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;comment&quot;&gt;//扫描前一个数 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		nums[j+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;] = tmp &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;//添加到小于它的数的右边 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; nums &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;


&lt;h3 id=&quot;希尔排序&quot;&gt;&lt;a href=&quot;#希尔排序&quot; class=&quot;headerlink&quot; title=&quot;希尔排序&quot;&gt;&lt;/a&gt;希尔排序&lt;/h3&gt;&lt;p&gt;比较交换，不稳定算法，时间O(nlog2n)最坏O(n^2), 空间O(1)&lt;br&gt;改进插入算法&lt;br&gt;每一轮按照间隔插入排序，间隔依次减小，最后一次一定是1&lt;br&gt;主要思想： 设增量序列个数为k，则进行k轮排序。每一轮中， 按照某个增量将数据分割成较小的若干组， 每一组内部进行插入排序；各组排序完毕后， 减小增量，进行下一轮的内部排序。&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;sortArray&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(nums []&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; []&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	gap := &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(nums)/&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; gap &amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i:=gap;i&amp;lt;&lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(nums);i++ &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			j := i &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; j-gap &amp;gt;= &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;amp;&amp;amp; nums[j-gap] &amp;gt; nums[j] &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				nums[j-gap], nums[j] = nums[j], nums[j-gap] &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				j -= gap &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		gap /= &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; nums &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;


&lt;h3 id=&quot;归并排序&quot;&gt;&lt;a href=&quot;#归并排序&quot; class=&quot;headerlink&quot; title=&quot;归并排序&quot;&gt;&lt;/a&gt;归并排序&lt;/h3&gt;&lt;p&gt;基于比较，稳定算法，时间O(nlogn)，空间O(logn) | O(n)&lt;br&gt;基于递归的归并-自上而下的合并，另有非递归法的归并(自下而上的合并)&lt;br&gt;都需要开辟一个大小为n的数组中转&lt;br&gt;将数组分为左右两部分，递归左右两块，最后合并，即归并&lt;br&gt;如在一个合并中，将两块部分的元素，遍历取较小值填入结果集&lt;br&gt;类似两个有序链表的合并，每次两两合并相邻的两个有序序列，直到整个序列有序&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;87&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 递归实现归并算法 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;sortArray&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(nums []&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; []&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	merge := &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(left, right []&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; []&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		res := &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;([]&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(left)+&lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(right)) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; l,r,i &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// 通过遍历完成比较填入res中 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; l &amp;lt; &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(left) &amp;amp;&amp;amp; r &amp;lt; &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(right) &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; left[l] &amp;lt;= right[r] &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				res[i] = left[l] l++ &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				res[i] = right[r] r++ &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			i++ &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// 如果left或者right还有剩余元素，添加到结果集的尾部 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;built_in&quot;&gt;copy&lt;/span&gt;(res[i:], left[l:]) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;built_in&quot;&gt;copy&lt;/span&gt;(res[i+&lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(left)-l:], right[r:]) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; res &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; sort &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(nums []&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; []&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	sort = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(nums []&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; []&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(nums) &amp;lt;= &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; nums &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// 拆分递归与合并 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// 分割点 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		mid := &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(nums)/&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		left := sort(nums[:mid]) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		right := sort(nums[mid:]) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; merge(left, right) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; sort(nums) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 非递归实现归并算法 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;sortArray&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(nums []&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; []&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(nums) &amp;lt;= &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; nums&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	merge := &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(left, right []&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; []&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		res := &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;([]&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(left)+&lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(right)) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; l,r,i &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// 通过遍历完成比较填入res中 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; l &amp;lt; &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(left) &amp;amp;&amp;amp; r &amp;lt; &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(right) &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; left[l] &amp;lt;= right[r] &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				res[i] = left[l] l++ &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				res[i] = right[r] r++ &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			i++ &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// 如果left或者right还有剩余元素，添加到结果集的尾部 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;built_in&quot;&gt;copy&lt;/span&gt;(res[i:], left[l:]) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;built_in&quot;&gt;copy&lt;/span&gt;(res[i+&lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(left)-l:], right[r:]) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; res &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	i := &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;//子序列大小初始1 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	res := &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;([]&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// i控制每次划分的序列长度 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i &amp;lt; &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(nums) &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// j根据i值执行具体的合并 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		j := &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// 按顺序两两合并，j用来定位起始点 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// 随着序列翻倍，每次两两合并的数组大小也翻倍 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; j &amp;lt; &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(nums) &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; j+&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;*i &amp;gt; &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(nums) &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				res = merge(nums[j:j+i], nums[j+i:]) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				res = merge(nums[j:j+i], nums[j+i:j+&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;*i]) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;comment&quot;&gt;// 通过index控制每次将合并的数据填入nums中 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;comment&quot;&gt;// 重填入的次数和合并及二叉树的高度相关 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			index := j &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; _, v := &lt;span class=&quot;keyword&quot;&gt;range&lt;/span&gt; res &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				nums[index] = v index++ &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			j = j + &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;*i &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		i *= &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; nums &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;


&lt;h3 id=&quot;快速排序&quot;&gt;&lt;a href=&quot;#快速排序&quot; class=&quot;headerlink&quot; title=&quot;快速排序&quot;&gt;&lt;/a&gt;快速排序&lt;/h3&gt;&lt;p&gt;基于比较，不稳定算法，时间平均O(nlogn)，最坏O(n^2)，空间O(logn)&lt;br&gt;分治思想，选主元，依次将剩余元素的小于主元放其左侧，大的放右侧&lt;br&gt;取主元的前半部分和后半部分进行同样处理，直至各子序列剩余一个元素结束，排序完成&lt;br&gt;小规模数据(n&amp;lt;100)，由于快排用到递归，性能不如插排&lt;br&gt;进行排序时，可定义阈值，小规模数据用插排，往后用快排&lt;br&gt;golang的sort包用到了快排&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;sortArray&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(nums []&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; []&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// (小数，主元，大数) &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; quick &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(nums []&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;, left, right &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; []&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	quick = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(nums []&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;, left, right &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; []&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// 递归终止条件 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; left &amp;gt; right &amp;#123; &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// 左右指针及主元 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		i, j, pivot := left, right, nums[left] &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i &amp;lt; j &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;comment&quot;&gt;// 寻找小于主元的右边元素 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i &amp;lt; j &amp;amp;&amp;amp; nums[j] &amp;gt;= pivot &amp;#123; j-- &amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;comment&quot;&gt;// 寻找大于主元的左边元素 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i &amp;lt; j &amp;amp;&amp;amp; nums[i] &amp;lt;= pivot &amp;#123; i++ &amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;comment&quot;&gt;// 交换i/j下标元素 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			nums[i], nums[j] = nums[j], nums[i] &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// 交换元素 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		nums[i], nums[left] = nums[left], nums[i] &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		quick(nums, left, i&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		quick(nums, i+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, right) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; nums &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; quick(nums, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(nums)&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;


&lt;h3 id=&quot;堆排序&quot;&gt;&lt;a href=&quot;#堆排序&quot; class=&quot;headerlink&quot; title=&quot;堆排序&quot;&gt;&lt;/a&gt;堆排序&lt;/h3&gt;&lt;p&gt;大根堆，升序排序，基于比较交换的不稳定算法，时间O(nlogn)，空间O(1)-迭代建堆&lt;br&gt;遍历元素时间O(n)，堆化时间O(logn)，开始建堆次数多些，后面次数少&lt;br&gt;1.建堆，从非叶子节点开始依次堆化，注意逆序，从下往上堆化&lt;br&gt;建堆流程：父节点与子节点比较，子节点大则交换父子节点，父节点索引更新为子节点，循环操作&lt;br&gt;2.尾部遍历操作，弹出元素，再次堆化&lt;br&gt;弹出元素排序流程：从最后节点开始，交换头尾元素，由于弹出，end–，再次对剩余数组元素建堆，循环操作&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;sortArray&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(nums []&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; []&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// 建堆函数，堆化 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; heapify &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(nums []&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;, root, end &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	heapify = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(nums []&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;, root, end &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// 大顶堆堆化，堆顶值小一直下沉 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;comment&quot;&gt;// 左孩子节点索引 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			child := root*&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;comment&quot;&gt;// 越界跳出 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; child &amp;gt; end &amp;#123; &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;comment&quot;&gt;// 比较左右孩子，取大值，否则child不用++ &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; child &amp;lt; end &amp;amp;&amp;amp; nums[child] &amp;lt;= nums[child+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;] &amp;#123; child++ &amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;comment&quot;&gt;// 如果父节点已经大于左右孩子大值，已堆化 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; nums[root] &amp;gt; nums[child] &amp;#123; &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;comment&quot;&gt;// 孩子节点大值上冒 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			nums[root], nums[child] = nums[child], nums[root] &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;comment&quot;&gt;// 更新父节点到子节点，继续往下比较，不断下沉 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			root = child &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	end := &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(nums)&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// 从最后一个非叶子节点开始堆化 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i:=end/&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;;i&amp;gt;=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;i-- &amp;#123; heapify(nums, i, end) &amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// 依次弹出元素，然后再堆化，相当于依次把最大值放入尾部 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i:=end;i&amp;gt;=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;i-- &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		nums[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;], nums[i] = nums[i], nums[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;] &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		end-- &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		heapify(nums, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, end) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; nums &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;


&lt;h3 id=&quot;桶排序&quot;&gt;&lt;a href=&quot;#桶排序&quot; class=&quot;headerlink&quot; title=&quot;桶排序&quot;&gt;&lt;/a&gt;桶排序&lt;/h3&gt;&lt;p&gt;基于哈希思想的外排稳定算法，空间换时间，时间O(n+k)&lt;br&gt;相当于计数排序的改进版，服从均匀分布，先将数据分到有限数量的桶中，&lt;br&gt;每个桶分别排序，最后将非空桶的数据拼接起来&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;sortArray&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(nums []&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; []&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; bucket &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(nums []&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;, bucketSize &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; []&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	bucket = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(nums []&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;, bucketSize &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; []&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(nums) &amp;lt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; &amp;#123; &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; nums &amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// 获取最大最小值 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		minAndMax := &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(nums []&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; (min, max &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;) &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			minNum := math.MaxInt32 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			maxNum := math.MinInt32 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i:=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;i&amp;lt;&lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(nums);i++ &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; nums[i] &amp;lt; minNum &amp;#123; minNum = nums[i] &amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; nums[i] &amp;gt; maxNum &amp;#123; maxNum = nums[i] &amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; minNum, maxNum &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		min_, max_ := minAndMax(nums) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// 定义桶 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// 构建计数桶 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		bucketCount := (max_-min_)/bucketSize + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		buckets := &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;([][]&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;, bucketCount) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i:=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;i&amp;lt;bucketCount;i++ &amp;#123; buckets[i] = &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;([]&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// 装桶-排序过程 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i:=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;i&amp;lt;&lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(nums);i++ &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;comment&quot;&gt;// 桶序号 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			bucketNum := (nums[i]-min_) / bucketSize &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			buckets[bucketNum] = &lt;span class=&quot;built_in&quot;&gt;append&lt;/span&gt;(buckets[bucketNum], nums[i]) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// 桶中排序 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// 上述装桶完成，出桶填入元素组 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		index := &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; _, bucket := &lt;span class=&quot;keyword&quot;&gt;range&lt;/span&gt; buckets &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			sort.Slice(bucket, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(i, j &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;bool&lt;/span&gt; &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; bucket[i] &amp;lt; bucket[j] &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125;) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; _, num := &lt;span class=&quot;keyword&quot;&gt;range&lt;/span&gt; bucket &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				nums[index] = num index++ &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; nums &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// 定义桶中的数量 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; bucketSize &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; bucket(nums, bucketSize) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;


&lt;h3 id=&quot;计数排序&quot;&gt;&lt;a href=&quot;#计数排序&quot; class=&quot;headerlink&quot; title=&quot;计数排序&quot;&gt;&lt;/a&gt;计数排序&lt;/h3&gt;&lt;p&gt;基于哈希思想的稳定外排序算法，空间换时间，时间O(n)，空间O(n)&lt;br&gt;数据量大时，空间占用大&lt;br&gt;空间换时间，通过开辟额外数据空间存储索引号记录数组的值和数组额个数&lt;br&gt;1.找出待排序的数组的最大值和最小值&lt;br&gt;2.创建数组存放各元素的出现次数，先于[min, max]之间&lt;br&gt;3.统计数组值的个数&lt;br&gt;4.反向填充数组，填充时注意,num[i]&amp;#x3D;j+mi&lt;br&gt;j-前面需要略过的数的个数，两个维度，依次递增的数j++，一个是重复的数的计数j-不变&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;sortArray&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(nums []&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; []&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(nums) == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;#123; &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; nums &amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// 获取最大最小值 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	minAndMax := &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(nums []&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; (min,max &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;) &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		minNum := math.MaxInt32 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		maxNum := math.MinInt32 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i:=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;i&amp;lt;&lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(nums);i++ &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; nums[i] &amp;lt; minNum &amp;#123; minNum = nums[i] &amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; nums[i] &amp;gt; maxNum &amp;#123; maxNum = nums[i] &amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; minNum, maxNum &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	min_, max_ := minAndMax(nums) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// 中转数组存放遍历元素 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// 空间只需要min-max &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	tmpNums := &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;([]&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;, max_-min_+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// 遍历原数组 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i:=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;i&amp;lt;&lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(nums);i++ &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		tmpNums[nums[i]-min_]++ &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// 遍历中转数组填入原数组 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	j := &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i:=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;i&amp;lt;&lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(nums);i++ &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// 如果对应数字cnt=0，说明可以计入下一位数字 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; tmpNums[j] == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;#123; j++ &amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// 填入数字 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		nums[i] = j + min_ &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// 填一个数字，对应数字cnt-- &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		tmpNums[j]-- &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; nums &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;</summary>
        
      
    
    
    
    <category term="面试" scheme="https://bishoptylaor.github.io/categories/interview/"/>
    
    <category term="刷题" scheme="https://bishoptylaor.github.io/categories/interview/juan/"/>
    
    <category term="字节常见题" scheme="https://bishoptylaor.github.io/categories/interview/juan/bytedance-common-alg/"/>
    
    
  </entry>
  
  <entry>
    <title>Leetcode.199 二叉树的右视图</title>
    <link href="https://bishoptylaor.github.io/interview/juan/neet150/trees/leet-199-binary-tree-right-side-view/"/>
    <id>https://bishoptylaor.github.io/interview/juan/neet150/trees/leet-199-binary-tree-right-side-view/</id>
    <published>2024-06-06T09:36:56.000Z</published>
    <updated>2024-07-12T14:15:22.486Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://leetcode.cn/problems/binary-tree-right-side-view/&quot;&gt;199. 二叉树的右视图&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;给定一个二叉树的 &lt;strong&gt;根节点&lt;/strong&gt; &lt;code&gt;root&lt;/code&gt;，想象自己站在它的右侧，按照从顶部到底部的顺序，返回从右侧所能看到的节点值。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例 1:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://assets.leetcode.com/uploads/2021/02/14/tree.jpg&quot;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入: [1,2,3,null,5,null,4]
输出: [1,3,4]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;示例 2:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入: [1,null,3]
输出: [1,3]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;示例 3:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入: []
输出: []
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;提示:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;二叉树的节点个数的范围是 &lt;code&gt;[0,100]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-100 &amp;lt;= Node.val &amp;lt;= 100&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;有个比较好的方案是层序遍历后，找每层最后一个位置&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;* Definition for a binary tree node.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;* type TreeNode struct &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;* Val int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;* Left *TreeNode&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;* Right *TreeNode&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;* &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;rightSideView&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(root *TreeNode)&lt;/span&gt;&lt;/span&gt; []&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; root == &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; []&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	levels := [][]&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	stack := []*TreeNode&amp;#123;root&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i:=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(stack)&amp;gt;&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i++ &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		levels = &lt;span class=&quot;built_in&quot;&gt;append&lt;/span&gt;(levels, []&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;&amp;#123;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		q := []*TreeNode&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; j:=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; j&amp;lt;&lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(stack); j++ &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				nod := stack[j]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				levels[i] = &lt;span class=&quot;built_in&quot;&gt;append&lt;/span&gt;(levels[i], nod.Val)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; nod.Left != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					q = &lt;span class=&quot;built_in&quot;&gt;append&lt;/span&gt;(q, nod.Left)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; nod.Right != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					q = &lt;span class=&quot;built_in&quot;&gt;append&lt;/span&gt;(q, nod.Right)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		stack = q&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	ans := []&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; _, l := &lt;span class=&quot;keyword&quot;&gt;range&lt;/span&gt; levels &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		last := l[&lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(l)&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		ans = &lt;span class=&quot;built_in&quot;&gt;append&lt;/span&gt;(ans, last)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; ans&lt;/span&gt;&lt;br&gt;&lt;span</summary>
        
      
    
    
    
    <category term="面试" scheme="https://bishoptylaor.github.io/categories/interview/"/>
    
    <category term="刷题" scheme="https://bishoptylaor.github.io/categories/interview/juan/"/>
    
    <category term="NeetCode150" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/"/>
    
    <category term="Trees" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/trees/"/>
    
    
  </entry>
  
  <entry>
    <title>Leetcode.210 课程表 II</title>
    <link href="https://bishoptylaor.github.io/interview/juan/bytedance-common-alg/leet-210-course-schedule-ii/"/>
    <id>https://bishoptylaor.github.io/interview/juan/bytedance-common-alg/leet-210-course-schedule-ii/</id>
    <published>2024-06-06T07:32:59.000Z</published>
    <updated>2024-06-22T10:03:44.299Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://leetcode.cn/problems/course-schedule-ii/&quot;&gt;210. 课程表 II&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;现在你总共有 &lt;code&gt;numCourses&lt;/code&gt; 门课需要选，记为 &lt;code&gt;0&lt;/code&gt; 到 &lt;code&gt;numCourses - 1&lt;/code&gt;。给你一个数组 &lt;code&gt;prerequisites&lt;/code&gt; ，其中 &lt;code&gt;prerequisites[i] = [ai, bi]&lt;/code&gt; ，表示在选修课程 &lt;code&gt;ai&lt;/code&gt; 前 &lt;strong&gt;必须&lt;/strong&gt; 先选修 &lt;code&gt;bi&lt;/code&gt; 。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;例如，想要学习课程 &lt;code&gt;0&lt;/code&gt; ，你需要先完成课程 &lt;code&gt;1&lt;/code&gt; ，我们用一个匹配来表示：&lt;code&gt;[0,1]&lt;/code&gt; 。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;返回你为了学完所有课程所安排的学习顺序。可能会有多个正确的顺序，你只要返回 &lt;strong&gt;任意一种&lt;/strong&gt; 就可以了。如果不可能完成所有课程，返回 &lt;strong&gt;一个空数组&lt;/strong&gt; 。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例 1：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;输入：&lt;/strong&gt;numCourses &amp;#x3D; 2, prerequisites &amp;#x3D; [[1,0]]&lt;br&gt;&lt;strong&gt;输出：&lt;/strong&gt;[0,1]&lt;br&gt;&lt;strong&gt;解释：&lt;/strong&gt;总共有 2 门课程。要学习课程 1，你需要先完成课程 0。因此，正确的课程顺序为 &lt;code&gt;[0,1] 。&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例 2：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;输入：&lt;/strong&gt;numCourses &amp;#x3D; 4, prerequisites &amp;#x3D; [[1,0],[2,0],[3,1],[3,2]]&lt;br&gt;&lt;strong&gt;输出：&lt;/strong&gt;[0,2,1,3]&lt;br&gt;&lt;strong&gt;解释：&lt;/strong&gt;总共有 4 门课程。要学习课程 3，你应该先完成课程 1 和课程 2。并且课程 1 和课程 2 都应该排在课程 0 之后。&lt;br&gt;因此，一个正确的课程顺序是 &lt;code&gt;[0,1,2,3]&lt;/code&gt; 。另一个正确的排序是 &lt;code&gt;[0,2,1,3]&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例 3：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;输入：&lt;/strong&gt;numCourses &amp;#x3D; 1, prerequisites &amp;#x3D; []&lt;br&gt;&lt;strong&gt;输出：&lt;/strong&gt;[0]&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;提示：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= numCourses &amp;lt;= 2000&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;0 &amp;lt;= prerequisites.length &amp;lt;= numCourses * (numCourses - 1)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;prerequisites[i].length == 2&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;0 &amp;lt;= ai, bi &amp;lt; numCourses&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ai != bi&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;所有&lt;code&gt;[ai, bi]&lt;/code&gt; &lt;strong&gt;互不相同&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;findOrder&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(numCourses &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;, prerequisites [][]&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; []&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	edges := &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;([][]&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;, numCourses)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	visited := &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;([]&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;, numCourses)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	ans := []&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;&amp;#123;&amp;#125; &lt;span class=&quot;comment&quot;&gt;// 拓扑排序是可行方案的逆序，最后还需要翻转&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	valid := &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; dfs &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	dfs = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(c &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		visited[c] = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; _, v := &lt;span class=&quot;keyword&quot;&gt;range&lt;/span&gt; edges[c] &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; visited[v] == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				dfs(v)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; !valid &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; visited[v] == &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				valid = &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		visited[c] = &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		ans = &lt;span class=&quot;built_in&quot;&gt;append&lt;/span&gt;(ans, c)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; _, item := &lt;span class=&quot;keyword&quot;&gt;range&lt;/span&gt; prerequisites &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		edges[item[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]] = &lt;span class=&quot;built_in&quot;&gt;append&lt;/span&gt;(edges[item[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]], item[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i:=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i&amp;lt;numCourses; i++ &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; visited[i] == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			dfs(i)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; !valid &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; []&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i:=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i&amp;lt;numCourses/&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;; i++ &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		ans[i], ans[numCourses&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;-i] = ans[numCourses&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;-i], ans[i]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; ans&lt;/span&gt;&lt;br&gt;&lt;span</summary>
        
      
    
    
    
    <category term="面试" scheme="https://bishoptylaor.github.io/categories/interview/"/>
    
    <category term="刷题" scheme="https://bishoptylaor.github.io/categories/interview/juan/"/>
    
    <category term="字节常见题" scheme="https://bishoptylaor.github.io/categories/interview/juan/bytedance-common-alg/"/>
    
    
  </entry>
  
  <entry>
    <title>Leetcode.39 组合总和</title>
    <link href="https://bishoptylaor.github.io/interview/juan/bytedance-common-alg/leet-39-combination-sum/"/>
    <id>https://bishoptylaor.github.io/interview/juan/bytedance-common-alg/leet-39-combination-sum/</id>
    <published>2024-06-05T16:32:45.000Z</published>
    <updated>2024-06-22T10:03:44.278Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://leetcode.cn/problems/combination-sum/&quot;&gt;39. 组合总和&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;给你一个 &lt;strong&gt;无重复元素&lt;/strong&gt; 的整数数组 &lt;code&gt;candidates&lt;/code&gt; 和一个目标整数 &lt;code&gt;target&lt;/code&gt; ，找出 &lt;code&gt;candidates&lt;/code&gt; 中可以使数字和为目标数 &lt;code&gt;target&lt;/code&gt; 的 所有 &lt;strong&gt;不同组合&lt;/strong&gt; ，并以列表形式返回。你可以按 &lt;strong&gt;任意顺序&lt;/strong&gt; 返回这些组合。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;candidates&lt;/code&gt; 中的 &lt;strong&gt;同一个&lt;/strong&gt; 数字可以 &lt;strong&gt;无限制重复被选取&lt;/strong&gt; 。如果至少一个数字的被选数量不同，则两种组合是不同的。 &lt;/p&gt;
&lt;p&gt;对于给定的输入，保证和为 &lt;code&gt;target&lt;/code&gt; 的不同组合数少于 &lt;code&gt;150&lt;/code&gt; 个。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例 1：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：candidates = `[2,3,6,7],` target = `7`
输出：[[2,2,3],[7]]
解释：
2 和 3 可以形成一组候选，2 + 2 + 3 = 7 。注意 2 可以使用多次。
7 也是一个候选， 7 = 7 。
仅有这两种组合。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;示例 2：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入: candidates = [2,3,5]`,` target = 8
输出: [[2,2,2,2],[2,3,3],[3,5]]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;示例 3：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入: candidates = `[2],` target = 1
输出: []
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;提示：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= candidates.length &amp;lt;= 30&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;2 &amp;lt;= candidates[i] &amp;lt;= 40&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;candidates&lt;/code&gt; 的所有元素 &lt;strong&gt;互不相同&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= target &amp;lt;= 40&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;combinationSum&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(candidates []&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;, target &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; [][]&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// 可以尝试先排序，后面碰到比 left 更大的数会提前剪枝掉&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	path := []&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	ans := [][]&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; dfs &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;, &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		dfs = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(i, left &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; left == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			ans = &lt;span class=&quot;built_in&quot;&gt;append&lt;/span&gt;(ans, &lt;span class=&quot;built_in&quot;&gt;append&lt;/span&gt;([]&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;&amp;#123;&amp;#125;, path...))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; left &amp;lt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; i == &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(candidates) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// 不选，走下一个&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		dfs(i+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, left)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		path = &lt;span class=&quot;built_in&quot;&gt;append&lt;/span&gt;(path, candidates[i])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		dfs(i, left - candidates[i])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		path = path[:&lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(path)&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	dfs(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, target)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; ans&lt;/span&gt;&lt;br&gt;&lt;span</summary>
        
      
    
    
    
    <category term="面试" scheme="https://bishoptylaor.github.io/categories/interview/"/>
    
    <category term="刷题" scheme="https://bishoptylaor.github.io/categories/interview/juan/"/>
    
    <category term="字节常见题" scheme="https://bishoptylaor.github.io/categories/interview/juan/bytedance-common-alg/"/>
    
    
  </entry>
  
  <entry>
    <title>Leetcode.2 两数相加</title>
    <link href="https://bishoptylaor.github.io/interview/juan/neet150/linked-list/leet-2-add-two-numbers/"/>
    <id>https://bishoptylaor.github.io/interview/juan/neet150/linked-list/leet-2-add-two-numbers/</id>
    <published>2024-06-05T16:19:54.000Z</published>
    <updated>2024-07-12T14:15:22.485Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://leetcode.cn/problems/add-two-numbers/&quot;&gt;2. 两数相加&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;给你两个 &lt;strong&gt;非空&lt;/strong&gt; 的链表，表示两个非负的整数。它们每位数字都是按照 &lt;strong&gt;逆序&lt;/strong&gt; 的方式存储的，并且每个节点只能存储 &lt;strong&gt;一位&lt;/strong&gt; 数字。&lt;/p&gt;
&lt;p&gt;请你将两个数相加，并以相同形式返回一个表示和的链表。&lt;/p&gt;
&lt;p&gt;你可以假设除了数字 0 之外，这两个数都不会以 0 开头。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例 1：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2021/01/02/addtwonumber1.jpg&quot;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：l1 = [2,4,3], l2 = [5,6,4]
输出：[7,0,8]
解释：342 + 465 = 807.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;示例 2：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：l1 = [0], l2 = [0]
输出：[0]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;示例 3：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]
输出：[8,9,9,9,0,0,0,1]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;提示：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每个链表中的节点数在范围 &lt;code&gt;[1, 100]&lt;/code&gt; 内&lt;/li&gt;
&lt;li&gt;&lt;code&gt;0 &amp;lt;= Node.val &amp;lt;= 9&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;题目数据保证列表表示的数字不含前导零&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;本身提供的就是逆序排列，可以直接加，简单不少，不然还得先逆序再求&lt;br&gt;做链表题特别喜欢 dummy！！&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;* Definition for singly-linked list.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;* type ListNode struct &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;* Val int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;* Next *ListNode&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;* &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;addTwoNumbers&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(l1 *ListNode, l2 *ListNode)&lt;/span&gt;&lt;/span&gt; *ListNode &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; plus &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	dummy := &amp;amp;ListNode&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	t, trl1, trl2 := dummy, l1, l2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; trl1 != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; || trl2 != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		n1, n2 := &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; trl1 != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			n1 = trl1.Val&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			trl1 = trl1.Next&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; trl2 != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			n2 = trl2.Val&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			trl2 = trl2.Next&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		sum := n1 + n2 + plus&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		plus = sum/&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		t.Next = &amp;amp;ListNode&amp;#123;Val:sum%&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;, Next:&lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		t = t.Next&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; plus &amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		t.Next = &amp;amp;ListNode&amp;#123;Val: plus&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; dummy.Next&lt;/span&gt;&lt;br&gt;&lt;span</summary>
        
      
    
    
    
    <category term="面试" scheme="https://bishoptylaor.github.io/categories/interview/"/>
    
    <category term="刷题" scheme="https://bishoptylaor.github.io/categories/interview/juan/"/>
    
    <category term="NeetCode150" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/"/>
    
    <category term="Linked List" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/linked-list/"/>
    
    
  </entry>
  
  <entry>
    <title>Leetcode.129 求根节点到叶节点数字之和</title>
    <link href="https://bishoptylaor.github.io/interview/juan/bytedance-common-alg/leet-129-sum-root-to-leaf-numbers/"/>
    <id>https://bishoptylaor.github.io/interview/juan/bytedance-common-alg/leet-129-sum-root-to-leaf-numbers/</id>
    <published>2024-06-05T10:12:06.000Z</published>
    <updated>2024-06-22T10:03:44.278Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://leetcode.cn/problems/sum-root-to-leaf-numbers/&quot;&gt;129. 求根节点到叶节点数字之和&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;给你一个二叉树的根节点 &lt;code&gt;root&lt;/code&gt; ，树中每个节点都存放有一个 &lt;code&gt;0&lt;/code&gt; 到 &lt;code&gt;9&lt;/code&gt; 之间的数字。&lt;/p&gt;
&lt;p&gt;每条从根节点到叶节点的路径都代表一个数字：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;例如，从根节点到叶节点的路径 &lt;code&gt;1 -&amp;gt; 2 -&amp;gt; 3&lt;/code&gt; 表示数字 &lt;code&gt;123&lt;/code&gt; 。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;计算从根节点到叶节点生成的 &lt;strong&gt;所有数字之和&lt;/strong&gt; 。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;叶节点&lt;/strong&gt; 是指没有子节点的节点。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例 1：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://assets.leetcode.com/uploads/2021/02/19/num1tree.jpg&quot;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：root = [1,2,3]
输出：25
解释：
从根到叶子节点路径 `1-&amp;gt;2` 代表数字 `12`
从根到叶子节点路径 `1-&amp;gt;3` 代表数字 `13`
因此，数字总和 = 12 + 13 = `25`
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;示例 2：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://assets.leetcode.com/uploads/2021/02/19/num2tree.jpg&quot;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：root = [4,9,0,5,1]
输出：1026
解释：
从根到叶子节点路径 `4-&amp;gt;9-&amp;gt;5` 代表数字 495
从根到叶子节点路径 `4-&amp;gt;9-&amp;gt;1` 代表数字 491
从根到叶子节点路径 `4-&amp;gt;0` 代表数字 40
因此，数字总和 = 495 + 491 + 40 = `1026`
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;提示：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;树中节点的数目在范围 &lt;code&gt;[1, 1000]&lt;/code&gt; 内&lt;/li&gt;
&lt;li&gt;&lt;code&gt;0 &amp;lt;= Node.val &amp;lt;= 9&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;树的深度不超过 &lt;code&gt;10&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;根据题目递归即可&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;* Definition for a binary tree node.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;* type TreeNode struct &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;* Val int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;* Left *TreeNode&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;* Right *TreeNode&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;* &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;sumNumbers&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(root *TreeNode)&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	sum := &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; getPathNum &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(*TreeNode, &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	getPathNum = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(node *TreeNode, pre &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; node.Left != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			getPathNum(node.Left, pre * &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt; + node.Left.Val)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; node.Right != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			getPathNum(node.Right, pre * &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt; + node.Right.Val)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; node.Left == &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;amp;&amp;amp; node.Right == &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			sum += pre&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	getPathNum(root, root.Val)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; sum&lt;/span&gt;&lt;br&gt;&lt;span</summary>
        
      
    
    
    
    <category term="面试" scheme="https://bishoptylaor.github.io/categories/interview/"/>
    
    <category term="刷题" scheme="https://bishoptylaor.github.io/categories/interview/juan/"/>
    
    <category term="字节常见题" scheme="https://bishoptylaor.github.io/categories/interview/juan/bytedance-common-alg/"/>
    
    
  </entry>
  
  <entry>
    <title>Leetcode.148 排序链表</title>
    <link href="https://bishoptylaor.github.io/interview/juan/bytedance-common-alg/leet-148-sort-list/"/>
    <id>https://bishoptylaor.github.io/interview/juan/bytedance-common-alg/leet-148-sort-list/</id>
    <published>2024-06-05T06:53:44.000Z</published>
    <updated>2024-06-22T10:03:44.278Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://leetcode.cn/problems/sort-list/&quot;&gt;148. 排序链表&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;给你链表的头结点 &lt;code&gt;head&lt;/code&gt; ，请将其按 &lt;strong&gt;升序&lt;/strong&gt; 排列并返回 &lt;strong&gt;排序后的链表&lt;/strong&gt; 。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例 1：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://assets.leetcode.com/uploads/2020/09/14/sort_list_1.jpg&quot;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：head = [4,2,1,3]
输出：[1,2,3,4]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;示例 2：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://assets.leetcode.com/uploads/2020/09/14/sort_list_2.jpg&quot;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：head = [-1,5,3,4,0]
输出：[-1,0,3,4,5]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;示例 3：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：head = []
输出：[]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;提示：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;链表中节点的数目在范围 &lt;code&gt;[0, 5 * 104]&lt;/code&gt; 内&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-105 &amp;lt;= Node.val &amp;lt;= 105&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;进阶：&lt;/strong&gt;你可以在 &lt;code&gt;O(n log n)&lt;/code&gt; 时间复杂度和常数级空间复杂度下，对链表进行排序吗？&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;* Definition for singly-linked list.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;* type ListNode struct &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;* Val int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;* Next *ListNode&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;* &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;sortList&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(head *ListNode)&lt;/span&gt;&lt;/span&gt; *ListNode &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; sort(head, &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(head, tail *ListNode)&lt;/span&gt;&lt;/span&gt; *ListNode &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; head == &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; head&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; head.Next == tail &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// tail 放到下一段去排序&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		head.Next = &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; head&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	slow, fast := head, head&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; fast != tail &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		slow = slow.Next&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		fast = fast.Next&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; fast != tail &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			fast = fast.Next&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	mid := slow&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; merge(sort(head, mid), sort(mid, tail))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;merge&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(h1, h2 *ListNode)&lt;/span&gt;&lt;/span&gt; *ListNode &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	dummy := &amp;amp;ListNode&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	t, t1, t2 := dummy, h1, h2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// 注意这里是 for&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; t1 != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;amp;&amp;amp; t2 != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; t1.Val &amp;lt;= t2.Val &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			t.Next = t1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			t1 = t1.Next&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			t.Next = t2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			t2 = t2.Next&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// 移动到下一节点&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		t = t.Next&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; t1 != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		t.Next = t1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; t2 != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		t.Next = t2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; dummy.Next&lt;/span&gt;&lt;br&gt;&lt;span</summary>
        
      
    
    
    
    <category term="面试" scheme="https://bishoptylaor.github.io/categories/interview/"/>
    
    <category term="刷题" scheme="https://bishoptylaor.github.io/categories/interview/juan/"/>
    
    <category term="字节常见题" scheme="https://bishoptylaor.github.io/categories/interview/juan/bytedance-common-alg/"/>
    
    
  </entry>
  
  <entry>
    <title>Leetcode.92 反转链表 II</title>
    <link href="https://bishoptylaor.github.io/interview/juan/bytedance-common-alg/leet-92-reverse-linked-list-ii/"/>
    <id>https://bishoptylaor.github.io/interview/juan/bytedance-common-alg/leet-92-reverse-linked-list-ii/</id>
    <published>2024-06-04T12:54:23.000Z</published>
    <updated>2024-06-22T10:03:44.300Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://leetcode.cn/problems/reverse-linked-list-ii/&quot;&gt;92. 反转链表 II&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;给你单链表的头指针 &lt;code&gt;head&lt;/code&gt; 和两个整数 &lt;code&gt;left&lt;/code&gt; 和 &lt;code&gt;right&lt;/code&gt; ，其中 &lt;code&gt;left &amp;lt;= right&lt;/code&gt; 。请你反转从位置 &lt;code&gt;left&lt;/code&gt; 到位置 &lt;code&gt;right&lt;/code&gt; 的链表节点，返回 &lt;strong&gt;反转后的链表&lt;/strong&gt; 。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例 1：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://assets.leetcode.com/uploads/2021/02/19/rev2ex2.jpg&quot;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：head = [1,2,3,4,5], left = 2, right = 4
输出：[1,4,3,2,5]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;示例 2：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：head = [5], left = 1, right = 1
输出：[5]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;提示：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;链表中节点数目为 &lt;code&gt;n&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= n &amp;lt;= 500&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-500 &amp;lt;= Node.val &amp;lt;= 500&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= left &amp;lt;= right &amp;lt;= n&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;进阶：&lt;/strong&gt; 你可以使用一趟扫描完成反转吗？&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;* Definition for singly-linked list.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;* type ListNode struct &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;* Val int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;* Next *ListNode&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;* &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;reverseBetween&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(head *ListNode, left &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;, right &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; *ListNode &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	dummy := &amp;amp;ListNode&amp;#123;Val: &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	dummy.Next = head&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	pre := dummy&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i:=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i&amp;lt;left&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;; i++ &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		pre = pre.Next&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	cur := pre.Next&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i:=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i&amp;lt;right-left; i++ &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		nxt := cur.Next&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		cur.Next = nxt.Next&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		nxt.Next = pre.Next&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		pre.Next = nxt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; dummy.Next&lt;/span&gt;&lt;br&gt;&lt;span</summary>
        
      
    
    
    
    <category term="面试" scheme="https://bishoptylaor.github.io/categories/interview/"/>
    
    <category term="刷题" scheme="https://bishoptylaor.github.io/categories/interview/juan/"/>
    
    <category term="字节常见题" scheme="https://bishoptylaor.github.io/categories/interview/juan/bytedance-common-alg/"/>
    
    
  </entry>
  
  <entry>
    <title>Leetcode.88 合并两个有序数组</title>
    <link href="https://bishoptylaor.github.io/interview/juan/bytedance-common-alg/leet-88-merge-sorted-array/"/>
    <id>https://bishoptylaor.github.io/interview/juan/bytedance-common-alg/leet-88-merge-sorted-array/</id>
    <published>2024-06-04T12:17:58.000Z</published>
    <updated>2024-06-04T12:53:43.622Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://leetcode.cn/problems/merge-sorted-array/&quot;&gt;88. 合并两个有序数组&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;给你两个按 &lt;strong&gt;非递减顺序&lt;/strong&gt; 排列的整数数组 &lt;code&gt;nums1&lt;/code&gt; 和 &lt;code&gt;nums2&lt;/code&gt;，另有两个整数 &lt;code&gt;m&lt;/code&gt; 和 &lt;code&gt;n&lt;/code&gt; ，分别表示 &lt;code&gt;nums1&lt;/code&gt; 和 &lt;code&gt;nums2&lt;/code&gt; 中的元素数目。&lt;/p&gt;
&lt;p&gt;请你 &lt;strong&gt;合并&lt;/strong&gt; &lt;code&gt;nums2&lt;/code&gt; 到 &lt;code&gt;nums1&lt;/code&gt; 中，使合并后的数组同样按 &lt;strong&gt;非递减顺序&lt;/strong&gt; 排列。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意：&lt;/strong&gt;最终，合并后数组不应由函数返回，而是存储在数组 &lt;code&gt;nums1&lt;/code&gt; 中。为了应对这种情况，&lt;code&gt;nums1&lt;/code&gt; 的初始长度为 &lt;code&gt;m + n&lt;/code&gt;，其中前 &lt;code&gt;m&lt;/code&gt; 个元素表示应合并的元素，后 &lt;code&gt;n&lt;/code&gt; 个元素为 &lt;code&gt;0&lt;/code&gt; ，应忽略。&lt;code&gt;nums2&lt;/code&gt; 的长度为 &lt;code&gt;n&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例 1：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3
输出：[1,2,2,3,5,6]
解释：需要合并 [1,2,3] 和 [2,5,6] 。
合并结果是 [_1_,_2_,2,_3_,5,6] ，其中斜体加粗标注的为 nums1 中的元素。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;示例 2：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：nums1 = [1], m = 1, nums2 = [], n = 0
输出：[1]
解释：需要合并 [1] 和 [] 。
合并结果是 [1] 。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;示例 3：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：nums1 = [0], m = 0, nums2 = [1], n = 1
输出：[1]
解释：需要合并的数组是 [] 和 [1] 。
合并结果是 [1] 。
注意，因为 m = 0 ，所以 nums1 中没有元素。nums1 中仅存的 0 仅仅是为了确保合并结果可以顺利存放到 nums1 中。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;提示：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;nums1.length == m + n&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nums2.length == n&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;0 &amp;lt;= m, n &amp;lt;= 200&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= m + n &amp;lt;= 200&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-109 &amp;lt;= nums1[i], nums2[j] &amp;lt;= 109&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一个很好的方案是双指针，因为 nums1 后半部分的数据实际上是空的，我们可以从后往前，找到合适的数据直接填入。&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;merge&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(nums1 []&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;, m &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;, nums2 []&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;, n &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// nums1后方的数据可以利用&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; p1, p2, end := m&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;, n&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;, m+n&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;; p1&amp;gt;=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; || p2&amp;gt;=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; end -- &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; cur &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; p1 == &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt; &amp;#123; &lt;span class=&quot;comment&quot;&gt;// p1 先用完&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			cur = nums2[p2]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			p2 -= &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; p2 == &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt; &amp;#123; &lt;span class=&quot;comment&quot;&gt;// p2 先用完&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			cur = nums1[p1]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			p1 -= &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; nums1[p1] &amp;gt; nums2[p2] &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			cur = nums1[p1]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			p1 -= &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			cur = nums2[p2]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			p2 -= &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		nums1[end] = cur&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span</summary>
        
      
    
    
    
    <category term="面试" scheme="https://bishoptylaor.github.io/categories/interview/"/>
    
    <category term="刷题" scheme="https://bishoptylaor.github.io/categories/interview/juan/"/>
    
    <category term="字节常见题" scheme="https://bishoptylaor.github.io/categories/interview/juan/bytedance-common-alg/"/>
    
    
  </entry>
  
  <entry>
    <title>Leetcode.42 接雨水</title>
    <link href="https://bishoptylaor.github.io/interview/juan/neet150/two-ptr/leet-42-trapping-rain-water/"/>
    <id>https://bishoptylaor.github.io/interview/juan/neet150/two-ptr/leet-42-trapping-rain-water/</id>
    <published>2024-06-04T11:52:02.000Z</published>
    <updated>2024-07-12T14:15:22.486Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://leetcode.cn/problems/trapping-rain-water/&quot;&gt;42. 接雨水&lt;/a&gt;&lt;br&gt;给定 &lt;code&gt;n&lt;/code&gt; 个非负整数表示每个宽度为 &lt;code&gt;1&lt;/code&gt; 的柱子的高度图，计算按此排列的柱子，下雨之后能接多少雨水。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例 1：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/22/rainwatertrap.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;输入：&lt;/strong&gt;height &amp;#x3D; [0,1,0,2,1,0,1,3,2,1,2,1]&lt;br&gt;&lt;strong&gt;输出：&lt;/strong&gt;6&lt;br&gt;&lt;strong&gt;解释：&lt;/strong&gt;上面是由数组 [0,1,0,2,1,0,1,3,2,1,2,1] 表示的高度图，在这种情况下，可以接 6 个单位的雨水（蓝色部分表示雨水）。 &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例 2：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;输入：&lt;/strong&gt;height &amp;#x3D; [4,2,0,3,2,5]&lt;br&gt;&lt;strong&gt;输出：&lt;/strong&gt;9&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;提示：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;n == height.length&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= n &amp;lt;= 2 * 104&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;0 &amp;lt;= height[i] &amp;lt;= 105&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;学习思路，左右max 取最小的&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;trap&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(height []&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	n := &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(height)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; n == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	ans := &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	leftMax := &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;([]&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;, n)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	leftMax[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;] = height[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i:=&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; i&amp;lt;n; i++ &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		leftMax[i] = max(leftMax[i&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;], height[i])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	rightMax := &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;([]&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;, n)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	rightMax[n&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;] = height[n&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; j:=n&lt;span class=&quot;number&quot;&gt;-2&lt;/span&gt;; j&amp;gt;=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; j-- &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		rightMax[j] = max(rightMax[j+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;], height[j])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i:=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i&amp;lt;n; i++ &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// 一定会 &amp;gt;= 当前的 height&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		ans += min(leftMax[i], rightMax[i]) - height[i]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; ans&lt;/span&gt;&lt;br&gt;&lt;span</summary>
        
      
    
    
    
    <category term="面试" scheme="https://bishoptylaor.github.io/categories/interview/"/>
    
    <category term="刷题" scheme="https://bishoptylaor.github.io/categories/interview/juan/"/>
    
    <category term="NeetCode150" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/"/>
    
    <category term="Two Pointers" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/two-ptr/"/>
    
    
  </entry>
  
  <entry>
    <title>Leetcode.236 二叉树的最近公共祖先</title>
    <link href="https://bishoptylaor.github.io/interview/juan/bytedance-common-alg/leet-236-lowest-common-ancestor-of-a-binary-tree/"/>
    <id>https://bishoptylaor.github.io/interview/juan/bytedance-common-alg/leet-236-lowest-common-ancestor-of-a-binary-tree/</id>
    <published>2024-06-04T09:31:46.000Z</published>
    <updated>2024-06-04T12:53:43.622Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://leetcode.cn/problems/lowest-common-ancestor-of-a-binary-tree/&quot;&gt;236. 二叉树的最近公共祖先&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;给定一个二叉树, 找到该树中两个指定节点的最近公共祖先。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://baike.baidu.com/item/%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88/8918834?fr=aladdin&quot;&gt;百度百科&lt;/a&gt;中最近公共祖先的定义为：“对于有根树 T 的两个节点 p、q，最近公共祖先表示为一个节点 x，满足 x 是 p、q 的祖先且 x 的深度尽可能大（&lt;strong&gt;一个节点也可以是它自己的祖先&lt;/strong&gt;）。”&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例 1：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://assets.leetcode.com/uploads/2018/12/14/binarytree.png&quot;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1
输出：3
解释：节点 `5` 和节点 `1` 的最近公共祖先是节点 `3 。`
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;示例 2：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://assets.leetcode.com/uploads/2018/12/14/binarytree.png&quot;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 4
输出：5
解释：节点 `5` 和节点 `4` 的最近公共祖先是节点 `5 。`因为根据定义最近公共祖先节点可以为节点本身。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;示例 3：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：root = [1,2], p = 1, q = 2
输出：1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;提示：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;树中节点数目在范围 &lt;code&gt;[2, 105]&lt;/code&gt; 内。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-109 &amp;lt;= Node.val &amp;lt;= 109&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;所有 &lt;code&gt;Node.val&lt;/code&gt; &lt;code&gt;互不相同&lt;/code&gt; 。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;p != q&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;p&lt;/code&gt; 和 &lt;code&gt;q&lt;/code&gt; 均存在于给定的二叉树中。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;简单递归&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;* Definition for a binary tree node.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;* type TreeNode struct &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;* Val int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;* Left *TreeNode&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;* Right *TreeNode&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;* &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;lowestCommonAncestor&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(root, p, q *TreeNode)&lt;/span&gt;&lt;/span&gt; *TreeNode &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; root == &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// 终结递归条件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; root.Val == p.Val || root.Val == q.Val &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; root&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	left := lowestCommonAncestor(root.Left, p, q)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	right := lowestCommonAncestor(root.Right, p, q)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// 左右都有，即找到了该节点&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; left != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;amp;&amp;amp; right != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; root&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// 左边找不到，继续从右边找&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; left == &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; right&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; left&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;


&lt;p&gt;又：所有节点 val</summary>
        
      
    
    
    
    <category term="面试" scheme="https://bishoptylaor.github.io/categories/interview/"/>
    
    <category term="刷题" scheme="https://bishoptylaor.github.io/categories/interview/juan/"/>
    
    <category term="字节常见题" scheme="https://bishoptylaor.github.io/categories/interview/juan/bytedance-common-alg/"/>
    
    
  </entry>
  
  <entry>
    <title>Leetcode.103 二叉树的锯齿形层序遍历</title>
    <link href="https://bishoptylaor.github.io/interview/juan/bytedance-common-alg/leet-103-binary-tree-zigzag-level-order-traversal/"/>
    <id>https://bishoptylaor.github.io/interview/juan/bytedance-common-alg/leet-103-binary-tree-zigzag-level-order-traversal/</id>
    <published>2024-06-04T08:38:55.000Z</published>
    <updated>2024-06-04T12:53:43.622Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://leetcode.cn/problems/binary-tree-zigzag-level-order-traversal/&quot;&gt;103. 二叉树的锯齿形层序遍历&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;给你二叉树的根节点 &lt;code&gt;root&lt;/code&gt; ，返回其节点值的 &lt;strong&gt;锯齿形层序遍历&lt;/strong&gt; 。（即先从左往右，再从右往左进行下一层遍历，以此类推，层与层之间交替进行）。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例 1：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://assets.leetcode.com/uploads/2021/02/19/tree1.jpg&quot;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：root = [3,9,20,null,null,15,7]
输出：[[3],[20,9],[15,7]]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;示例 2：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：root = [1]
输出：[[1]]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;示例 3：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：root = []
输出：[]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;提示：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;树中节点数目在范围 &lt;code&gt;[0, 2000]&lt;/code&gt; 内&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-100 &amp;lt;= Node.val &amp;lt;= 100&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;* Definition for a binary tree node.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;* type TreeNode struct &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;* Val int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;* Left *TreeNode&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;* Right *TreeNode&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;* &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;zigzagLevelOrder&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(root *TreeNode)&lt;/span&gt;&lt;/span&gt; [][]&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; root == &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; [][]&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	ans := [][]&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	que := []*TreeNode&amp;#123;root&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(que) &amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		n := &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(que)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		vals := &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;([]&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;, n)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i:=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i&amp;lt;n; i++ &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;comment&quot;&gt;// 掐头&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			nod := que[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			que = que[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;:]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(ans) % &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; == &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				vals[n&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;-i] = nod.Val&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				vals[i] = nod.Val&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; nod.Left != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				que = &lt;span class=&quot;built_in&quot;&gt;append&lt;/span&gt;(que, nod.Left)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; nod.Right != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				que = &lt;span class=&quot;built_in&quot;&gt;append&lt;/span&gt;(que, nod.Right)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		ans = &lt;span class=&quot;built_in&quot;&gt;append&lt;/span&gt;(ans, vals)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; ans&lt;/span&gt;&lt;br&gt;&lt;span</summary>
        
      
    
    
    
    <category term="面试" scheme="https://bishoptylaor.github.io/categories/interview/"/>
    
    <category term="刷题" scheme="https://bishoptylaor.github.io/categories/interview/juan/"/>
    
    <category term="字节常见题" scheme="https://bishoptylaor.github.io/categories/interview/juan/bytedance-common-alg/"/>
    
    
  </entry>
  
  <entry>
    <title>Leetcode.827 最大人工岛</title>
    <link href="https://bishoptylaor.github.io/interview/juan/bytedance-common-alg/leet-827-making-a-large-island/"/>
    <id>https://bishoptylaor.github.io/interview/juan/bytedance-common-alg/leet-827-making-a-large-island/</id>
    <published>2024-06-04T03:18:05.000Z</published>
    <updated>2024-07-10T13:14:08.358Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://leetcode.cn/problems/making-a-large-island/&quot;&gt;827. 最大人工岛&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;给你一个大小为 &lt;code&gt;n x n&lt;/code&gt; 二进制矩阵 &lt;code&gt;grid&lt;/code&gt; 。&lt;strong&gt;最多&lt;/strong&gt; 只能将一格 &lt;code&gt;0&lt;/code&gt; 变成 &lt;code&gt;1&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;返回执行此操作后，&lt;code&gt;grid&lt;/code&gt; 中最大的岛屿面积是多少？&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;岛屿&lt;/strong&gt; 由一组上、下、左、右四个方向相连的 &lt;code&gt;1&lt;/code&gt; 形成。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例 1:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入: grid = [[1, 0], [0, 1]]
输出: 3
解释: 将一格0变成1，最终连通两个小岛得到面积为 3 的岛屿。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;示例 2:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入: grid = [[1, 1], [1, 0]]
输出: 4
解释: 将一格0变成1，岛屿的面积扩大为 4。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;示例 3:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入: grid = [[1, 1], [1, 1]]
输出: 4
解释: 没有0可以让我们变成1，面积依然为 4。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;提示：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;n == grid.length&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;n == grid[i].length&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= n &amp;lt;= 500&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;grid[i][j]&lt;/code&gt; 为 &lt;code&gt;0&lt;/code&gt; 或 &lt;code&gt;1&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;主要思路 并查集&lt;br&gt;将同一个岛屿的点加入并查集中，并且计算当前并查集的岛屿大小&lt;br&gt;然后再次遍历，更新 ans 中最大岛屿的面积。&lt;br&gt;遇到需要填海的 ·海· 从四个方向看有没有可联通的岛屿，将四个方向的岛屿面积，连同填海的面积 1 求和后更新 ans 中的最大面积&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;85&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;largestIsland&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(grid [][]&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	n := &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(grid)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	ans := &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// dfs 遍历的时候会超界&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	p, sz := &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;([]&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;, n*n + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;), &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;([]&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;, n*n + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i:=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i&amp;lt;n*n; i++ &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		p[i] = i &lt;span class=&quot;comment&quot;&gt;// 并查集初始化&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		sz[i] = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;// 每个格子所占的面积&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	dir := [][]&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		[]&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;&amp;#123;&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&amp;#125;, []&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;&amp;#123;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&amp;#125;, []&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;&amp;#123;&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;&amp;#125;, []&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;&amp;#123;&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i:=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i&amp;lt;n; i++ &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; j:=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; j&amp;lt;n; j++ &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// 不合规&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; grid[i][j] == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;continue&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; _, d := &lt;span class=&quot;keyword&quot;&gt;range&lt;/span&gt; dir &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			x, y := i + d[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;], j + d[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;comment&quot;&gt;// 超界 or 下一个方向节点是海，都不加入并查集&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (x&amp;lt;&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; || y &amp;lt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; || x &amp;gt;=n || y &amp;gt;= n) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;keyword&quot;&gt;continue&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; grid[x][y] == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;keyword&quot;&gt;continue&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;comment&quot;&gt;// 联通当前点 ij 和 四个方向的节点 xy。并统计面积&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			union(p, sz, i*n + j + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, x*n + y + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i:=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i&amp;lt;n; i++ &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; j:=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; j&amp;lt;n; j++ &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; grid[i][j] == &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;comment&quot;&gt;// 找到当前节点所在集合的代表元素 find(p, i*n + j + 1)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;comment&quot;&gt;// 判断代表元素的 sz 面积是否是最大的，更新最大值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				ans = max(ans, sz[find(p, i*n + j + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;comment&quot;&gt;// 待标记节点 visited 标记是否已被尝试填海&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				tot := &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				visited := &lt;span class=&quot;keyword&quot;&gt;map&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;]&lt;span class=&quot;type&quot;&gt;bool&lt;/span&gt;&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; _, d := &lt;span class=&quot;keyword&quot;&gt;range&lt;/span&gt; dir &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					x, y := i+d[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;], j+d[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					&lt;span class=&quot;comment&quot;&gt;// 超界&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (x &amp;lt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; || y &amp;lt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; || x &amp;gt;=n || y &amp;gt;= n) || grid[x][y] == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;						&lt;span class=&quot;keyword&quot;&gt;continue&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					root := find(p, x*n + y + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; visited[root] &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;						&lt;span class=&quot;keyword&quot;&gt;continue&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					tot += sz[root] &lt;span class=&quot;comment&quot;&gt;// 找到根节点代表的面积&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;						visited[root] = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				ans = max(ans, tot)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; ans&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(p []&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;, x &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; p[x] != x &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// 路径压缩&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		p[x] = find(p, p[x])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; p[x]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;union&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(p []&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;, sz []&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;, a, b &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	ra, rb := find(p, a), find(p, b)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ra == rb &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// 同一联通集合&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// 将小面积的链接到大面积的区域&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; sz[ra] &amp;gt; sz[rb] &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		ra, rb = rb, ra&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	sz[rb] += sz[ra]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	p[ra] = p[rb]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span</summary>
        
      
    
    
    
    <category term="面试" scheme="https://bishoptylaor.github.io/categories/interview/"/>
    
    <category term="刷题" scheme="https://bishoptylaor.github.io/categories/interview/juan/"/>
    
    <category term="字节常见题" scheme="https://bishoptylaor.github.io/categories/interview/juan/bytedance-common-alg/"/>
    
    
  </entry>
  
  <entry>
    <title>Leetcode.695 岛屿的最大面积</title>
    <link href="https://bishoptylaor.github.io/interview/juan/neet150/graphs/leet-695-max-area-of-island/"/>
    <id>https://bishoptylaor.github.io/interview/juan/neet150/graphs/leet-695-max-area-of-island/</id>
    <published>2024-06-04T03:17:55.000Z</published>
    <updated>2024-07-12T14:15:22.484Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://leetcode.cn/problems/max-area-of-island/&quot;&gt;695. 岛屿的最大面积&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;给你一个大小为 &lt;code&gt;m x n&lt;/code&gt; 的二进制矩阵 &lt;code&gt;grid&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;岛屿&lt;/strong&gt; 是由一些相邻的 &lt;code&gt;1&lt;/code&gt; (代表土地) 构成的组合，这里的「相邻」要求两个 &lt;code&gt;1&lt;/code&gt; 必须在 &lt;strong&gt;水平或者竖直的四个方向上&lt;/strong&gt; 相邻。你可以假设 &lt;code&gt;grid&lt;/code&gt; 的四个边缘都被 &lt;code&gt;0&lt;/code&gt;（代表水）包围着。&lt;/p&gt;
&lt;p&gt;岛屿的面积是岛上值为 &lt;code&gt;1&lt;/code&gt; 的单元格的数目。&lt;/p&gt;
&lt;p&gt;计算并返回 &lt;code&gt;grid&lt;/code&gt; 中最大的岛屿面积。如果没有岛屿，则返回面积为 &lt;code&gt;0&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例 1：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://assets.leetcode.com/uploads/2021/05/01/maxarea1-grid.jpg&quot;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：grid = [[0,0,1,0,0,0,0,1,0,0,0,0,0],[0,0,0,0,0,0,0,1,1,1,0,0,0],[0,1,1,0,1,0,0,0,0,0,0,0,0],[0,1,0,0,1,1,0,0,1,0,1,0,0],[0,1,0,0,1,1,0,0,1,1,1,0,0],[0,0,0,0,0,0,0,0,0,0,1,0,0],[0,0,0,0,0,0,0,1,1,1,0,0,0],[0,0,0,0,0,0,0,1,1,0,0,0,0]]
输出：6
解释：答案不应该是 `11` ，因为岛屿只能包含水平或垂直这四个方向上的 `1` 。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;示例 2：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：grid = [[0,0,0,0,0,0,0,0]]
输出：0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;提示：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;m == grid.length&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;n == grid[i].length&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= m, n &amp;lt;= 50&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;grid[i][j]&lt;/code&gt; 为 &lt;code&gt;0&lt;/code&gt; 或 &lt;code&gt;1&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;标准dfs，遍历到陆地加一计数即可，最后统计 max 就行&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;maxAreaOfIsland&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(grid [][]&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	visited := &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;([][]&lt;span class=&quot;type&quot;&gt;bool&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(grid))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i := &lt;span class=&quot;keyword&quot;&gt;range&lt;/span&gt; visited &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		visited[i] = &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;([]&lt;span class=&quot;type&quot;&gt;bool&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(grid[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	ans := &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; dfs &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;, &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	dfs = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(m, n &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// 到达边界&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; m &amp;gt;= &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(grid) || n &amp;gt;= &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(grid[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]) || m&amp;lt;&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; || n&amp;lt;&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// 到达岛边界&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; grid[m][n] == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// 已访问的陆地跳过&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; visited[m][n] &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// 标记陆地访问&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; grid[m][n] == &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			visited[m][n] = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; + dfs(m&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;, n) + dfs(m+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, n) + dfs(m, n+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) + dfs(m, n&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i:=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i&amp;lt;&lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(grid); i++ &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; j:=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; j&amp;lt;&lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(grid[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]); j++ &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; !visited[i][j] &amp;amp;&amp;amp; grid[i][j] == &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				ans = max(ans, dfs(i, j))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; ans&lt;/span&gt;&lt;br&gt;&lt;span</summary>
        
      
    
    
    
    <category term="面试" scheme="https://bishoptylaor.github.io/categories/interview/"/>
    
    <category term="刷题" scheme="https://bishoptylaor.github.io/categories/interview/juan/"/>
    
    <category term="NeetCode150" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/"/>
    
    <category term="Graphs" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/graphs/"/>
    
    
  </entry>
  
  <entry>
    <title>Leetcode.463 岛屿的周长</title>
    <link href="https://bishoptylaor.github.io/interview/juan/bytedance-common-alg/leet-463-island-perimeter/"/>
    <id>https://bishoptylaor.github.io/interview/juan/bytedance-common-alg/leet-463-island-perimeter/</id>
    <published>2024-06-04T03:17:48.000Z</published>
    <updated>2024-06-22T10:03:44.306Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://leetcode.cn/problems/island-perimeter/&quot;&gt;463. 岛屿的周长&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;给定一个 &lt;code&gt;row x col&lt;/code&gt; 的二维网格地图 &lt;code&gt;grid&lt;/code&gt; ，其中：&lt;code&gt;grid[i][j] = 1&lt;/code&gt; 表示陆地， &lt;code&gt;grid[i][j] = 0&lt;/code&gt; 表示水域。&lt;/p&gt;
&lt;p&gt;网格中的格子 &lt;strong&gt;水平和垂直&lt;/strong&gt; 方向相连（对角线方向不相连）。整个网格被水完全包围，但其中恰好有一个岛屿（或者说，一个或多个表示陆地的格子相连组成的岛屿）。&lt;/p&gt;
&lt;p&gt;岛屿中没有“湖”（“湖” 指水域在岛屿内部且不和岛屿周围的水相连）。格子是边长为 1 的正方形。网格为长方形，且宽度和高度均不超过 100 。计算这个岛屿的周长。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例 1：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/12/island.png&quot;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：grid = [[0,1,0,0],[1,1,1,0],[0,1,0,0],[1,1,0,0]]
输出：16
解释：它的周长是上面图片中的 16 个黄色的边
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;示例 2：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：grid = [[1]]
输出：4
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;示例 3：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：grid = [[1,0]]
输出：4
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;提示：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;row == grid.length&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;col == grid[i].length&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= row, col &amp;lt;= 100&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;grid[i][j]&lt;/code&gt; 为 &lt;code&gt;0&lt;/code&gt; 或 &lt;code&gt;1&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;islandPerimeter&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(grid [][]&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	visited := &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;([][]&lt;span class=&quot;type&quot;&gt;bool&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(grid))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i := &lt;span class=&quot;keyword&quot;&gt;range&lt;/span&gt; visited &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		visited[i] = &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;([]&lt;span class=&quot;type&quot;&gt;bool&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(grid[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	ans := &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; dfs &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;, &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	dfs = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(m, n &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// 到达边界&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; m &amp;gt;= &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(grid) || n &amp;gt;= &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(grid[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]) || m&amp;lt;&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; || n&amp;lt;&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// 到达岛边界&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; grid[m][n] == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// 已访问的陆地跳过&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; visited[m][n] &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// 标记陆地访问&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; grid[m][n] == &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			visited[m][n] = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; dfs(m&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;, n) + dfs(m+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, n) + dfs(m, n+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) + dfs(m, n&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i:=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i&amp;lt;&lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(grid); i++ &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; j:=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; j&amp;lt;&lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(grid[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]); j++ &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; !visited[i][j] &amp;amp;&amp;amp; grid[i][j] == &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				ans += dfs(i, j)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; ans&lt;/span&gt;&lt;br&gt;&lt;span</summary>
        
      
    
    
    
    <category term="面试" scheme="https://bishoptylaor.github.io/categories/interview/"/>
    
    <category term="刷题" scheme="https://bishoptylaor.github.io/categories/interview/juan/"/>
    
    <category term="字节常见题" scheme="https://bishoptylaor.github.io/categories/interview/juan/bytedance-common-alg/"/>
    
    
  </entry>
  
  <entry>
    <title>Leetcode.209 长度最小的子数组</title>
    <link href="https://bishoptylaor.github.io/interview/juan/bytedance-common-alg/leet-209-minimum-size-subarray-sum/"/>
    <id>https://bishoptylaor.github.io/interview/juan/bytedance-common-alg/leet-209-minimum-size-subarray-sum/</id>
    <published>2024-06-04T02:45:32.000Z</published>
    <updated>2024-06-04T12:53:43.622Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://leetcode.cn/problems/minimum-size-subarray-sum/&quot;&gt;209. 长度最小的子数组&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;给定一个含有 &lt;code&gt;n&lt;/code&gt; 个正整数的数组和一个正整数 &lt;code&gt;target&lt;/code&gt; &lt;strong&gt;。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;找出该数组中满足其总和大于等于 &lt;code&gt;target&lt;/code&gt; 的长度最小的 &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;子数组&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; &lt;code&gt;[numsl, numsl+1, ..., numsr-1, numsr]&lt;/code&gt; ，并返回其长度&lt;strong&gt;。&lt;/strong&gt;如果不存在符合条件的子数组，返回 &lt;code&gt;0&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例 1：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：target = 7, nums = [2,3,1,2,4,3]
输出：2
解释：子数组 `[4,3]` 是该条件下的长度最小的子数组。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;示例 2：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：target = 4, nums = [1,4,4]
输出：1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;示例 3：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：target = 11, nums = [1,1,1,1,1,1,1,1]
输出：0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;提示：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= target &amp;lt;= 109&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= nums.length &amp;lt;= 105&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= nums[i] &amp;lt;= 105&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;进阶：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果你已经实现 &lt;code&gt;O(n)&lt;/code&gt; 时间复杂度的解法, 请尝试设计一个 &lt;code&gt;O(n log(n))&lt;/code&gt; 时间复杂度的解法。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;滑动窗口&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;minSubArrayLen&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(target &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;, nums []&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// 滑&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(nums) == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	ans := math.MaxInt32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	sum := &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	start, end := &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; end &amp;lt; &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(nums) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		sum += nums[end]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; sum &amp;gt;= target &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			ans = min(ans, end-start+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			sum -= nums[start]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			start += &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		end += &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ans == math.MaxInt32 &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; ans&lt;/span&gt;&lt;br&gt;&lt;span</summary>
        
      
    
    
    
    <category term="面试" scheme="https://bishoptylaor.github.io/categories/interview/"/>
    
    <category term="刷题" scheme="https://bishoptylaor.github.io/categories/interview/juan/"/>
    
    <category term="字节常见题" scheme="https://bishoptylaor.github.io/categories/interview/juan/bytedance-common-alg/"/>
    
    
  </entry>
  
  <entry>
    <title>Leetcode.2007 从双倍数组中还原原数组</title>
    <link href="https://bishoptylaor.github.io/interview/juan/bytedance-common-alg/leet-2007-find-original-array-from-doubled-array/"/>
    <id>https://bishoptylaor.github.io/interview/juan/bytedance-common-alg/leet-2007-find-original-array-from-doubled-array/</id>
    <published>2024-06-04T02:30:09.000Z</published>
    <updated>2024-06-04T12:53:43.623Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://leetcode.cn/problems/find-original-array-from-doubled-array/&quot;&gt;2007. 从双倍数组中还原原数组&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;一个整数数组 &lt;code&gt;original&lt;/code&gt; 可以转变成一个 &lt;strong&gt;双倍&lt;/strong&gt; 数组 &lt;code&gt;changed&lt;/code&gt; ，转变方式为将 &lt;code&gt;original&lt;/code&gt; 中每个元素 &lt;strong&gt;值乘以 2&lt;/strong&gt; 加入数组中，然后将所有元素 &lt;strong&gt;随机打乱&lt;/strong&gt; 。&lt;/p&gt;
&lt;p&gt;给你一个数组 &lt;code&gt;changed&lt;/code&gt; ，如果 &lt;code&gt;change&lt;/code&gt; 是 &lt;strong&gt;双倍&lt;/strong&gt; 数组，那么请你返回 &lt;code&gt;original&lt;/code&gt;数组，否则请返回空数组。&lt;code&gt;original&lt;/code&gt; 的元素可以以 &lt;strong&gt;任意&lt;/strong&gt; 顺序返回。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例 1：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：changed = [1,3,4,2,6,8]
输出：[1,3,4]
解释：一个可能的 original 数组为 [1,3,4] :
- 将 1 乘以 2 ，得到 1 * 2 = 2 。
- 将 3 乘以 2 ，得到 3 * 2 = 6 。
- 将 4 乘以 2 ，得到 4 * 2 = 8 。
其他可能的原数组方案为 [4,3,1] 或者 [3,1,4] 。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;示例 2：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：changed = [6,3,0,1]
输出：[]
解释：changed 不是一个双倍数组。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;示例 3：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：changed = [1]
输出：[]
解释：changed 不是一个双倍数组。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;提示：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= changed.length &amp;lt;= 105&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;0 &amp;lt;= changed[i] &amp;lt;= 105&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;先排序，排序后首位一定是未双倍的元素&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;findOriginalArray&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(changed []&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; []&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	sort.Ints(changed)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; ans []&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	cm := &lt;span class=&quot;keyword&quot;&gt;map&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;]&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; _, n := &lt;span class=&quot;keyword&quot;&gt;range&lt;/span&gt; changed &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; cm[n] == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			cm[&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;*n] += &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			ans = &lt;span class=&quot;built_in&quot;&gt;append&lt;/span&gt;(ans, n)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			cm[n] -= &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; cm[n] == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;built_in&quot;&gt;delete&lt;/span&gt;(cm, n)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// 如果结束后还有剩余的元素，说明不够一一对应&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(cm) &amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; []&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; ans&lt;/span&gt;&lt;br&gt;&lt;span</summary>
        
      
    
    
    
    <category term="面试" scheme="https://bishoptylaor.github.io/categories/interview/"/>
    
    <category term="刷题" scheme="https://bishoptylaor.github.io/categories/interview/juan/"/>
    
    <category term="字节常见题" scheme="https://bishoptylaor.github.io/categories/interview/juan/bytedance-common-alg/"/>
    
    
  </entry>
  
  <entry>
    <title>岛屿问题</title>
    <link href="https://bishoptylaor.github.io/interview/juan/%E6%A8%A1%E6%9D%BF/island-issue/"/>
    <id>https://bishoptylaor.github.io/interview/juan/%E6%A8%A1%E6%9D%BF/island-issue/</id>
    <published>2024-06-03T14:04:19.000Z</published>
    <updated>2024-06-04T12:53:43.622Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/number-of-islands/&quot;&gt;L200. 岛屿数量&lt;/a&gt; （Easy）&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/island-perimeter/&quot;&gt;463. 岛屿的周长&lt;/a&gt; （Easy）&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/max-area-of-island/&quot;&gt;695. 岛屿的最大面积&lt;/a&gt; （Medium）&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/making-a-large-island/&quot;&gt;827.</summary>
        
      
    
    
    
    <category term="面试" scheme="https://bishoptylaor.github.io/categories/interview/"/>
    
    <category term="刷题" scheme="https://bishoptylaor.github.io/categories/interview/juan/"/>
    
    <category term="模板" scheme="https://bishoptylaor.github.io/categories/interview/juan/%E6%A8%A1%E6%9D%BF/"/>
    
    
  </entry>
  
  <entry>
    <title>Leetcode.415 字符串相加</title>
    <link href="https://bishoptylaor.github.io/interview/juan/bytedance-common-alg/leet-415-add-strings/"/>
    <id>https://bishoptylaor.github.io/interview/juan/bytedance-common-alg/leet-415-add-strings/</id>
    <published>2024-06-02T17:13:12.000Z</published>
    <updated>2024-06-04T12:53:43.622Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://leetcode.cn/problems/add-strings/&quot;&gt;415. 字符串相加&lt;/a&gt;&lt;br&gt;给定两个字符串形式的非负整数 &lt;code&gt;num1&lt;/code&gt; 和&lt;code&gt;num2&lt;/code&gt; ，计算它们的和并同样以字符串形式返回。&lt;/p&gt;
&lt;p&gt;你不能使用任何內建的用于处理大整数的库（比如 &lt;code&gt;BigInteger&lt;/code&gt;）， 也不能直接将输入的字符串转换为整数形式。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例 1：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：num1 = &amp;quot;11&amp;quot;, num2 = &amp;quot;123&amp;quot;
输出：&amp;quot;134&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;示例 2：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：num1 = &amp;quot;456&amp;quot;, num2 = &amp;quot;77&amp;quot;
输出：&amp;quot;533&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;示例 3：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：num1 = &amp;quot;0&amp;quot;, num2 = &amp;quot;0&amp;quot;
输出：&amp;quot;0&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;提示：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= num1.length, num2.length &amp;lt;= 104&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;num1&lt;/code&gt; 和&lt;code&gt;num2&lt;/code&gt; 都只包含数字 &lt;code&gt;0-9&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;num1&lt;/code&gt; 和&lt;code&gt;num2&lt;/code&gt; 都不包含任何前导零&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;本质上还是学习字符串的处理方法，以及注意相关进位&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;addStrings&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(num1 &lt;span class=&quot;type&quot;&gt;string&lt;/span&gt;, num2 &lt;span class=&quot;type&quot;&gt;string&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;string&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	add := &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	ans := &lt;span class=&quot;string&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i, j := &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(num1)&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(num2)&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;; i&amp;gt;=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; || j&amp;gt;=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; || add != &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; ; i,j = i&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;, j&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; x, y &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; i &amp;gt;= &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			x = &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;(num1[i] - &lt;span class=&quot;string&quot;&gt;&amp;#x27;0&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; j&amp;gt;=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			y = &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;(num2[j] - &lt;span class=&quot;string&quot;&gt;&amp;#x27;0&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		res := x + y + add&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		ans = strconv.Itoa(res % &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;) + ans&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		add = res / &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; ans&lt;/span&gt;&lt;br&gt;&lt;span</summary>
        
      
    
    
    
    <category term="面试" scheme="https://bishoptylaor.github.io/categories/interview/"/>
    
    <category term="刷题" scheme="https://bishoptylaor.github.io/categories/interview/juan/"/>
    
    <category term="字节常见题" scheme="https://bishoptylaor.github.io/categories/interview/juan/bytedance-common-alg/"/>
    
    
  </entry>
  
  <entry>
    <title>Leetcode.31 下一个排列</title>
    <link href="https://bishoptylaor.github.io/interview/juan/bytedance-common-alg/leet-31-next-permutation/"/>
    <id>https://bishoptylaor.github.io/interview/juan/bytedance-common-alg/leet-31-next-permutation/</id>
    <published>2024-06-02T13:11:15.000Z</published>
    <updated>2024-06-04T12:53:43.645Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://leetcode.cn/problems/next-permutation/&quot;&gt;31. 下一个排列&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;整数数组的一个 &lt;strong&gt;排列&lt;/strong&gt;  就是将其所有成员以序列或线性顺序排列。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;例如，&lt;code&gt;arr = [1,2,3]&lt;/code&gt; ，以下这些都可以视作 &lt;code&gt;arr&lt;/code&gt; 的排列：&lt;code&gt;[1,2,3]&lt;/code&gt;、&lt;code&gt;[1,3,2]&lt;/code&gt;、&lt;code&gt;[3,1,2]&lt;/code&gt;、&lt;code&gt;[2,3,1]&lt;/code&gt; 。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;整数数组的 &lt;strong&gt;下一个排列&lt;/strong&gt; 是指其整数的下一个字典序更大的排列。更正式地，如果数组的所有排列根据其字典顺序从小到大排列在一个容器中，那么数组的 &lt;strong&gt;下一个排列&lt;/strong&gt; 就是在这个有序容器中排在它后面的那个排列。如果不存在下一个更大的排列，那么这个数组必须重排为字典序最小的排列（即，其元素按升序排列）。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;例如，&lt;code&gt;arr = [1,2,3]&lt;/code&gt; 的下一个排列是 &lt;code&gt;[1,3,2]&lt;/code&gt; 。&lt;/li&gt;
&lt;li&gt;类似地，&lt;code&gt;arr = [2,3,1]&lt;/code&gt; 的下一个排列是 &lt;code&gt;[3,1,2]&lt;/code&gt; 。&lt;/li&gt;
&lt;li&gt;而 &lt;code&gt;arr = [3,2,1]&lt;/code&gt; 的下一个排列是 &lt;code&gt;[1,2,3]&lt;/code&gt; ，因为 &lt;code&gt;[3,2,1]&lt;/code&gt; 不存在一个字典序更大的排列。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;给你一个整数数组 &lt;code&gt;nums&lt;/code&gt; ，找出 &lt;code&gt;nums&lt;/code&gt; 的下一个排列。&lt;/p&gt;
&lt;p&gt;必须 &lt;strong&gt;&lt;a href=&quot;https://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95&quot;&gt;原地&lt;/a&gt;&lt;/strong&gt; 修改，只允许使用额外常数空间。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例 1：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：nums = [1,2,3]
输出：[1,3,2]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;示例 2：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：nums = [3,2,1]
输出：[1,2,3]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;示例 3：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：nums = [1,1,5]
输出：[1,5,1]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;提示：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= nums.length &amp;lt;= 100&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;0 &amp;lt;= nums[i] &amp;lt;= 100&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;暂时只能背解法，具体没想明白呢！&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;nextPermutation&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(nums []&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	n := &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(nums)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	i := n&lt;span class=&quot;number&quot;&gt;-2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// 从右往左，找到第一个符合条件的较小的数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// 此时 i+1 ~ n 必然是递减的序列数，idx 为 i ~ n-1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i&amp;gt;=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;amp;&amp;amp; nums[i] &amp;gt;= nums[i+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;] &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		i--&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; i&amp;gt;=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// 再从右往左，找到比刚刚较小的数稍大的数，交换二者&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		j := n&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; j&amp;gt;=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;amp;&amp;amp; nums[i] &amp;gt;= nums[j] &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			j--&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// 可以证明 i+1 ~ n 比为降序&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		nums[i], nums[j] = nums[j], nums[i]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// 则翻转这段即可变为升序&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	reverse(nums[i+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;:])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;reverse&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(a []&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i, n := &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(a); i&amp;lt;n/&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;; i++ &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		a[i], a[n&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;-i] = a[n&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;-i], a[i]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span</summary>
        
      
    
    
    
    <category term="面试" scheme="https://bishoptylaor.github.io/categories/interview/"/>
    
    <category term="刷题" scheme="https://bishoptylaor.github.io/categories/interview/juan/"/>
    
    <category term="字节常见题" scheme="https://bishoptylaor.github.io/categories/interview/juan/bytedance-common-alg/"/>
    
    
  </entry>
  
  <entry>
    <title>Leetcode.160 相交链表</title>
    <link href="https://bishoptylaor.github.io/interview/juan/bytedance-common-alg/leet-160-intersection-of-two-linked-lists/"/>
    <id>https://bishoptylaor.github.io/interview/juan/bytedance-common-alg/leet-160-intersection-of-two-linked-lists/</id>
    <published>2024-06-02T12:37:35.000Z</published>
    <updated>2024-06-04T12:53:43.622Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://leetcode.cn/problems/intersection-of-two-linked-lists/&quot;&gt;160. 相交链表&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;给你两个单链表的头节点 &lt;code&gt;headA&lt;/code&gt; 和 &lt;code&gt;headB&lt;/code&gt; ，请你找出并返回两个单链表相交的起始节点。如果两个链表不存在相交节点，返回 &lt;code&gt;null&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;图示两个链表在节点 &lt;code&gt;c1&lt;/code&gt; 开始相交&lt;strong&gt;：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/14/160_statement.png&quot;&gt;&lt;img src=&quot;https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/14/160_statement.png&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;题目数据 &lt;strong&gt;保证&lt;/strong&gt; 整个链式结构中不存在环。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;，函数返回结果后，链表必须 &lt;strong&gt;保持其原始结构&lt;/strong&gt; 。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;自定义评测：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;评测系统&lt;/strong&gt; 的输入如下（你设计的程序 &lt;strong&gt;不适用&lt;/strong&gt; 此输入）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;intersectVal&lt;/code&gt; - 相交的起始节点的值。如果不存在相交节点，这一值为 &lt;code&gt;0&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;listA&lt;/code&gt; - 第一个链表&lt;/li&gt;
&lt;li&gt;&lt;code&gt;listB&lt;/code&gt; - 第二个链表&lt;/li&gt;
&lt;li&gt;&lt;code&gt;skipA&lt;/code&gt; - 在 &lt;code&gt;listA&lt;/code&gt; 中（从头节点开始）跳到交叉节点的节点数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;skipB&lt;/code&gt; - 在 &lt;code&gt;listB&lt;/code&gt; 中（从头节点开始）跳到交叉节点的节点数&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;评测系统将根据这些输入创建链式数据结构，并将两个头节点 &lt;code&gt;headA&lt;/code&gt; 和 &lt;code&gt;headB&lt;/code&gt; 传递给你的程序。如果程序能够正确返回相交节点，那么你的解决方案将被 &lt;strong&gt;视作正确答案&lt;/strong&gt; 。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例 1：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://assets.leetcode.com/uploads/2018/12/13/160_example_1.png&quot;&gt;&lt;img src=&quot;https://assets.leetcode.com/uploads/2021/03/05/160_example_1_1.png&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：intersectVal = 8, listA = [4,1,8,4,5], listB = [5,6,1,8,4,5], skipA = 2, skipB = 3
输出：Intersected at &amp;#39;8&amp;#39;
解释：相交节点的值为 8 （注意，如果两个链表相交则不能为 0）。
从各自的表头开始算起，链表 A 为 [4,1,8,4,5]，链表 B 为 [5,6,1,8,4,5]。
在 A 中，相交节点前有 2 个节点；在 B 中，相交节点前有 3 个节点。
— 请注意相交节点的值不为 1，因为在链表 A 和链表 B 之中值为 1 的节点 (A 中第二个节点和 B 中第三个节点) 是不同的节点。换句话说，它们在内存中指向两个不同的位置，而链表 A 和链表 B 中值为 8 的节点 (A 中第三个节点，B 中第四个节点) 在内存中指向相同的位置。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;示例 2：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://assets.leetcode.com/uploads/2018/12/13/160_example_2.png&quot;&gt;&lt;img src=&quot;https://assets.leetcode.com/uploads/2021/03/05/160_example_2.png&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：intersectVal = 2, listA = [1,9,1,2,4], listB = [3,2,4], skipA = 3, skipB = 1
输出：Intersected at &amp;#39;2&amp;#39;
解释：相交节点的值为 2 （注意，如果两个链表相交则不能为 0）。
从各自的表头开始算起，链表 A 为 [1,9,1,2,4]，链表 B 为 [3,2,4]。
在 A 中，相交节点前有 3 个节点；在 B 中，相交节点前有 1 个节点。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;示例 3：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://assets.leetcode.com/uploads/2018/12/13/160_example_3.png&quot;&gt;&lt;img src=&quot;https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/14/160_example_3.png&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;**输入：**intersectVal = 0, listA = [2,6,4], listB = [1,5], skipA = 3, skipB = 2
**输出：**null
**解释：**从各自的表头开始算起，链表 A 为 [2,6,4]，链表 B 为 [1,5]。
由于这两个链表不相交，所以 intersectVal 必须为 0，而 skipA 和 skipB 可以是任意值。
这两个链表不相交，因此返回 null 。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;提示：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;listA&lt;/code&gt; 中节点数目为 &lt;code&gt;m&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;listB&lt;/code&gt; 中节点数目为 &lt;code&gt;n&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= m, n &amp;lt;= 3 * 104&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= Node.val &amp;lt;= 105&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;0 &amp;lt;= skipA &amp;lt;= m&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;0 &amp;lt;= skipB &amp;lt;= n&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;如果 &lt;code&gt;listA&lt;/code&gt; 和 &lt;code&gt;listB&lt;/code&gt; 没有交点，&lt;code&gt;intersectVal&lt;/code&gt; 为 &lt;code&gt;0&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;如果 &lt;code&gt;listA&lt;/code&gt; 和 &lt;code&gt;listB&lt;/code&gt; 有交点，&lt;code&gt;intersectVal == listA[skipA] == listB[skipB]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;进阶：&lt;/strong&gt;你能否设计一个时间复杂度 &lt;code&gt;O(m + n)&lt;/code&gt; 、仅用 &lt;code&gt;O(1)&lt;/code&gt; 内存的解决方案？&lt;/p&gt;
&lt;p&gt;一个很容易理解的思路是，分别遍历两个链表长度，找到后续相同长度的节点，即可能的交点。&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;* Definition for singly-linked list.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;* type ListNode struct &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;* Val int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;* Next *ListNode&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;* &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getIntersectionNode&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(headA, headB *ListNode)&lt;/span&gt;&lt;/span&gt; *ListNode &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	lenA, lenB := &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; la, lb *ListNode&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	la, lb = headA, headB&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; la != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		lenA += &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		la = la.Next&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; lb != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		lenB += &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		lb = lb.Next&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	la, lb = headA, headB&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; lenA &amp;gt; lenB &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i:=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i&amp;lt;lenA-lenB; i++ &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			la = la.Next&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i:=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i&amp;lt;lenB-lenA; i++ &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			lb = lb.Next&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; la != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; la == lb &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; la&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			la = la.Next&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			lb = lb.Next&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span</summary>
        
      
    
    
    
    <category term="面试" scheme="https://bishoptylaor.github.io/categories/interview/"/>
    
    <category term="刷题" scheme="https://bishoptylaor.github.io/categories/interview/juan/"/>
    
    <category term="字节常见题" scheme="https://bishoptylaor.github.io/categories/interview/juan/bytedance-common-alg/"/>
    
    
  </entry>
  
  <entry>
    <title>Leetcode.46 全排列</title>
    <link href="https://bishoptylaor.github.io/interview/juan/neet150/backtracking/leet-46-permutations/"/>
    <id>https://bishoptylaor.github.io/interview/juan/neet150/backtracking/leet-46-permutations/</id>
    <published>2024-05-30T08:59:42.000Z</published>
    <updated>2024-07-12T14:15:22.483Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://leetcode.cn/problems/permutations/&quot;&gt;46. 全排列&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;给定一个不含重复数字的数组 &lt;code&gt;nums&lt;/code&gt; ，返回其 &lt;em&gt;所有可能的全排列&lt;/em&gt; 。你可以 &lt;strong&gt;按任意顺序&lt;/strong&gt; 返回答案。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例 1：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：nums = [1,2,3]
输出：[[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;示例 2：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：nums = [0,1]
输出：[[0,1],[1,0]]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;示例 3：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：nums = [1]
输出：[[1]]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;提示：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= nums.length &amp;lt;= 6&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-10 &amp;lt;= nums[i] &amp;lt;= 10&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nums&lt;/code&gt; 中的所有整数 &lt;strong&gt;互不相同&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;递归 + 回溯 &lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;permute&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(nums []&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; [][]&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; res [][]&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	visited := &lt;span class=&quot;keyword&quot;&gt;map&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;]&lt;span class=&quot;type&quot;&gt;bool&lt;/span&gt;&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; dfs &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(p []&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	dfs = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(p []&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(p) == &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(nums) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;comment&quot;&gt;// 深入结束&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			ans := &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;([]&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(p))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;comment&quot;&gt;// 拷贝结果到 ans&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;built_in&quot;&gt;copy&lt;/span&gt;(ans, p)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;comment&quot;&gt;// 加入结果集&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			res = &lt;span class=&quot;built_in&quot;&gt;append&lt;/span&gt;(res, ans)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; _, n := &lt;span class=&quot;keyword&quot;&gt;range&lt;/span&gt; nums &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; visited[n] &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;keyword&quot;&gt;continue&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;comment&quot;&gt;// 标记访问&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			p = &lt;span class=&quot;built_in&quot;&gt;append&lt;/span&gt;(p, n)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			visited[n] = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			dfs(p)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;comment&quot;&gt;// 撤销访问，以进行其他分支的搜索&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			p = p[:&lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(p)&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			visited[n] = &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	dfs([]&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;&amp;#123;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; res&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;


&lt;p&gt;元素替换&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;permute&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(nums []&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; [][]&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	n := &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(nums)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; ans [][]&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; dfs &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	dfs = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(i &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; i == n&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			ans = &lt;span class=&quot;built_in&quot;&gt;append&lt;/span&gt;(ans, &lt;span class=&quot;built_in&quot;&gt;append&lt;/span&gt;([]&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;&amp;#123;&amp;#125;, nums...))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; j:=i; j&amp;lt;n; j++ &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			swap(nums, i, j) &lt;span class=&quot;comment&quot;&gt;// 将 nums[i] 固定在 j 位&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			dfs(i+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			swap(nums, i, j) &lt;span class=&quot;comment&quot;&gt;// 恢复位置&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	dfs(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; ans&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;swap&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(nums []&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;, i, j &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	nums[i], nums[j] = nums[j], nums[i]&lt;/span&gt;&lt;br&gt;&lt;span</summary>
        
      
    
    
    
    <category term="面试" scheme="https://bishoptylaor.github.io/categories/interview/"/>
    
    <category term="刷题" scheme="https://bishoptylaor.github.io/categories/interview/juan/"/>
    
    <category term="NeetCode150" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/"/>
    
    <category term="Backtracking" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/backtracking/"/>
    
    
  </entry>
  
  <entry>
    <title>求根号 X</title>
    <link href="https://bishoptylaor.github.io/interview/juan/bytedance-common-alg/sqrt-x/"/>
    <id>https://bishoptylaor.github.io/interview/juan/bytedance-common-alg/sqrt-x/</id>
    <published>2024-05-30T07:09:51.000Z</published>
    <updated>2024-06-04T12:53:43.624Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 求近似值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;sqrt&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(x &lt;span class=&quot;type&quot;&gt;float64&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;float64&lt;/span&gt; &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   l, r := &lt;span class=&quot;type&quot;&gt;float64&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;), x  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   mid := (l + r) / &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; mid-l &amp;gt; &lt;span class=&quot;number&quot;&gt;0.000001&lt;/span&gt; &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; mid*mid &amp;gt; x &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         r = mid  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         l = mid  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      mid = (l + r) / &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; mid  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 只能求整数部分&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;mySqrt&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(x &lt;span class=&quot;type&quot;&gt;float64&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;float64&lt;/span&gt; &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   l, r := &lt;span class=&quot;type&quot;&gt;float64&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;), x  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   ans := &lt;span class=&quot;number&quot;&gt;-1.0&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; l &amp;lt;= r &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      mid := l + (r-l)/&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; mid*mid &amp;gt; x &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         r = mid - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         ans = mid  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         l = mid + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; ans  &lt;/span&gt;&lt;br&gt;&lt;span</summary>
        
      
    
    
    
    <category term="面试" scheme="https://bishoptylaor.github.io/categories/interview/"/>
    
    <category term="刷题" scheme="https://bishoptylaor.github.io/categories/interview/juan/"/>
    
    <category term="字节常见题" scheme="https://bishoptylaor.github.io/categories/interview/juan/bytedance-common-alg/"/>
    
    
  </entry>
  
  <entry>
    <title>Leetcode.215 数组中的第K个最大元素</title>
    <link href="https://bishoptylaor.github.io/interview/juan/neet150/heap-queue/leet-215-kth-largest-element-in-an-array/"/>
    <id>https://bishoptylaor.github.io/interview/juan/neet150/heap-queue/leet-215-kth-largest-element-in-an-array/</id>
    <published>2024-05-29T14:53:41.000Z</published>
    <updated>2024-07-12T14:15:22.485Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://leetcode.cn/problems/kth-largest-element-in-an-array/&quot;&gt;215. 数组中的第K个最大元素&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;给定整数数组 &lt;code&gt;nums&lt;/code&gt; 和整数 &lt;code&gt;k&lt;/code&gt;，请返回数组中第 &lt;strong&gt;k&lt;/strong&gt; 个最大的元素。&lt;/p&gt;
&lt;p&gt;请注意，你需要找的是数组排序后的第 &lt;code&gt;k&lt;/code&gt; 个最大的元素，而不是第 &lt;code&gt;k&lt;/code&gt; 个不同的元素。&lt;/p&gt;
&lt;p&gt;你必须设计并实现时间复杂度为 &lt;code&gt;O(n)&lt;/code&gt; 的算法解决此问题。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例 1:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入: `[3,2,1,5,6,4],` k = 2
输出: 5
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;示例 2:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入: `[3,2,3,1,2,4,5,5,6],` k = 4
输出: 4
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;提示：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= k &amp;lt;= nums.length &amp;lt;= 105&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-104 &amp;lt;= nums[i] &amp;lt;= 104&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;快速选择法&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;findKthLargest&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(nums []&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;, k &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	n := &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(nums)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; quickselect(nums, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, n&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;, n-k)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;quickselect&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(nums []&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;, l, r, k &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; l == r &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; nums[k]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	dummy := nums[l]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	i := l&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	j := r+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i&amp;lt;j &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i++; nums[i]&amp;lt;dummy ; i++ &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; j--; nums[j]&amp;gt;dummy ; j-- &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; i&amp;lt;j &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;comment&quot;&gt;// swap&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			nums[i], nums[j] = nums[j], nums[i]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; k&amp;lt;=j &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; quickselect(nums, l, j, k)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; quickselect(nums, j+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, r, k)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span</summary>
        
      
    
    
    
    <category term="面试" scheme="https://bishoptylaor.github.io/categories/interview/"/>
    
    <category term="刷题" scheme="https://bishoptylaor.github.io/categories/interview/juan/"/>
    
    <category term="NeetCode150" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/"/>
    
    <category term="Heap &amp; Priority Queue" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/heap-queue/"/>
    
    
  </entry>
  
  <entry>
    <title>Leetcode.146 LRU 缓存</title>
    <link href="https://bishoptylaor.github.io/interview/juan/neet150/linked-list/leet-146-lru-cache/"/>
    <id>https://bishoptylaor.github.io/interview/juan/neet150/linked-list/leet-146-lru-cache/</id>
    <published>2024-05-28T13:19:48.000Z</published>
    <updated>2024-07-12T14:15:22.485Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://leetcode.cn/problems/lru-cache/&quot;&gt;146. LRU 缓存&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;请你设计并实现一个满足  &lt;a href=&quot;https://baike.baidu.com/item/LRU&quot;&gt;LRU (最近最少使用) 缓存&lt;/a&gt; 约束的数据结构。&lt;/p&gt;
&lt;p&gt;实现 &lt;code&gt;LRUCache&lt;/code&gt; 类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;LRUCache(int capacity)&lt;/code&gt; 以 &lt;strong&gt;正整数&lt;/strong&gt; 作为容量 &lt;code&gt;capacity&lt;/code&gt; 初始化 LRU 缓存&lt;/li&gt;
&lt;li&gt;&lt;code&gt;int get(int key)&lt;/code&gt; 如果关键字 &lt;code&gt;key&lt;/code&gt; 存在于缓存中，则返回关键字的值，否则返回 &lt;code&gt;-1&lt;/code&gt; 。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;void put(int key, int value)&lt;/code&gt; 如果关键字 &lt;code&gt;key&lt;/code&gt; 已经存在，则变更其数据值 &lt;code&gt;value&lt;/code&gt; ；如果不存在，则向缓存中插入该组 &lt;code&gt;key-value&lt;/code&gt; 。如果插入操作导致关键字数量超过 &lt;code&gt;capacity&lt;/code&gt; ，则应该 &lt;strong&gt;逐出&lt;/strong&gt; 最久未使用的关键字。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;函数 &lt;code&gt;get&lt;/code&gt; 和 &lt;code&gt;put&lt;/code&gt; 必须以 &lt;code&gt;O(1)&lt;/code&gt; 的平均时间复杂度运行。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入
[&amp;quot;LRUCache&amp;quot;, &amp;quot;put&amp;quot;, &amp;quot;put&amp;quot;, &amp;quot;get&amp;quot;, &amp;quot;put&amp;quot;, &amp;quot;get&amp;quot;, &amp;quot;put&amp;quot;, &amp;quot;get&amp;quot;, &amp;quot;get&amp;quot;, &amp;quot;get&amp;quot;]
[[2], [1, 1], [2, 2], [1], [3, 3], [2], [4, 4], [1], [3], [4]]
输出
[null, null, null, 1, null, -1, null, -1, 3, 4]
解释
LRUCache lRUCache = new LRUCache(2);
lRUCache.put(1, 1); // 缓存是 &amp;#123;1=1&amp;#125;
lRUCache.put(2, 2); // 缓存是 &amp;#123;1=1, 2=2&amp;#125;
lRUCache.get(1);    // 返回 1
lRUCache.put(3, 3); // 该操作会使得关键字 2 作废，缓存是 &amp;#123;1=1, 3=3&amp;#125;
lRUCache.get(2);    // 返回 -1 (未找到)
lRUCache.put(4, 4); // 该操作会使得关键字 1 作废，缓存是 &amp;#123;4=4, 3=3&amp;#125;
lRUCache.get(1);    // 返回 -1 (未找到)
lRUCache.get(3);    // 返回 3
lRUCache.get(4);    // 返回 4
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;提示：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= capacity &amp;lt;= 3000&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;0 &amp;lt;= key &amp;lt;= 10000&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;0 &amp;lt;= value &amp;lt;= 105&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;最多调用 &lt;code&gt;2 * 105&lt;/code&gt; 次 &lt;code&gt;get&lt;/code&gt; 和 &lt;code&gt;put&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;没啥说的，考记忆力，考原理&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;95&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; LRUCache &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	Size &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	Cap &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	Cache &lt;span class=&quot;keyword&quot;&gt;map&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;]*Node&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	head, tail *Node&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; Node &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	k, v &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	pre, nxt *Node&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;InitNode&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(k, v &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; *Node &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;amp;Node&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		k: k,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		v: v,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Constructor&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(capacity &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; LRUCache &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// 定义头尾 dummy 节点&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	l := LRUCache&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		Cap: capacity,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		head: InitNode(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		tail: InitNode(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		Cache: &lt;span class=&quot;keyword&quot;&gt;map&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;]*Node&amp;#123;&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	l.head.nxt = l.tail&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	l.tail.pre = l.head&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; l&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(this *LRUCache)&lt;/span&gt;&lt;/span&gt; Get(key &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;) &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; _, ok := this.Cache[key]; !ok &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	node := this.Cache[key]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	this.move2Head(node)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; node.v&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(this *LRUCache)&lt;/span&gt;&lt;/span&gt; Put(key &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;, value &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// 不存在就加入，加入后判断是否超量，超量队尾 pop&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; _, ok := this.Cache[key]; !ok &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		node := InitNode(key, value)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		this.Cache[key] = node&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		this.add2Head(node)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		this.Size += &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; this.Size &amp;gt; this.Cap &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			removed := this.removeTail()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;built_in&quot;&gt;delete&lt;/span&gt;(this.Cache, removed.k)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			this.Size -= &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		node := this.Cache[key]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// 更新 kv&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		node.v = value&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		this.move2Head(node)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(this *LRUCache)&lt;/span&gt;&lt;/span&gt; add2Head(node *Node) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// 头结点是入口节点，不算数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	node.pre = this.head&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	node.nxt = this.head.nxt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	this.head.nxt.pre = node&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	this.head.nxt = node&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(this *LRUCache)&lt;/span&gt;&lt;/span&gt; removeNode(node *Node) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	node.pre.nxt = node.nxt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	node.nxt.pre = node.pre&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(this *LRUCache)&lt;/span&gt;&lt;/span&gt; move2Head(node *Node) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	this.removeNode(node)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	this.add2Head(node)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(this *LRUCache)&lt;/span&gt;&lt;/span&gt; removeTail() *Node &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	node := this.tail.pre&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	this.removeNode(node)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; node&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;* Your LRUCache object will be instantiated and called as such:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;* obj := Constructor(capacity);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;* param_1 := obj.Get(key);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;* obj.Put(key,value);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span</summary>
        
      
    
    
    
    <category term="面试" scheme="https://bishoptylaor.github.io/categories/interview/"/>
    
    <category term="刷题" scheme="https://bishoptylaor.github.io/categories/interview/juan/"/>
    
    <category term="NeetCode150" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/"/>
    
    <category term="Linked List" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/linked-list/"/>
    
    
  </entry>
  
  <entry>
    <title>Leetcode.25. K 个一组翻转链表</title>
    <link href="https://bishoptylaor.github.io/interview/juan/neet150/linked-list/leet-25-reverse-nodes-in-k-group/"/>
    <id>https://bishoptylaor.github.io/interview/juan/neet150/linked-list/leet-25-reverse-nodes-in-k-group/</id>
    <published>2024-05-27T14:04:19.000Z</published>
    <updated>2024-07-12T14:15:22.485Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://leetcode.cn/problems/reverse-nodes-in-k-group/&quot;&gt;25. K 个一组翻转链表&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;给你链表的头节点 &lt;code&gt;head&lt;/code&gt; ，每 &lt;code&gt;k&lt;/code&gt; 个节点一组进行翻转，请你返回修改后的链表。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;k&lt;/code&gt; 是一个正整数，它的值小于或等于链表的长度。如果节点总数不是 &lt;code&gt;k&lt;/code&gt; 的整数倍，那么请将最后剩余的节点保持原有顺序。&lt;/p&gt;
&lt;p&gt;你不能只是单纯的改变节点内部的值，而是需要实际进行节点交换。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例 1：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://assets.leetcode.com/uploads/2020/10/03/reverse_ex1.jpg&quot;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：head = [1,2,3,4,5], k = 2
输出：[2,1,4,3,5]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;示例 2：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://assets.leetcode.com/uploads/2020/10/03/reverse_ex2.jpg&quot;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：head = [1,2,3,4,5], k = 3
输出：[3,2,1,4,5]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;提示：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;链表中的节点数目为 &lt;code&gt;n&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= k &amp;lt;= n &amp;lt;= 5000&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;0 &amp;lt;= Node.val &amp;lt;= 1000&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;进阶：&lt;/strong&gt;你可以设计一个只用 &lt;code&gt;O(1)&lt;/code&gt; 额外内存空间的算法解决此问题吗？&lt;/p&gt;
&lt;p&gt;解法： 按照题目标准解题即可，注意其中一段的翻转相关条件&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;* Definition for singly-linked list.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;* type ListNode struct &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;	* Val int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;	* Next *ListNode&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;* &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;reverseKGroup&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(head *ListNode, k &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; *ListNode &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	poi := &amp;amp;ListNode&amp;#123;Next: head&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	pre := poi&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; head != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		tail := pre&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i:=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i&amp;lt;k; i++ &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			tail = tail.Next&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; tail == &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; poi.Next&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		next := tail.Next&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		head, tail = reverse(head, tail)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		pre.Next = head&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		tail.Next = next&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		pre = tail&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		head = tail.Next&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; poi.Next&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;reverse&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(start, end *ListNode)&lt;/span&gt;&lt;/span&gt; (*ListNode, *ListNode) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	pre := end.Next&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	cur := start&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; pre != end &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		next := cur.Next&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		cur.Next = pre&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		pre = cur&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		cur = next&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; end, start&lt;/span&gt;&lt;br&gt;&lt;span</summary>
        
      
    
    
    
    <category term="面试" scheme="https://bishoptylaor.github.io/categories/interview/"/>
    
    <category term="刷题" scheme="https://bishoptylaor.github.io/categories/interview/juan/"/>
    
    <category term="NeetCode150" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/"/>
    
    <category term="Linked List" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/linked-list/"/>
    
    
  </entry>
  
  <entry>
    <title>Leetcode.Plus.490. 迷宫</title>
    <link href="https://bishoptylaor.github.io/interview/juan/bytedance-common-alg/leet-490-the-maze/"/>
    <id>https://bishoptylaor.github.io/interview/juan/bytedance-common-alg/leet-490-the-maze/</id>
    <published>2024-05-27T12:10:28.000Z</published>
    <updated>2024-06-04T12:53:43.625Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://leetcode.cn/problems/the-maze/&quot;&gt;Leetcode.Plus.490. 迷宫&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;由空地（用 &lt;code&gt;0&lt;/code&gt; 表示）和墙（用 &lt;code&gt;1&lt;/code&gt; 表示）组成的迷宫 &lt;code&gt;maze&lt;/code&gt; 中有一个球。球可以途经空地向 &lt;strong&gt;上、下、左、右&lt;/strong&gt; 四个方向滚动，且在遇到墙壁前不会停止滚动。当球停下时，可以选择向下一个方向滚动。&lt;/p&gt;
&lt;p&gt;给你一个大小为 &lt;code&gt;m x n&lt;/code&gt; 的迷宫 &lt;code&gt;maze&lt;/code&gt; ，以及球的初始位置 &lt;code&gt;start&lt;/code&gt; 和目的地 &lt;code&gt;destination&lt;/code&gt; ，其中 &lt;code&gt;start = [startrow, startcol]&lt;/code&gt; 且 &lt;code&gt;destination = [destinationrow, destinationcol]&lt;/code&gt; 。请你判断球能否在目的地停下：如果可以，返回 &lt;code&gt;true&lt;/code&gt; ；否则，返回 &lt;code&gt;false&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;你可以 &lt;strong&gt;假定迷宫的边缘都是墙壁&lt;/strong&gt;（参考示例）。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例 1：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://assets.leetcode.com/uploads/2021/03/31/maze1-1-grid.jpg&quot;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：maze = [[0,0,1,0,0],[0,0,0,0,0],[0,0,0,1,0],[1,1,0,1,1],[0,0,0,0,0]], start = [0,4], destination = [4,4]
输出：true
解释：一种可能的路径是 : 左 -&amp;gt; 下 -&amp;gt; 左 -&amp;gt; 下 -&amp;gt; 右 -&amp;gt; 下 -&amp;gt; 右。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;示例 2：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://assets.leetcode.com/uploads/2021/03/31/maze1-2-grid.jpg&quot;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：maze = [[0,0,1,0,0],[0,0,0,0,0],[0,0,0,1,0],[1,1,0,1,1],[0,0,0,0,0]], start = [0,4], destination = [3,2]
输出：false
解释：不存在能够使球停在目的地的路径。注意，球可以经过目的地，但无法在那里停驻。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;示例 3：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：maze = [[0,0,0,0,0],[1,1,0,0,1],[0,0,0,0,0],[0,1,0,0,1],[0,1,0,0,0]], start = [4,3], destination = [0,1]
输出：false
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;提示：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;m == maze.length&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;n == maze[i].length&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= m, n &amp;lt;= 100&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;maze[i][j]&lt;/code&gt; is &lt;code&gt;0&lt;/code&gt; or &lt;code&gt;1&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;start.length == 2&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;destination.length == 2&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;0 &amp;lt;= startrow, destinationrow &amp;lt;= m&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;0 &amp;lt;= startcol, destinationcol &amp;lt;= n&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;球和目的地都在空地上，且初始时它们不在同一位置&lt;/li&gt;
&lt;li&gt;迷宫 &lt;strong&gt;至少包括 2 块空地&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;hasPath&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(maze [][]&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;, start []&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;, destination []&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;bool&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	m, n := &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(maze), &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(maze[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	visit := &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;([][]&lt;span class=&quot;type&quot;&gt;bool&lt;/span&gt;, m)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i, _ := &lt;span class=&quot;keyword&quot;&gt;range&lt;/span&gt; visit &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	visit[i] = &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;([]&lt;span class=&quot;type&quot;&gt;bool&lt;/span&gt;, n)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; dfs &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(i,j &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	dfs = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(i, j &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// 已访问不走了&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; visit[i][j] &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// 标记&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		visit[i][j] = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; i == destination[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;] &amp;amp;&amp;amp; j == destination[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;] &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;comment&quot;&gt;// 到达&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		up := i&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		down := i+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		left := j&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		right := j+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// 分别从四个方向走到底&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; right &amp;lt; n &amp;amp;&amp;amp; maze[i][right] == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			right ++&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// 走到底之后在前一个节点重新出发&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		dfs(i, right&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; left&amp;gt;=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;amp;&amp;amp; maze[i][left] == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			left --&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		dfs(i, left+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; up &amp;gt;= &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;amp;&amp;amp; maze[up][j] == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			up --&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		dfs(up+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, j)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; down &amp;lt; m &amp;amp;&amp;amp; maze[down][j] == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			down ++&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		dfs(down&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;, j)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	dfs(start[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;], start[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// 仅标记，dfs 为添加返回值，按照逻辑验证终点是否可达即可&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; visit[destination[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]][destination[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]] == &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span</summary>
        
      
    
    
    
    <category term="面试" scheme="https://bishoptylaor.github.io/categories/interview/"/>
    
    <category term="刷题" scheme="https://bishoptylaor.github.io/categories/interview/juan/"/>
    
    <category term="字节常见题" scheme="https://bishoptylaor.github.io/categories/interview/juan/bytedance-common-alg/"/>
    
    
  </entry>
  
  <entry>
    <title>Leetcode.581 最短无序连续子数组</title>
    <link href="https://bishoptylaor.github.io/interview/juan/bytedance-common-alg/leet-581-shortest-unsorted-continuous-subarray/"/>
    <id>https://bishoptylaor.github.io/interview/juan/bytedance-common-alg/leet-581-shortest-unsorted-continuous-subarray/</id>
    <published>2024-05-27T02:38:01.000Z</published>
    <updated>2024-06-04T12:53:43.625Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://leetcode.cn/problems/shortest-unsorted-continuous-subarray/&quot;&gt;Leetcode.581 最短无序连续子数组&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;给你一个整数数组 &lt;code&gt;nums&lt;/code&gt; ，你需要找出一个 &lt;strong&gt;连续子数组&lt;/strong&gt; ，如果对这个子数组进行升序排序，那么整个数组都会变为升序排序。&lt;/p&gt;
&lt;p&gt;请你找出符合题意的 &lt;strong&gt;最短&lt;/strong&gt; 子数组，并输出它的长度。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例 1：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;**输入：**nums = [2,6,4,8,10,9,15]
**输出：**5
**解释：**你只需要对 [6, 4, 8, 10, 9] 进行升序排序，那么整个表都会变为升序排序。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;示例 2：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;**输入：**nums = [1,2,3,4]
**输出：**0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;示例 3：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;**输入：**nums = [1]
**输出：**0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;提示：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= nums.length &amp;lt;= 104&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-105 &amp;lt;= nums[i] &amp;lt;= 105&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;进阶：&lt;/strong&gt;你可以设计一个时间复杂度为 &lt;code&gt;O(n)&lt;/code&gt; 的解决方案吗？&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;常规思路&lt;/strong&gt;&lt;br&gt;和排序后的数组进行比较即可&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;findUnsortedSubarray&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(nums []&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; sort.IntsAreSorted(nums) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	numsSorted := &lt;span class=&quot;built_in&quot;&gt;append&lt;/span&gt;([]&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;&amp;#123;&amp;#125;, nums...)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	sort.Ints(numsSorted)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	left, right := &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(nums)&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; nums[left] == numsSorted[left] &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		left++&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; nums[right] == numsSorted[right] &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		right--&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; right - left + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;一次遍历的话，先观察示例，从左往右看，数字应该是递增的，如果发现当前数字比前一个小，说明这个数字不符合条件，需要把边界更新到这里，同时更新已经遍历过的 max 数值，当某个 idx 之后，边界不再更新，根据我们设定的条件，这个 idx 右边的数应该都比 max 要大，这个 idx 比 max 要小，所以这个就是符合条件的右边界。同理，找到左边界。&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;findUnsortedSubarray&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(nums []&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	right, left := &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// 注意 max 从 min起始；min 从 max 起始&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	maxn, minn := math.MinInt64, math.MaxInt64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	n := &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(nums)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i:=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i&amp;lt;n; i++ &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; nums[i] &amp;lt; maxn &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			right = i&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			maxn = nums[i]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// i 对位的位置&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; minn &amp;lt; nums[n&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;-i] &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			left = n&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt; - i&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			minn = nums[n&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;-i]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// 本身有序&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; right == &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; right - left + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span</summary>
        
      
    
    
    
    <category term="面试" scheme="https://bishoptylaor.github.io/categories/interview/"/>
    
    <category term="刷题" scheme="https://bishoptylaor.github.io/categories/interview/juan/"/>
    
    <category term="字节常见题" scheme="https://bishoptylaor.github.io/categories/interview/juan/bytedance-common-alg/"/>
    
    
  </entry>
  
  <entry>
    <title>what-happens-when</title>
    <link href="https://bishoptylaor.github.io/library/what-happens-when/"/>
    <id>https://bishoptylaor.github.io/library/what-happens-when/</id>
    <published>2024-05-24T15:45:32.000Z</published>
    <updated>2024-05-26T09:24:30.256Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;What-happens-when 的中文翻译，原仓库 &lt;a href=&quot;https://github.com/alex/what-happens-when&quot;&gt;https://github.com/alex/what-happens-when&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;按下”g”键&quot;&gt;&lt;a href=&quot;#按下”g”键&quot; class=&quot;headerlink&quot; title=&quot;按下”g”键&quot;&gt;&lt;/a&gt;按下”g”键&lt;/h2&gt;&lt;p&gt;接下来的内容介绍了物理键盘和系统中断的工作原理，但是有一部分内容却没有涉及。当你按下“g”键，浏览器接收到这个消息之后，会触发自动完成机制。浏览器根据自己的算法，以及你是否处于隐私浏览模式，会在浏览器的地址框下方给出输入建议。大部分算法会优先考虑根据你的搜索历史和书签等内容给出建议。你打算输入 “google.com”，因此给出的建议并不匹配。但是输入过程中仍然有大量的代码在后台运行，你的每一次按键都会使得给出的建议更加准确。甚至有可能在你输入之前，浏览器就将 “google.com” 建议给你。&lt;/p&gt;
&lt;h2 id=&quot;回车键按下&quot;&gt;&lt;a href=&quot;#回车键按下&quot; class=&quot;headerlink&quot; title=&quot;回车键按下&quot;&gt;&lt;/a&gt;回车键按下&lt;/h2&gt;&lt;p&gt;为了从零开始，我们选择键盘上的回车键被按到最低处作为起点。在这个时刻，一个专用于回车键的电流回路被直接地或者通过电容器间接地闭合了，使得少量的电流进入了键盘的逻辑电路系统。这个系统会扫描每个键的状态，对于按键开关的电位弹跳变化进行噪音消除(debounce)，并将其转化为键盘码值。在这里，回车的码值是13。键盘控制器在得到码值之后，将其编码，用于之后的传输。现在这个传输过程几乎都是通过通用串行总线(USB)或者蓝牙(Bluetooth)来进行的，以前是通过PS&amp;#x2F;2或者ADB连接进行。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;USB键盘：&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;键盘的USB元件通过计算机上的USB接口与USB控制器相连接，USB接口中的第一号针为它提供了5V的电压&lt;/li&gt;
&lt;li&gt;键码值存储在键盘内部电路一个叫做”endpoint”的寄存器内&lt;/li&gt;
&lt;li&gt;USB控制器大概每隔10ms便查询一次”endpoint”以得到存储的键码值数据，这个最短时间间隔由键盘提供&lt;/li&gt;
&lt;li&gt;键值码值通过USB串行接口引擎被转换成一个或者多个遵循低层USB协议的USB数据包&lt;/li&gt;
&lt;li&gt;这些数据包通过D+针或者D-针(中间的两个针)，以最高1.5Mb&amp;#x2F;s的速度从键盘传输至计算机。速度限制是因为人机交互设备总是被声明成”低速设备”（USB 2.0 compliance）&lt;/li&gt;
&lt;li&gt;这个串行信号在计算机的USB控制器处被解码，然后被人机交互设备通用键盘驱动进行进一步解释。之后按键的码值被传输到操作系统的硬件抽象层&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;虚拟键盘（触屏设备）：&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在现代电容屏上，当用户把手指放在屏幕上时，一小部分电流从传导层的静电域经过手指传导，形成了一个回路，使得屏幕上触控的那一点电压下降，屏幕控制器产生一个中断，报告这次“点击”的坐标&lt;/li&gt;
&lt;li&gt;然后移动操作系统通知当前活跃的应用，有一个点击事件发生在它的某个GUI部件上了，现在这个部件是虚拟键盘的按钮&lt;/li&gt;
&lt;li&gt;虚拟键盘引发一个软中断，返回给OS一个“按键按下”消息&lt;/li&gt;
&lt;li&gt;这个消息又返回来向当前活跃的应用通知一个“按键按下”事件&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;产生中断-非USB键盘&quot;&gt;&lt;a href=&quot;#产生中断-非USB键盘&quot; class=&quot;headerlink&quot; title=&quot;产生中断[非USB键盘]&quot;&gt;&lt;/a&gt;产生中断[非USB键盘]&lt;/h2&gt;&lt;p&gt;键盘在它的中断请求线(IRQ)上发送信号，信号会被中断控制器映射到一个中断向量，实际上就是一个整型数 。CPU使用中断描述符表(IDT)把中断向量映射到对应函数，这些函数被称为中断处理器，它们由操作系统内核提供。当一个中断到达时，CPU根据IDT和中断向量索引到对应的中断处理器，然后操作系统内核出场了。&lt;/p&gt;
&lt;h2 id=&quot;Windows-一个-WM-KEYDOWN-消息被发往应用程序&quot;&gt;&lt;a href=&quot;#Windows-一个-WM-KEYDOWN-消息被发往应用程序&quot; class=&quot;headerlink&quot; title=&quot;(Windows)一个 WM_KEYDOWN 消息被发往应用程序&quot;&gt;&lt;/a&gt;(Windows)一个 &lt;code&gt;WM_KEYDOWN&lt;/code&gt; 消息被发往应用程序&lt;/h2&gt;&lt;p&gt;HID把键盘按下的事件传送给 &lt;code&gt;KBDHID.sys&lt;/code&gt; 驱动，把HID的信号转换成一个扫描码(Scancode)，这里回车的扫描码是 &lt;code&gt;VK_RETURN(0x0d)&lt;/code&gt;。 &lt;code&gt;KBDHID.sys&lt;/code&gt; 驱动和 &lt;code&gt;KBDCLASS.sys&lt;/code&gt; (键盘类驱动,keyboard class driver)进行交互，这个驱动负责安全地处理所有键盘和小键盘的输入事件。之后它又去调用 &lt;code&gt;Win32K.sys&lt;/code&gt; ，在这之前有可能把消息传递给安装的第三方键盘过滤器。这些都是发生在内核模式。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Win32K.sys&lt;/code&gt; 通过 &lt;code&gt;GetForegroundWindow()&lt;/code&gt; API函数找到当前哪个窗口是活跃的。这个API函数提供了当前浏览器的地址栏的句柄。Windows系统的”message pump”机制调用 &lt;code&gt;SendMessage(hWnd, WM_KEYDOWN, VK_RETURN, lParam)&lt;/code&gt; 函数， &lt;code&gt;lParam&lt;/code&gt; 是一个用来指示这个按键的更多信息的掩码，这些信息包括按键重复次数（这里是0），实际扫描码（可能依赖于OEM厂商，不过通常不会是 &lt;code&gt;VK_RETURN&lt;/code&gt; ），功能键（alt, shift, ctrl）是否被按下（在这里没有），以及一些其他状态。&lt;/p&gt;
&lt;p&gt;Windows的 &lt;code&gt;SendMessage&lt;/code&gt; API直接将消息添加到特定窗口句柄 &lt;code&gt;hWnd&lt;/code&gt; 的消息队列中，之后赋给 &lt;code&gt;hWnd&lt;/code&gt; 的主要消息处理函数 &lt;code&gt;WindowProc&lt;/code&gt; 将会被调用，用于处理队列中的消息。&lt;/p&gt;
&lt;p&gt;当前活跃的句柄 &lt;code&gt;hWnd&lt;/code&gt; 实际上是一个edit control控件，这种情况下，&lt;code&gt;WindowProc&lt;/code&gt; 有一个用于处理 &lt;code&gt;WM_KEYDOWN&lt;/code&gt; 消息的处理器，这段代码会查看 &lt;code&gt;SendMessage&lt;/code&gt; 传入的第三个参数 &lt;code&gt;wParam&lt;/code&gt; ，因为这个参数是 &lt;code&gt;VK_RETURN&lt;/code&gt; ，于是它知道用户按下了回车键。&lt;/p&gt;
&lt;h2 id=&quot;Mac-OS-X-一个-KeyDown-NSEvent被发往应用程序&quot;&gt;&lt;a href=&quot;#Mac-OS-X-一个-KeyDown-NSEvent被发往应用程序&quot; class=&quot;headerlink&quot; title=&quot;(Mac OS X)一个 KeyDown NSEvent被发往应用程序&quot;&gt;&lt;/a&gt;(Mac OS X)一个 &lt;code&gt;KeyDown&lt;/code&gt; NSEvent被发往应用程序&lt;/h2&gt;&lt;p&gt;中断信号引发了I&amp;#x2F;O Kit Kext键盘驱动的中断处理事件，驱动把信号翻译成键码值，然后传给OS X的 &lt;code&gt;WindowServer&lt;/code&gt; 进程。然后， &lt;code&gt;WindowServer&lt;/code&gt; 将这个事件通过Mach端口分发给合适的（活跃的，或者正在监听的）应用程序，这个信号会被放到应用程序的消息队列里。队列中的消息可以被拥有足够高权限的线程使用 &lt;code&gt;mach_ipc_dispatch&lt;/code&gt; 函数读取到。这个过程通常是由 &lt;code&gt;NSApplication&lt;/code&gt; 主事件循环产生并且处理的，通过 &lt;code&gt;NSEventType&lt;/code&gt; 为 &lt;code&gt;KeyDown&lt;/code&gt; 的 &lt;code&gt;NSEvent&lt;/code&gt; 。&lt;/p&gt;
&lt;h2 id=&quot;GNU-x2F-Linux-Xorg-服务器监听键码值&quot;&gt;&lt;a href=&quot;#GNU-x2F-Linux-Xorg-服务器监听键码值&quot; class=&quot;headerlink&quot; title=&quot;(GNU&amp;#x2F;Linux)Xorg 服务器监听键码值&quot;&gt;&lt;/a&gt;(GNU&amp;#x2F;Linux)Xorg 服务器监听键码值&lt;/h2&gt;&lt;p&gt;当使用图形化的 X Server 时，X Server 会按照特定的规则把键码值再一次映射，映射成扫描码。当这个映射过程完成之后， X Server 把这个按键字符发送给窗口管理器(DWM，metacity, i3等等)，窗口管理器再把字符发送给当前窗口。当前窗口使用有关图形API把文字打印在输入框内。&lt;/p&gt;
&lt;h2 id=&quot;解析URL&quot;&gt;&lt;a href=&quot;#解析URL&quot; class=&quot;headerlink&quot; title=&quot;解析URL&quot;&gt;&lt;/a&gt;解析URL&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;浏览器通过 URL 能够知道下面的信息：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;Protocol&lt;/code&gt; “http”&lt;/p&gt;
&lt;p&gt;  使用HTTP协议&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;Resource&lt;/code&gt; “&amp;#x2F;“&lt;/p&gt;
&lt;p&gt;  请求的资源是主页(index)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;输入的是-URL-还是搜索的关键字？&quot;&gt;&lt;a href=&quot;#输入的是-URL-还是搜索的关键字？&quot; class=&quot;headerlink&quot; title=&quot;输入的是 URL 还是搜索的关键字？&quot;&gt;&lt;/a&gt;输入的是 URL 还是搜索的关键字？&lt;/h2&gt;&lt;p&gt;当协议或主机名不合法时，浏览器会将地址栏中输入的文字传给默认的搜索引擎。大部分情况下，在把文字传递给搜索引擎的时候，URL会带有特定的一串字符，用来告诉搜索引擎这次搜索来自这个特定浏览器。&lt;/p&gt;
&lt;h2 id=&quot;转换非-ASCII-的-Unicode-字符&quot;&gt;&lt;a href=&quot;#转换非-ASCII-的-Unicode-字符&quot; class=&quot;headerlink&quot; title=&quot;转换非 ASCII 的 Unicode 字符&quot;&gt;&lt;/a&gt;转换非 ASCII 的 Unicode 字符&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;浏览器检查输入是否含有不是 &lt;code&gt;a-z&lt;/code&gt;， &lt;code&gt;A-Z&lt;/code&gt;，&lt;code&gt;0-9&lt;/code&gt;， &lt;code&gt;-&lt;/code&gt; 或者 &lt;code&gt;.&lt;/code&gt; 的字符&lt;/li&gt;
&lt;li&gt;这里主机名是 &lt;code&gt;google.com&lt;/code&gt; ，所以没有非ASCII的字符；如果有的话，浏览器会对主机名部分使用 &lt;a href=&quot;https://en.wikipedia.org/wiki/Punycode&quot;&gt;Punycode&lt;/a&gt; 编码&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;检查-HSTS-列表&quot;&gt;&lt;a href=&quot;#检查-HSTS-列表&quot; class=&quot;headerlink&quot; title=&quot;检查 HSTS 列表&quot;&gt;&lt;/a&gt;检查 HSTS 列表&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;浏览器检查自带的“预加载 HSTS（HTTP严格传输安全）”列表，这个列表里包含了那些请求浏览器只使用HTTPS进行连接的网站&lt;/li&gt;
&lt;li&gt;如果网站在这个列表里，浏览器会使用 HTTPS 而不是 HTTP 协议，否则，最初的请求会使用HTTP协议发送&lt;/li&gt;
&lt;li&gt;注意，一个网站哪怕不在 HSTS 列表里，也可以要求浏览器对自己使用 HSTS 政策进行访问。浏览器向网站发出第一个 HTTP 请求之后，网站会返回浏览器一个响应，请求浏览器只使用 HTTPS 发送请求。然而，就是这第一个 HTTP 请求，却可能会使用户受到 &lt;a href=&quot;http://en.wikipedia.org/wiki/SSL_stripping&quot;&gt;downgrade attack&lt;/a&gt; 的威胁，这也是为什么现代浏览器都预置了 HSTS 列表。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;DNS-查询&quot;&gt;&lt;a href=&quot;#DNS-查询&quot; class=&quot;headerlink&quot; title=&quot;DNS 查询&quot;&gt;&lt;/a&gt;DNS 查询&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;浏览器检查域名是否在缓存当中（要查看 Chrome 当中的缓存， 打开 chrome:&amp;#x2F;&amp;#x2F;net-internals&amp;#x2F;#dns）。&lt;/li&gt;
&lt;li&gt;如果缓存中没有，就去调用 &lt;code&gt;gethostbyname&lt;/code&gt; 库函数（操作系统不同函数也不同）进行查询。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;gethostbyname&lt;/code&gt; 函数在试图进行DNS解析之前首先检查域名是否在本地 Hosts 里，Hosts 的位置 &lt;a href=&quot;https://github.com/skyline75489/what-happens-when-zh_CN/blob/master&quot;&gt;不同的操作系统有所不同&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;如果 &lt;code&gt;gethostbyname&lt;/code&gt; 没有这个域名的缓存记录，也没有在 &lt;code&gt;hosts&lt;/code&gt; 里找到，它将会向 DNS 服务器发送一条 DNS 查询请求。DNS 服务器是由网络通信栈提供的，通常是本地路由器或者 ISP 的缓存 DNS 服务器。&lt;/li&gt;
&lt;li&gt;查询本地 DNS 服务器&lt;/li&gt;
&lt;li&gt;如果 DNS 服务器和我们的主机在同一个子网内，系统会按照下面的 ARP 过程对 DNS 服务器进行 ARP查询&lt;/li&gt;
&lt;li&gt;如果 DNS 服务器和我们的主机在不同的子网，系统会按照下面的 ARP 过程对默认网关进行查询&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;ARP-过程&quot;&gt;&lt;a href=&quot;#ARP-过程&quot; class=&quot;headerlink&quot; title=&quot;ARP 过程&quot;&gt;&lt;/a&gt;ARP 过程&lt;/h2&gt;&lt;p&gt;要想发送 ARP（地址解析协议）广播，我们需要有一个目标 IP 地址，同时还需要知道用于发送 ARP 广播的接口的 MAC 地址。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;首先查询 ARP 缓存，如果缓存命中，我们返回结果：目标 IP &amp;#x3D; MAC&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果缓存没有命中：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;查看路由表，看看目标 IP 地址是不是在本地路由表中的某个子网内。是的话，使用跟那个子网相连的接口，否则使用与默认网关相连的接口。&lt;/li&gt;
&lt;li&gt;查询选择的网络接口的 MAC 地址&lt;/li&gt;
&lt;li&gt;我们发送一个二层（ &lt;a href=&quot;https://en.wikipedia.org/wiki/OSI_model&quot;&gt;OSI 模型&lt;/a&gt; 中的数据链路层）ARP 请求：&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;ARP Request&lt;/code&gt;:&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Sender MAC: interface:mac:address:here&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Sender IP: interface.ip.goes.here&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Target MAC: FF:FF:FF:FF:FF:FF (Broadcast)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Target IP: target.ip.goes.here&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;根据连接主机和路由器的硬件类型不同，可以分为以下几种情况：&lt;/p&gt;
&lt;p&gt;直连：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果我们和路由器是直接连接的，路由器会返回一个 &lt;code&gt;ARP Reply&lt;/code&gt; （见下面）。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;集线器：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果我们连接到一个集线器，集线器会把 ARP 请求向所有其它端口广播，如果路由器也“连接”在其中，它会返回一个 &lt;code&gt;ARP Reply&lt;/code&gt; 。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;交换机：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果我们连接到了一个交换机，交换机会检查本地 CAM&amp;#x2F;MAC 表，看看哪个端口有我们要找的那个 MAC 地址，如果没有找到，交换机会向所有其它端口广播这个 ARP 请求。&lt;/li&gt;
&lt;li&gt;如果交换机的 MAC&amp;#x2F;CAM 表中有对应的条目，交换机会向有我们想要查询的 MAC 地址的那个端口发送 ARP 请求&lt;/li&gt;
&lt;li&gt;如果路由器也“连接”在其中，它会返回一个 &lt;code&gt;ARP Reply&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;ARP Reply&lt;/code&gt;:&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Sender MAC: target:mac:address:here&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Sender IP: target.ip.goes.here&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Target MAC: interface:mac:address:here&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Target IP: interface.ip.goes.here&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;现在我们有了 DNS 服务器或者默认网关的 IP 地址，我们可以继续 DNS 请求了：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用 53 端口向 DNS 服务器发送 UDP 请求包，如果响应包太大，会使用 TCP 协议&lt;/li&gt;
&lt;li&gt;如果本地&amp;#x2F;ISP DNS 服务器没有找到结果，它会发送一个递归查询请求，一层一层向高层 DNS 服务器做查询，直到查询到起始授权机构，如果找到会把结果返回&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;使用套接字&quot;&gt;&lt;a href=&quot;#使用套接字&quot; class=&quot;headerlink&quot; title=&quot;使用套接字&quot;&gt;&lt;/a&gt;使用套接字&lt;/h2&gt;&lt;p&gt;当浏览器得到了目标服务器的 IP 地址，以及 URL 中给出来端口号（http 协议默认端口号是 80， https 默认端口号是 443），它会调用系统库函数 &lt;code&gt;socket&lt;/code&gt; ，请求一个 TCP流套接字，对应的参数是 &lt;code&gt;AF_INET/AF_INET6&lt;/code&gt; 和 &lt;code&gt;SOCK_STREAM&lt;/code&gt; 。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;这个请求首先被交给传输层，在传输层请求被封装成 TCP segment。目标端口会被加入头部，源端口会在系统内核的动态端口范围内选取（Linux下是ip_local_port_range)&lt;/li&gt;
&lt;li&gt;TCP segment 被送往网络层，网络层会在其中再加入一个 IP 头部，里面包含了目标服务器的IP地址以及本机的IP地址，把它封装成一个IP packet。&lt;/li&gt;
&lt;li&gt;这个 TCP packet 接下来会进入链路层，链路层会在封包中加入 frame 头部，里面包含了本地内置网卡的MAC地址以及网关（本地路由器）的 MAC 地址。像前面说的一样，如果内核不知道网关的 MAC 地址，它必须进行 ARP 广播来查询其地址。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;到了现在，TCP 封包已经准备好了，可以使用下面的方式进行传输：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/IEEE_802.3&quot;&gt;以太网&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/IEEE_802.11&quot;&gt;WiFi&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Cellular_data_communication_protocol&quot;&gt;蜂窝数据网络&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对于大部分家庭网络和小型企业网络来说，封包会从本地计算机出发，经过本地网络，再通过调制解调器把数字信号转换成模拟信号，使其适于在电话线路，有线电视光缆和无线电话线路上传输。在传输线路的另一端，是另外一个调制解调器，它把模拟信号转换回数字信号，交由下一个 &lt;a href=&quot;https://en.wikipedia.org/wiki/Computer_network#Network_nodes&quot;&gt;网络节点&lt;/a&gt; 处理。节点的目标地址和源地址将在后面讨论。&lt;/p&gt;
&lt;p&gt;大型企业和比较新的住宅通常使用光纤或直接以太网连接，这种情况下信号一直是数字的，会被直接传到下一个 &lt;a href=&quot;https://en.wikipedia.org/wiki/Computer_network#Network_nodes&quot;&gt;网络节点&lt;/a&gt; 进行处理。&lt;/p&gt;
&lt;p&gt;最终封包会到达管理本地子网的路由器。在那里出发，它会继续经过自治区域(autonomous system, 缩写 AS)的边界路由器，其他自治区域，最终到达目标服务器。一路上经过的这些路由器会从IP数据报头部里提取出目标地址，并将封包正确地路由到下一个目的地。IP数据报头部 time to live (TTL) 域的值每经过一个路由器就减1，如果封包的TTL变为0，或者路由器由于网络拥堵等原因封包队列满了，那么这个包会被路由器丢弃。&lt;/p&gt;
&lt;p&gt;上面的发送和接受过程在 TCP 连接期间会发生很多次：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;客户端选择一个初始序列号(ISN)，将设置了 SYN 位的封包发送给服务器端，表明自己要建立连接并设置了初始序列号&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;服务器端接收到 SYN 包，如果它可以建立连接：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;服务器端选择它自己的初始序列号&lt;/li&gt;
&lt;li&gt;服务器端设置 SYN 位，表明自己选择了一个初始序列号&lt;/li&gt;
&lt;li&gt;服务器端把 (客户端ISN + 1) 复制到 ACK 域，并且设置 ACK 位，表明自己接收到了客户端的第一个封包&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;客户端通过发送下面一个封包来确认这次连接：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;自己的序列号+1&lt;/li&gt;
&lt;li&gt;接收端 ACK+1&lt;/li&gt;
&lt;li&gt;设置 ACK 位&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;数据通过下面的方式传输：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当一方发送了N个 Bytes 的数据之后，将自己的 SEQ 序列号也增加N&lt;/li&gt;
&lt;li&gt;另一方确认接收到这个数据包（或者一系列数据包）之后，它发送一个 ACK 包，ACK 的值设置为接收到的数据包的最后一个序列号&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;关闭连接时：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;要关闭连接的一方发送一个 FIN 包&lt;/li&gt;
&lt;li&gt;另一方确认这个 FIN 包，并且发送自己的 FIN 包&lt;/li&gt;
&lt;li&gt;要关闭的一方使用 ACK 包来确认接收到了 FIN&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;TLS-握手&quot;&gt;&lt;a href=&quot;#TLS-握手&quot; class=&quot;headerlink&quot; title=&quot;TLS 握手&quot;&gt;&lt;/a&gt;TLS 握手&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;客户端发送一个 &lt;code&gt;ClientHello&lt;/code&gt; 消息到服务器端，消息中同时包含了它的 Transport Layer Security (TLS) 版本，可用的加密算法和压缩算法。&lt;/li&gt;
&lt;li&gt;服务器端向客户端返回一个 &lt;code&gt;ServerHello&lt;/code&gt; 消息，消息中包含了服务器端的TLS版本，服务器所选择的加密和压缩算法，以及数字证书认证机构（Certificate Authority，缩写 CA）签发的服务器公开证书，证书中包含了公钥。客户端会使用这个公钥加密接下来的握手过程，直到协商生成一个新的对称密钥&lt;/li&gt;
&lt;li&gt;客户端根据自己的信任CA列表，验证服务器端的证书是否可信。如果认为可信，客户端会生成一串伪随机数，使用服务器的公钥加密它。这串随机数会被用于生成新的对称密钥&lt;/li&gt;
&lt;li&gt;服务器端使用自己的私钥解密上面提到的随机数，然后使用这串随机数生成自己的对称主密钥&lt;/li&gt;
&lt;li&gt;客户端发送一个 &lt;code&gt;Finished&lt;/code&gt; 消息给服务器端，使用对称密钥加密这次通讯的一个散列值&lt;/li&gt;
&lt;li&gt;服务器端生成自己的 hash 值，然后解密客户端发送来的信息，检查这两个值是否对应。如果对应，就向客户端发送一个 &lt;code&gt;Finished&lt;/code&gt; 消息，也使用协商好的对称密钥加密&lt;/li&gt;
&lt;li&gt;从现在开始，接下来整个 TLS 会话都使用对称秘钥进行加密，传输应用层（HTTP）内容&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;HTTP-协议&quot;&gt;&lt;a href=&quot;#HTTP-协议&quot; class=&quot;headerlink&quot; title=&quot;HTTP 协议&quot;&gt;&lt;/a&gt;HTTP 协议&lt;/h2&gt;&lt;p&gt;如果浏览器是 Google 出品的，它不会使用 HTTP 协议来获取页面信息，而是会与服务器端发送请求，商讨使用 SPDY 协议。&lt;/p&gt;
&lt;p&gt;如果浏览器使用 HTTP 协议而不支持 SPDY 协议，它会向服务器发送这样的一个请求:&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;GET / HTTP/1.1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Host: google.com&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Connection: close&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[其他头部]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;“其他头部”包含了一系列的由冒号分割开的键值对，它们的格式符合HTTP协议标准，它们之间由一个换行符分割开来。（这里我们假设浏览器没有违反HTTP协议标准的bug，同时假设浏览器使用 &lt;code&gt;HTTP/1.1&lt;/code&gt; 协议，不然的话头部可能不包含 &lt;code&gt;Host&lt;/code&gt; 字段，同时 &lt;code&gt;GET&lt;/code&gt; 请求中的版本号会变成 &lt;code&gt;HTTP/1.0&lt;/code&gt; 或者 &lt;code&gt;HTTP/0.9&lt;/code&gt; 。）&lt;/p&gt;
&lt;p&gt;HTTP&amp;#x2F;1.1 定义了“关闭连接”的选项 “close”，发送者使用这个选项指示这次连接在响应结束之后会断开。例如：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Connection:close&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;不支持持久连接的 HTTP&amp;#x2F;1.1 应用必须在每条消息中都包含 “close” 选项。&lt;/p&gt;
&lt;p&gt;在发送完这些请求和头部之后，浏览器发送一个换行符，表示要发送的内容已经结束了。&lt;/p&gt;
&lt;p&gt;服务器端返回一个响应码，指示这次请求的状态，响应的形式是这样的:&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;200 OK&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[响应头部]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;然后是一个换行，接下来有效载荷(payload)，也就是 &lt;code&gt;www.google.com&lt;/code&gt; 的HTML内容。服务器下面可能会关闭连接，如果客户端请求保持连接的话，服务器端会保持连接打开，以供之后的请求重用。&lt;/p&gt;
&lt;p&gt;如果浏览器发送的HTTP头部包含了足够多的信息（例如包含了 Etag 头部），以至于服务器可以判断出，浏览器缓存的文件版本自从上次获取之后没有再更改过，服务器可能会返回这样的响应:&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;304 Not Modified&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[响应头部]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;这个响应没有有效载荷，浏览器会从自己的缓存中取出想要的内容。&lt;/p&gt;
&lt;p&gt;在解析完 HTML 之后，浏览器和客户端会重复上面的过程，直到HTML页面引入的所有资源（图片，CSS，favicon.ico等等）全部都获取完毕，区别只是头部的 &lt;code&gt;GET / HTTP/1.1&lt;/code&gt; 会变成 &lt;code&gt;GET /$(相对www.google.com的URL) HTTP/1.1&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;如果HTML引入了 &lt;code&gt;www.google.com&lt;/code&gt; 域名之外的资源，浏览器会回到上面解析域名那一步，按照下面的步骤往下一步一步执行，请求中的 &lt;code&gt;Host&lt;/code&gt; 头部会变成另外的域名。&lt;/p&gt;
&lt;h2 id=&quot;HTTP-服务器请求处理&quot;&gt;&lt;a href=&quot;#HTTP-服务器请求处理&quot; class=&quot;headerlink&quot; title=&quot;HTTP 服务器请求处理&quot;&gt;&lt;/a&gt;HTTP 服务器请求处理&lt;/h2&gt;&lt;p&gt;HTTPD(HTTP Daemon)在服务器端处理请求&amp;#x2F;响应。最常见的 HTTPD 有 Linux 上常用的 Apache 和 nginx，以及 Windows 上的 IIS。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;HTTPD 接收请求&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;服务器把请求拆分为以下几个参数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;HTTP 请求方法(&lt;code&gt;GET&lt;/code&gt;, &lt;code&gt;POST&lt;/code&gt;, &lt;code&gt;HEAD&lt;/code&gt;, &lt;code&gt;PUT&lt;/code&gt;, &lt;code&gt;DELETE&lt;/code&gt;, &lt;code&gt;CONNECT&lt;/code&gt;, &lt;code&gt;OPTIONS&lt;/code&gt;, 或者 &lt;code&gt;TRACE&lt;/code&gt;)。直接在地址栏中输入 URL 这种情况下，使用的是 GET 方法&lt;/li&gt;
&lt;li&gt;域名：google.com&lt;/li&gt;
&lt;li&gt;请求路径&amp;#x2F;页面：&amp;#x2F; (我们没有请求google.com下的指定的页面，因此 &amp;#x2F; 是默认的路径)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;服务器验证其上已经配置了 google.com 的虚拟主机&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;服务器验证 google.com 接受 GET 方法&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;服务器验证该用户可以使用 GET 方法(根据 IP 地址，身份信息等)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;如果服务器安装了 URL 重写模块（例如 Apache 的 mod_rewrite 和 IIS 的 URL Rewrite），服务器会尝试匹配重写规则，如果匹配上的话，服务器会按照规则重写这个请求&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;服务器根据请求信息获取相应的响应内容，这种情况下由于访问路径是 “&amp;#x2F;“ ,会访问首页文件（你可以重写这个规则，但是这个是最常用的）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;服务器会使用指定的处理程序分析处理这个文件，假如 Google 使用 PHP，服务器会使用 PHP 解析 index 文件，并捕获输出，把 PHP 的输出结果返回给请求者&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;浏览器背后的故事&quot;&gt;&lt;a href=&quot;#浏览器背后的故事&quot; class=&quot;headerlink&quot; title=&quot;浏览器背后的故事&quot;&gt;&lt;/a&gt;浏览器背后的故事&lt;/h2&gt;&lt;p&gt;当服务器提供了资源之后（HTML，CSS，JS，图片等），浏览器会执行下面的操作：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;解析 —— HTML，CSS，JS&lt;/li&gt;
&lt;li&gt;渲染 —— 构建 DOM 树 -&amp;gt; 渲染 -&amp;gt; 布局 -&amp;gt; 绘制&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;浏览器&quot;&gt;&lt;a href=&quot;#浏览器&quot; class=&quot;headerlink&quot; title=&quot;浏览器&quot;&gt;&lt;/a&gt;浏览器&lt;/h2&gt;&lt;p&gt;浏览器的功能是从服务器上取回你想要的资源，然后展示在浏览器窗口当中。资源通常是 HTML 文件，也可能是 PDF，图片，或者其他类型的内容。资源的位置通过用户提供的 URI(Uniform Resource Identifier) 来确定。&lt;/p&gt;
&lt;p&gt;浏览器解释和展示 HTML 文件的方法，在 HTML 和 CSS 的标准中有详细介绍。这些标准由 Web 标准组织 W3C(World Wide Web Consortium) 维护。&lt;/p&gt;
&lt;p&gt;不同浏览器的用户界面大都十分接近，有很多共同的 UI 元素：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个地址栏&lt;/li&gt;
&lt;li&gt;后退和前进按钮&lt;/li&gt;
&lt;li&gt;书签选项&lt;/li&gt;
&lt;li&gt;刷新和停止按钮&lt;/li&gt;
&lt;li&gt;主页按钮&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;浏览器高层架构&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;组成浏览器的组件有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;用户界面&lt;/strong&gt; 用户界面包含了地址栏，前进后退按钮，书签菜单等等，除了请求页面之外所有你看到的内容都是用户界面的一部分&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;浏览器引擎&lt;/strong&gt; 浏览器引擎负责让 UI 和渲染引擎协调工作&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;渲染引擎&lt;/strong&gt; 渲染引擎负责展示请求内容。如果请求的内容是 HTML，渲染引擎会解析 HTML 和 CSS，然后将内容展示在屏幕上&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;网络组件&lt;/strong&gt; 网络组件负责网络调用，例如 HTTP 请求等，使用一个平台无关接口，下层是针对不同平台的具体实现&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;UI后端&lt;/strong&gt; UI 后端用于绘制基本 UI 组件，例如下拉列表框和窗口。UI 后端暴露一个统一的平台无关的接口，下层使用操作系统的 UI 方法实现&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Javascript 引擎&lt;/strong&gt; Javascript 引擎用于解析和执行 Javascript 代码&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;数据存储&lt;/strong&gt; 数据存储组件是一个持久层。浏览器可能需要在本地存储各种各样的数据，例如 Cookie 等。浏览器也需要支持诸如 localStorage，IndexedDB，WebSQL 和 FileSystem 之类的存储机制&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;HTML-解析&quot;&gt;&lt;a href=&quot;#HTML-解析&quot; class=&quot;headerlink&quot; title=&quot;HTML 解析&quot;&gt;&lt;/a&gt;HTML 解析&lt;/h2&gt;&lt;p&gt;浏览器渲染引擎从网络层取得请求的文档，一般情况下文档会分成8kB大小的分块传输。&lt;/p&gt;
&lt;p&gt;HTML 解析器的主要工作是对 HTML 文档进行解析，生成解析树。&lt;/p&gt;
&lt;p&gt;解析树是以 DOM 元素以及属性为节点的树。DOM是文档对象模型(Document Object Model)的缩写，它是 HTML 文档的对象表示，同时也是 HTML 元素面向外部(如Javascript)的接口。树的根部是”Document”对象。整个 DOM 和 HTML 文档几乎是一对一的关系。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;解析算法&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;HTML不能使用常见的自顶向下或自底向上方法来进行分析。主要原因有以下几点:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;语言本身的“宽容”特性&lt;/li&gt;
&lt;li&gt;HTML 本身可能是残缺的，对于常见的残缺，浏览器需要有传统的容错机制来支持它们&lt;/li&gt;
&lt;li&gt;解析过程需要反复。对于其他语言来说，源码不会在解析过程中发生变化，但是对于 HTML 来说，动态代码，例如脚本元素中包含的 document.write() 方法会在源码中添加内容，也就是说，解析过程实际上会改变输入的内容&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;由于不能使用常用的解析技术，浏览器创造了专门用于解析 HTML 的解析器。解析算法在 HTML5 标准规范中有详细介绍，算法主要包含了两个阶段：标记化（tokenization）和树的构建。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;解析结束之后&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;浏览器开始加载网页的外部资源（CSS，图像，Javascript 文件等）。&lt;/p&gt;
&lt;p&gt;此时浏览器把文档标记为可交互的（interactive），浏览器开始解析处于“推迟（deferred）”模式的脚本，也就是那些需要在文档解析完毕之后再执行的脚本。之后文档的状态会变为“完成（complete）”，浏览器会触发“加载（load）”事件。&lt;/p&gt;
&lt;p&gt;注意解析 HTML 网页时永远不会出现“无效语法（Invalid Syntax）”错误，浏览器会修复所有错误内容，然后继续解析。&lt;/p&gt;
&lt;h2 id=&quot;CSS-解析&quot;&gt;&lt;a href=&quot;#CSS-解析&quot; class=&quot;headerlink&quot; title=&quot;CSS 解析&quot;&gt;&lt;/a&gt;CSS 解析&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;根据 &lt;a href=&quot;http://www.w3.org/TR/CSS2/grammar.html&quot;&gt;CSS词法和句法&lt;/a&gt; 分析CSS文件和 &lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt; 标签包含的内容以及 style 属性的值&lt;/li&gt;
&lt;li&gt;每个CSS文件都被解析成一个样式表对象（&lt;code&gt;StyleSheet object&lt;/code&gt;），这个对象里包含了带有选择器的CSS规则，和对应CSS语法的对象&lt;/li&gt;
&lt;li&gt;CSS解析器可能是自顶向下的，也可能是使用解析器生成器生成的自底向上的解析器&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;页面渲染&quot;&gt;&lt;a href=&quot;#页面渲染&quot; class=&quot;headerlink&quot; title=&quot;页面渲染&quot;&gt;&lt;/a&gt;页面渲染&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;通过遍历DOM节点树创建一个“Frame 树”或“渲染树”，并计算每个节点的各个CSS样式值&lt;/li&gt;
&lt;li&gt;通过累加子节点的宽度，该节点的水平内边距(padding)、边框(border)和外边距(margin)，自底向上的计算”Frame 树”中每个节点的首选(preferred)宽度&lt;/li&gt;
&lt;li&gt;通过自顶向下的给每个节点的子节点分配可行宽度，计算每个节点的实际宽度&lt;/li&gt;
&lt;li&gt;通过应用文字折行、累加子节点的高度和此节点的内边距(padding)、边框(border)和外边距(margin)，自底向上的计算每个节点的高度&lt;/li&gt;
&lt;li&gt;使用上面的计算结果构建每个节点的坐标&lt;/li&gt;
&lt;li&gt;当存在元素使用 &lt;code&gt;floated&lt;/code&gt;，位置有 &lt;code&gt;absolutely&lt;/code&gt; 或 &lt;code&gt;relatively&lt;/code&gt; 属性的时候，会有更多复杂的计算，详见&lt;a href=&quot;http://dev.w3.org/csswg/css2/&quot;&gt;http://dev.w3.org/csswg/css2/&lt;/a&gt; 和 &lt;a href=&quot;http://www.w3.org/Style/CSS/current-work&quot;&gt;http://www.w3.org/Style/CSS/current-work&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;创建layer(层)来表示页面中的哪些部分可以成组的被绘制，而不用被重新栅格化处理。每个帧对象都被分配给一个层&lt;/li&gt;
&lt;li&gt;页面上的每个层都被分配了纹理(?)&lt;/li&gt;
&lt;li&gt;每个层的帧对象都会被遍历，计算机执行绘图命令绘制各个层，此过程可能由CPU执行栅格化处理，或者直接通过D2D&amp;#x2F;SkiaGL在GPU上绘制&lt;/li&gt;
&lt;li&gt;上面所有步骤都可能利用到最近一次页面渲染时计算出来的各个值，这样可以减少不少计算量&lt;/li&gt;
&lt;li&gt;计算出各个层的最终位置，一组命令由 Direct3D&amp;#x2F;OpenGL发出，GPU命令缓冲区清空，命令传至GPU并异步渲染，帧被送到Window Server。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;GPU-渲染&quot;&gt;&lt;a href=&quot;#GPU-渲染&quot; class=&quot;headerlink&quot; title=&quot;GPU 渲染&quot;&gt;&lt;/a&gt;GPU 渲染&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;在渲染过程中，图形处理层可能使用通用用途的 &lt;code&gt;CPU&lt;/code&gt;，也可能使用图形处理器 &lt;code&gt;GPU&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;当使用 &lt;code&gt;GPU&lt;/code&gt; 用于图形渲染时，图形驱动软件会把任务分成多个部分，这样可以充分利用 &lt;code&gt;GPU&lt;/code&gt; 强大的并行计算能力，用于在渲染过程中进行大量的浮点计算。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Window-Server&quot;&gt;&lt;a href=&quot;#Window-Server&quot; class=&quot;headerlink&quot; title=&quot;Window Server&quot;&gt;&lt;/a&gt;Window Server&lt;/h2&gt;&lt;h2 id=&quot;后期渲染与用户引发的处理&quot;&gt;&lt;a href=&quot;#后期渲染与用户引发的处理&quot; class=&quot;headerlink&quot; title=&quot;后期渲染与用户引发的处理&quot;&gt;&lt;/a&gt;后期渲染与用户引发的处理&lt;/h2&gt;&lt;p&gt;渲染结束后，浏览器根据某些时间机制运行JavaScript代码(比如Google</summary>
        
      
    
    
    
    <category term="知识库" scheme="https://bishoptylaor.github.io/categories/library/"/>
    
    
  </entry>
  
  <entry>
    <title>Golang Container.Heap 使用</title>
    <link href="https://bishoptylaor.github.io/library/Golang/advanced-tutorial/go-container-heap/"/>
    <id>https://bishoptylaor.github.io/library/Golang/advanced-tutorial/go-container-heap/</id>
    <published>2024-05-24T13:35:41.000Z</published>
    <updated>2024-05-24T14:56:45.169Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; hp []*ListNode &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(h hp)&lt;/span&gt;&lt;/span&gt; Len() &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &amp;#123; &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(h) &amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(h hp)&lt;/span&gt;&lt;/span&gt; Less(i, j &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;) &lt;span class=&quot;type&quot;&gt;bool&lt;/span&gt; &amp;#123; &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; h[i].Val &amp;lt; h[j].Val &amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(h hp)&lt;/span&gt;&lt;/span&gt; Swap(i, j &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;) &amp;#123; h[i], h[j] = h[j], h[i] &amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(h *hp)&lt;/span&gt;&lt;/span&gt; Push(v any) &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	*h = &lt;span class=&quot;built_in&quot;&gt;append&lt;/span&gt;(*h, v.(*ListNode)) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(h *hp)&lt;/span&gt;&lt;/span&gt; Pop() any &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	a := *h&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	v := a[&lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(a)&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	*h = a[:&lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(a)&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; v &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;源码&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;103&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;104&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;105&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;106&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;107&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Copyright 2009 The Go Authors. All rights reserved.  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Use of this source code is governed by a BSD-style  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// license that can be found in the LICENSE file.  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Package heap provides heap operations for any type that implements  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// heap.Interface. A heap is a tree with the property that each node is the  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// minimum-valued node in its subtree.  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// The minimum element in the tree is the root, at index 0.  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// A heap is a common way to implement a priority queue. To build a priority  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// queue, implement the Heap interface with the (negative) priority as the  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// ordering for the Less method, so Push adds items while Pop removes the// highest-priority item from the queue. The Examples include such an  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// implementation; the file example_pq_test.go has the complete source.  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; heap  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;quot;sort&amp;quot;&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// The Interface type describes the requirements// for a type using the routines in this package.  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Any type that implements it may be used as a  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// min-heap with the following invariants (established after  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Init has been called or if the data is empty or sorted)://  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// !h.Less(j, i) for 0 &amp;lt;= i &amp;lt; h.Len() and 2*i+1 &amp;lt;= j &amp;lt;= 2*i+2 and j &amp;lt; h.Len()  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Note that Push and Pop in this interface are for package heap&amp;#x27;s// implementation to call. To add and remove things from the heap,  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// use heap.Push and heap.Pop.  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; Interface &lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   sort.Interface  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   Push(x &lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt;&amp;#123;&amp;#125;) &lt;span class=&quot;comment&quot;&gt;// add x as element Len()  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   Pop() &lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt;&amp;#123;&amp;#125;   &lt;span class=&quot;comment&quot;&gt;// remove and return element Len() - 1.  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Init establishes the heap invariants required by the other routines in this package.// Init is idempotent with respect to the heap invariants// and may be called whenever the heap invariants may have been invalidated.  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// The complexity is O(n) where n = h.Len().  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Init&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(h Interface)&lt;/span&gt;&lt;/span&gt; &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;comment&quot;&gt;// heapify  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   n := h.Len()  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i := n/&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; i &amp;gt;= &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i-- &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      down(h, i, n)  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Push pushes the element x onto the heap.// The complexity is O(log n) where n = h.Len().  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Push&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(h Interface, x &lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt;&amp;#123;&amp;#125;)&lt;/span&gt;&lt;/span&gt; &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   h.Push(x)  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   up(h, h.Len()&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;)  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Pop removes and returns the minimum element (according to Less) from the heap.// The complexity is O(log n) where n = h.Len().  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Pop is equivalent to Remove(h, 0).  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Pop&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(h Interface)&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt;&amp;#123;&amp;#125; &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   n := h.Len() - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   h.Swap(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, n)  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   down(h, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, n)  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; h.Pop()  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Remove removes and returns the element at index i from the heap.// The complexity is O(log n) where n = h.Len().  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Remove&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(h Interface, i &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt;&amp;#123;&amp;#125; &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   n := h.Len() - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; n != i &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      h.Swap(i, n)  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; !down(h, i, n) &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         up(h, i)  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; h.Pop()  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Fix re-establishes the heap ordering after the element at index i has changed its value.// Changing the value of the element at index i and then calling Fix is equivalent to,// but less expensive than, calling Remove(h, i) followed by a Push of the new value.// The complexity is O(log n) where n = h.Len().  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Fix&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(h Interface, i &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; !down(h, i, h.Len()) &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      up(h, i)  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;up&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(h Interface, j &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      i := (j - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) / &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;// parent  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; i == j || !h.Less(j, i) &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      h.Swap(i, j)  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      j = i  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;down&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(h Interface, i0, n &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;bool&lt;/span&gt; &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   i := i0  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      j1 := &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;*i + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; j1 &amp;gt;= n || j1 &amp;lt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;#123; &lt;span class=&quot;comment&quot;&gt;// j1 &amp;lt; 0 after int overflow  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      j := j1 &lt;span class=&quot;comment&quot;&gt;// left child  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; j2 := j1 + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; j2 &amp;lt; n &amp;amp;&amp;amp; h.Less(j2, j1) &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         j = j2 &lt;span class=&quot;comment&quot;&gt;// = 2*i + 2  // right child  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; !h.Less(j, i) &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      h.Swap(i, j)  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      i = j  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; i &amp;gt; i0  &lt;/span&gt;&lt;br&gt;&lt;span</summary>
        
      
    
    
    
    <category term="知识库" scheme="https://bishoptylaor.github.io/categories/library/"/>
    
    <category term="Golang" scheme="https://bishoptylaor.github.io/categories/library/Golang/"/>
    
    <category term="进阶教程笔记" scheme="https://bishoptylaor.github.io/categories/library/Golang/advanced-tutorial/"/>
    
    
  </entry>
  
  <entry>
    <title>k8s 面试必备 100 题</title>
    <link href="https://bishoptylaor.github.io/interview/100prob/k8s-interview-100/"/>
    <id>https://bishoptylaor.github.io/interview/100prob/k8s-interview-100/</id>
    <published>2024-05-23T16:46:31.000Z</published>
    <updated>2024-06-22T11:14:52.518Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;K8S经典面试题解析&quot;&gt;&lt;a href=&quot;#K8S经典面试题解析&quot; class=&quot;headerlink&quot; title=&quot;K8S经典面试题解析&quot;&gt;&lt;/a&gt;K8S经典面试题解析&lt;/h1&gt;&lt;h2 id=&quot;1、简述ETCD及其特点&quot;&gt;&lt;a href=&quot;#1、简述ETCD及其特点&quot; class=&quot;headerlink&quot; title=&quot;1、简述ETCD及其特点?&quot;&gt;&lt;/a&gt;1、简述ETCD及其特点?&lt;/h2&gt;&lt;p&gt;etcd是一个用于配置共享和服务发现的键值存储系统，能够为整个分布式集群存储关键数据，协助集群正常运转 服务端将配置信息存储在etcd中，客户端从etcd中得到配置信息，etcd监听配置信息的变化，发现配置变化通知到客户端 特点 - 安装、使用简单 - 数据分层存储在目录中，类似于文件系统 - watch机制 - 安装机制：支持ssl证书认证 - 高性能：etc支持2k&amp;#x2F;s的读操作 - 一致可靠：基于Raft共识算法实现数据存储、服务调用的一致性和高可用性 - Revision机制：每个key带有一个revision号，每次事物便加一。 -&lt;/p&gt;
&lt;h2 id=&quot;2、简述ETCD适应的场景&quot;&gt;&lt;a href=&quot;#2、简述ETCD适应的场景&quot; class=&quot;headerlink&quot; title=&quot;2、简述ETCD适应的场景?&quot;&gt;&lt;/a&gt;2、简述ETCD适应的场景?&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;服务发现&lt;/li&gt;
&lt;li&gt;消息发布与订阅&lt;/li&gt;
&lt;li&gt;负载均衡&lt;/li&gt;
&lt;li&gt;分布式通知与协调&lt;/li&gt;
&lt;li&gt;分布式锁&lt;/li&gt;
&lt;li&gt;集群监控与leader选举&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;3、简述什么是Kubernetes&quot;&gt;&lt;a href=&quot;#3、简述什么是Kubernetes&quot; class=&quot;headerlink&quot; title=&quot;3、简述什么是Kubernetes?&quot;&gt;&lt;/a&gt;3、简述什么是Kubernetes?&lt;/h2&gt;&lt;p&gt;k8s是一个开源的容器管理工具，负责容器部署，容器扩缩容以及负载平衡。可以说k8s是一个多容器管理解决方案。&lt;/p&gt;
&lt;h2 id=&quot;4、简述Kubernetes和Docker的关系&quot;&gt;&lt;a href=&quot;#4、简述Kubernetes和Docker的关系&quot; class=&quot;headerlink&quot; title=&quot;4、简述Kubernetes和Docker的关系?&quot;&gt;&lt;/a&gt;4、简述Kubernetes和Docker的关系?&lt;/h2&gt;&lt;p&gt;docker提供容器的生命周期管理、镜像构建运行时容器。k8s关联和编排容器在多个主机上互相通信。&lt;/p&gt;
&lt;h2 id=&quot;5、简述Kubernetes中什么是Minikube、Kubectl、Kubelet&quot;&gt;&lt;a href=&quot;#5、简述Kubernetes中什么是Minikube、Kubectl、Kubelet&quot; class=&quot;headerlink&quot; title=&quot;5、简述Kubernetes中什么是Minikube、Kubectl、Kubelet?&quot;&gt;&lt;/a&gt;5、简述Kubernetes中什么是Minikube、Kubectl、Kubelet?&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;是一种可以在本地轻松运行k8s的工具。&lt;/li&gt;
&lt;li&gt;是一个命令行工具，可以使用该工具控制Kubernetes集群管理器，如检查群集资源，创建、删除和更新组件，查看应用程序&lt;/li&gt;
&lt;li&gt;是一个代理服务，它在每个节点上运行，并使从服务器与主服务器通信&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;6、简述Kubernetes常见的部署方式&quot;&gt;&lt;a href=&quot;#6、简述Kubernetes常见的部署方式&quot; class=&quot;headerlink&quot; title=&quot;6、简述Kubernetes常见的部署方式?&quot;&gt;&lt;/a&gt;6、简述Kubernetes常见的部署方式?&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;二进制部署&lt;/li&gt;
&lt;li&gt;kubeadm&lt;/li&gt;
&lt;li&gt;源码安装部署&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;7、简述Kubernetes如何实现集群管理&quot;&gt;&lt;a href=&quot;#7、简述Kubernetes如何实现集群管理&quot; class=&quot;headerlink&quot; title=&quot;7、简述Kubernetes如何实现集群管理?&quot;&gt;&lt;/a&gt;7、简述Kubernetes如何实现集群管理?&lt;/h2&gt;&lt;p&gt;在集群管理方面，Kubernetes将集群中的机器划分为一个Master节点和一群工作节点Node。其中，在Master节点运行着集群管理相关的一组进程kube-apiserver、kube-controller-manager和kube-scheduler，这些进程实现了整个集群的资源管理、Pod调度、弹性伸缩、安全控制、系统监控和纠错等管理能力，并且都是全自动完成的&lt;/p&gt;
&lt;h2 id=&quot;8、简述Kubernetes的优势、适应场景及其特点&quot;&gt;&lt;a href=&quot;#8、简述Kubernetes的优势、适应场景及其特点&quot; class=&quot;headerlink&quot; title=&quot;8、简述Kubernetes的优势、适应场景及其特点?&quot;&gt;&lt;/a&gt;8、简述Kubernetes的优势、适应场景及其特点?&lt;/h2&gt;&lt;p&gt;优势 - 容器编排 - 轻量级 - 开源 - 弹性伸缩 - 负载均衡&lt;/p&gt;
&lt;p&gt;场景 - 快速部署 - 快速扩展 - 快速对接新的应用功能 - 优化资源，提升资源利用率&lt;/p&gt;
&lt;p&gt;特点 - 可移植 - 可扩展 - 自动化&lt;/p&gt;
&lt;h2 id=&quot;9、简述Kubernetes的缺点或当前的不足之处&quot;&gt;&lt;a href=&quot;#9、简述Kubernetes的缺点或当前的不足之处&quot; class=&quot;headerlink&quot; title=&quot;9、简述Kubernetes的缺点或当前的不足之处?&quot;&gt;&lt;/a&gt;9、简述Kubernetes的缺点或当前的不足之处?&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;安装过程和配置相对困难复杂&lt;/li&gt;
&lt;li&gt;管理服务相对繁琐&lt;/li&gt;
&lt;li&gt;运行和编译需要很多时间&lt;/li&gt;
&lt;li&gt;它比其他替代品更昂贵&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;10、简述Kubernetes相关基础概念&quot;&gt;&lt;a href=&quot;#10、简述Kubernetes相关基础概念&quot; class=&quot;headerlink&quot; title=&quot;10、简述Kubernetes相关基础概念&quot;&gt;&lt;/a&gt;10、简述Kubernetes相关基础概念&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;概念&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;Pod（Pod组）&lt;/td&gt;
&lt;td&gt;Pod是Kubernetes的最小调度单元，它可以包含一个或多个容器。容器在同一个Pod中共享网络和存储，它们之间可以通过localhost通信。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Node（节点）&lt;/td&gt;
&lt;td&gt;节点是Kubernetes集群中的一个工作机器，可以是物理机器或虚拟机。每个节点负责运行Pod中的容器，并由Master节点进行管理。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Cluster（集群）&lt;/td&gt;
&lt;td&gt;集群是由一组工作节点和一个Master节点组成的Kubernetes系统。Master节点负责整个集群的控制和管理。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Service（服务）&lt;/td&gt;
&lt;td&gt;服务是一种抽象，定义了一组Pod及其访问方式。它可以确保Pod的稳定网络标识和动态路由。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ReplicaSet&lt;/td&gt;
&lt;td&gt;ReplicaSet是用于确保在集群中运行指定数量的Pod的控制器。当Pod数目发生变化时，ReplicaSet会启动或终止Pod，以维持所需的数量。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Deployment（部署）&lt;/td&gt;
&lt;td&gt;部署是一种资源对象，它描述了应用程序的期望状态，并确保集群中的Pod数量符合这个状态。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Namespace（命名空间）&lt;/td&gt;
&lt;td&gt;命名空间用于将集群划分为多个虚拟集群，每个命名空间中的资源相互隔离。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ConfigMap和Secret&lt;/td&gt;
&lt;td&gt;ConfigMap用于将配置数据提供给应用程序，而Secret用于存储敏感信息，如密码和API密钥。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Service Discovery（服务发现）&lt;/td&gt;
&lt;td&gt;Kubernetes通过服务发现机制允许容器应用程序找到和通信其他应用程序的服务。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ingress&lt;/td&gt;
&lt;td&gt;Ingress是一种API对象，定义了从集群外部到集群内部服务的规则。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Persistent Volumes和Persistent Volume Claims&lt;/td&gt;
&lt;td&gt;Persistent Volumes（PV）提供了一种抽象，用于将存储资源与集群中的Pod分离开来。Persistent Volume Claims（PVC）是对Persistent Volumes的请求，用于绑定Pod中的存储资源。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RBAC（Role-Based Access Control）&lt;/td&gt;
&lt;td&gt;RBAC用于定义对Kubernetes资源的访问权限，以及哪些用户或服务账户可以执行哪些操作。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h2 id=&quot;11、简述Kubernetes集群相关组件&quot;&gt;&lt;a href=&quot;#11、简述Kubernetes集群相关组件&quot; class=&quot;headerlink&quot; title=&quot;11、简述Kubernetes集群相关组件?&quot;&gt;&lt;/a&gt;11、简述Kubernetes集群相关组件?&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;master&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;kube-controller-manager&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;kube-apiserver&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;kube-scheduler&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;etcd&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;worker&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;kubelet&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;kube-proxy&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;12、简述Kubernetes-RC的机制&quot;&gt;&lt;a href=&quot;#12、简述Kubernetes-RC的机制&quot; class=&quot;headerlink&quot; title=&quot;12、简述Kubernetes RC的机制?&quot;&gt;&lt;/a&gt;12、简述Kubernetes RC的机制?&lt;/h2&gt;&lt;p&gt;Replication Controller用来管理Pod的副本，保证集群中存在指定数量的Pod副本。当定义了RC并提交至Kubernetes集群中之后，Master节点上的Controller Manager组件获悉，并同时巡检系统中当前存活的目标Pod，并确保目标Pod实例的数量刚好等于此RC的期望值，若存在过多的Pod副本在运行，系统会停止一些Pod，反之则自动创建一些Pod&lt;/p&gt;
&lt;h2 id=&quot;13、简述kube-proxy作用&quot;&gt;&lt;a href=&quot;#13、简述kube-proxy作用&quot; class=&quot;headerlink&quot; title=&quot;13、简述kube-proxy作用?&quot;&gt;&lt;/a&gt;13、简述kube-proxy作用?&lt;/h2&gt;&lt;p&gt;kube-proxy的作用主要是负责service的实现,具体来说,就是实现了内部从pod到service和外部的从node port向service的访问&lt;/p&gt;
&lt;h2 id=&quot;14、简述kube-proxy-iptables原理&quot;&gt;&lt;a href=&quot;#14、简述kube-proxy-iptables原理&quot; class=&quot;headerlink&quot; title=&quot;14、简述kube-proxy iptables原理?&quot;&gt;&lt;/a&gt;14、简述kube-proxy iptables原理?&lt;/h2&gt;&lt;p&gt;Kubernetes从1.2版本开始，将iptables作为kube-proxy的默认模式。iptables模式下的kube-proxy不再起到Proxy的作用，其核心功能：通过API Server的Watch接口实时跟踪Service与Endpoint的变更信息，并更新对应的iptables规则，Client的请求流量则通过iptables的NAT机制“直接路由”到目标Pod&lt;/p&gt;
&lt;h2 id=&quot;15、简述kube-proxy-ipvs原理&quot;&gt;&lt;a href=&quot;#15、简述kube-proxy-ipvs原理&quot; class=&quot;headerlink&quot; title=&quot;15、简述kube-proxy ipvs原理?&quot;&gt;&lt;/a&gt;15、简述kube-proxy ipvs原理?&lt;/h2&gt;&lt;p&gt;答：IPVS 在 Kubernetes1.11 中升级为 GA 稳定版。IPVS 则专门用于高性能负载均衡，并使用更高效的数据结构（Hash 表），允许几乎无限的规模扩张，因此被 kube-proxy 采纳为最新模式。&lt;/p&gt;
&lt;p&gt;在 IPVS 模式下，使用 iptables 的扩展 ipset，而不是直接调用 iptables 来生成规则链。iptables 规则链是一个线性的数据结构，ipset 则引入了带索引的数据结构，因此当规则很多时，也可以很高效地查找和匹配。&lt;/p&gt;
&lt;p&gt;可以将 ipset 简单理解为一个 IP（段）的集合，这个集合的内容可以是 IP 地址、IP 网段、端口等，iptables 可以直接添加规则对这个“可变的集合”进行操作，这样做的好处在于可以大大减少 iptables 规则的数量，从而减少性能损耗。&lt;/p&gt;
&lt;h2 id=&quot;16、简述kube-proxy-ipvs和iptables的异同&quot;&gt;&lt;a href=&quot;#16、简述kube-proxy-ipvs和iptables的异同&quot; class=&quot;headerlink&quot; title=&quot;16、简述kube-proxy ipvs和iptables的异同?&quot;&gt;&lt;/a&gt;16、简述kube-proxy ipvs和iptables的异同?&lt;/h2&gt;&lt;p&gt;答：iptables 与 IPVS 都是基于 Netfilter 实现的，但因为定位不同，二者有着本质的&lt;/p&gt;
&lt;p&gt;差别：iptables 是为防火墙而设计的；IPVS 则专门用于高性能负载均衡，并使用更高效的数据结构（Hash 表），允许几乎无限的规模扩张。&lt;/p&gt;
&lt;p&gt;与 iptables 相比，IPVS 拥有以下明显优势：&lt;/p&gt;
&lt;figure class=&quot;highlight text&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1、为大型集群提供了更好的可扩展性和性能；&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2、支持比 iptables 更复杂的负载均衡算法（最小负载、最少连接、加权等）；&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3、支持服务器健康检查和连接重试等功能；&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4、可以动态修改 ipset 的集合，即使 iptables 的规则正在使用这个集合。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&quot;17、简述Kubernetes中什么是静态Pod&quot;&gt;&lt;a href=&quot;#17、简述Kubernetes中什么是静态Pod&quot; class=&quot;headerlink&quot; title=&quot;17、简述Kubernetes中什么是静态Pod?&quot;&gt;&lt;/a&gt;17、简述Kubernetes中什么是静态Pod?&lt;/h2&gt;&lt;p&gt;答：静态 pod 是由 kubelet 进行管理的仅存在于特定 Node的Pod，他们不能通过 API Server 进行管理，无法与 ReplicationController、Deployment 或者DaemonSet 进行关联，并且 kubelet 无法对他们进行健康检查。静态 Pod 总是由kubelet 进行创建，并且总是在 kubelet 所在的 Node 上运行&lt;/p&gt;
&lt;h2 id=&quot;18、简述Kubernetes中Pod可能位于的状态&quot;&gt;&lt;a href=&quot;#18、简述Kubernetes中Pod可能位于的状态&quot; class=&quot;headerlink&quot; title=&quot;18、简述Kubernetes中Pod可能位于的状态?&quot;&gt;&lt;/a&gt;18、简述Kubernetes中Pod可能位于的状态?&lt;/h2&gt;&lt;p&gt;Pending API Server已经创建该Pod，且Pod内还有一个或多个容器的镜像没有创建，包括正在下载镜像的过程。 Running Pod内所有容器均已创建，且至少有一个容器处于运行状态、正在启动状态或正在重启状态。 Succeeded Pod内所有容器均成功执行退出，且不会重启。 Failed Pod内所有容器均已退出，但至少有一个容器退出为失败状态。 Unknown 由于某种原因无法获取该Pod状态，可能由于网络通信不畅导致。&lt;/p&gt;
&lt;h2 id=&quot;19、简述Kubernetes创建一个Pod的主要流程&quot;&gt;&lt;a href=&quot;#19、简述Kubernetes创建一个Pod的主要流程&quot; class=&quot;headerlink&quot; title=&quot;19、简述Kubernetes创建一个Pod的主要流程?&quot;&gt;&lt;/a&gt;19、简述Kubernetes创建一个Pod的主要流程?&lt;/h2&gt;&lt;p&gt;Kubernetes中创建一个Pod涉及多个组件之间联动，主要流程如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;客户端提交Pod的配置信息（可以是yaml文件定义的信息）到kube-apiserver。&lt;/li&gt;
&lt;li&gt;Apiserver收到指令后，通知给controller-manager创建一个资源对象。&lt;/li&gt;
&lt;li&gt;Controller-manager通过api-server将pod的配置信息存储到ETCD数据中心中。&lt;/li&gt;
&lt;li&gt;Kube-scheduler检测到pod信息会开始调度预选，会先过滤掉不符合Pod资源配置要求的节点，然后开始调度调优，主要是挑选出更适合运行pod的节点，然后将pod的资源配置单发送到node节点上的kubelet组件上。&lt;/li&gt;
&lt;li&gt;Kubelet根据scheduler发来的资源配置单运行pod，运行成功后，将pod的运行信息返回给scheduler，scheduler将返回的pod运行状况的信息存储到etcd数据中心。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;20、简述Kubernetes中Pod的重启策略&quot;&gt;&lt;a href=&quot;#20、简述Kubernetes中Pod的重启策略&quot; class=&quot;headerlink&quot; title=&quot;20、简述Kubernetes中Pod的重启策略?&quot;&gt;&lt;/a&gt;20、简述Kubernetes中Pod的重启策略?&lt;/h2&gt;&lt;p&gt;Pod的重启策略包括Always、OnFailure和Never，默认值为Always。&lt;/p&gt;
&lt;p&gt;Always：当容器失效时，由kubelet自动重启该容器； OnFailure：当容器终止运行且退出码不为0时，由kubelet自动重启该容器； Never：不论容器运行状态如何，kubelet都不会重启该容器。 同时Pod的重启策略与控制方式关联，当前可用于管理Pod的控制器包括ReplicationController、Job、DaemonSet及直接管理kubelet管理（静态Pod）。 不同控制器的重启策略限制如下： RC和DaemonSet：必须设置为Always，需要保证该容器持续运行； Job：OnFailure或Never，确保容器执行完成后不再重启； kubelet：在Pod失效时重启，不论将RestartPolicy设置为何值，也不会对Pod进行健康检查。&lt;/p&gt;
&lt;h2 id=&quot;21、简述Kubernetes中Pod的健康检查方式&quot;&gt;&lt;a href=&quot;#21、简述Kubernetes中Pod的健康检查方式&quot; class=&quot;headerlink&quot; title=&quot;21、简述Kubernetes中Pod的健康检查方式?&quot;&gt;&lt;/a&gt;21、简述Kubernetes中Pod的健康检查方式?&lt;/h2&gt;&lt;p&gt;对Pod的健康检查可以通过两类探针来检查：LivenessProbe和ReadinessProbe。&lt;/p&gt;
&lt;p&gt;LivenessProbe探针：用于判断容器是否存活（running状态），如果LivenessProbe探针探测到容器不健康，则kubelet将杀掉该容器，并根据容器的重启策略做相应处理。若一个容器不包含LivenessProbe探针，kubelet认为该容器的LivenessProbe探针返回值用于是“Success”。&lt;/p&gt;
&lt;p&gt;ReadineeProbe探针：用于判断容器是否启动完成（ready状态）。如果ReadinessProbe探针探测到失败，则Pod的状态将被修改。Endpoint Controller将从Service的Endpoint中删除包含该容器所在Pod的Eenpoint。&lt;/p&gt;
&lt;p&gt;startupProbe探针：启动检查机制，应用一些启动缓慢的业务，避免业务长时间启动而被上面两类探针kill掉。&lt;/p&gt;
&lt;h2 id=&quot;22、简述Kubernetes-Pod的LivenessProbe探针的常见方式&quot;&gt;&lt;a href=&quot;#22、简述Kubernetes-Pod的LivenessProbe探针的常见方式&quot; class=&quot;headerlink&quot; title=&quot;22、简述Kubernetes Pod的LivenessProbe探针的常见方式?&quot;&gt;&lt;/a&gt;22、简述Kubernetes Pod的LivenessProbe探针的常见方式?&lt;/h2&gt;&lt;p&gt;ExecAction：在容器内执行一个命令，若返回码为0，则表明容器健康。&lt;/p&gt;
&lt;p&gt;TCPSocketAction：通过容器的IP地址和端口号执行TCP检查，若能建立TCP连接，则表明容器健康。&lt;/p&gt;
&lt;p&gt;HTTPGetAction：通过容器的IP地址、端口号及路径调用HTTP Get方法，若响应的状态码大于等于200且小于400，则表明容器健康。&lt;/p&gt;
&lt;h2 id=&quot;23、简述Kubernetes-Pod的常见调度方式&quot;&gt;&lt;a href=&quot;#23、简述Kubernetes-Pod的常见调度方式&quot; class=&quot;headerlink&quot; title=&quot;23、简述Kubernetes Pod的常见调度方式?&quot;&gt;&lt;/a&gt;23、简述Kubernetes Pod的常见调度方式?&lt;/h2&gt;&lt;p&gt;Kubernetes中，Pod通常是容器的载体，主要有如下常见调度方式：&lt;/p&gt;
&lt;p&gt;Deployment或RC：该调度策略主要功能就是自动部署一个容器应用的多份副本，以及持续监控副本的数量，在集群内始终维持用户指定的副本数量。&lt;/p&gt;
&lt;p&gt;NodeSelector：定向调度，当需要手动指定将Pod调度到特定Node上，可以通过Node的标签（Label）和Pod的nodeSelector属性相匹配。&lt;/p&gt;
&lt;p&gt;NodeAffinity亲和性调度：亲和性调度机制极大的扩展了Pod的调度能力，目前有两种节点亲和力表达：&lt;/p&gt;
&lt;p&gt;requiredDuringSchedulingIgnoredDuringExecution：硬规则，必须满足指定的规则，调度器才可以调度Pod至Node上（类似nodeSelector，语法不同）。&lt;/p&gt;
&lt;p&gt;preferredDuringSchedulingIgnoredDuringExecution：软规则，优先调度至满足的Node的节点，但不强求，多个优先级规则还可以设置权重值。&lt;/p&gt;
&lt;p&gt;Taints和Tolerations（污点和容忍）：&lt;/p&gt;
&lt;p&gt;Taint：使Node拒绝特定Pod运行；&lt;/p&gt;
&lt;p&gt;Toleration：为Pod的属性，表示Pod能容忍（运行）标注了Taint的Node。&lt;/p&gt;
&lt;h2 id=&quot;24、简述Kubernetes初始化容器（init-container）&quot;&gt;&lt;a href=&quot;#24、简述Kubernetes初始化容器（init-container）&quot; class=&quot;headerlink&quot; title=&quot;24、简述Kubernetes初始化容器（init container）?&quot;&gt;&lt;/a&gt;24、简述Kubernetes初始化容器（init container）?&lt;/h2&gt;&lt;p&gt;init container的运行方式与应用容器不同，它们必须先于应用容器执行完成，当设置了多个init container时，将按顺序逐个运行，并且只有前一个init container运行成功后才能运行后一个init container。当所有init container都成功运行后，Kubernetes才会初始化Pod的各种信息，并开始创建和运行应用容器。&lt;/p&gt;
&lt;h2 id=&quot;25、简述Kubernetes-deployment升级过程&quot;&gt;&lt;a href=&quot;#25、简述Kubernetes-deployment升级过程&quot; class=&quot;headerlink&quot; title=&quot;25、简述Kubernetes deployment升级过程?&quot;&gt;&lt;/a&gt;25、简述Kubernetes deployment升级过程?&lt;/h2&gt;&lt;p&gt;初始创建Deployment时，系统创建了一个ReplicaSet，并按用户的需求创建了对应数量的Pod副本。&lt;/p&gt;
&lt;p&gt;当更新Deployment时，系统创建了一个新的ReplicaSet，并将其副本数量扩展到1，然后将旧ReplicaSet缩减为2。&lt;/p&gt;
&lt;p&gt;之后，系统继续按照相同的更新策略对新旧两个ReplicaSet进行逐个调整。&lt;/p&gt;
&lt;p&gt;最后，新的ReplicaSet运行了对应个新版本Pod副本，旧的ReplicaSet副本数量则缩减为0。&lt;/p&gt;
&lt;h2 id=&quot;26、简述Kubernetes-deployment升级策略&quot;&gt;&lt;a href=&quot;#26、简述Kubernetes-deployment升级策略&quot; class=&quot;headerlink&quot; title=&quot;26、简述Kubernetes deployment升级策略?&quot;&gt;&lt;/a&gt;26、简述Kubernetes deployment升级策略?&lt;/h2&gt;&lt;p&gt;在Deployment的定义中，可以通过spec.strategy指定Pod更新的策略，目前支持两种策略：Recreate（重建）和RollingUpdate（滚动更新），默认值为RollingUpdate。&lt;/p&gt;
&lt;p&gt;Recreate：设置spec.strategy.type&amp;#x3D;Recreate，表示Deployment在更新Pod时，会先杀掉所有正在运行的Pod，然后创建新的Pod。&lt;/p&gt;
&lt;p&gt;RollingUpdate：设置spec.strategy.type&amp;#x3D;RollingUpdate，表示Deployment会以滚动更新的方式来逐个更新Pod。同时，可以通过设置spec.strategy.rollingUpdate下的两个参数（maxUnavailable和maxSurge）来控制滚动更新的过程。&lt;/p&gt;
&lt;h2 id=&quot;27、简述Kubernetes-DaemonSet类型的资源特性&quot;&gt;&lt;a href=&quot;#27、简述Kubernetes-DaemonSet类型的资源特性&quot; class=&quot;headerlink&quot; title=&quot;27、简述Kubernetes DaemonSet类型的资源特性?&quot;&gt;&lt;/a&gt;27、简述Kubernetes DaemonSet类型的资源特性?&lt;/h2&gt;&lt;p&gt;DaemonSet资源对象会在每个Kubernetes集群中的节点上运行，并且每个节点只能运行一个pod，这是它和deployment资源对象的最大也是唯一的区别。因此，在定义yaml文件中，不支持定义replicas。&lt;/p&gt;
&lt;p&gt;它的一般使用场景如下：&lt;/p&gt;
&lt;p&gt;在去做每个节点的日志收集工作。&lt;/p&gt;
&lt;p&gt;监控每个节点的的运行状态。&lt;/p&gt;
&lt;h2 id=&quot;28、简述Kubernetes自动扩容机制&quot;&gt;&lt;a href=&quot;#28、简述Kubernetes自动扩容机制&quot; class=&quot;headerlink&quot; title=&quot;28、简述Kubernetes自动扩容机制?&quot;&gt;&lt;/a&gt;28、简述Kubernetes自动扩容机制?&lt;/h2&gt;&lt;p&gt;Kubernetes使用Horizontal Pod Autoscaler（HPA）的控制器实现基于CPU使用率进行自动Pod扩缩容的功能。HPA控制器周期性地监测目标Pod的资源性能指标，并与HPA资源对象中的扩缩容条件进行对比，在满足条件时对Pod副本数量进行调整。&lt;/p&gt;
&lt;p&gt;HPA原理&lt;/p&gt;
&lt;p&gt;Kubernetes中的某个Metrics Server（Heapster或自定义Metrics Server）持续采集所有Pod副本的指标数据。HPA控制器通过Metrics Server的API（Heapster的API或聚合API）获取这些数据，基于用户定义的扩缩容规则进行计算，得到目标Pod副本数量。&lt;/p&gt;
&lt;p&gt;当目标Pod副本数量与当前副本数量不同时，HPA控制器就向Pod的副本控制器（Deployment、RC或ReplicaSet）发起scale操作，调整Pod的副本数量，完成扩缩容操作。&lt;/p&gt;
&lt;h2 id=&quot;29、简述Kubernetes-Service类型&quot;&gt;&lt;a href=&quot;#29、简述Kubernetes-Service类型&quot; class=&quot;headerlink&quot; title=&quot;29、简述Kubernetes Service类型?&quot;&gt;&lt;/a&gt;29、简述Kubernetes Service类型?&lt;/h2&gt;&lt;p&gt;通过创建Service，可以为一组具有相同功能的容器应用提供一个统一的入口地址，并且将请求负载分发到后端的各个容器应用上。其主要类型有：&lt;/p&gt;
&lt;p&gt;ClusterIP：虚拟的服务IP地址，该地址用于Kubernetes集群内部的Pod访问，在Node上kube-proxy通过设置的iptables规则进行转发；&lt;/p&gt;
&lt;p&gt;NodePort：使用宿主机的端口，使能够访问各Node的外部客户端通过Node的IP地址和端口号就能访问服务；&lt;/p&gt;
&lt;p&gt;LoadBalancer：使用外接负载均衡器完成到服务的负载分发，需要在spec.status.loadBalancer字段指定外部负载均衡器的IP地址，通常用于公有云。&lt;/p&gt;
&lt;h2 id=&quot;30、简述Kubernetes-Service分发后端的策略&quot;&gt;&lt;a href=&quot;#30、简述Kubernetes-Service分发后端的策略&quot; class=&quot;headerlink&quot; title=&quot;30、简述Kubernetes Service分发后端的策略?&quot;&gt;&lt;/a&gt;30、简述Kubernetes Service分发后端的策略?&lt;/h2&gt;&lt;p&gt;Service负载分发的策略有：RoundRobin和SessionAffinity&lt;/p&gt;
&lt;p&gt;RoundRobin：默认为轮询模式，即轮询将请求转发到后端的各个Pod上。&lt;/p&gt;
&lt;p&gt;SessionAffinity：基于客户端IP地址进行会话保持的模式，即第1次将某个客户端发起的请求转发到后端的某个Pod上，之后从相同的客户端发起的请求都将被转发到后端相同的Pod上。&lt;/p&gt;
&lt;h2 id=&quot;31、简述Kubernetes-Headless-Service&quot;&gt;&lt;a href=&quot;#31、简述Kubernetes-Headless-Service&quot; class=&quot;headerlink&quot; title=&quot;31、简述Kubernetes Headless Service?&quot;&gt;&lt;/a&gt;31、简述Kubernetes Headless Service?&lt;/h2&gt;&lt;p&gt;在某些应用场景中，若需要人为指定负载均衡器，不使用Service提供的默认负载均衡的功能，或者应用程序希望知道属于同组服务的其他实例。Kubernetes提供了Headless Service来实现这种功能，即不为Service设置ClusterIP（入口IP地址），仅通过Label Selector将后端的Pod列表返回给调用的客户端。&lt;/p&gt;
&lt;h2 id=&quot;32、简述Kubernetes外部如何访问集群内的服务&quot;&gt;&lt;a href=&quot;#32、简述Kubernetes外部如何访问集群内的服务&quot; class=&quot;headerlink&quot; title=&quot;32、简述Kubernetes外部如何访问集群内的服务?&quot;&gt;&lt;/a&gt;32、简述Kubernetes外部如何访问集群内的服务?&lt;/h2&gt;&lt;p&gt;对于Kubernetes，集群外的客户端默认情况，无法通过Pod的IP地址或者Service的虚拟IP地址:虚拟端口号进行访问。通常可以通过以下方式进行访问Kubernetes集群内的服务：&lt;/p&gt;
&lt;p&gt;映射Pod到物理机：将Pod端口号映射到宿主机，即在Pod中采用hostPort方式，以使客户端应用能够通过物理机访问容器应用。&lt;/p&gt;
&lt;p&gt;映射Service到物理机：将Service端口号映射到宿主机，即在Service中采用nodePort方式，以使客户端应用能够通过物理机访问容器应用。&lt;/p&gt;
&lt;p&gt;映射Sercie到LoadBalancer：通过设置LoadBalancer映射到云服务商提供的LoadBalancer地址。这种用法仅用于在公有云服务提供商的云平台上设置Service的场景。&lt;/p&gt;
&lt;h2 id=&quot;33、简述Kubernetes-ingress&quot;&gt;&lt;a href=&quot;#33、简述Kubernetes-ingress&quot; class=&quot;headerlink&quot; title=&quot;33、简述Kubernetes ingress?&quot;&gt;&lt;/a&gt;33、简述Kubernetes ingress?&lt;/h2&gt;&lt;p&gt;Kubernetes的Ingress资源对象，用于将不同URL的访问请求转发到后端不同的Service，以实现HTTP层的业务路由机制。&lt;/p&gt;
&lt;p&gt;Kubernetes使用了Ingress策略和Ingress Controller，两者结合并实现了一个完整的Ingress负载均衡器。使用Ingress进行负载分发时，Ingress Controller基于Ingress规则将客户端请求直接转发到Service对应的后端Endpoint（Pod）上，从而跳过kube-proxy的转发功能，kube-proxy不再起作用，全过程为：ingress controller + ingress 规则 —-&amp;gt; services。&lt;/p&gt;
&lt;p&gt;同时当Ingress Controller提供的是对外服务，则实际上实现的是边缘路由器的功能。&lt;/p&gt;
&lt;h2 id=&quot;34、简述Kubernetes镜像的下载策略&quot;&gt;&lt;a href=&quot;#34、简述Kubernetes镜像的下载策略&quot; class=&quot;headerlink&quot; title=&quot;34、简述Kubernetes镜像的下载策略?&quot;&gt;&lt;/a&gt;34、简述Kubernetes镜像的下载策略?&lt;/h2&gt;&lt;p&gt;K8s的镜像下载策略有三种：Always、Never、IFNotPresent。&lt;/p&gt;
&lt;p&gt;Always：镜像标签为latest时，总是从指定的仓库中获取镜像。&lt;/p&gt;
&lt;p&gt;Never：禁止从仓库中下载镜像，也就是说只能使用本地镜像。&lt;/p&gt;
&lt;p&gt;IfNotPresent：仅当本地没有对应镜像时，才从目标仓库中下载。默认的镜像下载策略是：当镜像标签是latest时，默认策略是Always；当镜像标签是自定义时（也就是标签不是latest），那么默认策略是IfNotPresent。&lt;/p&gt;
&lt;h2 id=&quot;35、简述Kubernetes的负载均衡器&quot;&gt;&lt;a href=&quot;#35、简述Kubernetes的负载均衡器&quot; class=&quot;headerlink&quot; title=&quot;35、简述Kubernetes的负载均衡器?&quot;&gt;&lt;/a&gt;35、简述Kubernetes的负载均衡器?&lt;/h2&gt;&lt;p&gt;负载均衡器是暴露服务的最常见和标准方式之一。&lt;/p&gt;
&lt;p&gt;根据工作环境使用两种类型的负载均衡器，即内部负载均衡器或外部负载均衡器。内部负载均衡器自动平衡负载并使用所需配置分配容器，而外部负载均衡器将流量从外部负载引导至后端容器。负载均衡器是暴露服务的最常见和标准方式之一。&lt;/p&gt;
&lt;p&gt;根据工作环境使用两种类型的负载均衡器，即内部负载均衡器或外部负载均衡器。内部负载均衡器自动平衡负载并使用所需配置分配容器，而外部负载均衡器将流量从外部负载引导至后端容器。&lt;/p&gt;
&lt;h2 id=&quot;36、简述Kubernetes各模块如何与API-Server通信&quot;&gt;&lt;a href=&quot;#36、简述Kubernetes各模块如何与API-Server通信&quot; class=&quot;headerlink&quot; title=&quot;36、简述Kubernetes各模块如何与API Server通信?&quot;&gt;&lt;/a&gt;36、简述Kubernetes各模块如何与API Server通信?&lt;/h2&gt;&lt;p&gt;Kubernetes API Server作为集群的核心，负责集群各功能模块之间的通信。集群内的各个功能模块通过API Server将信息存入etcd，当需要获取和操作这些数据时，则通过API Server提供的REST接口（用GET、LIST或WATCH方法）来实现，从而实现各模块之间的信息交互。&lt;/p&gt;
&lt;p&gt;如kubelet进程与API Server的交互：每个Node上的kubelet每隔一个时间周期，就会调用一次API Server的REST接口报告自身状态，API Server在接收到这些信息后，会将节点状态信息更新到etcd中。&lt;/p&gt;
&lt;p&gt;如kube-controller-manager进程与API Server的交互：kube-controller-manager中的Node Controller模块通过API Server提供的Watch接口实时监控Node的信息，并做相应处理。&lt;/p&gt;
&lt;p&gt;如kube-scheduler进程与API Server的交互：Scheduler通过API Server的Watch接口监听到新建Pod副本的信息后，会检索所有符合该Pod要求的Node列表，开始执行Pod调度逻辑，在调度成功后将Pod绑定到目标节点上。&lt;/p&gt;
&lt;h2 id=&quot;37、简述Kubernetes-Scheduler作用及实现原理&quot;&gt;&lt;a href=&quot;#37、简述Kubernetes-Scheduler作用及实现原理&quot; class=&quot;headerlink&quot; title=&quot;37、简述Kubernetes Scheduler作用及实现原理?&quot;&gt;&lt;/a&gt;37、简述Kubernetes Scheduler作用及实现原理?&lt;/h2&gt;&lt;p&gt;Kubernetes Scheduler是负责Pod调度的重要功能模块，Kubernetes Scheduler在整个系统中承担了“承上启下”的重要功能，“承上”是指它负责接收Controller Manager创建的新Pod，为其调度至目标Node；“启下”是指调度完成后，目标Node上的kubelet服务进程接管后继工作，负责Pod接下来生命周期。&lt;/p&gt;
&lt;p&gt;Kubernetes Scheduler的作用是将待调度的Pod（API新创建的Pod、Controller Manager为补足副本而创建的Pod等）按照特定的调度算法和调度策略绑定（Binding）到集群中某个合适的Node上，并将绑定信息写入etcd中。&lt;/p&gt;
&lt;p&gt;在整个调度过程中涉及三个对象，分别是待调度Pod列表、可用Node列表，以及调度算法和策略。&lt;/p&gt;
&lt;p&gt;Kubernetes Scheduler通过调度算法调度为待调度Pod列表中的每个Pod从Node列表中选择一个最适合的Node来实现Pod的调度。随后，目标节点上的kubelet通过API Server监听到Kubernetes Scheduler产生的Pod绑定事件，然后获取对应的Pod清单，下载Image镜像并启动容器。&lt;/p&gt;
&lt;h2 id=&quot;38、简述Kubernetes-Scheduler使用哪两种算法将Pod绑定到worker节点&quot;&gt;&lt;a href=&quot;#38、简述Kubernetes-Scheduler使用哪两种算法将Pod绑定到worker节点&quot; class=&quot;headerlink&quot; title=&quot;38、简述Kubernetes Scheduler使用哪两种算法将Pod绑定到worker节点?&quot;&gt;&lt;/a&gt;38、简述Kubernetes Scheduler使用哪两种算法将Pod绑定到worker节点?&lt;/h2&gt;&lt;p&gt;预选（Predicates）：输入是所有节点，输出是满足预选条件的节点。kube-scheduler根据预选策略过滤掉不满足策略的Nodes。如果某节点的资源不足或者不满足预选策略的条件则无法通过预选。如“Node的label必须与Pod的Selector一致”。&lt;/p&gt;
&lt;p&gt;优选（Priorities）：输入是预选阶段筛选出的节点，优选会根据优先策略为通过预选的Nodes进行打分排名，选择得分最高的Node。例如，资源越富裕、负载越小的Node可能具有越高的排名。&lt;/p&gt;
&lt;h2 id=&quot;39、简述Kubernetes-kubelet的作用&quot;&gt;&lt;a href=&quot;#39、简述Kubernetes-kubelet的作用&quot; class=&quot;headerlink&quot; title=&quot;39、简述Kubernetes kubelet的作用?&quot;&gt;&lt;/a&gt;39、简述Kubernetes kubelet的作用?&lt;/h2&gt;&lt;p&gt;在Kubernetes集群中，在每个Node（又称Worker）上都会启动一个kubelet服务进程。该进程用于处理Master下发到本节点的任务，管理Pod及Pod中的容器。每个kubelet进程都会在API Server上注册节点自身的信息，定期向Master汇报节点资源的使用情况，并通过cAdvisor监控容器和节点资源。&lt;/p&gt;
&lt;h2 id=&quot;40、简述Kubernetes-kubelet监控Worker节点资源是使用什么组件来实现的&quot;&gt;&lt;a href=&quot;#40、简述Kubernetes-kubelet监控Worker节点资源是使用什么组件来实现的&quot; class=&quot;headerlink&quot; title=&quot;40、简述Kubernetes kubelet监控Worker节点资源是使用什么组件来实现的?&quot;&gt;&lt;/a&gt;40、简述Kubernetes kubelet监控Worker节点资源是使用什么组件来实现的?&lt;/h2&gt;&lt;p&gt;kubelet使用cAdvisor对worker节点资源进行监控。在 Kubernetes 系统中，cAdvisor 已被默认集成到 kubelet 组件内，当 kubelet 服务启动时，它会自动启动 cAdvisor 服务，然后 cAdvisor 会实时采集所在节点的性能指标及在节点上运行的容器的性能指标。&lt;/p&gt;
&lt;h2 id=&quot;41、简述Kubernetes如何保证集群的安全性&quot;&gt;&lt;a href=&quot;#41、简述Kubernetes如何保证集群的安全性&quot; class=&quot;headerlink&quot; title=&quot;41、简述Kubernetes如何保证集群的安全性?&quot;&gt;&lt;/a&gt;41、简述Kubernetes如何保证集群的安全性?&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;最小权限原则&lt;/li&gt;
&lt;li&gt;用户权限：划分普通用户和管理员的角色&lt;/li&gt;
&lt;li&gt;API Server的认证授权&lt;/li&gt;
&lt;li&gt;API Server的授权管理&lt;/li&gt;
&lt;li&gt;敏感数据引入Secret机制&lt;/li&gt;
&lt;li&gt;AdmissionControl（准入机制）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;42、简述Kubernetes准入机制&quot;&gt;&lt;a href=&quot;#42、简述Kubernetes准入机制&quot; class=&quot;headerlink&quot; title=&quot;42、简述Kubernetes准入机制?&quot;&gt;&lt;/a&gt;42、简述Kubernetes准入机制?&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Kubernetes准入机制&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;准入控制插件&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;- AlwaysAdmit&lt;/td&gt;
&lt;td&gt;总是通过请求，不执行检查。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;- AlwaysDeny&lt;/td&gt;
&lt;td&gt;总是拒绝请求，不执行检查。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;- NamespaceLifecycle&lt;/td&gt;
&lt;td&gt;确保命名空间存在，并根据策略允许或拒绝创建。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;- ResourceQuota&lt;/td&gt;
&lt;td&gt;实施资源配额，限制在命名空间内的资源使用。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;- PodSecurityPolicy&lt;/td&gt;
&lt;td&gt;强制执行容器安全策略。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;- ServiceAccount&lt;/td&gt;
&lt;td&gt;确保Pod使用有效的ServiceAccount。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Webhook准入控制&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;- Webhook机制&lt;/td&gt;
&lt;td&gt;将自定义的准入控制插件集成到API服务器中。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;动态准入控制配置&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;- 动态配置&lt;/td&gt;
&lt;td&gt;在Kubernetes 1.9版本及以上，引入了动态准入控制配置，管理员可以动态配置准入控制插件。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Mutating和Validating准入控制&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;- MutatingAdmissionWebhook&lt;/td&gt;
&lt;td&gt;在资源被持久化之前对其进行修改。例如，可以动态地注入sidecar容器。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;- ValidatingAdmissionWebhook&lt;/td&gt;
&lt;td&gt;对资源进行验证，确保其符合特定规则。例如，可以强制执行命名约定或其他策略。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;默认准入控制配置&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;- 启用&amp;#x2F;禁用默认插件&lt;/td&gt;
&lt;td&gt;集群管理员可以通过启用或禁用默认的准入控制插件来调整系统的默认行为。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h2 id=&quot;43、简述Kubernetes-RBAC及其特点（优势）&quot;&gt;&lt;a href=&quot;#43、简述Kubernetes-RBAC及其特点（优势）&quot; class=&quot;headerlink&quot; title=&quot;43、简述Kubernetes RBAC及其特点（优势）?&quot;&gt;&lt;/a&gt;43、简述Kubernetes RBAC及其特点（优势）?&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;对集群中的资源和非资源权限均有完整的覆盖。  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;整个RBAC完全由几个API对象完成， 同其他API对象一样， 可以用kubectl或API进行操作。  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;可以在运行时进行调整，无须重新启动API Server。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;44、简述Kubernetes-Secret作用&quot;&gt;&lt;a href=&quot;#44、简述Kubernetes-Secret作用&quot; class=&quot;headerlink&quot; title=&quot;44、简述Kubernetes Secret作用?&quot;&gt;&lt;/a&gt;44、简述Kubernetes Secret作用?&lt;/h2&gt;&lt;p&gt;Secret对象，主要作用是保管私密数据，比如密码、OAuth Tokens、SSH Keys等信息。将这些私密信息放在Secret对象中比直接放在Pod或Docker Image中更安全，也更便于使用和分发。&lt;/p&gt;
&lt;h2 id=&quot;45、简述Kubernetes-Secret有哪些使用方式&quot;&gt;&lt;a href=&quot;#45、简述Kubernetes-Secret有哪些使用方式&quot; class=&quot;headerlink&quot; title=&quot;45、简述Kubernetes Secret有哪些使用方式?&quot;&gt;&lt;/a&gt;45、简述Kubernetes Secret有哪些使用方式?&lt;/h2&gt;&lt;p&gt;在创建Pod时，通过为Pod指定Service Account来自动使用该Secret。&lt;/p&gt;
&lt;p&gt;通过挂载该Secret到Pod来使用它。&lt;/p&gt;
&lt;p&gt;在Docker镜像下载时使用，通过指定Pod的spc.ImagePullSecrets来引用它。&lt;/p&gt;
&lt;h2 id=&quot;46、简述Kubernetes-PodSecurityPolicy机制&quot;&gt;&lt;a href=&quot;#46、简述Kubernetes-PodSecurityPolicy机制&quot; class=&quot;headerlink&quot; title=&quot;46、简述Kubernetes PodSecurityPolicy机制?&quot;&gt;&lt;/a&gt;46、简述Kubernetes PodSecurityPolicy机制?&lt;/h2&gt;&lt;p&gt;Kubernetes PodSecurityPolicy是为了更精细地控制Pod对资源的使用方式以及提升安全策略。在开启PodSecurityPolicy准入控制器后，Kubernetes默认不允许创建任何Pod，需要创建PodSecurityPolicy策略和相应的RBAC授权策略（Authorizing Policies），Pod才能创建成功。&lt;/p&gt;
&lt;h2 id=&quot;47、简述Kubernetes-PodSecurityPolicy机制能实现哪些安全策略&quot;&gt;&lt;a href=&quot;#47、简述Kubernetes-PodSecurityPolicy机制能实现哪些安全策略&quot; class=&quot;headerlink&quot; title=&quot;47、简述Kubernetes PodSecurityPolicy机制能实现哪些安全策略?&quot;&gt;&lt;/a&gt;47、简述Kubernetes PodSecurityPolicy机制能实现哪些安全策略?&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;特权模式：privileged是否允许Pod以特权模式运行。  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;宿主机资源：控制Pod对宿主机资源的控制，如hostPID：是否允许Pod共享宿主机的进程空间。  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;用户和组：设置运行容器的用户ID（范围）或组（范围）。  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;提升权限：AllowPrivilegeEscalation：设置容器内的子进程是否可以提升权限，通常在设置非root用户（MustRunAsNonRoot）时进行设置。  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;SELinux：进行SELinux的相关配置。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;48、简述Kubernetes网络模型&quot;&gt;&lt;a href=&quot;#48、简述Kubernetes网络模型&quot; class=&quot;headerlink&quot; title=&quot;48、简述Kubernetes网络模型?&quot;&gt;&lt;/a&gt;48、简述Kubernetes网络模型?&lt;/h2&gt;&lt;p&gt;Kubernetes网络模型中每个Pod都拥有一个独立的IP地址，并假定所有Pod都在一个可以直接连通的、扁平的网络空间中。所以不管它们是否运行在同一个Node（宿主机）中，都要求它们可以直接通过对方的IP进行访问。设计这个原则的原因是，用户不需要额外考虑如何建立Pod之间的连接，也不需要考虑如何将容器端口映射到主机端口等问题。&lt;/p&gt;
&lt;p&gt;同时为每个Pod都设置一个IP地址的模型使得同一个Pod内的不同容器会共享同一个网络命名空间，也就是同一个Linux网络协议栈。这就意味着同一个Pod内的容器可以通过localhost来连接对方的端口。&lt;/p&gt;
&lt;p&gt;在Kubernetes的集群里，IP是以Pod为单位进行分配的。一个Pod内部的所有容器共享一个网络堆栈（相当于一个网络命名空间，它们的IP地址、网络设备、配置等都是共享的）。&lt;/p&gt;
&lt;h2 id=&quot;49、简述Kubernetes-CNI模型&quot;&gt;&lt;a href=&quot;#49、简述Kubernetes-CNI模型&quot; class=&quot;headerlink&quot; title=&quot;49、简述Kubernetes CNI模型?&quot;&gt;&lt;/a&gt;49、简述Kubernetes CNI模型?&lt;/h2&gt;&lt;p&gt;CNI提供了一种应用容器的插件化网络解决方案，定义对容器网络进行操作和配置的规范，通过插件的形式对CNI接口进行实现。CNI仅关注在创建容器时分配网络资源，和在销毁容器时删除网络资源。在CNI模型中只涉及两个概念：容器和网络。&lt;/p&gt;
&lt;p&gt;容器（Container）：是拥有独立Linux网络命名空间的环境，例如使用Docker或rkt创建的容器。容器需要拥有自己的Linux网络命名空间，这是加入网络的必要条件。&lt;/p&gt;
&lt;p&gt;网络（Network）：表示可以互连的一组实体，这些实体拥有各自独立、唯一的IP地址，可以是容器、物理机或者其他网络设备（比如路由器）等。&lt;/p&gt;
&lt;p&gt;对容器网络的设置和操作都通过插件（Plugin）进行具体实现，CNI插件包括两种类型：CNI Plugin和IPAM（IP Address Management）Plugin。CNI Plugin负责为容器配置网络资源，IPAM Plugin负责对容器的IP地址进行分配和管理。IPAM Plugin作为CNI Plugin的一部分，与CNI Plugin协同工作。&lt;/p&gt;
&lt;h2 id=&quot;50、简述Kubernetes网络策略&quot;&gt;&lt;a href=&quot;#50、简述Kubernetes网络策略&quot; class=&quot;headerlink&quot; title=&quot;50、简述Kubernetes网络策略?&quot;&gt;&lt;/a&gt;50、简述Kubernetes网络策略?&lt;/h2&gt;&lt;p&gt;Network Policy的主要功能是对Pod间的网络通信进行限制和准入控制，设置允许访问或禁止访问的客户端Pod列表。Network Policy定义网络策略，配合策略控制器（Policy Controller）进行策略的实现。&lt;/p&gt;
&lt;h2 id=&quot;51、简述Kubernetes网络策略原理&quot;&gt;&lt;a href=&quot;#51、简述Kubernetes网络策略原理&quot; class=&quot;headerlink&quot; title=&quot;51、简述Kubernetes网络策略原理?&quot;&gt;&lt;/a&gt;51、简述Kubernetes网络策略原理?&lt;/h2&gt;&lt;p&gt;Network Policy的工作原理主要为：policy controller需要实现一个API Listener，监听用户设置的Network Policy定义，并将网络访问规则通过各Node的Agent进行实际设置（Agent则需要通过CNI网络插件实现）。&lt;/p&gt;
&lt;h2 id=&quot;52、简述Kubernetes中flannel的作用&quot;&gt;&lt;a href=&quot;#52、简述Kubernetes中flannel的作用&quot; class=&quot;headerlink&quot; title=&quot;52、简述Kubernetes中flannel的作用?&quot;&gt;&lt;/a&gt;52、简述Kubernetes中flannel的作用?&lt;/h2&gt;&lt;p&gt;它能协助Kubernetes，给每一个Node上的Docker容器都分配互相不冲突的IP地址。&lt;/p&gt;
&lt;p&gt;它能在这些IP地址之间建立一个覆盖网络（Overlay Network），通过这个覆盖网络，将数据包原封不动地传递到目标容器内。&lt;/p&gt;
&lt;h2 id=&quot;53、简述Kubernetes-Calico网络组件实现原理&quot;&gt;&lt;a href=&quot;#53、简述Kubernetes-Calico网络组件实现原理&quot; class=&quot;headerlink&quot; title=&quot;53、简述Kubernetes Calico网络组件实现原理?&quot;&gt;&lt;/a&gt;53、简述Kubernetes Calico网络组件实现原理?&lt;/h2&gt;&lt;p&gt;Calico是一个基于BGP的纯三层的网络方案 Calico在每个计算节点都利用Linux Kernel实现了一个高效的vRouter来负责数据转发。每个vRouter都通过BGP协议把在本节点上运行的容器的路由信息向整个Calico网络广播，并自动设置到达其他节点的路由转发规则。&lt;/p&gt;
&lt;p&gt;Calico保证所有容器之间的数据流量都是通过IP路由的方式完成互联互通的。Calico节点组网时可以直接利用数据中心的网络结构（L2或者L3），不需要额外的NAT、隧道或者Overlay Network，没有额外的封包解包，能够节约CPU运算，提高网络效率。&lt;/p&gt;
&lt;h2 id=&quot;54、简述Kubernetes共享存储的作用&quot;&gt;&lt;a href=&quot;#54、简述Kubernetes共享存储的作用&quot; class=&quot;headerlink&quot; title=&quot;54、简述Kubernetes共享存储的作用?&quot;&gt;&lt;/a&gt;54、简述Kubernetes共享存储的作用?&lt;/h2&gt;&lt;p&gt;Kubernetes对于有状态的容器应用或者对数据需要持久化的应用，因此需要更加可靠的存储来保存应用产生的重要数据，以便容器应用在重建之后仍然可以使用之前的数据。因此需要使用共享存储。&lt;/p&gt;
&lt;h2 id=&quot;55、简述Kubernetes数据持久化的方式有哪些&quot;&gt;&lt;a href=&quot;#55、简述Kubernetes数据持久化的方式有哪些&quot; class=&quot;headerlink&quot; title=&quot;55、简述Kubernetes数据持久化的方式有哪些?&quot;&gt;&lt;/a&gt;55、简述Kubernetes数据持久化的方式有哪些?&lt;/h2&gt;&lt;p&gt;EmptyDir（空目录）：没有指定要挂载宿主机上的某个目录，直接由Pod内保部映射到宿主机上。类似于docker中的manager volume。只需要临时将数据保存在磁盘上，比如在合并&amp;#x2F;排序算法中；作为两个容器的共享存储。同个pod里面的不同容器，共享同一个持久化目录，当pod节点删除时，volume的数据也会被删除。 Hostpath：将宿主机上已存在的目录或文件挂载到容器内部。类似于docker中的bind mount挂载方式 PersistentVolume（简称PV）：如基于NFS服务的PV，也可以基于GFS的PV。它的作用是统一数据持久化目录，方便管理。&lt;/p&gt;
&lt;h2 id=&quot;56、简述Kubernetes-PV和PVC&quot;&gt;&lt;a href=&quot;#56、简述Kubernetes-PV和PVC&quot; class=&quot;headerlink&quot; title=&quot;56、简述Kubernetes PV和PVC?&quot;&gt;&lt;/a&gt;56、简述Kubernetes PV和PVC?&lt;/h2&gt;&lt;p&gt;PV是对底层网络共享存储的抽象，将共享存储定义为一种“资源”。&lt;/p&gt;
&lt;p&gt;PVC则是用户对存储资源的一个“申请”。&lt;/p&gt;
&lt;h2 id=&quot;57、简述Kubernetes-PV生命周期内的阶段&quot;&gt;&lt;a href=&quot;#57、简述Kubernetes-PV生命周期内的阶段&quot; class=&quot;headerlink&quot; title=&quot;57、简述Kubernetes PV生命周期内的阶段?&quot;&gt;&lt;/a&gt;57、简述Kubernetes PV生命周期内的阶段?&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Available：可用状态，还未与某个PVC绑定。&lt;/li&gt;
&lt;li&gt;Bound：已与某个PVC绑定。&lt;/li&gt;
&lt;li&gt;Released：绑定的PVC已经删除，资源已释放，但没有被集群回收。&lt;/li&gt;
&lt;li&gt;Failed：自动资源回收失败。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;58、简述Kubernetes所支持的存储供应模式&quot;&gt;&lt;a href=&quot;#58、简述Kubernetes所支持的存储供应模式&quot; class=&quot;headerlink&quot; title=&quot;58、简述Kubernetes所支持的存储供应模式?&quot;&gt;&lt;/a&gt;58、简述Kubernetes所支持的存储供应模式?&lt;/h2&gt;&lt;p&gt;Kubernetes支持两种资源的存储供应模式：静态模式（Static）和动态模式（Dynamic）。&lt;/p&gt;
&lt;p&gt;静态模式：集群管理员手工创建许多PV，在定义PV时需要将后端存储的特性进行设置。&lt;/p&gt;
&lt;p&gt;动态模式：集群管理员无须手工创建PV，而是通过StorageClass的设置对后端存储进行描述，标记为某种类型。此时要求PVC对存储的类型进行声明，系统将自动完成PV的创建及与PVC的绑定。&lt;/p&gt;
&lt;h2 id=&quot;59、简述Kubernetes-CSI模型&quot;&gt;&lt;a href=&quot;#59、简述Kubernetes-CSI模型&quot; class=&quot;headerlink&quot; title=&quot;59、简述Kubernetes CSI模型?&quot;&gt;&lt;/a&gt;59、简述Kubernetes CSI模型?&lt;/h2&gt;&lt;p&gt;Kubernetes CSI是Kubernetes推出与容器对接的存储接口标准，存储提供方只需要基于标准接口进行存储插件的实现，就能使用Kubernetes的原生存储机制为容器提供存储服务。CSI使得存储提供方的代码能和Kubernetes代码彻底解耦，部署也与Kubernetes核心组件分离，显然，存储插件的开发由提供方自行维护，就能为Kubernetes用户提供更多的存储功能，也更加安全可靠。&lt;/p&gt;
&lt;p&gt;CSI包括CSI Controller和CSI Node：&lt;/p&gt;
&lt;p&gt;CSI Controller的主要功能是提供存储服务视角对存储资源和存储卷进行管理和操作。&lt;/p&gt;
&lt;p&gt;CSI Node的主要功能是对主机（Node）上的Volume进行管理和操作。&lt;/p&gt;
&lt;h2 id=&quot;60、简述Kubernetes-Worker节点加入集群的过程&quot;&gt;&lt;a href=&quot;#60、简述Kubernetes-Worker节点加入集群的过程&quot; class=&quot;headerlink&quot; title=&quot;60、简述Kubernetes Worker节点加入集群的过程?&quot;&gt;&lt;/a&gt;60、简述Kubernetes Worker节点加入集群的过程?&lt;/h2&gt;&lt;figure class=&quot;highlight text&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1、在该Node上安装Docker、kubelet和kube-proxy服务；&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2、然后配置kubelet和kubeproxy的启动参数，将Master URL指定为当前Kubernetes集群Master的地址，最后启动这些服务；&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3、通过kubelet默认的自动注册机制，新的Worker将会自动加入现有的Kubernetes集群中；&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4、Kubernetes Master在接受了新Worker的注册之后，会自动将其纳入当前集群的调度范围。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&quot;61、简述Kubernetes-Pod如何实现对节点的资源控制&quot;&gt;&lt;a href=&quot;#61、简述Kubernetes-Pod如何实现对节点的资源控制&quot; class=&quot;headerlink&quot; title=&quot;61、简述Kubernetes Pod如何实现对节点的资源控制?&quot;&gt;&lt;/a&gt;61、简述Kubernetes Pod如何实现对节点的资源控制?&lt;/h2&gt;&lt;p&gt;Kubernetes集群里的节点提供的资源主要是计算资源，计算资源是可计量的能被申请、分配和使用的基础资源。当前Kubernetes集群中的计算资源主要包括CPU、GPU及Memory。CPU与Memory是被Pod使用的，因此在配置Pod时可以通过参数CPU Request及Memory Request为其中的每个容器指定所需使用的CPU与Memory量，Kubernetes会根据Request的值去查找有足够资源的Node来调度此Pod。&lt;/p&gt;
&lt;p&gt;通常，一个程序所使用的CPU与Memory是一个动态的量，确切地说，是一个范围，跟它的负载密切相关：负载增加时，CPU和Memory的使用量也会增加。&lt;/p&gt;
&lt;h2 id=&quot;62、简述Kubernetes-Requests和Limits如何影响Pod的调度&quot;&gt;&lt;a href=&quot;#62、简述Kubernetes-Requests和Limits如何影响Pod的调度&quot; class=&quot;headerlink&quot; title=&quot;62、简述Kubernetes Requests和Limits如何影响Pod的调度?&quot;&gt;&lt;/a&gt;62、简述Kubernetes Requests和Limits如何影响Pod的调度?&lt;/h2&gt;&lt;p&gt;当一个Pod创建成功时，Kubernetes调度器（Scheduler）会为该Pod选择一个节点来执行。对于每种计算资源（CPU和Memory）而言，每个节点都有一个能用于运行Pod的最大容量值。调度器在调度时，首先要确保调度后该节点上所有Pod的CPU和内存的Requests总和，不超过该节点能提供给Pod使用的CPU和Memory的最大容量值。&lt;/p&gt;
&lt;h2 id=&quot;63、简述Kubernetes-Metric-Service&quot;&gt;&lt;a href=&quot;#63、简述Kubernetes-Metric-Service&quot; class=&quot;headerlink&quot; title=&quot;63、简述Kubernetes Metric Service?&quot;&gt;&lt;/a&gt;63、简述Kubernetes Metric Service?&lt;/h2&gt;&lt;p&gt;在Kubernetes从1.10版本后采用Metrics Server作为默认的性能数据采集和监控，主要用于提供核心指标（Core Metrics），包括Node、Pod的CPU和内存使用指标。&lt;/p&gt;
&lt;p&gt;对其他自定义指标（Custom Metrics）的监控则由Prometheus等组件来完成。&lt;/p&gt;
&lt;h2 id=&quot;64、简述Kubernetes中，如何使用EFK实现日志的统一管理&quot;&gt;&lt;a href=&quot;#64、简述Kubernetes中，如何使用EFK实现日志的统一管理&quot; class=&quot;headerlink&quot; title=&quot;64、简述Kubernetes中，如何使用EFK实现日志的统一管理&quot;&gt;&lt;/a&gt;64、简述Kubernetes中，如何使用EFK实现日志的统一管理&lt;/h2&gt;&lt;p&gt;在Kubernetes集群环境中，通常一个完整的应用或服务涉及组件过多，建议对日志系统进行集中化管理，通常采用EFK实现。&lt;/p&gt;
&lt;p&gt;EFK是 Elasticsearch、Fluentd 和 Kibana 的组合，其各组件功能如下：&lt;/p&gt;
&lt;p&gt;Elasticsearch：是一个搜索引擎，负责存储日志并提供查询接口；&lt;/p&gt;
&lt;p&gt;Fluentd：负责从 Kubernetes 搜集日志，每个node节点上面的fluentd监控并收集该节点上面的系统日志，并将处理过后的日志信息发送给Elasticsearch；&lt;/p&gt;
&lt;p&gt;Kibana：提供了一个 Web GUI，用户可以浏览和搜索存储在 Elasticsearch 中的日志。&lt;/p&gt;
&lt;p&gt;通过在每台node上部署一个以DaemonSet方式运行的fluentd来收集每台node上的日志。Fluentd将docker日志目录&amp;#x2F;var&amp;#x2F;lib&amp;#x2F;docker&amp;#x2F;containers和&amp;#x2F;var&amp;#x2F;log目录挂载到Pod中，然后Pod会在node节点的&amp;#x2F;var&amp;#x2F;log&amp;#x2F;pods目录中创建新的目录，可以区别不同的容器日志输出，该目录下有一个日志文件链接到&amp;#x2F;var&amp;#x2F;lib&amp;#x2F;docker&amp;#x2F;contianers目录下的容器日志输出。&lt;/p&gt;
&lt;h2 id=&quot;65、简述Kubernetes如何进行优雅的节点关机维护&quot;&gt;&lt;a href=&quot;#65、简述Kubernetes如何进行优雅的节点关机维护&quot; class=&quot;headerlink&quot; title=&quot;65、简述Kubernetes如何进行优雅的节点关机维护?&quot;&gt;&lt;/a&gt;65、简述Kubernetes如何进行优雅的节点关机维护?&lt;/h2&gt;&lt;p&gt;由于Kubernetes节点运行大量Pod，因此在进行关机维护之前，建议先使用kubectl drain将该节点的Pod进行驱逐，然后进行关机维护。&lt;/p&gt;
&lt;h2 id=&quot;66、简述Kubernetes集群联邦&quot;&gt;&lt;a href=&quot;#66、简述Kubernetes集群联邦&quot; class=&quot;headerlink&quot; title=&quot;66、简述Kubernetes集群联邦?&quot;&gt;&lt;/a&gt;66、简述Kubernetes集群联邦?&lt;/h2&gt;&lt;p&gt;Kubernetes集群联邦可以将多个Kubernetes集群作为一个集群进行管理。因此，可以在一个数据中心&amp;#x2F;云中创建多个Kubernetes集群，并使用集群联邦在一个地方控制&amp;#x2F;管理所有集群。&lt;/p&gt;
&lt;h2 id=&quot;67、简述Helm及其优势&quot;&gt;&lt;a href=&quot;#67、简述Helm及其优势&quot; class=&quot;headerlink&quot; title=&quot;67、简述Helm及其优势?&quot;&gt;&lt;/a&gt;67、简述Helm及其优势?&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Helm及其优势&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;什么是Helm&lt;/td&gt;
&lt;td&gt;Helm是一个用于简化Kubernetes应用程序部署、更新和管理的包管理工具。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Chart&lt;/td&gt;
&lt;td&gt;Helm使用Chart来定义、安装和升级Kubernetes应用程序。Chart是一个包含了所有部署Kubernetes应用所需信息的打包文件。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;优势&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;- 模板引擎&lt;/td&gt;
&lt;td&gt;Helm使用Go语言的模板引擎，允许用户动态生成Kubernetes资源配置，实现配置的可重用性和参数化。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;- 版本控制&lt;/td&gt;
&lt;td&gt;Helm允许用户版本控制Chart，轻松管理不同应用程序版本的发布和回滚。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;- 包管理&lt;/td&gt;
&lt;td&gt;通过Helm，用户可以轻松共享和重用应用程序定义，避免重复劳动。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;- 依赖管理&lt;/td&gt;
&lt;td&gt;Helm支持定义Chart之间的依赖关系，简化了多组件应用程序的部署。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;- 社区支持&lt;/td&gt;
&lt;td&gt;Helm拥有活跃的社区，用户可以从社区中获取Chart，共享经验和解决问题。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;- 插件系统&lt;/td&gt;
&lt;td&gt;Helm提供插件系统，允许用户扩展其功能，满足特定需求。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;- 安全发布&lt;/td&gt;
&lt;td&gt;Helm允许用户将应用程序作为一个整体发布，确保一致性和可重复性。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;- Charts存储库&lt;/td&gt;
&lt;td&gt;用户可以配置Charts存储库，从中获取和发布Charts，便于管理和分发。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;- 自定义配置值&lt;/td&gt;
&lt;td&gt;Helm允许通过values文件自定义Chart的配置，提高了可配置性和灵活性。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h2 id=&quot;69、容器和主机部署应用的区别是什么&quot;&gt;&lt;a href=&quot;#69、容器和主机部署应用的区别是什么&quot; class=&quot;headerlink&quot; title=&quot;69、容器和主机部署应用的区别是什么?&quot;&gt;&lt;/a&gt;69、容器和主机部署应用的区别是什么?&lt;/h2&gt;&lt;p&gt;容器的中心思想就是秒级启动；一次封装、到处运行 容器部署可以将各个服务进行隔离，互不影响&lt;/p&gt;
&lt;h2 id=&quot;70、请你说一下kubenetes针对pod资源对象的健康监测机制&quot;&gt;&lt;a href=&quot;#70、请你说一下kubenetes针对pod资源对象的健康监测机制&quot; class=&quot;headerlink&quot; title=&quot;70、请你说一下kubenetes针对pod资源对象的健康监测机制?&quot;&gt;&lt;/a&gt;70、请你说一下kubenetes针对pod资源对象的健康监测机制?&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;livenessProbe&lt;/li&gt;
&lt;li&gt;readinessProbe&lt;/li&gt;
&lt;li&gt;startupProbe&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;71、如何控制滚动更新过程&quot;&gt;&lt;a href=&quot;#71、如何控制滚动更新过程&quot; class=&quot;headerlink&quot; title=&quot;71、如何控制滚动更新过程?&quot;&gt;&lt;/a&gt;71、如何控制滚动更新过程?&lt;/h2&gt;&lt;p&gt;maxSurge：　此参数控制滚动更新过程，副本总数超过预期pod数量的上限。可以是百分比，也可以是具体的值。默认为1。&lt;/p&gt;
&lt;p&gt;（上述参数的作用就是在更新过程中，值若为3，那么不管三七二一，先运行三个pod，用于替换旧的pod，以此类推）&lt;/p&gt;
&lt;p&gt;maxUnavailable： 此参数控制滚动更新过程中，不可用的Pod的数量。&lt;/p&gt;
&lt;p&gt;（这个值和上面的值没有任何关系，举个例子：我有十个pod，但是在更新的过程中，我允许这十个pod中最多有三个不可用，那么就将这个参数的值设置为3，在更新的过程中，只要不可用的pod数量小于或等于3，那么更新过程就不会停止）。&lt;/p&gt;
&lt;h2 id=&quot;75、Service这种资源对象的作用是什么&quot;&gt;&lt;a href=&quot;#75、Service这种资源对象的作用是什么&quot; class=&quot;headerlink&quot; title=&quot;75、Service这种资源对象的作用是什么?&quot;&gt;&lt;/a&gt;75、Service这种资源对象的作用是什么?&lt;/h2&gt;&lt;p&gt;用来给相同的多个pod对象提供一个固定的统一访问接口，常用于服务发现和服务访问。&lt;/p&gt;
&lt;h2 id=&quot;76、版本回滚相关的命令&quot;&gt;&lt;a href=&quot;#76、版本回滚相关的命令&quot; class=&quot;headerlink&quot; title=&quot;76、版本回滚相关的命令?&quot;&gt;&lt;/a&gt;76、版本回滚相关的命令?&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;命令&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;kubectl rollout history deployment&amp;#x2F;&lt;deployment-name&gt;&lt;/td&gt;
&lt;td&gt;查看滚动升级历史记录&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;kubectl rollout history deployment&amp;#x2F;&lt;deployment-name&gt; –revision&amp;#x3D;&lt;revision-number&gt;&lt;/td&gt;
&lt;td&gt;查看特定版本的详细信息&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;kubectl rollout undo deployment&amp;#x2F;&lt;deployment-name&gt;&lt;/td&gt;
&lt;td&gt;回滚到上一个版本&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;kubectl rollout undo deployment&amp;#x2F;&lt;deployment-name&gt; –to-revision&amp;#x3D;&lt;revision-number&gt;&lt;/td&gt;
&lt;td&gt;回滚到特定版本&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h2 id=&quot;77、标签与标签选择器的作用是什么&quot;&gt;&lt;a href=&quot;#77、标签与标签选择器的作用是什么&quot; class=&quot;headerlink&quot; title=&quot;77、标签与标签选择器的作用是什么?&quot;&gt;&lt;/a&gt;77、标签与标签选择器的作用是什么?&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名词&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;标签（Label）&lt;/td&gt;
&lt;td&gt;标签是键值对，用于附加元数据到Kubernetes资源对象（如Pod、Service、Node等）。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;标签选择器（Label Selector）&lt;/td&gt;
&lt;td&gt;标签选择器用于选择带有特定标签的资源对象，以便进行筛选和操作。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;作用&lt;/td&gt;
&lt;td&gt;通过标签，可以对资源对象进行分类、组织和识别，提供更灵活的资源管理和调度方式。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;标签选择器允许用户根据标签的键值对对资源进行查询和选择，用于实现有选择性的操作。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;示例&lt;/td&gt;
&lt;td&gt;一个Pod可以有标签app&amp;#x3D;web，允许使用标签选择器选择所有具有该标签的Pod进行管理。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Service可以使用标签选择器将请求路由到具有特定标签的Pod，实现服务发现和负载均衡。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h2 id=&quot;78、常用的标签分类有哪些&quot;&gt;&lt;a href=&quot;#78、常用的标签分类有哪些&quot; class=&quot;headerlink&quot; title=&quot;78、常用的标签分类有哪些?&quot;&gt;&lt;/a&gt;78、常用的标签分类有哪些?&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;类别&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;环境&lt;/td&gt;
&lt;td&gt;用于区分不同环境，如environment&amp;#x3D;production。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;应用程序&lt;/td&gt;
&lt;td&gt;用于标识属于哪个应用程序，如app&amp;#x3D;web。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;版本&lt;/td&gt;
&lt;td&gt;用于标识应用程序或组件的版本，如version&amp;#x3D;1.2.3。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;部门&lt;/td&gt;
&lt;td&gt;用于区分不同部门的资源，如department&amp;#x3D;finance。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;客户&lt;/td&gt;
&lt;td&gt;用于标识属于哪个客户，如customer&amp;#x3D;companyA。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;组织&lt;/td&gt;
&lt;td&gt;用于标识属于哪个组织，如organization&amp;#x3D;dev-team。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;状态&lt;/td&gt;
&lt;td&gt;用于标识资源的状态，如status&amp;#x3D;ready。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;系统&lt;/td&gt;
&lt;td&gt;用于标识系统级别的资源，如system&amp;#x3D;true。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h2 id=&quot;79、有几种查看标签的方式&quot;&gt;&lt;a href=&quot;#79、有几种查看标签的方式&quot; class=&quot;headerlink&quot; title=&quot;79、有几种查看标签的方式?&quot;&gt;&lt;/a&gt;79、有几种查看标签的方式?&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;方式&lt;/th&gt;
&lt;th&gt;命令&amp;#x2F;操作&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;查看单个资源的标签&lt;/td&gt;
&lt;td&gt;kubectl get &amp;lt;资源类型&amp;gt; &amp;lt;资源名称&amp;gt; -o yaml&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;查看所有资源的标签&lt;/td&gt;
&lt;td&gt;kubectl get &amp;lt;资源类型&amp;gt; –show-labels&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;查看特定标签的资源&lt;/td&gt;
&lt;td&gt;kubectl get &amp;lt;资源类型&amp;gt; -l &amp;lt;标签选择器&amp;gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;查看所有命名空间中的标签&lt;/td&gt;
&lt;td&gt;kubectl get all –all-namespaces –show-labels&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;使用kubectl describe查看资源详情&lt;/td&gt;
&lt;td&gt;kubectl describe &amp;lt;资源类型&amp;gt; &amp;lt;资源名称&amp;gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h2 id=&quot;80、添加、修改、删除标签的命令&quot;&gt;&lt;a href=&quot;#80、添加、修改、删除标签的命令&quot; class=&quot;headerlink&quot; title=&quot;80、添加、修改、删除标签的命令?&quot;&gt;&lt;/a&gt;80、添加、修改、删除标签的命令?&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;操作&lt;/th&gt;
&lt;th&gt;命令&lt;/th&gt;
&lt;th&gt;示例&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;添加标签&lt;/td&gt;
&lt;td&gt;kubectl label &amp;lt;资源类型&amp;gt; &amp;lt;资源名称&amp;gt; &amp;lt;键&amp;gt;&amp;#x3D;&amp;lt;值&amp;gt;&lt;/td&gt;
&lt;td&gt;kubectl label pod nginx-app app&amp;#x3D;web&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;修改标签&lt;/td&gt;
&lt;td&gt;kubectl label –overwrite &amp;lt;资源类型&amp;gt; &amp;lt;资源名称&amp;gt; &amp;lt;键&amp;gt;&amp;#x3D;&amp;lt;新值&amp;gt;&lt;/td&gt;
&lt;td&gt;kubectl label –overwrite pod nginx-app app&amp;#x3D;backend&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;删除标签&lt;/td&gt;
&lt;td&gt;kubectl label &amp;lt;资源类型&amp;gt; &amp;lt;资源名称&amp;gt; &amp;lt;键&amp;gt;-&lt;/td&gt;
&lt;td&gt;kubectl label pod nginx-app app-&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h2 id=&quot;82、说说你对Job这种资源对象的了解&quot;&gt;&lt;a href=&quot;#82、说说你对Job这种资源对象的了解&quot; class=&quot;headerlink&quot; title=&quot;82、说说你对Job这种资源对象的了解?&quot;&gt;&lt;/a&gt;82、说说你对Job这种资源对象的了解?&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;概念&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;任务类型&lt;/td&gt;
&lt;td&gt;Job主要用于管理一次性任务或批处理任务&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Pod管理&lt;/td&gt;
&lt;td&gt;创建一个或多个Pod，Pod包含执行任务所需的容器&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;任务完成策略&lt;/td&gt;
&lt;td&gt;有两种策略，Parallel允许多个Pod并行运行，Complete确保所有Pod成功完成&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;重试机制&lt;/td&gt;
&lt;td&gt;支持任务的重试，启动新的Pod替代失败的Pod&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;成功条件&lt;/td&gt;
&lt;td&gt;配置成功的条件，如成功运行的Pod数量或成功完成的总任务数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;示例&lt;/td&gt;
&lt;td&gt;一个简单的Job定义包括容器镜像、命令和重试策略&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;figure class=&quot;highlight yaml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;apiVersion:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;batch/v1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;kind:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;Job&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;metadata:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;name:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;example-job&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;spec:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;template:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;metadata:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;attr&quot;&gt;name:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;example-job-pod&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;spec:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;attr&quot;&gt;containers:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;bullet&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;name:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;example-container&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;image:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;example-image&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;command:&lt;/span&gt; [&lt;span class=&quot;string&quot;&gt;&amp;quot;echo&amp;quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;Hello, Kubernetes!&amp;quot;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;backoffLimit:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&quot;85、删除一个Pod会发生什么事情&quot;&gt;&lt;a href=&quot;#85、删除一个Pod会发生什么事情&quot; class=&quot;headerlink&quot; title=&quot;85、删除一个Pod会发生什么事情?&quot;&gt;&lt;/a&gt;85、删除一个Pod会发生什么事情?&lt;/h2&gt;&lt;p&gt;答：Kube-apiserver会接受到用户的删除指令，默认有30秒时间等待优雅退出，超过30秒会被标记为死亡状态，此时Pod的状态Terminating，kubelet看到pod标记为Terminating就开始了关闭Pod的工作；&lt;/p&gt;
&lt;p&gt;关闭流程如下：&lt;/p&gt;
&lt;p&gt;pod从service的endpoint列表中被移除； 如果该pod定义了一个停止前的钩子，其会在pod内部被调用，停止钩子一般定义了如何优雅的结束进程； 进程被发送TERM信号（kill -14） 当超过优雅退出的时间后，Pod中的所有进程都会被发送SIGKILL信号（kill -9）。&lt;/p&gt;
&lt;h2 id=&quot;87、k8s是怎么进行服务注册的&quot;&gt;&lt;a href=&quot;#87、k8s是怎么进行服务注册的&quot; class=&quot;headerlink&quot; title=&quot;87、k8s是怎么进行服务注册的?&quot;&gt;&lt;/a&gt;87、k8s是怎么进行服务注册的?&lt;/h2&gt;&lt;p&gt;Pod启动后会加载当前环境所有Service信息，以便不同Pod根据Service名进行通信。&lt;/p&gt;
&lt;h2 id=&quot;88、k8s集群外流量怎么访问Pod&quot;&gt;&lt;a href=&quot;#88、k8s集群外流量怎么访问Pod&quot; class=&quot;headerlink&quot; title=&quot;88、k8s集群外流量怎么访问Pod?&quot;&gt;&lt;/a&gt;88、k8s集群外流量怎么访问Pod?&lt;/h2&gt;&lt;p&gt;可以通过Service的NodePort方式访问，会在所有节点监听同一个端口，比如：30000，访问节点的流量会被重定向到对应的Service上面。&lt;/p&gt;
&lt;h2 id=&quot;90、Kubernetes与Docker-Swarm的区别如何&quot;&gt;&lt;a href=&quot;#90、Kubernetes与Docker-Swarm的区别如何&quot; class=&quot;headerlink&quot; title=&quot;90、Kubernetes与Docker Swarm的区别如何?&quot;&gt;&lt;/a&gt;90、Kubernetes与Docker Swarm的区别如何?&lt;/h2&gt;&lt;p&gt;Kubernetes有助于管理更复杂的软件应用容器；Docker Swarm只能编排简单的Docker容器 支持自动扩缩容；不支持自动扩缩容 滚动更新回滚；滚动更新不能自动回滚 仅能与同一pod的容器共享存储卷；可以和其他任何容器共享存储卷&lt;/p&gt;
&lt;h2 id=&quot;94、什么是Container-Orchestration（容器编排）&quot;&gt;&lt;a href=&quot;#94、什么是Container-Orchestration（容器编排）&quot; class=&quot;headerlink&quot; title=&quot;94、什么是Container Orchestration（容器编排）?&quot;&gt;&lt;/a&gt;94、什么是Container Orchestration（容器编排）?&lt;/h2&gt;&lt;p&gt;意味着各个容器中的所有服务协同工作以满足单个服务器的需求&lt;/p&gt;
&lt;h2 id=&quot;95、Container-Orchestration需要什么&quot;&gt;&lt;a href=&quot;#95、Container-Orchestration需要什么&quot; class=&quot;headerlink&quot; title=&quot;95、Container Orchestration需要什么?&quot;&gt;&lt;/a&gt;95、Container Orchestration需要什么?&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;组件&amp;#x2F;功能&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;编排引擎&lt;/td&gt;
&lt;td&gt;管理和调度容器的核心组件，负责实现自动化部署和伸缩&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;编排策略&lt;/td&gt;
&lt;td&gt;决定容器如何分布、伸缩和调度的规则和算法&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;服务发现&lt;/td&gt;
&lt;td&gt;动态发现和管理容器化应用程序中的服务和网络细节&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;负载均衡&lt;/td&gt;
&lt;td&gt;将流量分发到不同的容器实例，确保应用程序高可用性&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;自动伸缩&lt;/td&gt;
&lt;td&gt;根据应用程序负载和需求自动调整容器实例数量&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;健康检查&lt;/td&gt;
&lt;td&gt;定期检查容器实例的健康状态，以确保高可用性&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;日志管理&lt;/td&gt;
&lt;td&gt;收集、存储和管理容器产生的日志信息&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;配置管理&lt;/td&gt;
&lt;td&gt;管理应用程序配置的中心化系统，支持动态配置更新&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;安全性和权限&lt;/td&gt;
&lt;td&gt;提供容器级别和集群级别的安全性和访问控制&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;存储编排&lt;/td&gt;
&lt;td&gt;管理和调度容器中的数据存储，支持持久化和共享存储&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;版本控制&lt;/td&gt;
&lt;td&gt;管理应用程序和容器镜像的版本，支持回滚和升级&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;跨节点通信&lt;/td&gt;
&lt;td&gt;实现容器之间的通信，跨节点通信保障分布式应用正常运行&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;故障恢复&lt;/td&gt;
&lt;td&gt;处理节点故障、容器故障，确保应用程序的高可用性&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h2 id=&quot;97、Kubernetes如何简化容器化部署&quot;&gt;&lt;a href=&quot;#97、Kubernetes如何简化容器化部署&quot; class=&quot;headerlink&quot; title=&quot;97、Kubernetes如何简化容器化部署?&quot;&gt;&lt;/a&gt;97、Kubernetes如何简化容器化部署?&lt;/h2&gt;&lt;p&gt;由于典型应用程序将具有跨多个主机运行的容器集群，因此所有这些容器都需要相互通信。因此，要做到这一点，你需要一些能够负载平衡，扩展和监控容器的东西。由于Kubernetes与云无关并且可以在任何公共&amp;#x2F;私有提供商上运行，因此必须是您简化容器化部署的选择。&lt;/p&gt;
&lt;h2 id=&quot;98、对Kubernetes的集群了解多少？&quot;&gt;&lt;a href=&quot;#98、对Kubernetes的集群了解多少？&quot; class=&quot;headerlink&quot; title=&quot;98、对Kubernetes的集群了解多少？&quot;&gt;&lt;/a&gt;98、对Kubernetes的集群了解多少？&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;概念&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;Master节点&lt;/td&gt;
&lt;td&gt;Kubernetes集群的控制中心，负责整个集群的管理和控制。主要组件包括kube-apiserver、kube-controller-manager、kube-scheduler和etcd等。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Node节点&lt;/td&gt;
&lt;td&gt;集群中的工作节点，负责运行应用程序容器。每个Node节点上都运行有kubelet和kube-proxy，与Master节点协同工作。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Pod&lt;/td&gt;
&lt;td&gt;Kubernetes中最小的部署单元，包含一个或多个容器。Pod共享网络和存储资源，它们在同一节点上运行，并可以直接通过localhost通信。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Service&lt;/td&gt;
&lt;td&gt;服务是一种抽象，定义了一组Pod及其访问方式。它确保了Pod的稳定网络标识和动态路由。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Namespace&lt;/td&gt;
&lt;td&gt;命名空间用于将集群划分为多个虚拟集群，每个命名空间中的资源相互隔离。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ConfigMap和Secret&lt;/td&gt;
&lt;td&gt;ConfigMap用于将配置数据提供给应用程序，而Secret用于存储敏感信息，如密码和API密钥。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h2 id=&quot;99、什么是Google容器引擎&quot;&gt;&lt;a href=&quot;#99、什么是Google容器引擎&quot; class=&quot;headerlink&quot; title=&quot;99、什么是Google容器引擎?&quot;&gt;&lt;/a&gt;99、什么是Google容器引擎?&lt;/h2&gt;&lt;p&gt;Google Container Engine（GKE）是Docker容器和集群的开源管理平台。这个基于Kubernetes的引擎仅支持在Google的公共云服务中运行的群集。&lt;/p&gt;
&lt;h2 id=&quot;100、什么是Heapster&quot;&gt;&lt;a href=&quot;#100、什么是Heapster&quot; class=&quot;headerlink&quot; title=&quot;100、什么是Heapster?&quot;&gt;&lt;/a&gt;100、什么是Heapster?&lt;/h2&gt;&lt;p&gt;Heapster是由每个节点上运行的Kubelet提供的集群范围的数据聚合器。此容器管理工具在Kubernetes集群上本机支持，并作为pod运行，就像集群中的任何其他pod一样。因此，它基本上发现集群中的所有节点，并通过机上Kubernetes代理查询集群中Kubernetes节点的使用信息。&lt;/p&gt;
&lt;h2 id=&quot;107、kube-apiserver和kube-scheduler的作用是什么&quot;&gt;&lt;a href=&quot;#107、kube-apiserver和kube-scheduler的作用是什么&quot; class=&quot;headerlink&quot; title=&quot;107、kube-apiserver和kube-scheduler的作用是什么?&quot;&gt;&lt;/a&gt;107、kube-apiserver和kube-scheduler的作用是什么?&lt;/h2&gt;&lt;p&gt;kube-apiserver遵循横向扩展架构，是主节点控制面板的前端。这将公开Kubernetes主节点组件的所有API，并负责在Kubernetes节点和Kubernetes主组件之间建立通信。 kube-scheduler负责工作节点上工作负载的分配和管理。因此，它根据资源需求选择最合适的节点来运行未调度的pod，并跟踪资源利用率。它确保不在已满的节点上调度工作负载。&lt;/p&gt;
&lt;h2 id=&quot;108、你能简要介绍一下Kubernetes控制管理器吗&quot;&gt;&lt;a href=&quot;#108、你能简要介绍一下Kubernetes控制管理器吗&quot; class=&quot;headerlink&quot; title=&quot;108、你能简要介绍一下Kubernetes控制管理器吗?&quot;&gt;&lt;/a&gt;108、你能简要介绍一下Kubernetes控制管理器吗?&lt;/h2&gt;&lt;p&gt;多个控制器进程在主节点上运行，但是一起编译为单个进程运行，即Kubernetes控制器管理器。因此，Controller Manager是一个嵌入控制器并执行命名空间创建和垃圾收集的守护程序。它拥有责任并与API服务器通信以管理端点。 常见控制器： - node controller - hpa controller - replication controller - service account &amp;amp; token controller - endpoints controller&lt;/p&gt;
&lt;h2 id=&quot;112、什么是Ingress网络，它是如何工作的&quot;&gt;&lt;a href=&quot;#112、什么是Ingress网络，它是如何工作的&quot; class=&quot;headerlink&quot; title=&quot;112、什么是Ingress网络，它是如何工作的?&quot;&gt;&lt;/a&gt;112、什么是Ingress网络，它是如何工作的?&lt;/h2&gt;&lt;p&gt;Ingress网络是一组规则，充当Kubernetes集群的入口点。这允许入站连接，可以将其配置为 通过可访问的URL，负载平衡流量或通过提供基于名称的虚拟主机从外部提供服务。因此， Ingress是一个API对象，通常通过HTTP管理集群中服务的外部访问，是暴露服务的最有效方 式。&lt;/p&gt;
&lt;p&gt;现在，让我以一个例子向您解释Ingress网络的工作。&lt;/p&gt;
&lt;p&gt;有2个节点具有带有Linux桥接器的pod和根网络命名空间。除此之外，还有一个名为 flannel0（网络插件）的新虚拟以太网设备被添加到根网络中。&lt;/p&gt;
&lt;p&gt;现在，假设我们希望数据包从pod1流向pod 4。&lt;/p&gt;
&lt;p&gt;因此，数据包将pod1的网络保留在eth0，并进入veth0的根网络。 然后它被传递给cbr0，这使得ARP请求找到目的地，并且发现该节点上没有人具有目的地IP地址。&lt;/p&gt;
&lt;p&gt;因此，桥接器将数据包发送到flannel0，因为节点的路由表配置了flannel0。 现在，flannel守护程序与Kubernetes的API服务器通信，以了解所有pod IP及其各自的节 点，以创建pods IP到节点IP的映射。&lt;/p&gt;
&lt;p&gt;网络插件将此数据包封装在UDP数据包中，其中额外的标头将源和目标IP更改为各自的节点， 并通过eth0发送此数据包。&lt;/p&gt;
&lt;p&gt;现在，由于路由表已经知道如何在节点之间路由流量，因此它将数据包发送到目标节点2。 数据包到达node2的eth0并返回到flannel0以解封装并在根网络命名空间中将其发回。 同样，数据包被转发到Linux网桥以发出ARP请求以找出属于veth1的IP。 数据包最终穿过根网络并到达目标Pod4。&lt;/p&gt;
&lt;h2 id=&quot;113、您对云控制器管理器有何了解&quot;&gt;&lt;a href=&quot;#113、您对云控制器管理器有何了解&quot; class=&quot;headerlink&quot; title=&quot;113、您对云控制器管理器有何了解?&quot;&gt;&lt;/a&gt;113、您对云控制器管理器有何了解?&lt;/h2&gt;&lt;p&gt;Cloud Controller Manager负责持久存储，网络路由，从核心Kubernetes特定代码中抽象出特定于云的代码，以及管理与底层云服务的通信。它可能会分成几个不同的容器，具体取决于您运行的是哪个云平台，然后它可以使云供应商和Kubernetes代码在没有任何相互依赖的情况下开发。因此，云供应商开发他们的代码并在运行Kubernetes时与Kubernetes云控制器管理器连接。 - node controller - route controller - volume controller - service controller&lt;/p&gt;
&lt;h2 id=&quot;114、什么是Container资源监控&quot;&gt;&lt;a href=&quot;#114、什么是Container资源监控&quot; class=&quot;headerlink&quot; title=&quot;114、什么是Container资源监控?&quot;&gt;&lt;/a&gt;114、什么是Container资源监控?&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;概念&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;容器资源监控&lt;/td&gt;
&lt;td&gt;监控容器运行时的资源使用情况，包括CPU利用率、内存使用、网络IO等。用于性能分析、故障排查和资源优化。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;监控指标&lt;/td&gt;
&lt;td&gt;常见的容器监控指标包括CPU利用率、内存使用量、磁盘IO、网络IO、容器启动时间等。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;监控工具&lt;/td&gt;
&lt;td&gt;一些常用的容器监控工具包括Prometheus、Grafana、cAdvisor等。它们提供可视化和警报功能，帮助管理员实时监控和管理容器。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;数据收集&lt;/td&gt;
&lt;td&gt;监控工具通过在容器内运行代理或直接访问容器运行时API，收集实时的性能数据。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;可视化和报警&lt;/td&gt;
&lt;td&gt;容器监控工具通常提供仪表盘和报警功能，让管理员能够直观地查看容器集群的状态，并在发生异常时及时收到通知。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h2 id=&quot;115、Replica-Set和Replication-Controller之间有什么区别&quot;&gt;&lt;a href=&quot;#115、Replica-Set和Replication-Controller之间有什么区别&quot; class=&quot;headerlink&quot; title=&quot;115、Replica Set和Replication Controller之间有什么区别?&quot;&gt;&lt;/a&gt;115、Replica Set和Replication Controller之间有什么区别?&lt;/h2&gt;&lt;p&gt;Replica Set 和 Replication Controller几乎完全相同。它们都确保在任何给定时间运行指定数量的pod副本。不同之处在于复制pod使用的选择器。Replica Set使用基于集合的选择器，而Replication Controller使用基于权限的选择器。&lt;/p&gt;
&lt;h2 id=&quot;117、使用Kubernetes时可以采取哪些最佳安全措施&quot;&gt;&lt;a href=&quot;#117、使用Kubernetes时可以采取哪些最佳安全措施&quot; class=&quot;headerlink&quot; title=&quot;117、使用Kubernetes时可以采取哪些最佳安全措施?&quot;&gt;&lt;/a&gt;117、使用Kubernetes时可以采取哪些最佳安全措施?&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;日志记录生产环境中的所有内容&lt;/li&gt;
&lt;li&gt;定期对环境应用安全更新&lt;/li&gt;
&lt;li&gt;实施网络分割&lt;/li&gt;
&lt;li&gt;为资源制定严格的策略&amp;#x2F;规则&lt;/li&gt;
&lt;li&gt;实施持续安全漏洞扫描&lt;/li&gt;
&lt;li&gt;提供对 k8s</summary>
        
      
    
    
    
    <category term="面试" scheme="https://bishoptylaor.github.io/categories/interview/"/>
    
    <category term="面试100题" scheme="https://bishoptylaor.github.io/categories/interview/100prob/"/>
    
    
    <category term="必看必会" scheme="https://bishoptylaor.github.io/tags/%E5%BF%85%E7%9C%8B%E5%BF%85%E4%BC%9A/"/>
    
    <category term="面试" scheme="https://bishoptylaor.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>redis-ziplist</title>
    <link href="https://bishoptylaor.github.io/library/db/Redis/redis-ziplist/"/>
    <id>https://bishoptylaor.github.io/library/db/Redis/redis-ziplist/</id>
    <published>2024-05-23T16:38:10.000Z</published>
    <updated>2024-05-23T16:48:00.065Z</updated>
    
    
    
    
    <category term="知识库" scheme="https://bishoptylaor.github.io/categories/library/"/>
    
    <category term="数据库" scheme="https://bishoptylaor.github.io/categories/library/db/"/>
    
    <category term="Redis" scheme="https://bishoptylaor.github.io/categories/library/db/Redis/"/>
    
    
  </entry>
  
  <entry>
    <title>Redis 跳表详解</title>
    <link href="https://bishoptylaor.github.io/library/db/Redis/redis-skiplist/"/>
    <id>https://bishoptylaor.github.io/library/db/Redis/redis-skiplist/</id>
    <published>2024-05-23T16:24:49.000Z</published>
    <updated>2024-05-23T16:48:00.064Z</updated>
    
    
    
    
    <category term="知识库" scheme="https://bishoptylaor.github.io/categories/library/"/>
    
    <category term="数据库" scheme="https://bishoptylaor.github.io/categories/library/db/"/>
    
    <category term="Redis" scheme="https://bishoptylaor.github.io/categories/library/db/Redis/"/>
    
    
  </entry>
  
  <entry>
    <title>计算机网络</title>
    <link href="https://bishoptylaor.github.io/library/elementary/network/"/>
    <id>https://bishoptylaor.github.io/library/elementary/network/</id>
    <published>2024-05-22T10:42:59.000Z</published>
    <updated>2024-05-22T10:45:53.987Z</updated>
    
    
    
    
    <category term="知识库" scheme="https://bishoptylaor.github.io/categories/library/"/>
    
    <category term="计算机基础" scheme="https://bishoptylaor.github.io/categories/library/elementary/"/>
    
    
  </entry>
  
  <entry>
    <title>操作系统八股文</title>
    <link href="https://bishoptylaor.github.io/library/elementary/os-eight-part-frame/"/>
    <id>https://bishoptylaor.github.io/library/elementary/os-eight-part-frame/</id>
    <published>2024-05-22T10:39:00.149Z</published>
    <updated>2024-05-22T10:47:18.804Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;操作系统&quot;&gt;&lt;a href=&quot;#操作系统&quot; class=&quot;headerlink&quot; title=&quot;操作系统&quot;&gt;&lt;/a&gt;操作系统&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;并发和并行&lt;/strong&gt;&lt;br&gt;并发是指&lt;strong&gt;一个处理器&lt;/strong&gt;同时处理多个任务。&lt;br&gt;并行是指&lt;strong&gt;多个处理器&lt;/strong&gt;或者是多核的处理器同时处理多个不同的任务。&lt;br&gt;并发是逻辑上的同时发生（simultaneous），而并行是物理上的同时发生。&lt;/p&gt;
&lt;p&gt;**并行(parallel)**：指在同一时刻，有多条指令在多个处理器上同时执行。就好像两个人各拿一把铁锨在挖坑，一小时后，每人一个大坑。所以无论从微观还是从宏观来看，二者都是一起执行的。&lt;/p&gt;
&lt;p&gt;**并发(concurrency)**：指在同一时刻只能有一条指令执行，但多个进程指令被快速的轮换执行，使得在宏观上具有多个进程同时执行的效果，但在微观上并不是同时执行的，只是把时间分成若干段，使多个进程快速交替的执行。这就好像两个人用同一把铁锨，轮流挖坑，一小时后，两个人各挖一个小一点的坑，要想挖两个大一点得坑，一定会用两个小时。&lt;/p&gt;
&lt;p&gt;并行在多处理器系统中存在，而并发可以在单处理器和多处理器系统中都存在，并发能够在单处理器系统中存在是因为并发是并行的假象，并行要求程序能够同时执行多个操作，而并发只是要求程序假装同时执行多个操作（每个小时间片执行一个操作，多个操作快速切换执行）。&lt;/p&gt;
&lt;p&gt;操作系统的功能&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;进程管理&lt;/li&gt;
&lt;li&gt;内存管理：提高内存利用率和访问速度，从而提高计算机的运行效率&lt;/li&gt;
&lt;li&gt;文件管理&lt;/li&gt;
&lt;li&gt;IO设备管理：设备无关性，将设备抽象成逻辑设备&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;分成外核与内核模式的原因：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;保证操作系统受其他系统异常故障的影响；内核模式只能运行操作系统的程序，用户程序运行在外核中；&lt;/li&gt;
&lt;li&gt;确保可能引起系统崩溃的指令（特权指令）只能在内核模式下运行；&lt;/li&gt;
&lt;li&gt;为了防止非法IO，将所有IO指令定义为特权指令&lt;/li&gt;
&lt;li&gt;设置中断，一定时间后将控制权返回给操作系统&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id=&quot;进程和线程的区别&quot;&gt;&lt;a href=&quot;#进程和线程的区别&quot; class=&quot;headerlink&quot; title=&quot;进程和线程的区别&quot;&gt;&lt;/a&gt;&lt;strong&gt;进程和线程的区别&lt;/strong&gt;&lt;/h6&gt;&lt;p&gt;进程，是计算机中的程序关于某数据集合上的一次运行活动，是系统进行资源分配和调度的基本单位&lt;/p&gt;
&lt;p&gt;在执行一些细小任务时，本身无需分配单独资源时(多个任务共享同一组资源即可，比如所有子进程共享父进程的资源)，进程的实现机制依然会繁琐的将资源分割，这样造成浪费，而且还消耗时间。后来就有了专门的多任务技术被创造出来——线程。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;共同点&lt;/strong&gt;：在多任务程序中，子进程(子线程)的调度一般与父进程(父线程)平等竞争。在早期的Linux内核中，线程的实现和管理方式就是&lt;strong&gt;完全按照进程方式实现的&lt;/strong&gt;。在2.6版内核以后才有了单独的线程实现。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;实现方法的差异&lt;/strong&gt;：进程的个体间是完全独立的，而线程间是彼此依存的。多进程环境中，任何一个进程的终止，不会影响到其他进程。而多线程环境中，父线程终止，全部子线程被迫终止(没有了资源)。而任何一个子线程终止一般不会影响其他线程，除非&lt;strong&gt;子线程执行了exit()系统调用&lt;/strong&gt;。任何一个子线程执行exit()，全部线程同时灭亡。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;从系统实现角度讲，进程的实现是调用fork系统调用：pid_t fork(void)；线程的实现是调用clone系统调用&lt;/li&gt;
&lt;li&gt;fork()是将父进程的&lt;strong&gt;全部资源复制给了子进程&lt;/strong&gt;。而线程的&lt;strong&gt;clone只是复制了一小部分必要的资源&lt;/strong&gt;。后来操作系统还进一步优化fork实现——&lt;strong&gt;写时复制技术&lt;/strong&gt;。在子进程需要复制资源(比如子进程执行写入动作更改父进程内存空间)时才复制，否则创建子进程时先不复制。&lt;/li&gt;
&lt;li&gt;个体间辈分关系的迥异；进程的备份关系森严，在父进程没有结束前，所有的子进程都尊从父子关系；多线程间的关系没有那么严格，不管是父线程还是子线程创建了新的线程，都是共享父线程的资源，所以，都可以说是父线程的子线程，也就是只存在一个父线程，其余线程都是父线程的子线程。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;内核态线程、轻量级进程、用户态线程&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;它的创建和撤消是由内核的内部需求来决定的，一个内核线程不需要&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;内核态线程&lt;/strong&gt;：和一个用户进程联系起来。它共享内核的正文段和全局数据，具有自己的内核堆栈。内核线程的调度由于不需要经过态的转换并进行地址空间的重新映射，因此在内核线程间做上下文切换比在进程间做上下文切换快得多。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;轻量级进程&lt;/strong&gt;：轻量级进程是核心支持的用户线程，它在一个单独的进程中提供多线程控制。这些轻量级进程被单独的调度，可以在多个处理器上运行，&lt;strong&gt;每一个轻量级进程都被绑定在一个内核线程上&lt;/strong&gt;，而且在它的&lt;strong&gt;生命周期&lt;/strong&gt;这种绑定都是有效的。轻量级进程被独立调度并且共享地址空间和进程中的其它资源，但是每个LWP都应该有自己的程序计数器、寄存器集合、核心栈和用户栈。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;用户线程&lt;/strong&gt;：用户线程是通过线程库实现的。它们可以在没有内核参与下创建、释放和管理。内核对它们一无所知，而只是调度用户线程下的进程或者轻量级进程，这些进程再通过线程库函数来调度它们的线程。当一个进程被抢占时，它的所有用户线程都被抢占，当一个用户线程被阻塞时，它会阻塞下面的轻量级进程，如果进程只有一个轻量级进程，则它的所有用户线程都会被阻塞。&lt;/p&gt;
&lt;p&gt; &lt;strong&gt;注意&lt;/strong&gt;：Linux中，每个线程都有一个task_struct，所以线程和进程可以使用同一调度器调度。如果一个task独占所有的资源，则是一个HWP，如果一个task和其它task共享部分资源，则是LWP。&lt;strong&gt;clone&lt;/strong&gt;系统调用就是一个&lt;strong&gt;创建轻量级进程&lt;/strong&gt;的系统调用，clone的用法和pthread_create有些相似，两者的最根本的差别在于clone是创建一个LWP，对核心是可见的，由核心调度，&lt;strong&gt;而pthread_create通常只是创建一个用户线程&lt;/strong&gt;，对核心是不可见的，由线程库调度。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;PCB进程控制模块&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;记录进程信息：进程标识信息、处理机状态、进程调度信息、资源分配信息&lt;/li&gt;
&lt;li&gt;操作系统是根据进程控制块PCB来对并发执行的进程进行控制和管理的。&lt;/li&gt;
&lt;li&gt;PCB是进程存在的唯一标志&lt;/li&gt;
&lt;li&gt;寄存器、堆栈指针、程序计数器、进程状态、优先级、调度的参数、父进程、cpu占用时间&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;进程和程序的区别&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Program 指令的集合、是静态的概念；是持久的&lt;/p&gt;
&lt;p&gt;Process 描述的是执行，动态的概念、包含程序、数据以及PCB；是暂时的&lt;/p&gt;
&lt;h6 id=&quot;进程之间的通信&quot;&gt;&lt;a href=&quot;#进程之间的通信&quot; class=&quot;headerlink&quot; title=&quot;进程之间的通信&quot;&gt;&lt;/a&gt;&lt;strong&gt;进程之间的通信&lt;/strong&gt;&lt;/h6&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;共享内存&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;最快的速度进行方便的通信；&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;信息传递&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;交换较少的数据；小号时间多&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;间接通信&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每当一个信箱有一个唯一的id&lt;/li&gt;
&lt;li&gt;仅当共享一个信箱时，才能通信&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;共享存储&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;两个进程对共享空间的存储是互斥的&lt;ul&gt;
&lt;li&gt;基于数据结构的：共享速度慢、限制多、是一种低级通信方法&lt;/li&gt;
&lt;li&gt;基于存储区的共享，数据的形式、存放位置都是由进程控制的，是一种高级通信方式&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;管道通信&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;某个时间只能单行通信，在内存中开辟一个固定大小的缓冲区，但是也是互斥的&lt;/li&gt;
&lt;li&gt;需要将缓冲区写满，缓冲区读满的时候才可以&lt;/li&gt;
&lt;li&gt;数据不可以重复读，所以读进程只能有一个&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;消息传递&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;直接通信：将消息挂到对应线程的缓冲队列上，每个进程都会有自己信息缓冲队列，需要设置一些头&lt;/li&gt;
&lt;li&gt;间接通信方式：将信息挂载到中间实体，也被称为“信箱”&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;线程&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;引入的原因&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;​    进程操作系统开销大；将进程的两个任务分开：&lt;strong&gt;分配资源&lt;/strong&gt;以及&lt;strong&gt;调度&lt;/strong&gt;；对于作为调度和分派的基本单位，不同时作为拥有资源的单位，以做到“轻装上阵”； 对于拥有资源的基本单位，又不对之进行频繁的切换。&lt;/li&gt;
&lt;li&gt;因此线程为CPU调度的最小单位，进程为资源分配的最小单位&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;线程&lt;strong&gt;不拥有系统资源&lt;/strong&gt;，只有其运行所必需的一些数据结构：TCB, a program counter, a register set, and a stack. 它与该进程内其它线程&lt;strong&gt;共享&lt;/strong&gt;该进程所拥有的&lt;strong&gt;全部资源&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;线程和进程的区别&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;进程是&lt;strong&gt;资源分配&lt;/strong&gt;的基本单位，所有与该进程有关的资源分配情况，进程也是分配主存的基本单位，它拥有一个完整的虚拟地址空间。而线程与资源分配无关，它属于某一个进程，并与该进程内的其它线程一起共享进程的资源。 &lt;/li&gt;
&lt;li&gt;不同的进程拥有不同的虚拟地址空间，而同一进程中的多个线程共享同一地址空间。&lt;/li&gt;
&lt;li&gt;进程调度的切换将涉及到有关资源指针的保存及进程地址空间的转换等问题。而线程的切换将&lt;strong&gt;不涉及资源指针&lt;/strong&gt;的保存和地址空间的变化。所以，线程切换的开销要比进程切换的开销小得多。&lt;/li&gt;
&lt;li&gt;进程的调度与切换都是由操作系统内核完成，而线程则既可由操作系统内核完成，也可由用户程序进行。&lt;/li&gt;
&lt;li&gt;进程可以动态创建进程。被进程创建的线程也可以创建其它线程。&lt;/li&gt;
&lt;li&gt;进程有创建、执行、消亡的生命周期。线程也有类似的生命周期&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;线程模型&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用户线程，一对多&lt;ul&gt;
&lt;li&gt;线程在用户态中运行，运行与调度在用户空间中运行，内核无法感知，出问题无法切换，多个线程不能并发执行在多个处理器上（内核中只看到一个进程）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;一对一模型&lt;ul&gt;
&lt;li&gt;可以并行在多个处理器上&lt;/li&gt;
&lt;li&gt;内核开销大&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;多个多模型&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;进程同步&lt;/strong&gt;：对多个相关进程在执行次序上的协调，用于保证这种关系的相应机制称为进程同步。&lt;/p&gt;
&lt;p&gt;进程间通信问题&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;竞争：竞争共享资源，导致运行的结果和进程执行的顺序相关； 解决方法：互斥，某种方法来确保如果一个进程正在使用一个共享的变量或文件，将被其他进程占用不能做同样的事情&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;四种必要情况去保证互斥&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;不能有两个进程同时在临界区中&lt;/li&gt;
&lt;li&gt;不能假设CPU的速度以及数量&lt;/li&gt;
&lt;li&gt;任何运行在关键区域之外的进程都不能阻止另一个进程&lt;/li&gt;
&lt;li&gt;没有进程必须永远等待才能进入关键区域&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;忙等待的互斥&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;屏蔽中断&lt;ol&gt;
&lt;li&gt;每个进程刚进去临界区便屏蔽所有终端&lt;/li&gt;
&lt;li&gt;如果屏蔽中断后忘记打开中断会导致系统的崩溃&lt;/li&gt;
&lt;li&gt;如果系统是多处理器，屏蔽中断只会对单个cpu有效&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;锁变量&lt;ol&gt;
&lt;li&gt;可能会有多个进程同时进入到临界区中&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;严格轮换法&lt;ol&gt;
&lt;li&gt;不断测试变量直到某一个值的出现为止，称为忙等待；&lt;/li&gt;
&lt;li&gt;在认为等待时间&lt;strong&gt;非常短&lt;/strong&gt;的情况下，用于忙等待的锁，称为&lt;strong&gt;自旋锁&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;睡眠与唤醒&lt;/strong&gt;:生产者和消费者问题&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;信号量&lt;/strong&gt;：检测信号量的数值、修改变量数值都是不可分割的&lt;strong&gt;原子操作&lt;/strong&gt;。在操作完成或者阻塞前，其他进程都是无法访问该信号量的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;管程的引入&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;信号量的缺点：用信号量可实现进程间的同步，但由于信号量的控制分布在整个序中，其正确性分析很困难&lt;/p&gt;
&lt;p&gt;引入管程：把信号量及其操作原语封装在一个对象内部；管程是管理进程间同步的机制，它保证进程互斥地访问共享变量，并方便地阻塞和唤醒进程。&lt;/p&gt;
&lt;p&gt;经典的进程通信问题&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;生产者消费者；等待唤醒机制&lt;/li&gt;
&lt;li&gt;哲学家就餐问题；通过增加信号量，保证有一位哲学家可以吃到&lt;/li&gt;
&lt;li&gt;读写问题；对资源加锁；对读者之间用锁保证互斥&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;CPU调度问题&lt;/p&gt;
&lt;p&gt;首先是处理机调度算法的共同目标（就与OS的共同目标一样）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;资源利用率高：系统中处理机和其他资源都应尽可能的保持忙碌状态，其中最重要的资源是&lt;strong&gt;处理机&lt;/strong&gt;；&lt;/li&gt;
&lt;li&gt;公平性：诸进程都获得合理的CPU时间，不会发生进程&lt;strong&gt;饥饿现象&lt;/strong&gt;；&lt;/li&gt;
&lt;li&gt;平衡性：调度算法应当尽可能的保证系统资源使用的平衡性；&lt;/li&gt;
&lt;li&gt;策略强制执行：对于所制定的策略，只要需要，就必须执行，即使会造成某些工作的延迟也要执行。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt; &lt;strong&gt;作业(Job)&lt;strong&gt;：作业是一个比程序更为广泛的概念，它不仅包含了通常的&lt;/strong&gt;程序和数据&lt;/strong&gt;，而且还应配有一份&lt;strong&gt;作业说明书&lt;/strong&gt;，系统根据该说明书来对程序的运行进行控制。&lt;/p&gt;
&lt;p&gt;作业从进入系统到运行，通常需要经历&lt;strong&gt;收容&lt;/strong&gt;、&lt;strong&gt;运行&lt;/strong&gt;、&lt;strong&gt;完成&lt;/strong&gt;三个阶段，其对应的作业状态分别为：&lt;strong&gt;后备状态&lt;/strong&gt;（后备队列中）、&lt;strong&gt;运行状态&lt;/strong&gt;（创建进程，进程的生命周期）、&lt;strong&gt;完成状态&lt;/strong&gt;（作业运行结束或提前中断）。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;进程调度方式&lt;/strong&gt;：分为非抢占式和抢占式两种，主要的划分方式就是进程在正常执行的过程中（发生阻塞情况例外），处理机是否可以被抢占。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;非抢占式&lt;/strong&gt;：分派程序一旦把处理机分配给某进程后便让它一直运行下去，直到进程完成或发生某事件而阻塞时，才把处理机分配给另一个进程；&lt;br&gt;&lt;strong&gt;抢占式&lt;/strong&gt;：当一个进程正在运行时，系统可以基于某种原则（优先权原则、短进程优先原则、时间片原则），剥夺已分配给它的处理机，将之分配给其它进程。&lt;/p&gt;
&lt;p&gt;调度发生的情况&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在创建一个进程后，需要决定是运行父进程还是子进程&lt;/li&gt;
&lt;li&gt;在一个进程退出时必须做调度决策&lt;/li&gt;
&lt;li&gt;当一个进程阻塞在IO和信号量时，或者由于其他原因，必须选择另一个进程运行&lt;/li&gt;
&lt;li&gt;在一个IO中断发生时，必须做出决策调度&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;批处理中的调度&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;先来先服务&lt;/li&gt;
&lt;li&gt;最短作业优先&lt;/li&gt;
&lt;li&gt;最短剩余作业优先（每当新的进程时间比当前的剩余时间段，则挂起当前的）；饥饿问题&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;交互系统中的调度&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;轮转调度：时间片划分；时间短效率低，时间长交互效果不好&lt;/li&gt;
&lt;li&gt;优先级调度：在每个时钟都会降低当前进程的优先级；优先级可以&lt;strong&gt;动态（随时间递减）或者静态&lt;/strong&gt;赋予，&lt;ul&gt;
&lt;li&gt;静态非抢占式&lt;/li&gt;
&lt;li&gt;抢占式：每次调度时选择当前已到达且优先级最高的进程。当前进程主动放弃处理机时发生调度。就是在运行进程的过程中，放弃当前进行，去进行优先级高的进程。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;多级队列&lt;ul&gt;
&lt;li&gt;&lt;img src=&quot;C:&#92;Users&#92;huami&#92;AppData&#92;Roaming&#92;Typora&#92;typora-user-images&#92;image-20210628202032099.png&quot; alt=&quot;image-20210628202032099&quot;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;保证调度：系统跟踪各个进程自创以来使用过多少CPU的时间&lt;/li&gt;
&lt;li&gt;公平分享调度算法：对于上述的保证调度算法，是对诸进程而言体现的一定程度的公平性。但是对于&lt;strong&gt;用户&lt;/strong&gt;来讲就不一定公平了。&lt;/li&gt;
&lt;li&gt;彩票调度：权重高的进程拥有更多的票，然后随机&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&quot;内存管理&quot;&gt;&lt;a href=&quot;#内存管理&quot; class=&quot;headerlink&quot; title=&quot;内存管理&quot;&gt;&lt;/a&gt;内存管理&lt;/h5&gt;&lt;p&gt;无内存抽象：编程时直接写死地址；这样不能同时在系统上运行两份一样程序&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;地址空间&lt;/strong&gt;：保护和重定位；是一个进程可用于寻址内存的一套地址集合。每个进程都有自己的地址空间，并且这个地址空间是独立于其他程度的地址空间；动态重定位：用基址寄存器和界限寄存器；&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;交换技术&lt;/strong&gt;：处理&lt;strong&gt;内存超载&lt;/strong&gt;问题&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;直接交换：把程序完整调入内存中，使用该进程一段时间后，把它存到磁盘中&lt;/li&gt;
&lt;li&gt;虚拟内存：是程序只有一部分被调入内存的情况下运行&lt;/li&gt;
&lt;li&gt;会导致空洞；用内存紧缩技术会耗时&lt;/li&gt;
&lt;li&gt;所需空间动态增长问题&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;空闲内存管理&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用位图来管理；单元越小图越大，检索连续的指定长度的空闲空间是耗时的&lt;/li&gt;
&lt;li&gt;使用链表的储存管理：进程结束或者换出链表时块；&lt;ul&gt;
&lt;li&gt;下次适配算法&lt;/li&gt;
&lt;li&gt;最佳适配算法&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;虚拟内存&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;虚拟存储器就是作为主存储器空间扩充的一种方式&lt;/strong&gt;，存储器管理把进程的全部信息放到辅存中，执行时先将其中的一部分装入主存，以后根据执行行为&lt;strong&gt;随用随调入&lt;/strong&gt;，并且当主存中没有足够的内存空间时，存储器管理依据某些算法（页面置换算法或者是分区淘汰算法）淘汰内存中的页或者是分区。&lt;/p&gt;
&lt;p&gt;页面:虚拟地址分为多个单元。&lt;/p&gt;
&lt;p&gt;页帧:物理内存中相应的单元。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;内存管理单元&lt;/strong&gt;负责虚拟地址到物理地址的转换&lt;/p&gt;
&lt;p&gt;逻辑地址：页号+偏移量；前面几位是页号后面几位是偏移量；用页号去页表（map）去查询得到物理地址+上偏移量就得到物理地址；&lt;/p&gt;
&lt;p&gt;页表会保存在内存中，寄存器存页表指针&lt;/p&gt;
&lt;p&gt;TLB寄存器：相当于给页表加个缓存，为了解决虚拟地址到物理地址的转换速度&lt;/p&gt;
&lt;p&gt;页式管理：页号+偏移量&lt;/p&gt;
&lt;p&gt;段式管理：段号+段长度+偏移量&lt;/p&gt;
&lt;p&gt;段页式管理：段号+页表长度+页的偏移量（段表【页的长度+页表存放的位置】 需要三次访存：第一次是段表、第二次页表、第三次访目标单元）&lt;/p&gt;
&lt;p&gt;​    可以引用块表，将【段号和页号】作为关键字，这样只要一次访存，依旧是直接访问目标数据&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;分页的原理&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;将内存划分成多个小的分区，让一个进程的代码分布在&lt;strong&gt;非连续的内存地址中&lt;/strong&gt;，一个进程按页的大小划分后，不同片段可以分开存储，但是这样就不能使用了之前连续分配的动态重定位的方式，需要额外实现定位的方法；按页的大小划分的一个较大的好处就是减少了进程的内部碎片的问题&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;局部性原理&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;时间局部性&lt;/strong&gt; ：如果程序中的某条指令一旦执行，不久以后该指令可能再次执行；如果某数据被访问过，不久以后该数据可能再次被访问。产生时间局部性的典型原因，是由于在程序中存在着大量的循环操作。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;空间局部性&lt;/strong&gt; ：一旦程序访问了某个存储单元，在不久之后，其附近的存储单元也将被访问，即程序在一段时间内所访问的地址，可能集中在一定的范围之内，这是因为指令通常是顺序存放、顺序执行的，数据也一般是以向量、数组、表等形式簇聚存储的。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;针对大内存的页表&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;多级页表&lt;ul&gt;
&lt;li&gt;避免全部页表保存一直保存在内存中&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;倒排页表&lt;ul&gt;
&lt;li&gt;将虚拟地址作hash，然后根据hash值去对应槽找节点，如果有对应的（虚拟页面，页框）则找到&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;页面置换算法&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;最近未使用页面置换算法NRU&lt;ul&gt;
&lt;li&gt;定时将页面设置为没有被访问&lt;ul&gt;
&lt;li&gt;没有被访问，没有被修改&lt;/li&gt;
&lt;li&gt;没有被访问，已经被修改&lt;/li&gt;
&lt;li&gt;已经被访问，没有修改&lt;/li&gt;
&lt;li&gt;已经被访问，已经修改&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;先进先出&lt;/li&gt;
&lt;li&gt;第二次机会页面置换算法&lt;ul&gt;
&lt;li&gt;修改FIFO，如果已经被访问，则设置为没被访问，重新进队&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;时钟置换算法&lt;ul&gt;
&lt;li&gt;循环队列，如果R（访问）为0，直接淘汰，如果为1设为0，继续向前走&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;最近最少使用LRU&lt;ul&gt;
&lt;li&gt;可以用老化算法来模拟；&lt;/li&gt;
&lt;li&gt;可以理解为每次都访问的放到队头&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;最近最不常用LFU&lt;ul&gt;
&lt;li&gt;计算访问次数&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;页面小&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;优点：更少的页框，更少没被使用的&lt;/li&gt;
&lt;li&gt;缺点：页表大&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;分段&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;采用分页内存管理有一个不可避免的问题：用户视角的内存和实际物理内存的分离。用户通常更愿意将内存看做是一组&lt;strong&gt;不同长度的段的集合，这些段之间并没有一定的顺序&lt;/strong&gt;，因此&lt;strong&gt;用户通过两个量来指定地址：段号+偏移&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;分段和分页的差别&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;页式和段式管理策略都不会产生外部碎片，但都有可能产生内部碎片&lt;/li&gt;
&lt;li&gt;页的大小是统一的，而段的大小是可变的&lt;/li&gt;
&lt;li&gt;采用分页会导致用户视角的内存和实际内存的分离，即使用户视角的内存和实际物理内存不一样，而分段正好可以支持用户视角，使用户视角的内存和实际物理内存分布保持一致&lt;/li&gt;
&lt;li&gt;分页对程序员来说是透明的，用户指定一个地址，该地址通过硬件分为页码和偏移，这些程序员是看不见的；而分段对程序员来说通常是可见的，用户通过两个量：段号和偏移来指定地址，这两个量作为组织程序和数据的一种方便手段提供给程序员，程序员可以通过这两个量把程序和数据指定到不同的段（程序员必须清楚段的最大长度）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;文件管理&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;提供文件和目录的抽象，隐藏硬件设施的复杂信息；提供文件保护&lt;/p&gt;
&lt;p&gt;同样也有文件控制块的概念&lt;/p&gt;
&lt;p&gt;文件名-255字符&lt;/p&gt;
&lt;p&gt;目录：包含所有文件信息的节点集合，是根据文件名检索文件的桥梁&lt;/p&gt;
&lt;p&gt;通过FCB再次索引，索引中只有文件名，只有真正需要采取读取FCB,再根据FCB来找出文件的存放位置&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;文件跟踪&lt;/strong&gt;：实现文件存储就是跟踪哪些磁盘块与哪些文件一起使用。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;连续分配&lt;ul&gt;
&lt;li&gt;容易实现；读取效率高；文件删除后会留下空洞；文件最大空间在创建时就要确定&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;链表分配&lt;ul&gt;
&lt;li&gt;没有外部碎片；文件检索简单；可以做到增长；随机访问速率低，空间不一定会填满一个空&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;索引分配&lt;ul&gt;
&lt;li&gt;只有在打开相应文件时，才需要将i-node加载到内存中。&lt;/li&gt;
&lt;li&gt;支持直接访问；没有外部碎片；索引也会占用空间开销&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;文件名字的管理&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;固定长度：浪费空间&lt;/li&gt;
&lt;li&gt;线性：删除文件时会留下空洞&lt;/li&gt;
&lt;li&gt;堆：需要额外的开销&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;文件共享&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;硬链接：都保存的i-node节点&lt;ul&gt;
&lt;li&gt;删除源文件时，文件并没有被删除，会导致文件一直存在（按理删了源全部都要删掉）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;软链接：只有一个节点是保存了i-node，其他是保存”路径“&lt;ul&gt;
&lt;li&gt;需要额外的开销&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;IO&quot;&gt;&lt;a href=&quot;#IO&quot; class=&quot;headerlink&quot; title=&quot;IO&quot;&gt;&lt;/a&gt;IO&lt;/h4&gt;&lt;p&gt;管理和控制IO操作和IO设备；主要管理IO设备和对应的控制器&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;设备无关性&lt;/strong&gt;：应用程序独立于具体使用的物理设备；在系统中引入&lt;strong&gt;逻辑设备&lt;/strong&gt;和&lt;strong&gt;物理设备&lt;/strong&gt;；在应用程序中使用逻辑设备名来请求使用某类设备，而系统在实际执行中使用物理设备名；&lt;/p&gt;
&lt;p&gt;设备驱动程序层：为内核IO子系统隐藏设别控制器的不同细节&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将串行位流转换为字节块&lt;/li&gt;
&lt;li&gt;执行必要的错误纠正&lt;/li&gt;
&lt;li&gt;方便主存使用&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;内存映射&lt;/strong&gt;：CPU如何与设备的控制器和数据缓冲区进行通信&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每个控制寄存器都被分配一个IO端口，所有的IO端口形成IO端口空间&lt;ul&gt;
&lt;li&gt;直接访问&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;将所有控制器映射到内存空间中，每个寄存器都被分配唯一的内存空间&lt;ul&gt;
&lt;li&gt;不需要特殊的保护机制来保护控制寄存器不被用户直接访问&lt;/li&gt;
&lt;li&gt;每一条引用内存的指令也可以引用控制寄存器&lt;/li&gt;
&lt;li&gt;但是需要缓存&lt;/li&gt;
&lt;li&gt;因为只有一个地址空间，所有主内存模块和所有I&amp;#x2F;O设备控制器必须检查所有内存引用才能看到该回应哪一个呢&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;C:&#92;Users&#92;huami&#92;AppData&#92;Roaming&#92;Typora&#92;typora-user-images&#92;image-20210729213204890.png&quot; alt=&quot;image-20210729213204890&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;DMA直接存储器存取&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在ＤＭＡ出现之前，CPU与外设之间的数据传送方式有程序传送方式、中断传送方式。CPU是通过系统总线与其他部件连接并进行数据传输。&lt;/p&gt;
&lt;p&gt;DMA的出现就是为了解决批量数据的输入&amp;#x2F;输出问题。DMA是指外部设备不通过CPU而直接与系统内存交换数据的接口技术。这样数据的传送速度就取决于存储器和外设的工作速度。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;死锁&lt;/strong&gt;：一个进程集合中每个程序都在等待只能由该进程集合中其他进程才能引发的事件，那么说明该进程集合是死锁&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;死锁的四个必要条件&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;互斥条件&lt;/li&gt;
&lt;li&gt;占有和等待&lt;/li&gt;
&lt;li&gt;不可抢占&lt;/li&gt;
&lt;li&gt;环路等待&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;处理死锁的四种策略&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;鸵鸟算法；发生的概率是很低的&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;检测死锁并且恢复&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通过深搜+回溯来找环，如果所有节点都是可以则是安全的&lt;/li&gt;
&lt;li&gt;每种类型多个资源的死锁检测（E+R+A矩阵）&lt;/li&gt;
&lt;li&gt;恢复地方法&lt;ul&gt;
&lt;li&gt;抢占&lt;/li&gt;
&lt;li&gt;利用回滚&lt;/li&gt;
&lt;li&gt;杀死进程来恢复&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;死锁避免&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;资源轨迹图：不安全不代表一定会死锁，只代表有可能死锁&lt;/li&gt;
&lt;li&gt;银行家算法；分配然后回收看是否可以全部满足&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;死锁预防：从四个条件去破坏&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;破坏互斥条件：避免在非绝对必要时分配资源；申请资源的进程越少越好&lt;/li&gt;
&lt;li&gt;破坏占有和等待条件：规定开始执行前必须获得所有资源；当它请求时先释放自己手上的资源&lt;/li&gt;
&lt;li&gt;破坏不可抢占条件：如果遭到拒绝就释放自己的资源&lt;/li&gt;
&lt;li&gt;破坏环形等待：给资源编号，申请后面的必须先获得前面的资源&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;两阶段锁&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;第一阶段：进程试图对所有所需资源的记录进行加锁。如果成功执行第二阶段，完成后释放锁，第一阶段并没有做实际工作&lt;/p&gt;
&lt;p&gt;如果第一阶段所需的锁已经被加锁，则释放全部锁，从头再来&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;通信死锁&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;通过超时中断死锁&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;活锁&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;互相谦让，但是没有进展&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;饥饿&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;无限制推后，虽然没有被阻塞&lt;/p&gt;
&lt;h1 id=&quot;操作系统-1&quot;&gt;&lt;a href=&quot;#操作系统-1&quot; class=&quot;headerlink&quot; title=&quot;操作系统&quot;&gt;&lt;/a&gt;操作系统&lt;/h1&gt;&lt;h4 id=&quot;进程与线程&quot;&gt;&lt;a href=&quot;#进程与线程&quot; class=&quot;headerlink&quot; title=&quot;进程与线程&quot;&gt;&lt;/a&gt;进程与线程&lt;/h4&gt;&lt;p&gt;进程的创建&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;系统启动&lt;/li&gt;
&lt;li&gt;执行正在进行的进程调用进程的创建&lt;/li&gt;
&lt;li&gt;用户申请创建&lt;/li&gt;
&lt;li&gt;批处理的初始化&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;进程的结束&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;完成任务&lt;/li&gt;
&lt;li&gt;发生了错误（自愿）&lt;/li&gt;
&lt;li&gt;发生严重错误（非自愿）&lt;/li&gt;
&lt;li&gt;被其他进程杀死&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;三个状态&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;运行&lt;/li&gt;
&lt;li&gt;就绪&lt;/li&gt;
&lt;li&gt;阻塞&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;运行到就绪：调用程序选择另一个进程&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;进程的内部结构&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;代码块、数据、堆、栈、PCB进程控制块（用户内用、系统内用、寄存器信息）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;切换的步骤&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;保存PCB&lt;/li&gt;
&lt;li&gt;加载PCB&lt;/li&gt;
&lt;li&gt;刷新内存缓存&lt;/li&gt;
&lt;li&gt;改变地址映射&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id=&quot;父进程和子进程&quot;&gt;&lt;a href=&quot;#父进程和子进程&quot; class=&quot;headerlink&quot; title=&quot;父进程和子进程&quot;&gt;&lt;/a&gt;父进程和子进程&lt;/h6&gt;&lt;p&gt;新创建的子进程&lt;strong&gt;几乎&lt;/strong&gt;和父进程完全一样，子进程会获得父进程用户级虚拟地址空间（但是独立）一份副本，包括&lt;strong&gt;代码和数据段、堆、共享库以及与用户栈&lt;/strong&gt;，子进程获得父进程任何打开&lt;strong&gt;文件描述符相同的副本&lt;/strong&gt;，也就是子进程可以读取父进程中打开的任何文件。最大区别是拥有不同的PID；只是在创建的时候是一样的，后续的改变是相互独立的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;僵死进程&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;发生在子进程回收过程中，当进程由于某种原因终止时，内核不会立刻从系统中删除，而是保持已终止状态，直到父进程回收。所以一个终止了但是还没被回收的进程时&lt;strong&gt;僵死进程&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果父进程终止了，但是还没有回收子进程，会有一个init进程成为其养父进程，来回收子进程&lt;/p&gt;
&lt;h6 id=&quot;fork和execve&quot;&gt;&lt;a href=&quot;#fork和execve&quot; class=&quot;headerlink&quot; title=&quot;fork和execve&quot;&gt;&lt;/a&gt;fork和execve&lt;/h6&gt;&lt;p&gt;fork会创建一个子进程，并且返回两次（用来区别父进程和子进程）；execve是在原来的进程的&lt;strong&gt;上下文中加载运行另一个新程序&lt;/strong&gt;，如果成功不会返回&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;系统中的每个程序都是运行在某个进程的&lt;strong&gt;context&lt;/strong&gt;中的。context是由程序正确运行所需的状态组成的，这个状态包括存放在存储器中的&lt;strong&gt;程序的代码和数据&lt;/strong&gt;，它的&lt;strong&gt;栈&lt;/strong&gt;、&lt;strong&gt;通用目的寄存器的内容&lt;/strong&gt;、&lt;strong&gt;程序计数器&lt;/strong&gt;（PC）、&lt;strong&gt;环境变量&lt;/strong&gt;以及打开的&lt;strong&gt;文件描述符的集合&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;每个&lt;strong&gt;线程&lt;/strong&gt;都有它自己的线程context，包括一个唯一的整数线程ID、栈、栈指针、程序计数器（PC）、通用目的寄存器和条件码。&lt;/li&gt;
&lt;li&gt;每个线程和运行在同一进程内的其他线程一起共享进程context的&lt;strong&gt;剩余部分&lt;/strong&gt;。这包括整个用户虚拟地址空间，它是由&lt;strong&gt;只读文本（代码）&lt;/strong&gt;、&lt;strong&gt;读&amp;#x2F;写数据&lt;/strong&gt;、&lt;strong&gt;堆以及所有的共享库代码和数据区域组成&lt;/strong&gt;。线程也同样共享打开文件的集合。&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id=&quot;线程的过程&quot;&gt;&lt;a href=&quot;#线程的过程&quot; class=&quot;headerlink&quot; title=&quot;线程的过程&quot;&gt;&lt;/a&gt;线程的过程&lt;/h6&gt;&lt;p&gt;&lt;strong&gt;创建线程&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;pthread_create:创建一个新的线程，可以在参数中绑定返回的线程tid，传入函数用于让新创线程执行这个函数，设置可以传入参数改变线程的默认值&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;线程终止&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当顶层的线程例程返回时，线程也就隐式终止&lt;/li&gt;
&lt;li&gt;通过调用pthread_exit函数，线程会显示结束。主线程调用pthread_exit会让其他所有对等线程终止&lt;/li&gt;
&lt;li&gt;其他对象线程调用exit，该函数会终止进程导致该进程相关的线程都终止&lt;/li&gt;
&lt;li&gt;零杠一个对等线程通过以线程id传入&lt;strong&gt;pthread_cancel&lt;/strong&gt;来终止其他线程&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;回收已终止线程的资源&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;pthread_join函数可以等待一个函数终止&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;分离线程&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;线程是可结合的也可以是分离的，一个结合的线程能够被其他线程收回和杀死；分离的线程是不能被其他线程杀死或者回收，&lt;strong&gt;他的资源在它终止的时候由系统自动释放&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;使用pthread_detach&lt;/p&gt;
&lt;h6 id=&quot;信号&quot;&gt;&lt;a href=&quot;#信号&quot; class=&quot;headerlink&quot; title=&quot;信号&quot;&gt;&lt;/a&gt;信号&lt;/h6&gt;&lt;p&gt;一个小消息，通知进程系统发生了某一种类型的事件。通知用户进程发生了异常；如通过kill9一个进程向另一个进程来强制终止它；ctrl+c内核向前台进程组发送信号，一般是挂起前台进程；&lt;/p&gt;
&lt;p&gt;发送但是还没接受的信号称为待处理信号（pending singal）；任何时候，一个类型最多只有一个待处理信号。如果同一个类型的信号收到多个，就会被丢弃。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;线程&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如何能使多个程序更好地并发执行，同时又尽量减少系统的开销，成为设计操作系统的重要目标。&lt;/li&gt;
&lt;li&gt;将进程的两个基本属性分开，由操作系统分开处理：对于作为调度和分派的基本单位，不同时作为拥有资源的单位，可以做到“轻装上阵”； &lt;/li&gt;
&lt;li&gt;对于拥有资源的基本单位，又不对之进行频繁的切换。‘’&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;修改为进程作为资源分配的单位，线程作为调度的单位&lt;/p&gt;
&lt;p&gt;线程不拥有系统的资源，但是拥有其运行时必须的数据结构（TCB，程序计数器，寄存器，栈）&lt;/p&gt;
&lt;p&gt;当然也有自己独有的部分：程序计数器、寄存器、栈、状态&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;线程的不同实现方案&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;纯用户态：线程表放在用户态中，可以自己定制调度算法，阻塞会一起阻塞（某个线程去IO）；线程占有CPU，除非资源放弃，其他线程不能保证&lt;/p&gt;
&lt;p&gt;内核态中实现：线程表放在内核中，用池化技术循环利用&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;轻量级进程&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;与普通进程相比，&lt;em&gt;LWP&lt;/em&gt;与其它进程&lt;strong&gt;共享所有（或大部分）逻辑地址空间和系统资源&lt;/strong&gt;，一个进程可以创建多个&lt;em&gt;LWP&lt;/em&gt;，这样它们共享大部分资源；&lt;em&gt;LWP&lt;/em&gt;有它自己的*&lt;a href=&quot;http://zh.wikipedia.org/w/index.php?title=%E8%BF%9B%E7%A8%8B%E6%A0%87%E8%AF%86%E7%AC%A6&amp;action=edit&amp;redlink=1&quot;&gt;&lt;strong&gt;进程标识符&lt;/strong&gt;&lt;/a&gt;&lt;em&gt;，并和其他进程有着&lt;/em&gt;&lt;a href=&quot;http://zh.wikipedia.org/w/index.php?title=%E7%88%B6%E8%BF%9B%E7%A8%8B&amp;action=edit&amp;redlink=1&quot;&gt;&lt;strong&gt;父子关系&lt;/strong&gt;&lt;/a&gt;&lt;em&gt;；&lt;/em&gt;LWP*与普通进程的区别也在于它只有一个最小的执行上下文和调度程序所需的统计信息；&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;用户线程与内核线程&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1）可移植性：因为ULT完全在用户态实现线程，因此也就和具体的内核没有什么关系，可移植性方面ULT略胜一筹；&lt;/p&gt;
&lt;p&gt;2）可扩展性：ULT是由用户控制的，因此扩展也就容易；相反，KLT扩展就很不容易，基本上只能受制于具体的操作系统内核；&lt;/p&gt;
&lt;p&gt;3）性能：由于ULT的线程是在用户态，对应的内核部分还是一个进程，因此ULT就没有办法利用多处理器的优势，而KLT就可以通过调度将线程分布在多个处理上运行，这样KLT的性能高得多；另外，一个ULT的线程阻塞，所有的线程都阻塞，而KLT一个线程阻塞不会影响其它线程。&lt;/p&gt;
&lt;p&gt;4）编程复杂度：ULT的所有管理工作都要由用户来完成，而KLT仅仅需要调用API接口，因此ULT要比KLT复杂的多。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Linux的进程&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Linux&lt;/em&gt;采用的“一对一”的线程模型，即一个&lt;em&gt;LWP&lt;/em&gt;对应一个线程。这个模型最大的好处是线程调度由内核完成了，而其他线程操作（同步、取消）等都是核外的线程库函数完成的。&lt;/p&gt;
&lt;p&gt;在&lt;em&gt;LinuxThreads&lt;/em&gt;中，专门为&lt;strong&gt;每一个进程构造了一个管理线程&lt;/strong&gt;，负责处理线程相关的管理工作。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;进程VS线程&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;进程是资源分配的基本单位，所有与该进程有关的资源分配情况，进程也是分配主存的基本单位，它拥有一个完整的虚拟地址空间。而线程与资源分配无关，它属于某一个进程，并与该进程内的其它线程一起共享进程的资源。&lt;/li&gt;
&lt;li&gt;不同的进程拥有&lt;strong&gt;不同的虚拟地址空间&lt;/strong&gt;，而同一进程中的多个线程&lt;strong&gt;共享同一地址空间&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;进程调度的切换将涉及到有关&lt;strong&gt;资源指针&lt;/strong&gt;的保存及&lt;strong&gt;进程地址空间的转换等&lt;/strong&gt;问题。而线程的切换将&lt;strong&gt;不涉及资源指针的保存和地址空间的变化&lt;/strong&gt;。所以，线程切换的开销要比进程切换的开销小得多。&lt;/li&gt;
&lt;li&gt;进程的调度与切换都是由操作系统内核完成，而线程则既可由操作系统内核完成，也可由用户程序进行。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;进程间的通信&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;关注点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;进程如何把信息传递给另一个进程（共享同一片空间）&lt;/li&gt;
&lt;li&gt;进程在关键点直接不会出现交叉&lt;/li&gt;
&lt;li&gt;正确的顺序&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;进程同步：在多个进程执行次序上的协调；相互合作的一组并发进程在一些&lt;strong&gt;关键点&lt;/strong&gt;上可能需要相互等待与互通信息，保证这种关系的就叫进程同步&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;竞争条件&lt;/strong&gt;：多个进程对共享资源，导致最后的结果与操作的顺序有关&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;互斥&lt;/strong&gt;：保证进程在使用共享资源的时候，其他进程不能进行相同的操作&lt;/p&gt;
&lt;h5 id=&quot;保证互斥的四个条件&quot;&gt;&lt;a href=&quot;#保证互斥的四个条件&quot; class=&quot;headerlink&quot; title=&quot;保证互斥的四个条件&quot;&gt;&lt;/a&gt;&lt;strong&gt;保证互斥的四个条件&lt;/strong&gt;&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;任何两个进程不能同时处于临济区&lt;/li&gt;
&lt;li&gt;不应对cpu的速度和数量作任何假设&lt;/li&gt;
&lt;li&gt;临界区域外进程不能阻塞其他进程&lt;/li&gt;
&lt;li&gt;不能使进程无限期等待进入临界区&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id=&quot;忙等待的互斥&quot;&gt;&lt;a href=&quot;#忙等待的互斥&quot; class=&quot;headerlink&quot; title=&quot;忙等待的互斥&quot;&gt;&lt;/a&gt;&lt;strong&gt;忙等待的互斥&lt;/strong&gt;&lt;/h6&gt;&lt;p&gt;&lt;strong&gt;信号屏蔽&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;信号屏蔽&lt;ul&gt;
&lt;li&gt;多核中不好用，是针对操作系统的，忘记开启有问题&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;锁变量&lt;ul&gt;
&lt;li&gt;获取并将其变成1，但是会有问题，因为进程可能随时切换，还是会卡进去&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;严格轮换法&lt;ul&gt;
&lt;li&gt;忙等待，属于自己的就进去，但是违反了条件3，阻塞了别的进程&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;睡眠与唤醒&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;信号量：控制进去临界区域的进层数；如果失败就在该位置睡眠，然后等待信号量增加后，系统随机选取一个唤醒&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;信号量可以实现进程间的通信，但是由于信号量的控制分布在整个程序中，正确性难分析&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;管程：引入了条件变量，wait和signal，当发现无法继续运行时会在变量上wait，导致进程阻塞；它存在于内存中，进程可以对它进行读写，它提供流控制，保证进程的正确读写，即管道为空时读进程会阻塞，管道为满时写进程会阻塞，以此实现进程之间的通信。&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&quot;进程间的通信方式&quot;&gt;&lt;a href=&quot;#进程间的通信方式&quot; class=&quot;headerlink&quot; title=&quot;进程间的通信方式&quot;&gt;&lt;/a&gt;进程间的通信方式&lt;/h5&gt;&lt;p&gt;要么是陷入内核，要么是涉及外设&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;管道( pipe )：&lt;br&gt;管道是一种&lt;strong&gt;半双工&lt;/strong&gt;的通信方式，数据&lt;strong&gt;只能单向流动&lt;/strong&gt;，而且只能在具有亲缘关系的进程间使用。进程的亲缘关系通常是指父子进程关系。&lt;strong&gt;以内存文件的形式存在&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;匿名管道：克服了亲缘的限制，&lt;strong&gt;以磁盘文件的形式存在&lt;/strong&gt;，先进先出，可以任意进程间通信&lt;/li&gt;
&lt;li&gt;信号量(semophore ) ：&lt;br&gt;信号量是一个计数器，可以用来控制&lt;strong&gt;多个进程对共享资源的访问&lt;/strong&gt;。它常作为一种锁机制，防止某进程正在访问共享资源时，其他进程也访问该资源。因此，主要作为进程间以及同一进程内不同线程之间的同步手段。&lt;/li&gt;
&lt;li&gt;消息队列( message queue ) ：&lt;br&gt;消息队列是由消息的链表，存放在&lt;strong&gt;内核中&lt;/strong&gt;并由消息队列标识符标识。消息队列克服了信号传递信息少、管道只能承载无格式字节流以及缓冲区大小受限等缺点。存在内核中说明其内核重启或者显式删除的时候才被删除&lt;/li&gt;
&lt;li&gt;信号 (sinal ) ：&lt;br&gt;信号是一种比较复杂的通信方式&lt;strong&gt;，用于通知接收进程某个事件已经发生。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;共享内存(shared memory ) ：&lt;br&gt;共享内存就是映射一段能被其他进程所访问的内存，这段共享内存由一个进程创建，但多个进程都可以访问。共享内存是最快的 IPC 方式，它是针对其他进程间通信方式运行效率低而专门设计的。它往往与其他通信机制，如信号量配合使用，来实现进程间的同步和通信。&lt;strong&gt;就是拿出一块虚拟地址空间来，映射到相同的物理内存中&lt;/strong&gt;。需要某种同步操作来保证，例如&lt;strong&gt;信号量&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;套接字(socket ) ：&lt;br&gt;套接口也是一种进程间通信机制，与其他通信机制不同的是，它可用于不同设备及其间的进程通信。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;理解：&lt;strong&gt;共享内存&lt;/strong&gt;可以解决消息队列通信中用户态与内核态之间数据拷贝过程带来的开销，但是多进程竞争同个共享资源会造成&lt;strong&gt;数据的错乱&lt;/strong&gt;；&lt;/p&gt;
&lt;h6 id=&quot;线程间通信方式&quot;&gt;&lt;a href=&quot;#线程间通信方式&quot; class=&quot;headerlink&quot; title=&quot;线程间通信方式&quot;&gt;&lt;/a&gt;线程间通信方式&lt;/h6&gt;&lt;ol&gt;
&lt;li&gt;锁机制：包括互斥锁、条件变量、读写锁：只有&lt;strong&gt;拥有互斥对象的线程才有访问公共资源的权限&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;互斥锁提供了以排他方式防止数据结构被并发修改的方法。&lt;/li&gt;
&lt;li&gt;读写锁允许多个线程同时读共享数据，而对写操作是互斥的。&lt;/li&gt;
&lt;li&gt;条件变量可以以原子的方式阻塞进程，&lt;strong&gt;直到某个特定条件为真为止&lt;/strong&gt;。对条件的测试是在互斥锁的保护下进行的。条件变量始终与互斥锁一起使用。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;信号量机制(Semaphore)：包括无名线程信号量和命名线程信号量&lt;/li&gt;
&lt;li&gt;信号机制(Signal)：类似进程间的信号处理&lt;br&gt;线程间的通信目的主要是用于线程同步，&lt;strong&gt;所以线程没有像进程通信中的用于数据交换的通信机制&lt;/strong&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;用户态切换到内核态的方式&quot;&gt;&lt;a href=&quot;#用户态切换到内核态的方式&quot; class=&quot;headerlink&quot; title=&quot;用户态切换到内核态的方式&quot;&gt;&lt;/a&gt;用户态切换到内核态的方式&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;系统调用&lt;/p&gt;
&lt;p&gt;这是用户态进程&lt;strong&gt;主动&lt;/strong&gt;要求切换到内核态的一种方式，&lt;strong&gt;用户态进程通过系统调用申请使用操作系统提供的服务程序完成工作&lt;/strong&gt;，比如前例中fork()实际上就是执行了一个创建新进程的系统调用。而系统调用的机制其核心还是使用了操作系统为用户特别开放的一个中断来实现，例如Linux的int 80h中断。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;异常&lt;/p&gt;
&lt;p&gt;当CPU在执行运行在用户态下的程序时，发生了某些事先不可知的异常，这时会触发由当前运行进程切换到&lt;strong&gt;处理此异常&lt;/strong&gt;的内核相关程序中，也就转到了内核态，比如&lt;strong&gt;缺页异常&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;外围设备的中断&lt;/p&gt;
&lt;p&gt;当外围设备完成用户请求的操作后，会向CPU发出相应的中断信号，这时CPU会暂停执行下一条即将要执行的指令转而去执行与中断信号对应的处理程序，如果先前执行的指令是用户态下的程序，那么这个转换的过程自然也就发生了由用户态到内核态的切换。比如硬盘读写操作完成，系统会切换到硬盘读写的中断处理程序中执行后续操作等。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h6 id=&quot;调度&quot;&gt;&lt;a href=&quot;#调度&quot; class=&quot;headerlink&quot; title=&quot;调度&quot;&gt;&lt;/a&gt;&lt;strong&gt;调度&lt;/strong&gt;&lt;/h6&gt;&lt;p&gt;&lt;strong&gt;发生调度的时间&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;新的进程被创建&lt;/li&gt;
&lt;li&gt;进行的进程退出&lt;/li&gt;
&lt;li&gt;进行的进程被阻塞&lt;/li&gt;
&lt;li&gt;IO中断&lt;/li&gt;
&lt;li&gt;时钟中断&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;调度算法&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;FIFO：队列、链表&lt;/li&gt;
&lt;li&gt;最短作业优先：优先队列&lt;/li&gt;
&lt;li&gt;最短剩余时间优先&lt;/li&gt;
&lt;li&gt;优先级调度（优先级的静态和动态）&lt;/li&gt;
&lt;li&gt;多级队列（不同队列的时间片不同，2幂增）&lt;/li&gt;
&lt;li&gt;保证调度（跟踪已经使用的时间）&lt;/li&gt;
&lt;li&gt;彩票调度（优先级高拥有的票多）&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;存储管理&quot;&gt;&lt;a href=&quot;#存储管理&quot; class=&quot;headerlink&quot; title=&quot;存储管理&quot;&gt;&lt;/a&gt;存储管理&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;地址的抽象&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;多个应用程序处于内存中互补影响，要满足&lt;strong&gt;保护和重定位&lt;/strong&gt;的问题&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;交换技术和虚拟内存&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;空间的分配问题&lt;/strong&gt;（交换中引起了空洞问题）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;位图&lt;ul&gt;
&lt;li&gt;但是内存很大时，位图也很大&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;链表的方式&lt;ul&gt;
&lt;li&gt;算法&lt;ul&gt;
&lt;li&gt;首次适配&lt;/li&gt;
&lt;li&gt;最佳适配（要遍历一遍）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;虚拟空间&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;将程序切割成片段，但是前期时由程序员完成，将这个工作交给系统过去完成；&lt;/p&gt;
&lt;p&gt;讲程序中的逻辑地址通过&lt;strong&gt;内存管理单元&lt;/strong&gt;MMU进行转换，&lt;/p&gt;
&lt;p&gt;虚拟空间中的页面&amp;#x3D;物理地址中的页框&lt;/p&gt;
&lt;p&gt;虚拟地址&amp;#x3D;虚拟地址页号+偏移量&lt;/p&gt;
&lt;p&gt;页表项&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;C:&#92;Users&#92;huami&#92;AppData&#92;Roaming&#92;Typora&#92;typora-user-images&#92;image-20210717232227535.png&quot; alt=&quot;image-20210717232227535&quot;&gt;&lt;/p&gt;
&lt;p&gt;通过虚拟地址页号去&lt;strong&gt;页表&lt;/strong&gt;找对应的页框同时判断其在不在内存中&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;TLB&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在页表也很大时时候；以及&lt;strong&gt;映射得不够快&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;相当于给页表再做一个&lt;strong&gt;缓存&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;多级页表&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;从页号去找二级页表号，从二级页表号根据第二段找到框号，再加上偏移量&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;倒查页表&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;根据物理地址页框数量作为哈希数组长度，然后进行哈希&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;页表置换算法&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;最近未使用算法NRU:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;两位（是否被访问，是否被修改），定期抹除访问标志（变成0）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;FIFO&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;第二次机会置换算法&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;FIFO的优化，如果被访问过就将其痕迹抹掉重新入队&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;时钟置换算法&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;相当于给第二次置换算法，用循环链表来实现&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;最近最少使用算法LRU&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;老化算法&lt;/li&gt;
&lt;li&gt;双向链表和HashMap实现&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;LFU最不经常使用&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;计算频率&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id=&quot;分段技术&quot;&gt;&lt;a href=&quot;#分段技术&quot; class=&quot;headerlink&quot; title=&quot;分段技术&quot;&gt;&lt;/a&gt;&lt;strong&gt;分段技术&lt;/strong&gt;&lt;/h6&gt;&lt;p&gt;按照类型把进程的地址空间分为多个，每一种功能对应一个地址空间，独立增长，这就是分段思想，分段使得我们不需要关心如何管理和分割地址空间。分段与分页的区别在于，分段存在于逻辑地址的概念上，是一种划分逻辑地址的思想，而分页是解决逻辑地址到物理地址的映射过程的。&lt;/p&gt;
&lt;h4 id=&quot;文件系统&quot;&gt;&lt;a href=&quot;#文件系统&quot; class=&quot;headerlink&quot; title=&quot;文件系统&quot;&gt;&lt;/a&gt;文件系统&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;文件命名&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;长度为255&lt;/li&gt;
&lt;li&gt;windows大小写不敏感，linux是大小写敏感&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;文件结构&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;线性+定长&lt;/li&gt;
&lt;li&gt;树状结构&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;目录结构&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;单层结构&lt;ul&gt;
&lt;li&gt;难以查找文件&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;两层结构&lt;ul&gt;
&lt;li&gt;解决了命名冲突问题&lt;/li&gt;
&lt;li&gt;提高了搜索效率&lt;/li&gt;
&lt;li&gt;可以文件共享和保护&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;多层次&lt;ul&gt;
&lt;li&gt;文件和目录&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;空间分配问题&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;顺序存储&lt;ul&gt;
&lt;li&gt;容易实现、可以直接访问和顺序访问&lt;/li&gt;
&lt;li&gt;外部碎片，文件的&lt;strong&gt;长度必须提前知道&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;链式存储&lt;ul&gt;
&lt;li&gt;没有外部碎片、文件变长&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;随机访问&lt;/strong&gt;性能差，存在结构性开销&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;i-node&lt;ul&gt;
&lt;li&gt;所有的i-node统一存储&lt;/li&gt;
&lt;li&gt;每个文件都有自己i-node结点，支持直接访问，不存在外部碎片&lt;/li&gt;
&lt;li&gt;i-node节点的结构性开销&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;共享文件&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;i-node&lt;ul&gt;
&lt;li&gt;硬链接，每个节点都会指向这个文件&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;符号链接&lt;ul&gt;
&lt;li&gt;其他接待保存路径&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;IO-1&quot;&gt;&lt;a href=&quot;#IO-1&quot; class=&quot;headerlink&quot; title=&quot;IO&quot;&gt;&lt;/a&gt;IO&lt;/h4&gt;&lt;p&gt;分类&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;块设备：把信息存储在固定的大小中，每个块都有自己的地址，每个块都能独立于其他块而读写&lt;/li&gt;
&lt;li&gt;字符设备：不能寻址，也没有任何寻道操作&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;轮询&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;cpu的干预非常频繁&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;C:&#92;Users&#92;huami&#92;AppData&#92;Roaming&#92;Typora&#92;typora-user-images&#92;image-20210729214538130.png&quot; alt=&quot;image-20210729214538130&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;中断驱动&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;容控制器自己完成任务后向cpu发一个中断信号，处理中断过程就是从控制器中读&lt;strong&gt;一个字的数据&lt;/strong&gt;到cpu寄存器中，再写入内存，接着恢复去执行别的，等待下一次中断信号；但是中断次数过多也不好&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;C:&#92;Users&#92;huami&#92;AppData&#92;Roaming&#92;Typora&#92;typora-user-images&#92;image-20210729215353822.png&quot; alt=&quot;image-20210729215353822&quot;&gt;&lt;/p&gt;
&lt;h6 id=&quot;IO多路复用技术&quot;&gt;&lt;a href=&quot;#IO多路复用技术&quot; class=&quot;headerlink&quot; title=&quot;IO多路复用技术&quot;&gt;&lt;/a&gt;IO多路复用技术&lt;/h6&gt;&lt;p&gt;IO多路复用的事件驱动服务器是运行在单一进程上下文中的，因此每个逻辑流都能访问该进程的全部空间，使得流之间共享数据非常容易；&lt;/p&gt;
&lt;p&gt;但是并发粒度的缩小会让代码量上升，而且使得如果一个逻辑流在忙于读文本行，其他是无法进展的&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;DMA&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;C:&#92;Users&#92;huami&#92;AppData&#92;Roaming&#92;Typora&#92;typora-user-images&#92;image-20210729220610942.png&quot; alt=&quot;image-20210729220610942&quot;&gt;&lt;/p&gt;
&lt;p&gt;5.&lt;strong&gt;主要缺点和主要优点&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;优点:数据传输以“块”为单位，CPU介入频率进- -步降低。数据的传输不再需要先经过CPU再写入内存，数据传输效率进- -步增加。CPU和&amp;#x2F;O设备的并行性得到提升。&lt;/p&gt;
&lt;p&gt;缺点: CPU每发出一- 条I&amp;#x2F;0指令，只能读&amp;#x2F;写一个或多个连续的数据块。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;控制器的任务&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;把串行的位流转换成字节块，并且进行有必要的&lt;strong&gt;错误校验&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;CPU&lt;strong&gt;如何与设备控制器何数据缓冲区进行通信&lt;/strong&gt;？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每个控制存储器被分配一个IO端口；只能由操作系统能对其访问；使用特殊的指令去读写&lt;/li&gt;
&lt;li&gt;讲IO映射到内存空间中；像访问内存空间一样去访问；不需要特殊的保护机制去组织用户进程执行IO操作&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;五种IO模型&quot;&gt;&lt;a href=&quot;#五种IO模型&quot; class=&quot;headerlink&quot; title=&quot;五种IO模型&quot;&gt;&lt;/a&gt;五种IO模型&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;同步阻塞IO&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-abef476a75afe52193be9577dcbcb88a_r.jpg&quot; alt=&quot;preview&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;同步非阻塞IO&lt;/p&gt;
&lt;p&gt;非阻塞IO是在应用调用recvfrom读取数据时，如果该缓冲区没有数据的话，就会直接返回一个EWOULDBLOCK错误，不会让应用一直等待中。在没有数据的时候会即刻返回错误标识，那也意味着如果应用要读取数据就需要&lt;strong&gt;不断的调用recvfrom请求&lt;/strong&gt;，直到读取到它数据要的数据为止。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;多路复用IO&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-260e80cbec13cbcc677779690f6ab2fa_r.jpg&quot; alt=&quot;preview&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;为什么会产生多路复用IO？&lt;/p&gt;
&lt;p&gt;因为当有多个网络连接，连接到某个进程的时候，我们想要监听这些socket接口，并当这些接口有数据返回的时候，进行处理。一种解决方案就是，对于每一个socket接口，我们都开辟一个线程来侦听，处理。这样做的局限就是，当连接数变大的时候（成千上万），那么我们就要创建多个线程变量。创建线程变量开销很大，而且，线程切换的开销也会变大。所以我们就寻求一种，&lt;strong&gt;单线程的情况下监听多个socket接口的方式&lt;/strong&gt;，所以就会有多路复用IO的诞生。&lt;/p&gt;
&lt;p&gt;本质上还是同步非阻塞IO，但是将阻塞放在了select上&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;信号驱动IO,继续改良复用IO,思想是发出请求后等你数据准备好了就通知我&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;异步IO&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-5095ab1ffe868a2577bc15310d740293_r.jpg&quot; alt=&quot;preview&quot;&gt;&lt;/p&gt;
&lt;p&gt;异步IO需要更强的操作系统支持；当用户线程收到通知时，数据已经被内核读取完毕，&lt;strong&gt;并放在了用户线程指定的缓冲区内&lt;/strong&gt;，内核在IO完成后通知用户线程直接使用即可。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;死锁&quot;&gt;&lt;a href=&quot;#死锁&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    <category term="知识库" scheme="https://bishoptylaor.github.io/categories/library/"/>
    
    <category term="计算机基础" scheme="https://bishoptylaor.github.io/categories/library/elementary/"/>
    
    
  </entry>
  
  <entry>
    <title>数据库 面试必备</title>
    <link href="https://bishoptylaor.github.io/interview/sql-interview/"/>
    <id>https://bishoptylaor.github.io/interview/sql-interview/</id>
    <published>2024-05-22T10:24:06.000Z</published>
    <updated>2024-06-08T13:28:33.224Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;△-66次-MySQL-为什么使用-B-树来作索引，对比-B-树它的优点和缺点是什么？-中等&quot;&gt;&lt;a href=&quot;#△-66次-MySQL-为什么使用-B-树来作索引，对比-B-树它的优点和缺点是什么？-中等&quot; class=&quot;headerlink&quot; title=&quot;△ 66次 MySQL 为什么使用 B+ 树来作索引，对比 B 树它的优点和缺点是什么？  中等&quot;&gt;&lt;/a&gt;&lt;em&gt;△ 66次&lt;/em&gt; MySQL 为什么使用 B+ 树来作索引，对比 B 树它的优点和缺点是什么？  中等&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;从需求分析上来讲，数据库使用多为 &lt;em&gt;查询&lt;/em&gt; 和 &lt;em&gt;新增&lt;/em&gt; 操作，&lt;em&gt;改删&lt;/em&gt;  本质上也是查询的进一步动作&lt;/li&gt;
&lt;li&gt;二分搜索树实现的 DB 存在一个问题: 范围查询会很慢。我们需要不断地从根节点出发，然后往下遍历。所以我们稍微改造下，数据只 保存在叶子节点上，并且用双向链表进行连接&lt;/li&gt;
&lt;li&gt;对于二分搜索树实现的 DB 而言，其查询效率是与树高有关的。假设我们有 2000 万条数据，我们大概需要一棵树高为 25 的 BST 才能装下所 有数据和索引。也就是说，我们至少需要 25 次硬盘 I&amp;#x2F;O 才能取出一条数据&lt;/li&gt;
&lt;li&gt;将刚刚说的二分搜索树进行树高的压缩，让它变矮胖，就得到了多叉搜索树，aka B-树。&lt;/li&gt;
&lt;li&gt;B+ 树是二叉搜索树的一个扩充，是多路搜索树。它只在叶子节点存储具体的数据或者数据的指向指针，而非叶子节点存放索引数据。这样可以降低磁盘 IO，还能充分利用磁盘的预读功能，批量的加载索引数据。&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;△-42次-数据库的事务隔离级别有哪些？各有哪些优缺点？-中等&quot;&gt;&lt;a href=&quot;#△-42次-数据库的事务隔离级别有哪些？各有哪些优缺点？-中等&quot; class=&quot;headerlink&quot; title=&quot;△ 42次 数据库的事务隔离级别有哪些？各有哪些优缺点？  中等&quot;&gt;&lt;/a&gt;&lt;em&gt;△ 42次&lt;/em&gt; 数据库的事务隔离级别有哪些？各有哪些优缺点？  中等&lt;/h1&gt;&lt;p&gt;首先要明白几个概念&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;脏读&lt;/strong&gt;：脏读指的是读到了其他事务未提交的数据，未提交意味着这些数据可能会回滚，也就是可能最终不会存到数据库中，也就是不存在的数据。读到了并一定最终存在的数据，这就是脏读。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;可重复读&lt;/strong&gt;：可重复读指的是在一个事务内，最开始读到的数据和事务结束前的任意时刻读到的同一批数据都是一致的。通常针对数据&lt;strong&gt;更新（UPDATE）&lt;/strong&gt;操作。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;不可重复读&lt;/strong&gt;：对比可重复读，不可重复读指的是在同一事务内，不同的时刻读到的同一批数据可能是不一样的，可能会受到其他事务的影响，比如其他事务改了这批数据并提交了。通常针对数据&lt;strong&gt;更新（UPDATE）&lt;/strong&gt;操作。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;幻读&lt;/strong&gt;：幻读是针对数据&lt;strong&gt;插入（INSERT）&lt;/strong&gt;操作来说的。假设事务A对某些行的内容作了更改，但是还未提交，此时事务B插入了与事务A更改前的记录相同的记录行，并且在事务A提交之前先提交了，而这时，在事务A中查询，会发现好像刚刚的更改对于某些数据未起作用，但其实是事务B刚插入进来的，让用户感觉很魔幻，感觉出现了幻觉，这就叫幻读。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;未提交读：&lt;/strong&gt;（Read Uncommited）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;读取未提交内容，所有事务可看到其他未提交事务的结果，很少实际使用&lt;/li&gt;
&lt;li&gt;读取未提交的数据称为脏读（Dirty Read）。&lt;/li&gt;
&lt;li&gt;修改时加排它锁；读取时加共享锁，读完释放。 eg：select for update&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;已提交读：&lt;/strong&gt;（Read Committed） 如果想防止脏读，就需要等待其他事务提交后再进行读取操作。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;可重复读：&lt;/strong&gt; （Repeatable Read）已提交读的隔离级别考虑到了数据回滚的无效性，却无法阻止事务的多次提交。比如事务 A 不断的对表进行修改提交，那么事务 B 就会在不同的时间点读取到不同的数据。为了让事务 B 在执行期间读取的数据都是一致的，就有了可重复读的隔离级别，即事务 B 在执行期间，其他事务不得进行修改操作。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;可串行化：&lt;/strong&gt; （Serializable）上面的可重复读隔离级别保证了事务执行期间读取的一致性。然而这里并不包括插入、删除操作。即会出现读多读少数据的情况，这种现象叫做幻读。为了解决幻读，只得进行串行化执行事务，才能互不影响。而此时的事务并发性是最低的&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;△-36次-简述-Redis-持久化中-RDB-以及-AOF-方案的优缺点-困难&quot;&gt;&lt;a href=&quot;#△-36次-简述-Redis-持久化中-RDB-以及-AOF-方案的优缺点-困难&quot; class=&quot;headerlink&quot; title=&quot;△ 36次 简述 Redis 持久化中 RDB 以及 AOF 方案的优缺点  困难&quot;&gt;&lt;/a&gt;&lt;em&gt;△ 36次&lt;/em&gt; 简述 Redis 持久化中 RDB 以及 AOF 方案的优缺点  困难&lt;/h1&gt;&lt;h3 id=&quot;1-RDB：Redis-Database&quot;&gt;&lt;a href=&quot;#1-RDB：Redis-Database&quot; class=&quot;headerlink&quot; title=&quot;1. RDB：Redis Database&quot;&gt;&lt;/a&gt;1. RDB：Redis Database&lt;/h3&gt;&lt;p&gt;指定的时间间隔内将内存中的数据集快照写入磁盘，实际操作是 fork 一个子进程，先将数据集写入临时文件，写入成功后，再替换之前的文件，使用二进制压缩存储。&lt;br&gt;优点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;整个 redis 只包含一个文件 dump.rdb，方便持久化&lt;/li&gt;
&lt;li&gt;容灾性好，易于备份&lt;/li&gt;
&lt;li&gt;性能最大化，使用子进程处理，保证主进程 IO 吞吐，保证了 redis 的高性能&lt;/li&gt;
&lt;li&gt;相对于数据集大时，比 AOF 的启动效率更高&lt;br&gt;缺点：&lt;/li&gt;
&lt;li&gt;数据安全性低，因为会有间隔时间，所以如果间隔期间出现故障，无法保证期间的数据正常备份&lt;/li&gt;
&lt;li&gt;当数据集较大时，子进程长期占用 CPU，会导致服务中断时间延长至秒级&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;2-AOF：Append-Only-File&quot;&gt;&lt;a href=&quot;#2-AOF：Append-Only-File&quot; class=&quot;headerlink&quot; title=&quot;2. AOF：Append Only File&quot;&gt;&lt;/a&gt;2. AOF：Append Only File&lt;/h3&gt;&lt;p&gt;以日志的形式记录服务器处理的每个读写操作，以文本的方式详细记录，可以查看历史操作记录&lt;br&gt;优点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数据安全：每秒同步、每修改同步、不同步3中策略。每秒同步可以理解为类似1s间隔的 RDB ，可能也会出现丢失的情况；每修改同步可以认为是同步持久化，不会丢失&lt;/li&gt;
&lt;li&gt;通过 append 方式追加新的操作，不惧宕机，可以使用 redis-check-aof 工具来解决一致性的问题。&lt;/li&gt;
&lt;li&gt;rewrite 模式可以定期对 AOF 文件重写，合并相关操作，以达到压缩存储的目的&lt;br&gt;缺点&lt;/li&gt;
&lt;li&gt;AOF 文件较大，恢复速度慢&lt;/li&gt;
&lt;li&gt;数据集大的情况下，启动比 RDB 慢&lt;/li&gt;
&lt;li&gt;运行效率 AOF &amp;lt; RDB&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;4.x版本后，把重写方式变成 RDB 直接放到 AOF 文件的头部，比以前版本更快&lt;/p&gt;
&lt;h3 id=&quot;3-主从同步&quot;&gt;&lt;a href=&quot;#3-主从同步&quot; class=&quot;headerlink&quot; title=&quot;3. 主从同步&quot;&gt;&lt;/a&gt;3. 主从同步&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;全量复制：&lt;ul&gt;
&lt;li&gt;主节点通过 bgsave 命令 fork 子进程进行 rdb 持久化，过程非常消耗CPU，内存，硬盘io&lt;/li&gt;
&lt;li&gt;主节点将rdb文件通过网络发给从节点，消耗带宽&lt;/li&gt;
&lt;li&gt;从节点清空数据，使用rdb文件载入，整个过程阻塞，无法响应命令&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;部分复制：&lt;ul&gt;
&lt;li&gt;复制偏移量，双方都要维护&lt;/li&gt;
&lt;li&gt;复制积压缓冲区：定长FIFO的队列作为缓冲区&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;△-36次-Redis-如何实现分布式锁？-困难&quot;&gt;&lt;a href=&quot;#△-36次-Redis-如何实现分布式锁？-困难&quot; class=&quot;headerlink&quot; title=&quot;△ 36次 Redis 如何实现分布式锁？  困难&quot;&gt;&lt;/a&gt;&lt;em&gt;△ 36次&lt;/em&gt; Redis 如何实现分布式锁？  困难&lt;/h1&gt;&lt;p&gt;一般可以采用 setnx 原子操作来进行加锁，常规过期时间为 1s，设置的值为随机数。对于加锁的 key，一般要和当前的操作和请求有幂等关系，防止解锁的时候把其他请求的锁解掉；另一方面如果 1s 过期时间还未执行完毕，可以考虑使用看门狗给这个锁续期。&lt;br&gt;对于 setnx 的解锁，可以使用 lua 脚本 ‘if redis.call(‘get’, KEYS[1]) &amp;#x3D;&amp;#x3D; ARGV[1] then return redis.call(‘del’, KEYS[1]) else return 0 end’ 保证解的锁就是请求刚刚申请的那个锁&lt;/p&gt;
&lt;h3 id=&quot;Redlock&quot;&gt;&lt;a href=&quot;#Redlock&quot; class=&quot;headerlink&quot; title=&quot;Redlock&quot;&gt;&lt;/a&gt;Redlock&lt;/h3&gt;&lt;p&gt;这个是针对于 Redis 中多 master 实例的情况来获取锁的。具体的步骤如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;获取当前毫秒单位时间&lt;/li&gt;
&lt;li&gt;以相同的 key 和随机值在 n 个节点上请求锁，这里获取锁的尝试时间一定要远小于锁的过期时间，防止某个 master 宕机，而我们还在不断地尝试，产生较长的阻塞时间&lt;/li&gt;
&lt;li&gt;只有在绝对大多数节点上获取了锁，且获取时间小于锁的过期时间，就认为锁获取成功了&lt;/li&gt;
&lt;li&gt;如果获取成功，key 的真正有效时间等于过期时间时间减去获取锁所使用的时间（即还会在预设的过期时间过期掉）&lt;/li&gt;
&lt;li&gt;如果获取失败，或者尝试时间超过了超时时间，都认为是获取失败，要将已经设置了 key 的 master 节点删除该 key&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;△-34次-Redis-序列化有哪些方式？-中等&quot;&gt;&lt;a href=&quot;#△-34次-Redis-序列化有哪些方式？-中等&quot; class=&quot;headerlink&quot; title=&quot;△ 34次 Redis 序列化有哪些方式？  中等&quot;&gt;&lt;/a&gt;&lt;em&gt;△ 34次 Redis&lt;/em&gt; 序列化有哪些方式？  中等&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;字符串序列化：将数据以字符串的形式进行序列化和反序列化，常用的字符串序列化方式有JSON、XML、YAML等。&lt;/li&gt;
&lt;li&gt;二进制序列化：将数据以二进制的形式进行序列化和反序列化，常用的二进制序列化方式有MessagePack、Protocol Buffers、Thrift等。&lt;/li&gt;
&lt;li&gt;压缩序列化：将序列化后的数据进行压缩，减小存储空间，常用的压缩序列化方式有Gzip、Snappy等。&lt;/li&gt;
&lt;li&gt;自定义序列化：根据业务需求自定义序列化方式，可以根据数据的特点选择最合适的序列化方式，例如使用Hessian、Kryo等。&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;△-34次-简述-Redis-的哨兵机制-中等&quot;&gt;&lt;a href=&quot;#△-34次-简述-Redis-的哨兵机制-中等&quot; class=&quot;headerlink&quot; title=&quot;△ 34次 简述 Redis 的哨兵机制  中等&quot;&gt;&lt;/a&gt;&lt;em&gt;△ 34次&lt;/em&gt; 简述 Redis 的哨兵机制  中等&lt;/h1&gt;&lt;h3 id=&quot;主从复制&quot;&gt;&lt;a href=&quot;#主从复制&quot; class=&quot;headerlink&quot; title=&quot;主从复制&quot;&gt;&lt;/a&gt;主从复制&lt;/h3&gt;&lt;p&gt;当从数据库启动时，会向主数据库发送sync命令，主数据库接收到sync后开始在后台保存快照rdb，在保存快照期间收到的命令缓存起来，当快照完成时，主数据库会将快照和缓存的命令一块发送给从库。复制初始化结束。 之后，主每收到1个命令就同步发送给从。 当出现断开重连后，2.8之后的版本会将断线期间的命令传给重数据库。增量复制&lt;/p&gt;
&lt;p&gt;主从复制是乐观复制，当客户端发送写执行给主，主执行完立即将结果返回客户端，并异步的把命令发送给从，从而不影响性能。也可以设置至少同步给多少个从主才可写。 无硬盘复制:如果硬盘效率低将会影响复制性能，2.8之后可以设置无硬盘复制，repl-diskless-sync yes&lt;/p&gt;
&lt;h3 id=&quot;哨兵模式&quot;&gt;&lt;a href=&quot;#哨兵模式&quot; class=&quot;headerlink&quot; title=&quot;哨兵模式&quot;&gt;&lt;/a&gt;哨兵模式&lt;/h3&gt;&lt;p&gt;哨兵的作用：&lt;br&gt;1、监控redis主、从数据库是否正常运行&lt;br&gt;2、主出现故障自动将从数据库转换为主数据库。&lt;br&gt;哨兵的核心知识&lt;br&gt;1、哨兵至少需要 3 个实例，来保证自己的健壮性。&lt;br&gt;2、哨兵 + redis 主从的部署架构，是不保证数据零丢失的，只能保证 redis 集群的高可用性。&lt;br&gt;3、对于哨兵 + redis 主从这种复杂的部署架构，尽量在测试环境和生产环境，都进行充足的测试和演练。&lt;br&gt;4、配置哨兵监控一个系统时，只需要配置其监控主数据库即可，哨兵会自动发现所有复制该主数据库的从数据库。&lt;/p&gt;
&lt;h1 id=&quot;△-30次-简述-Redis-中如何防止缓存雪崩和缓存击穿-中等&quot;&gt;&lt;a href=&quot;#△-30次-简述-Redis-中如何防止缓存雪崩和缓存击穿-中等&quot; class=&quot;headerlink&quot; title=&quot;△ 30次 简述 Redis 中如何防止缓存雪崩和缓存击穿  中等&quot;&gt;&lt;/a&gt;&lt;em&gt;△ 30次&lt;/em&gt; 简述 Redis 中如何防止缓存雪崩和缓存击穿  中等&lt;/h1&gt;&lt;p&gt;数据库是架构的瓶颈，要尽量保证有效请求到达数据库，可以酌情放大链路上前置位置的复杂度和成本&lt;br&gt;c client；redis ； db&amp;#x2F;mysql&lt;/p&gt;
&lt;p&gt;穿透：缓存和db中都找不到该数据 &amp;#x3D; db中无数据，redis无数据，大量并发，请求打到db层&lt;br&gt;原因：接口请求数据不是有效参数，因此根本查不到结果；有效参数但是确实没有数据&lt;br&gt;解法：接口层增加鉴权，业务层增加有效请求判断；返回空 &amp;amp;&amp;amp; 增加短效的空缓存；布隆过滤器（难道要加到每个接口上么？需要思考嗷）；业务加互斥锁；对于空值可以增加一个空缓存&lt;/p&gt;
&lt;p&gt;击穿：热点key过期 or key从来没有被访问过 &amp;#x3D; db中有数据，大量并发，redis无缓存，请求打到db层&lt;br&gt;解法：热点数据永不过期；互斥锁（挡住大量重复的并发请求）&lt;/p&gt;
&lt;p&gt;雪崩：N个key的都过期了（没有被缓存到） &amp;#x3D; db中有，大量并发，redis无缓存，请求打到db层&lt;br&gt;解法：缓存数据设置随机过期时间；增加缓存失效标记位；缓存预热；互斥锁&lt;/p&gt;
&lt;p&gt;流程： 请求redis，查不到 –&amp;gt; 大家抢锁 O（1） –&amp;gt; 抢上的查db，并更新缓存 O（1） –&amp;gt; 没抢上的重复请求Redis ，拿到数据&lt;br&gt;延伸问题：多个等待的请求，是blocking的轻量级进程，不参与cpu及内核调度，注意处理线程池即可&lt;/p&gt;
&lt;p&gt;△ 30次&lt;/p&gt;
&lt;p&gt;产生死锁的必要条件有哪些？如何解决死锁？  中等 &lt;a href=&quot;https://dev.mysql.com/doc/refman/8.0/en/innodb-deadlocks.html&quot;&gt;参考1&lt;/a&gt; &lt;a href=&quot;https://smartkeyerror.oss-cn-shenzhen.aliyuncs.com/Phyduck/database/%E5%85%A8%E5%B1%80%E9%94%81%E3%80%81%E8%A1%A8%E7%BA%A7%E9%94%81%E4%BB%A5%E5%8F%8A%E8%A1%8C%E9%94%81%EF%BC%88%E4%B8%8A%EF%BC%89.pdf&quot;&gt;参考2&lt;/a&gt; &lt;a href=&quot;https://www.gatevidyalay.com/deadlock-in-os-conditions-for-deadlock/&quot;&gt;参考3&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;△-28次-简述-Redis-中常见类型的底层数据结构&quot;&gt;&lt;a href=&quot;#△-28次-简述-Redis-中常见类型的底层数据结构&quot; class=&quot;headerlink&quot; title=&quot;△ 28次 简述 Redis 中常见类型的底层数据结构&quot;&gt;&lt;/a&gt;&lt;em&gt;△ 28次&lt;/em&gt; 简述 Redis 中常见类型的底层数据结构&lt;/h1&gt;&lt;h3 id=&quot;string&quot;&gt;&lt;a href=&quot;#string&quot; class=&quot;headerlink&quot; title=&quot;string&quot;&gt;&lt;/a&gt;string&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;id&amp;#x2F;id_info 缓存  &lt;/li&gt;
&lt;li&gt;计数器  &lt;/li&gt;
&lt;li&gt;setnx 分布式锁 &lt;ul&gt;
&lt;li&gt;setnx 的时候会传入一个随机值&lt;/li&gt;
&lt;li&gt;解锁：‘if redis.call(‘get’, KEYS[1]) &amp;#x3D;&amp;#x3D; ARGV[1] then return redis.call(‘del’, KEYS[1]) else return 0 end’&lt;/li&gt;
&lt;li&gt;lua脚本&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;分布式ID &lt;/li&gt;
&lt;li&gt;sds（动态简单字符串）&lt;ul&gt;
&lt;li&gt;底层结构为：&lt;ul&gt;
&lt;li&gt;len buf中已经占有的长度(表示此字符串的实际长度)&lt;/li&gt;
&lt;li&gt;free buf中未使用的缓冲区长度&lt;/li&gt;
&lt;li&gt;buf[] 实际保存字符串数据的地方&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;读取时间复杂度为 O(1)&lt;/li&gt;
&lt;li&gt;惰性删除，留待下次使用&lt;/li&gt;
&lt;li&gt;一次分配最大为 128kb&lt;h3 id=&quot;list&quot;&gt;&lt;a href=&quot;#list&quot; class=&quot;headerlink&quot; title=&quot;list&quot;&gt;&lt;/a&gt;list&lt;/h3&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;当队列用，最近100个购买用户信息  &lt;/li&gt;
&lt;li&gt;当栈用  &lt;/li&gt;
&lt;li&gt;元素可重复&lt;/li&gt;
&lt;li&gt;非实时分页列表，比如小时榜，日榜，周榜&lt;/li&gt;
&lt;li&gt;存储微博、微信公众号等消息流数据&lt;/li&gt;
&lt;li&gt;等于链表，插入删除 O(1)，查找 O(n)&lt;/li&gt;
&lt;li&gt;底层是一个叫做 quicklist 的节点，相当于由 ziplist 节点组成的双向链表&lt;h3 id=&quot;hash&quot;&gt;&lt;a href=&quot;#hash&quot; class=&quot;headerlink&quot; title=&quot;hash&quot;&gt;&lt;/a&gt;hash&lt;/h3&gt;&lt;/li&gt;
&lt;li&gt;相比string获取单个字段节省 序列化与反序列化操作&lt;/li&gt;
&lt;li&gt;相当于 HashMap ，由数组加链表组合而成，当一维的 hash 数组碰撞时，用链表串起来&lt;/li&gt;
&lt;li&gt;底层实现方式有两种，数据量少的时候是 ziplist；量大时转为 Hashtable&lt;/li&gt;
&lt;li&gt;hashtable 由 size、used、哈希节点数组组成；&lt;ul&gt;
&lt;li&gt;hash节点就是 kv 键值对，并且用链地址法处理冲突&lt;h3 id=&quot;set&quot;&gt;&lt;a href=&quot;#set&quot; class=&quot;headerlink&quot; title=&quot;set&quot;&gt;&lt;/a&gt;set&lt;/h3&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;取交、并、差集  &lt;/li&gt;
&lt;li&gt;点赞、收藏、关注等…  &lt;/li&gt;
&lt;li&gt;kv 模式&lt;/li&gt;
&lt;li&gt;内部元素不重复&lt;h3 id=&quot;sorted-set（zset）&quot;&gt;&lt;a href=&quot;#sorted-set（zset）&quot; class=&quot;headerlink&quot; title=&quot;sorted set（zset）&quot;&gt;&lt;/a&gt;sorted set（zset）&lt;/h3&gt;&lt;/li&gt;
&lt;li&gt;排行榜功能，实时分页列表，实时榜单等&lt;/li&gt;
&lt;li&gt;延迟队列，score 存储过期时间，从小到大排序，最靠前的就是最先到期的数据。&lt;/li&gt;
&lt;li&gt;set 基础上增加了分数&lt;/li&gt;
&lt;li&gt;结构上是由一个 dict 和一个跳表组成，dict 保证 key 唯一性&lt;/li&gt;
&lt;li&gt;插入删除都是 O(log n)，查找 O(logn)&lt;/li&gt;
&lt;li&gt;一大优点是可以对分数进行范围查找 zrange&lt;/li&gt;
&lt;li&gt;少量数据按照 ziplist 存储，member和score顺序存放并按score的顺序排列；元素数量 &amp;lt; 128，元素大小 &amp;lt; 64kb&lt;/li&gt;
&lt;li&gt;大量数据按照跳表存储&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;△-28次-简述什么是最左匹配原则-简单&quot;&gt;&lt;a href=&quot;#△-28次-简述什么是最左匹配原则-简单&quot; class=&quot;headerlink&quot; title=&quot;△ 28次 简述什么是最左匹配原则  简单&quot;&gt;&lt;/a&gt;&lt;em&gt;△ 28次&lt;/em&gt; 简述什么是最左匹配原则  简单&lt;/h1&gt;&lt;p&gt;mysql 建立联合索引后，是按最左匹配原则来筛选记录的，即检索数据是从联合索引的第一个字段来筛选的。如果 where 里的条件只有第二个字段，那么将无法应用到索引。&lt;/p&gt;
&lt;h1 id=&quot;△-26次-简述-Redis-的过期机制和内存淘汰策略-困难&quot;&gt;&lt;a href=&quot;#△-26次-简述-Redis-的过期机制和内存淘汰策略-困难&quot; class=&quot;headerlink&quot; title=&quot;△ 26次 简述 Redis 的过期机制和内存淘汰策略  困难&quot;&gt;&lt;/a&gt;&lt;em&gt;△ 26次&lt;/em&gt; 简述 Redis 的过期机制和内存淘汰策略  困难&lt;/h1&gt;&lt;h3 id=&quot;过期机制&quot;&gt;&lt;a href=&quot;#过期机制&quot; class=&quot;headerlink&quot; title=&quot;过期机制&quot;&gt;&lt;/a&gt;过期机制&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;惰性过期：访问一个 key 的时候才判断这个 key 是否已经过期，该策略可以最大化的节省 CPU 资源，但是对内存不友好，会存在大量的过期 key 没有被再次访问，从而不会被清除，占用内存，造成泄漏&lt;/li&gt;
&lt;li&gt;定期过期：每隔一定的时间，扫描数据库中一定量的 expire 字典中的 key，并清除其中已经过期的 key。该策略是前两者的一个折中方案，通过调整定时扫描的时间间隔和每次扫描的限定耗时，可以在不同情况下使内存和 CPU 达到最优平衡。&lt;strong&gt;特点：随机抽取检查&lt;/strong&gt;，缺点是实际操作中很难界定时间间隔和限定耗时。&lt;/li&gt;
&lt;li&gt;二种策略同时生效&lt;h3 id=&quot;内存淘汰策略&quot;&gt;&lt;a href=&quot;#内存淘汰策略&quot; class=&quot;headerlink&quot; title=&quot;内存淘汰策略&quot;&gt;&lt;/a&gt;内存淘汰策略&lt;/h3&gt;&lt;h4 id=&quot;常见的六种淘汰策略&quot;&gt;&lt;a href=&quot;#常见的六种淘汰策略&quot; class=&quot;headerlink&quot; title=&quot;常见的六种淘汰策略&quot;&gt;&lt;/a&gt;常见的六种淘汰策略&lt;/h4&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;noeviction: 不删除策略， 达到最大内存限制时， 如果需要更多内存， 直接返回错误信息。 大多数写命令都会导致占用更多的内存(有极少数会例外， 如 DEL )&lt;/li&gt;
&lt;li&gt;allkeys-lru: 所有key通用; 优先删除最近最少使用(less recently used ，LRU) 的 key&lt;/li&gt;
&lt;li&gt;volatile-lru: 只限于设置了 expire 的部分; 优先删除最近最少使用(less recently used ，LRU) 的 key&lt;/li&gt;
&lt;li&gt;allkeys-random: 所有key通用; 随机删除一部分 key&lt;/li&gt;
&lt;li&gt;volatile-random: 只限于设置了 expire 的部分; 随机删除一部分 key&lt;/li&gt;
&lt;li&gt;volatile-ttl: 只限于设置了 expire 的部分; 优先删除剩余时间(time to live，TTL) 短的key&lt;h4 id=&quot;使用场景&quot;&gt;&lt;a href=&quot;#使用场景&quot; class=&quot;headerlink&quot; title=&quot;使用场景&quot;&gt;&lt;/a&gt;使用场景&lt;/h4&gt;&lt;/li&gt;
&lt;li&gt;如果分为热数据与冷数据， 推荐使用 allkeys-lru 策略；也就是， 其中一部分key经常被读写. 如果不确定具体的业务特征， 那么 allkeys-lru 是一个很好的选择&lt;/li&gt;
&lt;li&gt;如果需要循环读写所有的key， 或者各个key的访问频率差不多， 可以使用 allkeys-random 策略， 即读写所有元素的概率差不多&lt;/li&gt;
&lt;li&gt;假如要让 Redis 根据 TTL 来筛选需要删除的key， 请使用 volatile-ttl 策略&lt;br&gt;volatile-lru 和 volatile-random 策略主要应用场景是: 既有缓存，又有持久key的实例中。一般来说， 像这类场景， 应该使用两个单独的 Redis 实例&lt;br&gt;值得一提的是， 设置 expire 会消耗额外的内存， 所以使用 allkeys-lru 策略， 可以更高效地利用内存， 因为这样就可以不再设置过期时间了&lt;h4 id=&quot;淘汰的内部实现&quot;&gt;&lt;a href=&quot;#淘汰的内部实现&quot; class=&quot;headerlink&quot; title=&quot;淘汰的内部实现&quot;&gt;&lt;/a&gt;淘汰的内部实现&lt;/h4&gt;淘汰过程可以这样理解：&lt;/li&gt;
&lt;li&gt;应用执行一个命令， 导致 Redis 中的数据增加，占用更多内存&lt;/li&gt;
&lt;li&gt;Redis 检查内存使用量， 如果超出 &lt;code&gt;maxmemory&lt;/code&gt; （redis.conf中配置）限制，根据策略清除部分 key&lt;/li&gt;
&lt;li&gt;继续执行下一条命令， 以此类推&lt;br&gt;在这个过程中， 内存使用量会不断地达到 limit 值， 然后超过， 然后删除部分 key， 使用量又下降到 limit 值之下&lt;br&gt;如果某个命令导致大量内存占用(比如通过新key保存一个很大的set)， 在一段时间内， 可能内存的使用量会明显超过 maxmemory 限制&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;△ 24次&lt;/p&gt;
&lt;p&gt;数据库有哪些常见索引？数据库设计的范式是什么？  中等 &lt;a href=&quot;https://smartkeyerror.oss-cn-shenzhen.aliyuncs.com/Phyduck/database/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%20InnoDB%20Index.pdf&quot;&gt;参考1&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;△-24次-简述乐观锁以及悲观锁的区别以及使用场景-简单&quot;&gt;&lt;a href=&quot;#△-24次-简述乐观锁以及悲观锁的区别以及使用场景-简单&quot; class=&quot;headerlink&quot; title=&quot;△ 24次 简述乐观锁以及悲观锁的区别以及使用场景  简单&quot;&gt;&lt;/a&gt;&lt;em&gt;△ 24次&lt;/em&gt; 简述乐观锁以及悲观锁的区别以及使用场景  简单&lt;/h1&gt;&lt;p&gt;悲观锁（Pessimistic Lock）：&lt;br&gt;总是担心数据被修改，每次使用数据都要加锁，使用结束以后解锁，期间所有其他线程等待。&lt;br&gt;乐观锁（Optimistic Lock）：&lt;br&gt;不担心数据被修改，使用数据不加锁，但是更新数据时会判断是否有其他人修改过，如果已经被修改，就不继续修改。&lt;/p&gt;
&lt;h3 id=&quot;使用场景：&quot;&gt;&lt;a href=&quot;#使用场景：&quot; class=&quot;headerlink&quot; title=&quot;使用场景：&quot;&gt;&lt;/a&gt;使用场景：&lt;/h3&gt;&lt;p&gt;悲观锁：比较适合写入操作比较频繁的场景，如果出现大量的读取操作，每次读取的时候都会进行加锁，这样会增加大量的锁的开销，降低了系统的吞吐量。&lt;br&gt;乐观锁：比较适合读取操作比较频繁的场景，如果出现大量的写入操作，数据发生冲突的可能性就会增大，为了保证数据的一致性，应用层需要不断的重新获取数据，这样会增加大量的查询操作，降低了系统的吞吐量。&lt;/p&gt;
&lt;h1 id=&quot;△-24次-MySQL-中-join-与-left-join-的区别是什么？-简单&quot;&gt;&lt;a href=&quot;#△-24次-MySQL-中-join-与-left-join-的区别是什么？-简单&quot; class=&quot;headerlink&quot; title=&quot;△ 24次 MySQL 中 join 与 left join 的区别是什么？  简单&quot;&gt;&lt;/a&gt;&lt;em&gt;△ 24次&lt;/em&gt; MySQL 中 join 与 left join 的区别是什么？  简单&lt;/h1&gt;&lt;p&gt;join &amp;#x3D; inner join 返回两个表中都有的数据&lt;br&gt;left join 以左表为基准，返回左表中的所有数据结果，右表中不存在的值一般为 null&lt;/p&gt;
&lt;p&gt;△ 24次&lt;/p&gt;
&lt;p&gt;简述 MySQL MVCC 的实现原理  困难 &lt;a href=&quot;https://dev.mysql.com/doc/refman/8.0/en/innodb-multi-versioning.html&quot;&gt;参考1&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;△ 22次&lt;/p&gt;
&lt;p&gt;简述脏读和幻读的发生场景，InnoDB 是如何解决幻读的？  中等 &lt;a href=&quot;https://dev.mysql.com/doc/refman/8.0/en/innodb-transaction-isolation-levels.html&quot;&gt;参考1&lt;/a&gt; &lt;a href=&quot;https://cloud.tencent.com/developer/article/1450773&quot;&gt;参考2&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;△ 20次&lt;/p&gt;
&lt;p&gt;Redis 有几种数据结构？Zset 是如何实现的？  中等 &lt;a href=&quot;https://redis.io/topics/data-types&quot;&gt;参考1&lt;/a&gt; &lt;a href=&quot;https://smartkeyerror.oss-cn-shenzhen.aliyuncs.com/Phyduck/database/Redis%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84.pdf&quot;&gt;参考2&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;△-20次-简述-Redis-中跳表的应用以及优缺点-中等&quot;&gt;&lt;a href=&quot;#△-20次-简述-Redis-中跳表的应用以及优缺点-中等&quot; class=&quot;headerlink&quot; title=&quot;△ 20次 简述 Redis 中跳表的应用以及优缺点  中等&quot;&gt;&lt;/a&gt;&lt;em&gt;△ 20次&lt;/em&gt; 简述 Redis 中跳表的应用以及优缺点  中等&lt;/h1&gt;&lt;h3 id=&quot;时间复杂度&quot;&gt;&lt;a href=&quot;#时间复杂度&quot; class=&quot;headerlink&quot; title=&quot;时间复杂度&quot;&gt;&lt;/a&gt;时间复杂度&lt;/h3&gt;&lt;p&gt;我们知道单链表查询的时间复杂度为O(n)，而插入、删除操作需要先找到对应的位置，所以插入、删除的时间复杂度也是O(n)。&lt;br&gt;那么，跳表的时间复杂度是多少呢？&lt;br&gt;如果按照标准的跳表来看的话，每一级索引减少k&amp;#x2F;2个元素（k为其下面一级索引的个数），那么整个跳表的高度就是(log n)。&lt;br&gt;学习过平衡二叉树的同学都知道，它的时间复杂度与树的高度成正比，即O(log n)。&lt;br&gt;所以，这里跳表的时间复杂度也是O(log n)。（这里不一步步推倒了，只要记住，查询时每次减少一半的元素的时间复杂度都是O(log n)，比如二叉树的查找、二分法查找、归并排序、快速排序）&lt;/p&gt;
&lt;h3 id=&quot;空间复杂度&quot;&gt;&lt;a href=&quot;#空间复杂度&quot; class=&quot;headerlink&quot; title=&quot;空间复杂度&quot;&gt;&lt;/a&gt;空间复杂度&lt;/h3&gt;&lt;p&gt;我们还是以标准的跳表来分析，每两个元素向上提取一个元素，那么，最后额外需要的空间就是：&lt;br&gt;n&amp;#x2F;2 + (n&amp;#x2F;2)^2 + (n&amp;#x2F;2)^3 + … + 8 + 4 + 2 &amp;#x3D; n - 2&lt;br&gt;所以，跳表的空间复杂度是O(n)。&lt;/p&gt;
&lt;h3 id=&quot;随机层数&quot;&gt;&lt;a href=&quot;#随机层数&quot; class=&quot;headerlink&quot; title=&quot;随机层数&quot;&gt;&lt;/a&gt;随机层数&lt;/h3&gt;&lt;p&gt;在新增节点时会计算当前节点应该放置的层数，表面上是按照随机数计算出来的。&lt;br&gt;跳表通常需要有一个最大层数maxLevel，以及一个概率p，即新增加一层的概率。通常数据量够大，就会呈现出一定的比率。&lt;br&gt;当p是0.25，那么只有产生一层的概率就是1-p（0.75），产生第二层的概率就是（1-p） * p。三层（1-p）pp…&lt;br&gt;因此，一个节点的平均层数（也即包含的平均指针数目）&lt;/p&gt;
&lt;h3 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h3&gt;&lt;p&gt;（1）跳表是可以实现二分查找的有序链表；&lt;br&gt;（2）每个元素插入时随机生成它的level；&lt;br&gt;（3）最低层包含所有的元素；&lt;br&gt;（4）如果一个元素出现在level(x)，那么它肯定出现在x以下的level中；&lt;br&gt;（5）每个索引节点包含两个指针，一个向下，一个向右；&lt;br&gt;（6）跳表查询、插入、删除的时间复杂度为O(log n)，与平衡二叉树接近；&lt;/p&gt;
&lt;h1 id=&quot;△-18次-聚簇索引和非聚簇索引有什么区别？-简单&quot;&gt;&lt;a href=&quot;#△-18次-聚簇索引和非聚簇索引有什么区别？-简单&quot; class=&quot;headerlink&quot; title=&quot;△ 18次 聚簇索引和非聚簇索引有什么区别？  简单&quot;&gt;&lt;/a&gt;&lt;strong&gt;△ 18次&lt;/strong&gt; 聚簇索引和非聚簇索引有什么区别？  简单&lt;/h1&gt;&lt;p&gt;聚簇索引（Clustered Index）和非聚簇索引（Non-Clustered Index），也称为二级索引或非聚集索引，是数据库索引的两种主要类型，它们在结构和性能方面有显著的区别：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;存储结构&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;聚簇索引&lt;/strong&gt;：在聚簇索引中，索引的构建与表数据是一起存储的。这意味着索引的叶节点直接包含行数据或指向行数据的指针。由于数据按索引顺序存储，聚簇索引可以快速检索数据。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;非聚簇索引&lt;/strong&gt;：在非聚簇索引中，索引结构是独立的，并且索引的叶节点包含指向表数据的指针（如行ID）。这意味着索引和数据分开存储，非聚簇索引用于快速定位到数据行，但可能需要额外的I&amp;#x2F;O操作来检索实际的数据。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;物理顺序&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;聚簇索引的物理顺序与索引顺序相同，即数据行是按照索引的顺序来存储的。&lt;/li&gt;
&lt;li&gt;非聚簇索引的物理顺序与索引顺序可以不同，数据行的存储顺序与索引顺序是独立的。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;一个表中的索引数量&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;聚簇索引&lt;/strong&gt;：一个表只能有一个聚簇索引，因为表数据本身只能按一种顺序存储。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;非聚簇索引&lt;/strong&gt;：一个表可以有多个非聚簇索引，每个索引都可以提供访问数据的不同路径。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;性能&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;聚簇索引由于数据和索引在一起，对于范围查询和顺序访问非常高效。&lt;/li&gt;
&lt;li&gt;非聚簇索引在执行查找时可能需要两次查找：首先在索引中查找行的指针，然后在表数据中检索实际数据。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;更新性能&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;更新聚簇索引可能更昂贵，因为可能需要移动数据行来维护索引的物理顺序。&lt;/li&gt;
&lt;li&gt;非聚簇索引的更新通常更快，因为只需更新索引页，不需要移动数据行。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;主键约束&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通常，表的主键会自动创建一个聚簇索引，除非明确指定使用非聚簇索引。&lt;/li&gt;
&lt;li&gt;非聚簇索引可以通过唯一约束或索引命令显式创建。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;使用场景&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;聚簇索引适合于经常通过索引值访问数据的场景，如主键查询。&lt;/li&gt;
&lt;li&gt;非聚簇索引适合于需要多种不同方式访问数据的场景，可以提高查询的灵活性。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;理解聚簇索引和非聚簇索引的区别对于数据库设计和性能优化非常重要，合理的索引设计可以显著提高数据库的查询效率和整体性能。&lt;/p&gt;
&lt;h1 id=&quot;△-17次-MySQL-中-varchar-和-char-的区别是什么？-简单&quot;&gt;&lt;a href=&quot;#△-17次-MySQL-中-varchar-和-char-的区别是什么？-简单&quot; class=&quot;headerlink&quot; title=&quot;△ 17次 MySQL 中 varchar 和 char 的区别是什么？  简单&quot;&gt;&lt;/a&gt;&lt;em&gt;△ 17次&lt;/em&gt; MySQL 中 varchar 和 char 的区别是什么？  简单&lt;/h1&gt;&lt;h3 id=&quot;CHAR&quot;&gt;&lt;a href=&quot;#CHAR&quot; class=&quot;headerlink&quot; title=&quot;CHAR&quot;&gt;&lt;/a&gt;CHAR&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;固定长度：CHAR 类型用于存储固定长度的字符串。不管实际存储的数据长度是多少，CHAR 类型的列都会在存储时填充空格（空格补齐）到指定长度。&lt;/li&gt;
&lt;li&gt;存储效率：由于长度固定，CHAR 类型在存储时效率较高，因为 MySQL 可以直接定位到特定行的位置。&lt;/li&gt;
&lt;li&gt;适用场景：适合存储长度固定的数据，例如国家代码、邮政编码等。&lt;h3 id=&quot;VARCHAR&quot;&gt;&lt;a href=&quot;#VARCHAR&quot; class=&quot;headerlink&quot; title=&quot;VARCHAR&quot;&gt;&lt;/a&gt;VARCHAR&lt;/h3&gt;&lt;/li&gt;
&lt;li&gt;可变长度：VARCHAR 类型用于存储可变长度的字符串。它只会存储实际使用的字符数，并在存储时附加一个额外字节（或两个字节，如果字符串长度超过 255）来记录字符串的长度。&lt;/li&gt;
&lt;li&gt;存储效率：由于长度可变，VARCHAR 类型在插入和检索数据时可能需要更多的处理时间，但在存储空间的使用上更为灵活。&lt;/li&gt;
&lt;li&gt;适用场景：适合存储长度不固定的数据，例如名字、地址、描述等。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;△-16次-简述数据库中的-ACID-分别是什么？-简单&quot;&gt;&lt;a href=&quot;#△-16次-简述数据库中的-ACID-分别是什么？-简单&quot; class=&quot;headerlink&quot; title=&quot;△ 16次* 简述数据库中的 ACID 分别是什么？  简单&quot;&gt;&lt;/a&gt;△ 16次* 简述数据库中的 ACID 分别是什么？  简单&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;原子性(Atomicity)：&lt;/strong&gt;事务是一个不可分割的单位，因此在一个事务里的所有操作要么全部生效，要么全部不生效。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;一致性(Consistency)：&lt;/strong&gt;也可以理解为是预期状态的正确性，即从一个正确的状态到另一个正确的状态，这里的状态往往是由业务来定义的。比如转账中的一个扣钱一个加钱，是我们规定的一个数据流转，那么执行前的账户余额和转账后的账户余额就得满足加减特性，这就是所谓的业务正确。题外话：银行家舍入 —— 四舍六入五考虑，五后非零则进一，五后皆零看奇偶，奇进偶舍不连续。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;隔离性(Isolation)：&lt;/strong&gt;事务并发执行时，各个事务之间相互影响的程度。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;持久化(Durability)：&lt;/strong&gt;通过日志等手段，只要我们的事务提交成功了，那么就意味着这次的数据操作是成功的。即使下次重启了程序，也不会丢失此处的操作结果。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;△ 16次&lt;/p&gt;
&lt;p&gt;简述 MySQL 三种日志的使用场景  中等 &lt;a href=&quot;https://smartkeyerror.oss-cn-shenzhen.aliyuncs.com/Phyduck/database/InnoDB-WAL.pdf&quot;&gt;参考1&lt;/a&gt; &lt;a href=&quot;https://dev.mysql.com/doc/refman/8.0/en/binary-log.html&quot;&gt;参考2&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;△ 16次&lt;/p&gt;
&lt;p&gt;模糊查询是如何实现的？  简单&lt;/p&gt;
&lt;p&gt;△ 14次&lt;/p&gt;
&lt;p&gt;并发事务会引发哪些问题？如何解决？  中等&lt;/p&gt;
&lt;p&gt;△ 12次&lt;/p&gt;
&lt;p&gt;什么是数据库事务，MySQL 为什么会使用 InnoDB 作为默认选项&lt;/p&gt;
&lt;h1 id=&quot;布隆过滤器&quot;&gt;&lt;a href=&quot;#布隆过滤器&quot; class=&quot;headerlink&quot; title=&quot;布隆过滤器&quot;&gt;&lt;/a&gt;布隆过滤器&lt;/h1&gt;&lt;p&gt;可以简单的理解为有一批哈希函数，对将要存储的内容进行哈希计算，每个哈希函数的结果对应一个 bit 位，如果命中了结果，就将对应 bit 位置为1。那么当这个数据查询请求再次来到时，比较哈希函数结果位是否都为1，就可以知道这个数据是不是在我们的集合内了。&lt;br&gt;值得一提的是，当存储的内容很大时，可能大部分 bit 位都被标记为1了，存在误判的可能。&lt;br&gt;即布隆过滤器中查到的元素可能存在在集合中，但是查不到的元素一定不在&lt;/p&gt;
&lt;h3 id=&quot;常见应用：&quot;&gt;&lt;a href=&quot;#常见应用：&quot; class=&quot;headerlink&quot; title=&quot;常见应用：&quot;&gt;&lt;/a&gt;常见应用：&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;网页爬虫对 URL 去重，避免爬取相同的 URL 地址；&lt;/li&gt;
&lt;li&gt;反垃圾邮件，从数十亿个垃圾邮件列表中判断某邮箱是否垃圾邮箱；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;遇见慢查询如何查看执行计划&lt;br&gt;2024-02-05 京东&lt;br&gt;可以开启慢查询日志，使用 EXPLAIN 语句来查看执行计划。&lt;br&gt;通过分析执行计划，可以了解数据库如何执行查询语句的。在执行计划中，表的访问方式、使用的索引、行数估计等信息，都可能通过调整来提高查询性能。&lt;/p&gt;
&lt;p&gt;MySQL 的索引机制&lt;br&gt;2024-02-28 阿里&lt;br&gt;B-tree索引：&lt;br&gt;B-tree（Balanced Tree）是一种平衡树结构，用于实现对数据的快速查找。MySQL的B-tree索引是基于这种数据结构实现的，包括以下几种类型：&lt;br&gt;普通索引（Normal Index）： 普通的B-tree索引，没有任何限制。&lt;br&gt;唯一索引（Unique Index）： 确保索引列的所有值都是唯一的，不允许重复。&lt;br&gt;主键索引（Primary Key Index）： 主键是一种特殊的唯一索引，用于唯一标识每一条记录。&lt;br&gt;组合索引（Composite Index）： 使用多个列组合成一个索引，可以提高查询的效率。&lt;br&gt;哈希索引：&lt;br&gt;哈希索引是基于哈希表实现的索引，适用于等值查询。相比B-tree索引，哈希索引在等值查询时速度更快，但在范围查询和排序等操作上性能较差。&lt;br&gt;哈希索引的主要特点：&lt;br&gt;适用于等值查询，例如WHERE column &amp;#x3D; value。&lt;br&gt;不支持范围查询和排序操作。&lt;br&gt;不支持部分索引查询。&lt;br&gt;对于哈希冲突（多个不同的键值映射到同一个哈希桶）的处理通常通过链表等方式实现。&lt;/p&gt;
&lt;p&gt;MySQL 如何避免死锁&lt;br&gt;2024-02-12 bilibili&lt;br&gt;死锁是无法完全避免的，但可以通过一些手段降低死锁发生概率。&lt;/p&gt;
&lt;p&gt;缩短锁持有的时间&lt;br&gt;减少间隙锁&lt;br&gt;减少加锁范围&lt;br&gt;设置 MySQL</summary>
        
      
    
    
    
    <category term="面试" scheme="https://bishoptylaor.github.io/categories/interview/"/>
    
    
  </entry>
  
  <entry>
    <title>Golang GC 详解</title>
    <link href="https://bishoptylaor.github.io/library/Golang/advanced-tutorial/go-gc/"/>
    <id>https://bishoptylaor.github.io/library/Golang/advanced-tutorial/go-gc/</id>
    <published>2024-05-21T09:09:42.000Z</published>
    <updated>2024-05-22T10:45:53.940Z</updated>
    
    
    
    
    <category term="知识库" scheme="https://bishoptylaor.github.io/categories/library/"/>
    
    <category term="Golang" scheme="https://bishoptylaor.github.io/categories/library/Golang/"/>
    
    <category term="进阶教程笔记" scheme="https://bishoptylaor.github.io/categories/library/Golang/advanced-tutorial/"/>
    
    
  </entry>
  
  <entry>
    <title>go-sync-map</title>
    <link href="https://bishoptylaor.github.io/library/Golang/concurrency/go-sync-map/"/>
    <id>https://bishoptylaor.github.io/library/Golang/concurrency/go-sync-map/</id>
    <published>2024-05-21T09:02:27.000Z</published>
    <updated>2024-05-22T10:45:53.940Z</updated>
    
    
    
    
    <category term="知识库" scheme="https://bishoptylaor.github.io/categories/library/"/>
    
    <category term="Golang" scheme="https://bishoptylaor.github.io/categories/library/Golang/"/>
    
    <category term="并发" scheme="https://bishoptylaor.github.io/categories/library/Golang/concurrency/"/>
    
    
  </entry>
  
  <entry>
    <title>leet212</title>
    <link href="https://bishoptylaor.github.io/interview/juan/neet150/tries/leet212/"/>
    <id>https://bishoptylaor.github.io/interview/juan/neet150/tries/leet212/</id>
    <published>2024-05-20T15:25:12.000Z</published>
    <updated>2024-07-12T14:15:22.486Z</updated>
    
    
    
    
    <category term="面试" scheme="https://bishoptylaor.github.io/categories/interview/"/>
    
    <category term="刷题" scheme="https://bishoptylaor.github.io/categories/interview/juan/"/>
    
    <category term="NeetCode150" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/"/>
    
    <category term="Tries" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/tries/"/>
    
    
  </entry>
  
  <entry>
    <title>leet211</title>
    <link href="https://bishoptylaor.github.io/interview/juan/neet150/tries/leet211/"/>
    <id>https://bishoptylaor.github.io/interview/juan/neet150/tries/leet211/</id>
    <published>2024-05-20T15:25:10.000Z</published>
    <updated>2024-07-12T14:15:22.486Z</updated>
    
    
    
    
    <category term="面试" scheme="https://bishoptylaor.github.io/categories/interview/"/>
    
    <category term="刷题" scheme="https://bishoptylaor.github.io/categories/interview/juan/"/>
    
    <category term="NeetCode150" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/"/>
    
    <category term="Tries" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/tries/"/>
    
    
  </entry>
  
  <entry>
    <title>Leetcode.208 实现 Trie (前缀树)</title>
    <link href="https://bishoptylaor.github.io/interview/juan/neet150/tries/leet-208-implement-trie-prefix-tree/"/>
    <id>https://bishoptylaor.github.io/interview/juan/neet150/tries/leet-208-implement-trie-prefix-tree/</id>
    <published>2024-05-20T15:25:06.000Z</published>
    <updated>2024-07-12T14:15:22.486Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://leetcode.cn/problems/implement-trie-prefix-tree/&quot;&gt;208. 实现 Trie (前缀树)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;**&lt;a href=&quot;https://baike.baidu.com/item/%E5%AD%97%E5%85%B8%E6%A0%91/9825209?fr=aladdin&quot;&gt;Trie&lt;/a&gt;**（发音类似 “try”）或者说 &lt;strong&gt;前缀树&lt;/strong&gt; 是一种树形数据结构，用于高效地存储和检索字符串数据集中的键。这一数据结构有相当多的应用情景，例如自动补完和拼写检查。&lt;/p&gt;
&lt;p&gt;请你实现 Trie 类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Trie()&lt;/code&gt; 初始化前缀树对象。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;void insert(String word)&lt;/code&gt; 向前缀树中插入字符串 &lt;code&gt;word&lt;/code&gt; 。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boolean search(String word)&lt;/code&gt; 如果字符串 &lt;code&gt;word&lt;/code&gt; 在前缀树中，返回 &lt;code&gt;true&lt;/code&gt;（即，在检索之前已经插入）；否则，返回 &lt;code&gt;false&lt;/code&gt; 。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boolean startsWith(String prefix)&lt;/code&gt; 如果之前已经插入的字符串 &lt;code&gt;word&lt;/code&gt; 的前缀之一为 &lt;code&gt;prefix&lt;/code&gt; ，返回 &lt;code&gt;true&lt;/code&gt; ；否则，返回 &lt;code&gt;false&lt;/code&gt; 。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;示例：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入
[&amp;quot;Trie&amp;quot;, &amp;quot;insert&amp;quot;, &amp;quot;search&amp;quot;, &amp;quot;search&amp;quot;, &amp;quot;startsWith&amp;quot;, &amp;quot;insert&amp;quot;, &amp;quot;search&amp;quot;]
[[], [&amp;quot;apple&amp;quot;], [&amp;quot;apple&amp;quot;], [&amp;quot;app&amp;quot;], [&amp;quot;app&amp;quot;], [&amp;quot;app&amp;quot;], [&amp;quot;app&amp;quot;]]
输出
[null, null, true, false, true, null, true]

解释
Trie trie = new Trie();
trie.insert(&amp;quot;apple&amp;quot;);
trie.search(&amp;quot;apple&amp;quot;);   // 返回 True
trie.search(&amp;quot;app&amp;quot;);     // 返回 False
trie.startsWith(&amp;quot;app&amp;quot;); // 返回 True
trie.insert(&amp;quot;app&amp;quot;);
trie.search(&amp;quot;app&amp;quot;);     // 返回 True
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;提示：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= word.length, prefix.length &amp;lt;= 2000&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;word&lt;/code&gt; 和 &lt;code&gt;prefix&lt;/code&gt; 仅由小写英文字母组成&lt;/li&gt;
&lt;li&gt;&lt;code&gt;insert&lt;/code&gt;、&lt;code&gt;search&lt;/code&gt; 和 &lt;code&gt;startsWith&lt;/code&gt; 调用次数 &lt;strong&gt;总计&lt;/strong&gt; 不超过 &lt;code&gt;3 * 104&lt;/code&gt; 次&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; Trie &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	children []*Trie&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	isEnd &lt;span class=&quot;type&quot;&gt;bool&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Constructor&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; Trie &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; Trie&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(this *Trie)&lt;/span&gt;&lt;/span&gt; Insert(word &lt;span class=&quot;type&quot;&gt;string&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	node := this&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; _, ch := &lt;span class=&quot;keyword&quot;&gt;range&lt;/span&gt; word &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		ch -= &lt;span class=&quot;string&quot;&gt;&amp;#x27;a&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; node.children[ch] == &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			node.children[ch] = &amp;amp;Trie&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	node = node.children[ch]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	node.isEnd = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(this *Trie)&lt;/span&gt;&lt;/span&gt; SearchPrefix(prefix &lt;span class=&quot;type&quot;&gt;string&lt;/span&gt;) *Trie &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	node := this&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; _, ch := &lt;span class=&quot;keyword&quot;&gt;range&lt;/span&gt; prefix &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		ch -= &lt;span class=&quot;string&quot;&gt;&amp;#x27;a&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; node.children[ch] == &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		node = node.children[ch]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; node&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(this *Trie)&lt;/span&gt;&lt;/span&gt; Search(word &lt;span class=&quot;type&quot;&gt;string&lt;/span&gt;) &lt;span class=&quot;type&quot;&gt;bool&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	node := this.SearchPrefix(word)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; node != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;amp;&amp;amp; node.isEnd&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(this *Trie)&lt;/span&gt;&lt;/span&gt; StartsWith(prefix &lt;span class=&quot;type&quot;&gt;string&lt;/span&gt;) &lt;span class=&quot;type&quot;&gt;bool&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; this.SearchPrefix(prefix) != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;* Your Trie object will be instantiated and called as such:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;* obj := Constructor();&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;* obj.Insert(word);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;* param_2 := obj.Search(word);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;* param_3 := obj.StartsWith(prefix);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span</summary>
        
      
    
    
    
    <category term="面试" scheme="https://bishoptylaor.github.io/categories/interview/"/>
    
    <category term="刷题" scheme="https://bishoptylaor.github.io/categories/interview/juan/"/>
    
    <category term="NeetCode150" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/"/>
    
    <category term="Tries" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/tries/"/>
    
    
  </entry>
  
  <entry>
    <title>leet235</title>
    <link href="https://bishoptylaor.github.io/interview/juan/neet150/trees/leet235/"/>
    <id>https://bishoptylaor.github.io/interview/juan/neet150/trees/leet235/</id>
    <published>2024-05-20T15:25:02.000Z</published>
    <updated>2024-07-12T14:15:22.486Z</updated>
    
    
    
    
    <category term="面试" scheme="https://bishoptylaor.github.io/categories/interview/"/>
    
    <category term="刷题" scheme="https://bishoptylaor.github.io/categories/interview/juan/"/>
    
    <category term="NeetCode150" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/"/>
    
    <category term="Trees" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/trees/"/>
    
    
  </entry>
  
  <entry>
    <title>leet230</title>
    <link href="https://bishoptylaor.github.io/interview/juan/neet150/trees/leet230/"/>
    <id>https://bishoptylaor.github.io/interview/juan/neet150/trees/leet230/</id>
    <published>2024-05-20T15:24:34.000Z</published>
    <updated>2024-07-12T14:15:22.486Z</updated>
    
    
    
    
    <category term="面试" scheme="https://bishoptylaor.github.io/categories/interview/"/>
    
    <category term="刷题" scheme="https://bishoptylaor.github.io/categories/interview/juan/"/>
    
    <category term="NeetCode150" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/"/>
    
    <category term="Trees" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/trees/"/>
    
    
  </entry>
  
  <entry>
    <title>Leetcode.98 验证二叉搜索树</title>
    <link href="https://bishoptylaor.github.io/interview/juan/neet150/trees/leet-98-validate-binary-search-tree/"/>
    <id>https://bishoptylaor.github.io/interview/juan/neet150/trees/leet-98-validate-binary-search-tree/</id>
    <published>2024-05-20T15:24:28.000Z</published>
    <updated>2024-07-12T14:15:22.486Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://leetcode.cn/problems/validate-binary-search-tree/&quot;&gt;Leetcode.98 验证二叉搜索树&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;给你一个二叉树的根节点 &lt;code&gt;root&lt;/code&gt; ，判断其是否是一个有效的二叉搜索树。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;有效&lt;/strong&gt; 二叉搜索树定义如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;节点的左子树只包含 &lt;strong&gt;小于&lt;/strong&gt; 当前节点的数。&lt;/li&gt;
&lt;li&gt;节点的右子树只包含 &lt;strong&gt;大于&lt;/strong&gt; 当前节点的数。&lt;/li&gt;
&lt;li&gt;所有左子树和右子树自身必须也是二叉搜索树。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;示例 1：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://assets.leetcode.com/uploads/2020/12/01/tree1.jpg&quot;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：root = [2,1,3]
输出：true
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;示例 2：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://assets.leetcode.com/uploads/2020/12/01/tree2.jpg&quot;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：root = [5,1,4,null,null,3,6]
输出：false
解释：根节点的值是 5 ，但是右子节点的值是 4 。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;提示：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;树中节点数目范围在&lt;code&gt;[1, 104]&lt;/code&gt; 内&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-231 &amp;lt;= Node.val &amp;lt;= 231 - 1&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 中序遍历法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;isValidBST&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(root *TreeNode)&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;bool&lt;/span&gt; &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	stack := []*TreeNode&amp;#123;&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	inorder := math.MinInt64 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(stack) &amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; || root != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; root != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			stack = &lt;span class=&quot;built_in&quot;&gt;append&lt;/span&gt;(stack, root) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			root = root.Left &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		root = stack[&lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(stack)&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;] &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		stack = stack[:&lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(stack)&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;] &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; root.Val &amp;lt;= inorder &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		inorder = root.Val &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		root = root.Right &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;isValidBST2&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(root *TreeNode)&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;bool&lt;/span&gt; &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; helper(root, math.MinInt64, math.MaxInt64) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;helper&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(root *TreeNode, lower, upper &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;bool&lt;/span&gt; &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; root == &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; root.Val &amp;lt;= lower || root.Val &amp;gt;= upper &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; helper(root.Left, lower, root.Val) &amp;amp;&amp;amp; helper(root.Right, root.Val, upper) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;</summary>
        
      
    
    
    
    <category term="面试" scheme="https://bishoptylaor.github.io/categories/interview/"/>
    
    <category term="刷题" scheme="https://bishoptylaor.github.io/categories/interview/juan/"/>
    
    <category term="NeetCode150" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/"/>
    
    <category term="Trees" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/trees/"/>
    
    
  </entry>
  
  <entry>
    <title>Leetcode.105 从前序与中序遍历序列构造二叉树</title>
    <link href="https://bishoptylaor.github.io/interview/juan/neet150/trees/leet-105-construct-binary-tree-from-preorder-and-inorder-traversal/"/>
    <id>https://bishoptylaor.github.io/interview/juan/neet150/trees/leet-105-construct-binary-tree-from-preorder-and-inorder-traversal/</id>
    <published>2024-05-20T15:24:24.000Z</published>
    <updated>2024-07-12T14:15:22.485Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://leetcode.cn/problems/construct-binary-tree-from-preorder-and-inorder-traversal/&quot;&gt;105. 从前序与中序遍历序列构造二叉树&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;给定两个整数数组 &lt;code&gt;preorder&lt;/code&gt; 和 &lt;code&gt;inorder&lt;/code&gt; ，其中 &lt;code&gt;preorder&lt;/code&gt; 是二叉树的&lt;strong&gt;先序遍历&lt;/strong&gt;， &lt;code&gt;inorder&lt;/code&gt; 是同一棵树的&lt;strong&gt;中序遍历&lt;/strong&gt;，请构造二叉树并返回其根节点。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例 1:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://assets.leetcode.com/uploads/2021/02/19/tree.jpg&quot;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入: preorder = [3,9,20,15,7], inorder = [9,3,15,20,7]
输出: [3,9,20,null,null,15,7]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;示例 2:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入: preorder = [-1], inorder = [-1]
输出: [-1]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;提示:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= preorder.length &amp;lt;= 3000&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;inorder.length == preorder.length&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-3000 &amp;lt;= preorder[i], inorder[i] &amp;lt;= 3000&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;preorder&lt;/code&gt; 和 &lt;code&gt;inorder&lt;/code&gt; 均 &lt;strong&gt;无重复&lt;/strong&gt; 元素&lt;/li&gt;
&lt;li&gt;&lt;code&gt;inorder&lt;/code&gt; 均出现在 &lt;code&gt;preorder&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;preorder&lt;/code&gt; &lt;strong&gt;保证&lt;/strong&gt; 为二叉树的前序遍历序列&lt;/li&gt;
&lt;li&gt;&lt;code&gt;inorder&lt;/code&gt; &lt;strong&gt;保证&lt;/strong&gt; 为二叉树的中序遍历序列&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;* Definition for a binary tree node.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;* type TreeNode struct &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;* Val int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;* Left *TreeNode&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;* Right *TreeNode&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;* &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;buildTree&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(preorder []&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;, inorder []&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; *TreeNode &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(preorder) == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	root := &amp;amp;TreeNode&amp;#123;preorder[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;], &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	i := &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; ;i&amp;lt;&lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(inorder); i++ &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; inorder[i] == preorder[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;] &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	root.Left = buildTree(preorder[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;:&lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(inorder[:i])+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;], inorder[:i])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	root.Right = buildTree(preorder[&lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(inorder[:i])+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;:], inorder[i+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;:])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; root&lt;/span&gt;&lt;br&gt;&lt;span</summary>
        
      
    
    
    
    <category term="面试" scheme="https://bishoptylaor.github.io/categories/interview/"/>
    
    <category term="刷题" scheme="https://bishoptylaor.github.io/categories/interview/juan/"/>
    
    <category term="NeetCode150" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/"/>
    
    <category term="Trees" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/trees/"/>
    
    
  </entry>
  
  <entry>
    <title>Leetcode.297 二叉树的序列化与反序列化</title>
    <link href="https://bishoptylaor.github.io/interview/juan/neet150/trees/leet-297-serialize-and-deserialize-binary-tree/"/>
    <id>https://bishoptylaor.github.io/interview/juan/neet150/trees/leet-297-serialize-and-deserialize-binary-tree/</id>
    <published>2024-05-20T15:24:15.000Z</published>
    <updated>2024-07-12T14:15:22.486Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://leetcode.cn/problems/serialize-and-deserialize-binary-tree/&quot;&gt;297. 二叉树的序列化与反序列化&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;序列化是将一个数据结构或者对象转换为连续的比特位的操作，进而可以将转换后的数据存储在一个文件或者内存中，同时也可以通过网络传输到另一个计算机环境，采取相反方式重构得到原数据。&lt;/p&gt;
&lt;p&gt;请设计一个算法来实现二叉树的序列化与反序列化。这里不限定你的序列 &amp;#x2F; 反序列化算法执行逻辑，你只需要保证一个二叉树可以被序列化为一个字符串并且将这个字符串反序列化为原始的树结构。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;提示:&lt;/strong&gt; 输入输出格式与 LeetCode 目前使用的方式一致，详情请参阅 &lt;a href=&quot;https://support.leetcode.cn/hc/kb/article/1567641/&quot;&gt;LeetCode 序列化二叉树的格式&lt;/a&gt;。你并非必须采取这种方式，你也可以采用其他的方法解决这个问题。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例 1：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://assets.leetcode.com/uploads/2020/09/15/serdeser.jpg&quot;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：root = [1,2,3,null,null,4,5]
输出：[1,2,3,null,null,4,5]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;示例 2：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：root = []
输出：[]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;示例 3：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：root = [1]
输出：[1]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;示例 4：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：root = [1,2]
输出：[1,2]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;提示：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;树中结点数在范围 &lt;code&gt;[0, 104]&lt;/code&gt; 内&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-1000 &amp;lt;= Node.val &amp;lt;= 1000&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; Codec &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt;&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Constructor&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; (_ Codec) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(Codec)&lt;/span&gt;&lt;/span&gt; serialize(root *TreeNode) &lt;span class=&quot;type&quot;&gt;string&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    sb := &amp;amp;strings.Builder&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; dfs &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(*TreeNode)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    dfs = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(node *TreeNode)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; node == &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            sb.WriteString(&lt;span class=&quot;string&quot;&gt;&amp;quot;null,&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        sb.WriteString(strconv.Itoa(node.Val))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        sb.WriteByte(&lt;span class=&quot;string&quot;&gt;&amp;#x27;,&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        dfs(node.Left)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        dfs(node.Right)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    dfs(root)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; sb.String()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(Codec)&lt;/span&gt;&lt;/span&gt; deserialize(data &lt;span class=&quot;type&quot;&gt;string&lt;/span&gt;) *TreeNode &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    sp := strings.Split(data, &lt;span class=&quot;string&quot;&gt;&amp;quot;,&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; build &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; *TreeNode&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    build = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; *TreeNode &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; sp[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;] == &lt;span class=&quot;string&quot;&gt;&amp;quot;null&amp;quot;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            sp = sp[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;:]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        val, _ := strconv.Atoi(sp[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        sp = sp[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;:]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;amp;TreeNode&amp;#123;val, build(), build()&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; build()&lt;/span&gt;&lt;br&gt;&lt;span</summary>
        
      
    
    
    
    <category term="面试" scheme="https://bishoptylaor.github.io/categories/interview/"/>
    
    <category term="刷题" scheme="https://bishoptylaor.github.io/categories/interview/juan/"/>
    
    <category term="NeetCode150" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/"/>
    
    <category term="Trees" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/trees/"/>
    
    
  </entry>
  
  <entry>
    <title>Leetcode.102 二叉树的层序遍历</title>
    <link href="https://bishoptylaor.github.io/interview/juan/neet150/trees/leet-102-binary-tree-level-order-traversal/"/>
    <id>https://bishoptylaor.github.io/interview/juan/neet150/trees/leet-102-binary-tree-level-order-traversal/</id>
    <published>2024-05-20T15:24:10.000Z</published>
    <updated>2024-07-12T14:15:22.485Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://leetcode.cn/problems/binary-tree-level-order-traversal/&quot;&gt;102. 二叉树的层序遍历&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;给你二叉树的根节点 &lt;code&gt;root&lt;/code&gt; ，返回其节点值的 &lt;strong&gt;层序遍历&lt;/strong&gt; 。 （即逐层地，从左到右访问所有节点）。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例 1：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://assets.leetcode.com/uploads/2021/02/19/tree1.jpg&quot;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：root = [3,9,20,null,null,15,7]
输出：[[3],[9,20],[15,7]]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;示例 2：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：root = [1]
输出：[[1]]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;示例 3：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：root = []
输出：[]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;提示：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;树中节点数目在范围 &lt;code&gt;[0, 2000]&lt;/code&gt; 内&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-1000 &amp;lt;= Node.val &amp;lt;= 1000&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一定记得函数要先判断节点是否为 nil&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;* Definition for a binary tree node.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;* type TreeNode struct &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;* Val int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;* Left *TreeNode&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;* Right *TreeNode&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;* &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;levelOrder&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(root *TreeNode)&lt;/span&gt;&lt;/span&gt; [][]&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; root == &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; [][]&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; stack []*TreeNode&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	stack = &lt;span class=&quot;built_in&quot;&gt;append&lt;/span&gt;(stack, root)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	ans := [][]&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i:=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(stack)&amp;gt;&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i++ &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		ans = &lt;span class=&quot;built_in&quot;&gt;append&lt;/span&gt;(ans, []&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;&amp;#123;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		nextstack := []*TreeNode&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; j:=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; j&amp;lt;&lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(stack); j++ &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			nod := stack[j]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			ans[i] = &lt;span class=&quot;built_in&quot;&gt;append&lt;/span&gt;(ans[i], nod.Val)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; nod.Left != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				nextstack = &lt;span class=&quot;built_in&quot;&gt;append&lt;/span&gt;(nextstack, nod.Left)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; nod.Right != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				nextstack = &lt;span class=&quot;built_in&quot;&gt;append&lt;/span&gt;(nextstack, nod.Right)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		stack = nextstack&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; ans&lt;/span&gt;&lt;br&gt;&lt;span</summary>
        
      
    
    
    
    <category term="面试" scheme="https://bishoptylaor.github.io/categories/interview/"/>
    
    <category term="刷题" scheme="https://bishoptylaor.github.io/categories/interview/juan/"/>
    
    <category term="NeetCode150" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/"/>
    
    <category term="Trees" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/trees/"/>
    
    
  </entry>
  
  <entry>
    <title>Leetcode.124 二叉树中的最大路径和</title>
    <link href="https://bishoptylaor.github.io/interview/juan/neet150/trees/leet-124-binary-tree-maximum-path-sum/"/>
    <id>https://bishoptylaor.github.io/interview/juan/neet150/trees/leet-124-binary-tree-maximum-path-sum/</id>
    <published>2024-05-20T15:24:05.000Z</published>
    <updated>2024-07-12T14:15:22.486Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://leetcode.cn/problems/binary-tree-maximum-path-sum/&quot;&gt;124. 二叉树中的最大路径和&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;二叉树中的 &lt;strong&gt;路径&lt;/strong&gt; 被定义为一条节点序列，序列中每对相邻节点之间都存在一条边。同一个节点在一条路径序列中 &lt;strong&gt;至多出现一次&lt;/strong&gt; 。该路径 &lt;strong&gt;至少包含一个&lt;/strong&gt; 节点，且不一定经过根节点。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;路径和&lt;/strong&gt; 是路径中各节点值的总和。&lt;/p&gt;
&lt;p&gt;给你一个二叉树的根节点 &lt;code&gt;root&lt;/code&gt; ，返回其 &lt;strong&gt;最大路径和&lt;/strong&gt; 。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例 1：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://assets.leetcode.com/uploads/2020/10/13/exx1.jpg&quot;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：root = [1,2,3]
输出：6
解释：最优路径是 2 -&amp;gt; 1 -&amp;gt; 3 ，路径和为 2 + 1 + 3 = 6
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;示例 2：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://assets.leetcode.com/uploads/2020/10/13/exx2.jpg&quot;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：root = [-10,9,20,null,null,15,7]
输出：42
解释：最优路径是 15 -&amp;gt; 20 -&amp;gt; 7 ，路径和为 15 + 20 + 7 = 42
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;提示：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;树中节点数目范围是 &lt;code&gt;[1, 3 * 104]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-1000 &amp;lt;= Node.val &amp;lt;= 1000&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;* Definition for a binary tree node.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;* type TreeNode struct &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;* Val int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;* Left *TreeNode&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;* Right *TreeNode&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;* &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;maxPathSum&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(root *TreeNode)&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	maxSum := math.MinInt32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; gain &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(*TreeNode)&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	gain = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(node *TreeNode)&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; node == &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		leftGain := max(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, gain(node.Left))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		rightGain := max(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, gain(node.Right))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		pathMax := node.Val + leftGain + rightGain&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		maxSum = max(maxSum, pathMax)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// 节点贡献值需要只取一边&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; node.Val + max(leftGain, rightGain)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	gain(root)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; maxSum&lt;/span&gt;&lt;br&gt;&lt;span</summary>
        
      
    
    
    
    <category term="面试" scheme="https://bishoptylaor.github.io/categories/interview/"/>
    
    <category term="刷题" scheme="https://bishoptylaor.github.io/categories/interview/juan/"/>
    
    <category term="NeetCode150" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/"/>
    
    <category term="Trees" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/trees/"/>
    
    
  </entry>
  
  <entry>
    <title>leet226</title>
    <link href="https://bishoptylaor.github.io/interview/juan/neet150/trees/leet226/"/>
    <id>https://bishoptylaor.github.io/interview/juan/neet150/trees/leet226/</id>
    <published>2024-05-20T15:24:01.000Z</published>
    <updated>2024-07-12T14:15:22.486Z</updated>
    
    
    
    
    <category term="面试" scheme="https://bishoptylaor.github.io/categories/interview/"/>
    
    <category term="刷题" scheme="https://bishoptylaor.github.io/categories/interview/juan/"/>
    
    <category term="NeetCode150" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/"/>
    
    <category term="Trees" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/trees/"/>
    
    
  </entry>
  
  <entry>
    <title>leet226</title>
    <link href="https://bishoptylaor.github.io/interview/juan/neet150/trees/leet110/"/>
    <id>https://bishoptylaor.github.io/interview/juan/neet150/trees/leet110/</id>
    <published>2024-05-20T15:24:01.000Z</published>
    <updated>2024-07-12T14:15:22.486Z</updated>
    
    
    
    
    <category term="面试" scheme="https://bishoptylaor.github.io/categories/interview/"/>
    
    <category term="刷题" scheme="https://bishoptylaor.github.io/categories/interview/juan/"/>
    
    <category term="NeetCode150" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/"/>
    
    <category term="Trees" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/trees/"/>
    
    
  </entry>
  
  <entry>
    <title>leet226</title>
    <link href="https://bishoptylaor.github.io/interview/juan/neet150/trees/leet1448/"/>
    <id>https://bishoptylaor.github.io/interview/juan/neet150/trees/leet1448/</id>
    <published>2024-05-20T15:24:01.000Z</published>
    <updated>2024-07-12T14:15:22.486Z</updated>
    
    
    
    
    <category term="面试" scheme="https://bishoptylaor.github.io/categories/interview/"/>
    
    <category term="刷题" scheme="https://bishoptylaor.github.io/categories/interview/juan/"/>
    
    <category term="NeetCode150" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/"/>
    
    <category term="Trees" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/trees/"/>
    
    
  </entry>
  
  <entry>
    <title>leet226</title>
    <link href="https://bishoptylaor.github.io/interview/juan/neet150/trees/leet543/"/>
    <id>https://bishoptylaor.github.io/interview/juan/neet150/trees/leet543/</id>
    <published>2024-05-20T15:24:01.000Z</published>
    <updated>2024-07-12T14:15:22.486Z</updated>
    
    
    
    
    <category term="面试" scheme="https://bishoptylaor.github.io/categories/interview/"/>
    
    <category term="刷题" scheme="https://bishoptylaor.github.io/categories/interview/juan/"/>
    
    <category term="NeetCode150" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/"/>
    
    <category term="Trees" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/trees/"/>
    
    
  </entry>
  
  <entry>
    <title>Leetcode.100 相同的树</title>
    <link href="https://bishoptylaor.github.io/interview/juan/neet150/trees/leet-100-same-tree/"/>
    <id>https://bishoptylaor.github.io/interview/juan/neet150/trees/leet-100-same-tree/</id>
    <published>2024-05-20T15:23:56.000Z</published>
    <updated>2024-07-12T14:15:22.485Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://leetcode.cn/problems/same-tree/&quot;&gt;100. 相同的树&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;给你两棵二叉树的根节点 &lt;code&gt;p&lt;/code&gt; 和 &lt;code&gt;q&lt;/code&gt; ，编写一个函数来检验这两棵树是否相同。&lt;/p&gt;
&lt;p&gt;如果两个树在结构上相同，并且节点具有相同的值，则认为它们是相同的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例 1：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://assets.leetcode.com/uploads/2020/12/20/ex1.jpg&quot;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：p = [1,2,3], q = [1,2,3]
输出：true
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;示例 2：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://assets.leetcode.com/uploads/2020/12/20/ex2.jpg&quot;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：p = [1,2], q = [1,null,2]
输出：false
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;示例 3：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://assets.leetcode.com/uploads/2020/12/20/ex3.jpg&quot;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：p = [1,2,1], q = [1,1,2]
输出：false
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;提示：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;两棵树上的节点数目都在范围 &lt;code&gt;[0, 100]&lt;/code&gt; 内&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-104 &amp;lt;= Node.val &amp;lt;= 104&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;* Definition for a binary tree node.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;* type TreeNode struct &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;* Val int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;* Left *TreeNode&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;* Right *TreeNode&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;* &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;isSameTree&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(p *TreeNode, q *TreeNode)&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;bool&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; p == &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;amp;&amp;amp; q == &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; p == &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; || q == &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; p.Val != q.Val &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; p.Val == q.Val &amp;amp;&amp;amp; isSameTree(p.Left, q.Left) &amp;amp;&amp;amp; isSameTree(p.Right, q.Right)&lt;/span&gt;&lt;br&gt;&lt;span</summary>
        
      
    
    
    
    <category term="面试" scheme="https://bishoptylaor.github.io/categories/interview/"/>
    
    <category term="刷题" scheme="https://bishoptylaor.github.io/categories/interview/juan/"/>
    
    <category term="NeetCode150" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/"/>
    
    <category term="Trees" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/trees/"/>
    
    
  </entry>
  
  <entry>
    <title>Leetcode.104 二叉树的最大深度</title>
    <link href="https://bishoptylaor.github.io/interview/juan/neet150/trees/leet-104-maximum-depth-of-binary-tree/"/>
    <id>https://bishoptylaor.github.io/interview/juan/neet150/trees/leet-104-maximum-depth-of-binary-tree/</id>
    <published>2024-05-20T15:23:52.000Z</published>
    <updated>2024-07-12T14:15:22.485Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://leetcode.cn/problems/maximum-depth-of-binary-tree/&quot;&gt;104. 二叉树的最大深度&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;给定一个二叉树 &lt;code&gt;root&lt;/code&gt; ，返回其最大深度。&lt;/p&gt;
&lt;p&gt;二叉树的 &lt;strong&gt;最大深度&lt;/strong&gt; 是指从根节点到最远叶子节点的最长路径上的节点数。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例 1：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://assets.leetcode.com/uploads/2020/11/26/tmp-tree.jpg&quot;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：root = [3,9,20,null,null,15,7]
输出：3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;示例 2：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：root = [1,null,2]
输出：2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;提示：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;树中节点的数量在 &lt;code&gt;[0, 104]&lt;/code&gt; 区间内。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-100 &amp;lt;= Node.val &amp;lt;= 100&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;* Definition for a binary tree node.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;* type TreeNode struct &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;* Val int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;* Left *TreeNode&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;* Right *TreeNode&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;* &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;maxDepth&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(root *TreeNode)&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; root == &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; max(maxDepth(root.Left), maxDepth(root.Right)) + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span</summary>
        
      
    
    
    
    <category term="面试" scheme="https://bishoptylaor.github.io/categories/interview/"/>
    
    <category term="刷题" scheme="https://bishoptylaor.github.io/categories/interview/juan/"/>
    
    <category term="NeetCode150" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/"/>
    
    <category term="Trees" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/trees/"/>
    
    
  </entry>
  
  <entry>
    <title>leet295</title>
    <link href="https://bishoptylaor.github.io/interview/juan/neet150/heap-queue/leet295/"/>
    <id>https://bishoptylaor.github.io/interview/juan/neet150/heap-queue/leet295/</id>
    <published>2024-05-20T15:21:54.000Z</published>
    <updated>2024-07-12T14:15:22.485Z</updated>
    
    
    
    
    <category term="面试" scheme="https://bishoptylaor.github.io/categories/interview/"/>
    
    <category term="刷题" scheme="https://bishoptylaor.github.io/categories/interview/juan/"/>
    
    <category term="NeetCode150" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/"/>
    
    <category term="Heap &amp; Priority Queue" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/heap-queue/"/>
    
    
  </entry>
  
  <entry>
    <title>leet347</title>
    <link href="https://bishoptylaor.github.io/uncategorized/leet347/"/>
    <id>https://bishoptylaor.github.io/uncategorized/leet347/</id>
    <published>2024-05-20T15:21:49.000Z</published>
    <updated>2024-06-22T10:03:44.278Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>Leetcode.23 合并K个升序链表</title>
    <link href="https://bishoptylaor.github.io/interview/juan/neet150/heap-queue/leet-23-merge-k-sorted-lists/"/>
    <id>https://bishoptylaor.github.io/interview/juan/neet150/heap-queue/leet-23-merge-k-sorted-lists/</id>
    <published>2024-05-20T15:21:45.000Z</published>
    <updated>2024-07-12T14:15:22.486Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://leetcode.cn/problems/merge-k-sorted-lists/&quot;&gt;Leetcode.23 合并K个升序链表&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;给你一个链表数组，每个链表都已经按升序排列。&lt;/p&gt;
&lt;p&gt;请你将所有链表合并到一个升序链表中，返回合并后的链表。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例 1：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：lists = [[1,4,5],[1,3,4],[2,6]]
输出：[1,1,2,3,4,4,5,6]
解释：链表数组如下：
[
  1-&amp;gt;4-&amp;gt;5,
  1-&amp;gt;3-&amp;gt;4,
  2-&amp;gt;6
]
将它们合并到一个有序链表中得到。
1-&amp;gt;1-&amp;gt;2-&amp;gt;3-&amp;gt;4-&amp;gt;4-&amp;gt;5-&amp;gt;6
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;示例 2：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：lists = []
输出：[]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;示例 3：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：lists = [[]]
输出：[]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;提示：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;k == lists.length&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;0 &amp;lt;= k &amp;lt;= 10^4&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;0 &amp;lt;= lists[i].length &amp;lt;= 500&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-10^4 &amp;lt;= lists[i][j] &amp;lt;= 10^4&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;lists[i]&lt;/code&gt; 按 &lt;strong&gt;升序&lt;/strong&gt; 排列&lt;/li&gt;
&lt;li&gt;&lt;code&gt;lists[i].length&lt;/code&gt; 的总和不超过 &lt;code&gt;10^4&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;解法：&lt;/strong&gt;&lt;br&gt;利用小根堆思路，把每个链表的头结点按照小根堆排列，pop 出来的节点取下来放到结果链表上，然后再将新的头结点 push 进去，重复此过程即可得到所求&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;impost (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;string&quot;&gt;&amp;quot;container/heap&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/** * Definition for singly-linked list. * &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;type ListNode struct &amp;#123; &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;	* Val int &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;	* Next *ListNode &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;#125; */&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;mergeKLists&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(lists []*ListNode)&lt;/span&gt;&lt;/span&gt; *ListNode &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	pq := hp&amp;#123;&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; _, head := &lt;span class=&quot;keyword&quot;&gt;range&lt;/span&gt; lists &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; head != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			pq = &lt;span class=&quot;built_in&quot;&gt;append&lt;/span&gt;(pq, head) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	heap.Init(&amp;amp;pq) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	dummy := &amp;amp;ListNode&amp;#123;&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	cur := dummy &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(pq) &amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		cur.Next = heap.Pop(&amp;amp;pq).(*ListNode) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		cur = cur.Next &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; cur.Next != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			heap.Push(&amp;amp;pq, cur.Next) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; dummy.Next &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; hp []*ListNode &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(h hp)&lt;/span&gt;&lt;/span&gt; Len() &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &amp;#123; &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(h) &amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(h hp)&lt;/span&gt;&lt;/span&gt; Less(i, j &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;) &lt;span class=&quot;type&quot;&gt;bool&lt;/span&gt; &amp;#123; &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; h[i].Val &amp;lt; h[j].Val &amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(h hp)&lt;/span&gt;&lt;/span&gt; Swap(i, j &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;) &amp;#123; h[i], h[j] = h[j], h[i] &amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(h *hp)&lt;/span&gt;&lt;/span&gt; Push(v any) &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	*h = &lt;span class=&quot;built_in&quot;&gt;append&lt;/span&gt;(*h, v.(*ListNode)) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(h *hp)&lt;/span&gt;&lt;/span&gt; Pop() any &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	a := *h&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	v := a[&lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(a)&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	*h = a[:&lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(a)&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; v &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;


&lt;p&gt;左右分治 + 合并两个有序链表&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;* Definition for singly-linked list.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;* type ListNode struct &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;* Val int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;* Next *ListNode&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;* &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;mergeKLists&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(lists []*ListNode)&lt;/span&gt;&lt;/span&gt; *ListNode &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(lists) == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(lists) == &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; lists[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	n := &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(lists)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	left := mergeKLists(lists[:n/&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	right := mergeKLists(lists[n/&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;:])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; merge2Lists(left, right)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;merge2Lists&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(h1, h2 *ListNode)&lt;/span&gt;&lt;/span&gt; *ListNode &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	dummy := &amp;amp;ListNode&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	t, t1, t2 := dummy, h1, h2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; t1 != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;amp;&amp;amp; t2 != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; t1.Val &amp;lt;= t2.Val &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			t.Next = t1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			t1 = t1.Next&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			t.Next = t2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			t2 = t2.Next&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		t = t.Next&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; t1 != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		t.Next = t1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; t2 != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		t.Next = t2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; dummy.Next&lt;/span&gt;&lt;br&gt;&lt;span</summary>
        
      
    
    
    
    <category term="面试" scheme="https://bishoptylaor.github.io/categories/interview/"/>
    
    <category term="刷题" scheme="https://bishoptylaor.github.io/categories/interview/juan/"/>
    
    <category term="NeetCode150" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/"/>
    
    <category term="Heap &amp; Priority Queue" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/heap-queue/"/>
    
    
  </entry>
  
  <entry>
    <title>Leetcode.647 回文子串</title>
    <link href="https://bishoptylaor.github.io/interview/juan/neet150/1-d-dp/leet-647-palindromic-substrings/"/>
    <id>https://bishoptylaor.github.io/interview/juan/neet150/1-d-dp/leet-647-palindromic-substrings/</id>
    <published>2024-05-20T15:20:40.000Z</published>
    <updated>2024-07-12T14:15:22.484Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://leetcode.cn/problems/palindromic-substrings/&quot;&gt;647. 回文子串&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;给你一个字符串 &lt;code&gt;s&lt;/code&gt; ，请你统计并返回这个字符串中 &lt;strong&gt;回文子串&lt;/strong&gt; 的数目。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;回文字符串&lt;/strong&gt; 是正着读和倒过来读一样的字符串。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;子字符串&lt;/strong&gt; 是字符串中的由连续字符组成的一个序列。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例 1：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：s = &amp;quot;abc&amp;quot;
输出：3
解释：三个回文子串: &amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;, &amp;quot;c&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;示例 2：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：s = &amp;quot;aaa&amp;quot;
输出：6
解释：6个回文子串: &amp;quot;a&amp;quot;, &amp;quot;a&amp;quot;, &amp;quot;a&amp;quot;, &amp;quot;aa&amp;quot;, &amp;quot;aa&amp;quot;, &amp;quot;aaa&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;提示：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= s.length &amp;lt;= 1000&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;s&lt;/code&gt; 由小写英文字母组成&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;学习中心扩散法的 dp&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;countSubstrings&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(s &lt;span class=&quot;type&quot;&gt;string&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	n := &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(s)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; n&amp;lt;&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; n&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	ans := &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	dp := &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;([][]&lt;span class=&quot;type&quot;&gt;bool&lt;/span&gt;, n)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i := &lt;span class=&quot;keyword&quot;&gt;range&lt;/span&gt; dp &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		dp[i] = &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;([]&lt;span class=&quot;type&quot;&gt;bool&lt;/span&gt;, n)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		dp[i][i] = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		ans += &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; L:=&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;; L&amp;lt;=n; L++ &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i:=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i&amp;lt;n-L+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; i++ &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			j := i+L&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; s[i] != s[j] &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				dp[i][j] = &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; j-i&amp;lt;&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				dp[i][j] = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				dp[i][j] = dp[i+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;][j&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; dp[i][j] &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				ans += &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; ans&lt;/span&gt;&lt;br&gt;&lt;span</summary>
        
      
    
    
    
    <category term="面试" scheme="https://bishoptylaor.github.io/categories/interview/"/>
    
    <category term="刷题" scheme="https://bishoptylaor.github.io/categories/interview/juan/"/>
    
    <category term="NeetCode150" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/"/>
    
    <category term="1-D DP" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/1-d-dp/"/>
    
    
  </entry>
  
  <entry>
    <title>Leetcode.5 最长回文子串</title>
    <link href="https://bishoptylaor.github.io/interview/juan/neet150/1-d-dp/leet-5-longest-palindromic-substring/"/>
    <id>https://bishoptylaor.github.io/interview/juan/neet150/1-d-dp/leet-5-longest-palindromic-substring/</id>
    <published>2024-05-20T15:20:35.000Z</published>
    <updated>2024-07-12T14:15:22.484Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://leetcode.cn/problems/longest-palindromic-substring/&quot;&gt;5. 最长回文子串&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;给你一个字符串 &lt;code&gt;s&lt;/code&gt;，找到 &lt;code&gt;s&lt;/code&gt; 中最长的 回文子串。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例 1：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：s = &amp;quot;babad&amp;quot;
输出：&amp;quot;bab&amp;quot;
解释：&amp;quot;aba&amp;quot; 同样是符合题意的答案。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;示例 2：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：s = &amp;quot;cbbd&amp;quot;
输出：&amp;quot;bb&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;提示：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= s.length &amp;lt;= 1000&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;s&lt;/code&gt; 仅由数字和英文字母组成&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;解答：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;动规&lt;br&gt;首先确定几个规则：单个字符本身符合回文结构；连续两个字符如果相同，他们也符合回文结构；假设子串起止索引为 i，j 且 s[i] &amp;#x3D;&amp;#x3D; s[j]，那么他们的回文结构状态应该与 i+1，j-1 的子串相同。&lt;br&gt;因此可以得到状态转移方程，我们可以从子串长度为 2 开始求解，向外层拓展。&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;longestPalindrome&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(s &lt;span class=&quot;type&quot;&gt;string&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;string&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	n := &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(s)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; n&amp;lt;&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; s&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// 注意结果的初值，第一个字符本身就是回文，可以放到结果中记录&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	res := &lt;span class=&quot;type&quot;&gt;string&lt;/span&gt;(s[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	dp := &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;([][]&lt;span class=&quot;type&quot;&gt;bool&lt;/span&gt;, n)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i := &lt;span class=&quot;keyword&quot;&gt;range&lt;/span&gt; dp &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		dp[i] = &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;([]&lt;span class=&quot;type&quot;&gt;bool&lt;/span&gt;, n)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// 每个单独的 ch 都是回文结构&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		dp[i][i] = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// L 为枚举的子串长度&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; L:=&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;; L&amp;lt;=n; L++ &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i:=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i&amp;lt;n-L+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; i++ &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			j := i+L&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; s[i] != s[j] &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				dp[i][j] = &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; j-i&amp;lt;&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; &amp;#123; &lt;span class=&quot;comment&quot;&gt;// s[i] == s[j] &amp;amp;&amp;amp; L&amp;lt;3 // 两个连续相同的 ch 符合回文结构&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				dp[i][j] = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				dp[i][j] = dp[i+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;][j&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;] &lt;span class=&quot;comment&quot;&gt;// 由内向外扩散&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;comment&quot;&gt;// 是回文，且比以前记录的长，更新&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; dp[i][j] &amp;amp;&amp;amp; j-i+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &amp;gt; &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(res) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				res = s[i:j+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; res&lt;/span&gt;&lt;br&gt;&lt;span</summary>
        
      
    
    
    
    <category term="面试" scheme="https://bishoptylaor.github.io/categories/interview/"/>
    
    <category term="刷题" scheme="https://bishoptylaor.github.io/categories/interview/juan/"/>
    
    <category term="NeetCode150" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/"/>
    
    <category term="1-D DP" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/1-d-dp/"/>
    
    
  </entry>
  
  <entry>
    <title>Leetcode.125 验证回文串</title>
    <link href="https://bishoptylaor.github.io/interview/juan/neet150/two-ptr/leet-125-valid-palindrome/"/>
    <id>https://bishoptylaor.github.io/interview/juan/neet150/two-ptr/leet-125-valid-palindrome/</id>
    <published>2024-05-20T15:20:30.000Z</published>
    <updated>2024-07-12T14:15:22.486Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://leetcode.cn/problems/valid-palindrome/&quot;&gt;125. 验证回文串&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;如果在将所有大写字符转换为小写字符、并移除所有非字母数字字符之后，短语正着读和反着读都一样。则可以认为该短语是一个 &lt;strong&gt;回文串&lt;/strong&gt; 。&lt;/p&gt;
&lt;p&gt;字母和数字都属于字母数字字符。&lt;/p&gt;
&lt;p&gt;给你一个字符串 &lt;code&gt;s&lt;/code&gt;，如果它是 &lt;strong&gt;回文串&lt;/strong&gt; ，返回 &lt;code&gt;true&lt;/code&gt; ；否则，返回 &lt;code&gt;false&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例 1：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入: s = &amp;quot;A man, a plan, a canal: Panama&amp;quot;
输出：true
解释：&amp;quot;amanaplanacanalpanama&amp;quot; 是回文串。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;示例 2：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：s = &amp;quot;race a car&amp;quot;
输出：false
解释：&amp;quot;raceacar&amp;quot; 不是回文串。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;示例 3：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：s = &amp;quot; &amp;quot;
输出：true
解释：在移除非字母数字字符之后，s 是一个空字符串 &amp;quot;&amp;quot; 。
由于空字符串正着反着读都一样，所以是回文串。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;提示：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= s.length &amp;lt;= 2 * 105&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;s&lt;/code&gt; 仅由可打印的 ASCII 字符组成&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;isPalindrome&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(s &lt;span class=&quot;type&quot;&gt;string&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;bool&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; pures &lt;span class=&quot;type&quot;&gt;string&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i:=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i&amp;lt;&lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(s); i++ &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; isGoodCh(s[i]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			pures += &lt;span class=&quot;type&quot;&gt;string&lt;/span&gt;(s[i])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	pures = strings.ToLower(pures)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i:=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i&amp;lt;&lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(pures)/&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;; i++ &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; pures[i] != pures[&lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(pures)&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;-i] &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;isGoodCh&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(ch &lt;span class=&quot;type&quot;&gt;byte&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;bool&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (ch &amp;gt;=&lt;span class=&quot;string&quot;&gt;&amp;#x27;A&amp;#x27;&lt;/span&gt; &amp;amp;&amp;amp; ch &amp;lt;=&lt;span class=&quot;string&quot;&gt;&amp;#x27;Z&amp;#x27;&lt;/span&gt;) || (ch &amp;gt;=&lt;span class=&quot;string&quot;&gt;&amp;#x27;a&amp;#x27;&lt;/span&gt; &amp;amp;&amp;amp; ch &amp;lt;=&lt;span class=&quot;string&quot;&gt;&amp;#x27;z&amp;#x27;&lt;/span&gt;) || (ch &amp;gt;=&lt;span class=&quot;string&quot;&gt;&amp;#x27;0&amp;#x27;&lt;/span&gt; &amp;amp;&amp;amp; ch &amp;lt;=&lt;span class=&quot;string&quot;&gt;&amp;#x27;9&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span</summary>
        
      
    
    
    
    <category term="面试" scheme="https://bishoptylaor.github.io/categories/interview/"/>
    
    <category term="刷题" scheme="https://bishoptylaor.github.io/categories/interview/juan/"/>
    
    <category term="NeetCode150" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/"/>
    
    <category term="Two Pointers" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/two-ptr/"/>
    
    
  </entry>
  
  <entry>
    <title>Leetcode.20. 有效的括号</title>
    <link href="https://bishoptylaor.github.io/interview/juan/neet150/stack/leet-20-valid-parentheses/"/>
    <id>https://bishoptylaor.github.io/interview/juan/neet150/stack/leet-20-valid-parentheses/</id>
    <published>2024-05-20T15:20:26.000Z</published>
    <updated>2024-07-12T14:15:22.485Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://leetcode.cn/problems/valid-parentheses/&quot;&gt;Leetcode.20. 有效的括号&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;给定一个只包括 &lt;code&gt;&amp;#39;(&amp;#39;&lt;/code&gt;，&lt;code&gt;&amp;#39;)&amp;#39;&lt;/code&gt;，&lt;code&gt;&amp;#39;&amp;#123;&amp;#39;&lt;/code&gt;，&lt;code&gt;&amp;#39;&amp;#125;&amp;#39;&lt;/code&gt;，&lt;code&gt;&amp;#39;[&amp;#39;&lt;/code&gt;，&lt;code&gt;&amp;#39;]&amp;#39;&lt;/code&gt; 的字符串 &lt;code&gt;s&lt;/code&gt; ，判断字符串是否有效。&lt;/p&gt;
&lt;p&gt;有效字符串需满足：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;左括号必须用相同类型的右括号闭合。&lt;/li&gt;
&lt;li&gt;左括号必须以正确的顺序闭合。&lt;/li&gt;
&lt;li&gt;每个右括号都有一个对应的相同类型的左括号。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;示例 1：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：s = &amp;quot;()&amp;quot;
输出：true
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;示例 2：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：s = &amp;quot;()[]&amp;#123;&amp;#125;&amp;quot;
输出：true
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;示例 3：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：s = &amp;quot;(]&amp;quot;
输出：false
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;提示：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= s.length &amp;lt;= 104&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;s&lt;/code&gt; 仅由括号 &lt;code&gt;&amp;#39;()[]&amp;#123;&amp;#125;&amp;#39;&lt;/code&gt; 组成&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;思路：&lt;/strong&gt;&lt;br&gt;一个比较讨巧的方法是：当发现左括号的时候将对应右括号入栈，发现右括号时直接比较栈顶元素是否相同即可，不同就提前退出。&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;isValid&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(s &lt;span class=&quot;type&quot;&gt;string&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;bool&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(s) == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; stack []&lt;span class=&quot;type&quot;&gt;rune&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; _, ch := &lt;span class=&quot;keyword&quot;&gt;range&lt;/span&gt; s &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ch == &lt;span class=&quot;string&quot;&gt;&amp;#x27;(&amp;#x27;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			stack = &lt;span class=&quot;built_in&quot;&gt;append&lt;/span&gt;(stack, &lt;span class=&quot;string&quot;&gt;&amp;#x27;)&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ch == &lt;span class=&quot;string&quot;&gt;&amp;#x27;[&amp;#x27;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			stack = &lt;span class=&quot;built_in&quot;&gt;append&lt;/span&gt;(stack, &lt;span class=&quot;string&quot;&gt;&amp;#x27;]&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ch == &lt;span class=&quot;string&quot;&gt;&amp;#x27;&amp;#123;&amp;#x27;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			stack = &lt;span class=&quot;built_in&quot;&gt;append&lt;/span&gt;(stack, &lt;span class=&quot;string&quot;&gt;&amp;#x27;&amp;#125;&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			fmt.Println(stack, ch)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(stack) == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; stack[&lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(stack)&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;] != ch &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			stack = stack[:&lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(stack)&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	fmt.Println(stack)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(stack) == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span</summary>
        
      
    
    
    
    <category term="面试" scheme="https://bishoptylaor.github.io/categories/interview/"/>
    
    <category term="刷题" scheme="https://bishoptylaor.github.io/categories/interview/juan/"/>
    
    <category term="NeetCode150" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/"/>
    
    <category term="Stack" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/stack/"/>
    
    
  </entry>
  
  <entry>
    <title>Leetcode.49 字母异位词分组</title>
    <link href="https://bishoptylaor.github.io/interview/juan/neet150/arrays-hashing/leet-49-group-anagrams/"/>
    <id>https://bishoptylaor.github.io/interview/juan/neet150/arrays-hashing/leet-49-group-anagrams/</id>
    <published>2024-05-20T15:20:21.000Z</published>
    <updated>2024-07-12T14:15:22.483Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://leetcode.cn/problems/group-anagrams/&quot;&gt;49. 字母异位词分组&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;给你一个字符串数组，请你将 &lt;strong&gt;字母异位词&lt;/strong&gt; 组合在一起。可以按任意顺序返回结果列表。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;字母异位词&lt;/strong&gt; 是由重新排列源单词的所有字母得到的一个新单词。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例 1:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入: strs = `[&amp;quot;eat&amp;quot;, &amp;quot;tea&amp;quot;, &amp;quot;tan&amp;quot;, &amp;quot;ate&amp;quot;, &amp;quot;nat&amp;quot;, &amp;quot;bat&amp;quot;]`
输出: [[&amp;quot;bat&amp;quot;],[&amp;quot;nat&amp;quot;,&amp;quot;tan&amp;quot;],[&amp;quot;ate&amp;quot;,&amp;quot;eat&amp;quot;,&amp;quot;tea&amp;quot;]]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;示例 2:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入: strs = `[&amp;quot;&amp;quot;]`
输出: [[&amp;quot;&amp;quot;]]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;示例 3:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入: strs = `[&amp;quot;a&amp;quot;]`
输出: [[&amp;quot;a&amp;quot;]]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;提示：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= strs.length &amp;lt;= 104&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;0 &amp;lt;= strs[i].length &amp;lt;= 100&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;strs[i]&lt;/code&gt; 仅包含小写字母&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;排序后加入集合，再遍历出来就行&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;groupAnagrams&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(strs []&lt;span class=&quot;type&quot;&gt;string&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; [][]&lt;span class=&quot;type&quot;&gt;string&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	mp := &lt;span class=&quot;keyword&quot;&gt;map&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;string&lt;/span&gt;][]&lt;span class=&quot;type&quot;&gt;string&lt;/span&gt;&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; _, str := &lt;span class=&quot;keyword&quot;&gt;range&lt;/span&gt; strs &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		s := []&lt;span class=&quot;type&quot;&gt;byte&lt;/span&gt;(str)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		sort.Slice(s, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(i, j &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;bool&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; s[i] &amp;lt; s[j]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		sortedStr := &lt;span class=&quot;type&quot;&gt;string&lt;/span&gt;(s)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		mp[sortedStr] = &lt;span class=&quot;built_in&quot;&gt;append&lt;/span&gt;(mp[sortedStr], str)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	ans := &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;([][]&lt;span class=&quot;type&quot;&gt;string&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(mp))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; _, v := &lt;span class=&quot;keyword&quot;&gt;range&lt;/span&gt; mp &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		ans = &lt;span class=&quot;built_in&quot;&gt;append&lt;/span&gt;(ans, v)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; ans&lt;/span&gt;&lt;br&gt;&lt;span</summary>
        
      
    
    
    
    <category term="面试" scheme="https://bishoptylaor.github.io/categories/interview/"/>
    
    <category term="刷题" scheme="https://bishoptylaor.github.io/categories/interview/juan/"/>
    
    <category term="NeetCode150" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/"/>
    
    <category term="Arrays &amp; Hashing" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/arrays-hashing/"/>
    
    
  </entry>
  
  <entry>
    <title>Leetcode.242 有效的字母异位词</title>
    <link href="https://bishoptylaor.github.io/interview/juan/neet150/arrays-hashing/leet-242-valid-anagram/"/>
    <id>https://bishoptylaor.github.io/interview/juan/neet150/arrays-hashing/leet-242-valid-anagram/</id>
    <published>2024-05-20T15:20:17.000Z</published>
    <updated>2024-07-12T14:15:22.483Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://leetcode.cn/problems/valid-anagram/&quot;&gt;242. 有效的字母异位词&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;给定两个字符串 &lt;code&gt;_s_&lt;/code&gt; 和 &lt;code&gt;_t_&lt;/code&gt; ，编写一个函数来判断 &lt;code&gt;_t_&lt;/code&gt; 是否是 &lt;code&gt;_s_&lt;/code&gt; 的字母异位词。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意：&lt;/strong&gt;若 &lt;code&gt;_s_&lt;/code&gt; 和 &lt;code&gt;_t_&lt;/code&gt; 中每个字符出现的次数都相同，则称 &lt;code&gt;_s_&lt;/code&gt; 和 &lt;code&gt;_t_&lt;/code&gt; 互为字母异位词。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例 1:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入: _s_ = &amp;quot;anagram&amp;quot;, _t_ = &amp;quot;nagaram&amp;quot;
输出: true
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;示例 2:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入: _s_ = &amp;quot;rat&amp;quot;, _t_ = &amp;quot;car&amp;quot;
输出: false
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;提示:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= s.length, t.length &amp;lt;= 5 * 104&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;s&lt;/code&gt; 和 &lt;code&gt;t&lt;/code&gt; 仅包含小写字母&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;进阶:&lt;/strong&gt; 如果输入字符串包含 unicode 字符怎么办？你能否调整你的解法来应对这种情况？&lt;/p&gt;
&lt;p&gt;还可以直接排序嗷，牛的！&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;isAnagram&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(s &lt;span class=&quot;type&quot;&gt;string&lt;/span&gt;, t &lt;span class=&quot;type&quot;&gt;string&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;bool&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(s) != &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(t) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	chm := &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;map&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;byte&lt;/span&gt;]&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;26&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i, _ := &lt;span class=&quot;keyword&quot;&gt;range&lt;/span&gt; s &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; _, ok := chm[s[i]]; ok &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			chm[s[i]] += &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			chm[s[i]] = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i, _ := &lt;span class=&quot;keyword&quot;&gt;range&lt;/span&gt; t &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; _, ok := chm[t[i]]; ok &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			chm[t[i]] -= &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; _, v := &lt;span class=&quot;keyword&quot;&gt;range&lt;/span&gt; chm &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; v != &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;isAnagram&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(s, t &lt;span class=&quot;type&quot;&gt;string&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;bool&lt;/span&gt; &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	s1, s2 := []&lt;span class=&quot;type&quot;&gt;byte&lt;/span&gt;(s), []&lt;span class=&quot;type&quot;&gt;byte&lt;/span&gt;(t) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	sort.Slice(s1, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(i, j &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;bool&lt;/span&gt; &amp;#123; &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; s1[i] &amp;lt; s1[j] &amp;#125;) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	sort.Slice(s2, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(i, j &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;bool&lt;/span&gt; &amp;#123; &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; s2[i] &amp;lt; s2[j] &amp;#125;) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;string&lt;/span&gt;(s1) == &lt;span class=&quot;type&quot;&gt;string&lt;/span&gt;(s2) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;</summary>
        
      
    
    
    
    <category term="面试" scheme="https://bishoptylaor.github.io/categories/interview/"/>
    
    <category term="刷题" scheme="https://bishoptylaor.github.io/categories/interview/juan/"/>
    
    <category term="NeetCode150" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/"/>
    
    <category term="Arrays &amp; Hashing" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/arrays-hashing/"/>
    
    
  </entry>
  
  <entry>
    <title>leet76</title>
    <link href="https://bishoptylaor.github.io/interview/juan/neet150/s-window/leet76/"/>
    <id>https://bishoptylaor.github.io/interview/juan/neet150/s-window/leet76/</id>
    <published>2024-05-20T15:20:13.000Z</published>
    <updated>2024-07-12T14:15:22.485Z</updated>
    
    
    
    
    <category term="面试" scheme="https://bishoptylaor.github.io/categories/interview/"/>
    
    <category term="刷题" scheme="https://bishoptylaor.github.io/categories/interview/juan/"/>
    
    <category term="NeetCode150" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/"/>
    
    <category term="Sliding Window" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/s-window/"/>
    
    
  </entry>
  
  <entry>
    <title>leet424</title>
    <link href="https://bishoptylaor.github.io/interview/juan/neet150/s-window/leet424/"/>
    <id>https://bishoptylaor.github.io/interview/juan/neet150/s-window/leet424/</id>
    <published>2024-05-20T15:20:08.000Z</published>
    <updated>2024-07-12T14:15:22.486Z</updated>
    
    
    
    
    <category term="面试" scheme="https://bishoptylaor.github.io/categories/interview/"/>
    
    <category term="刷题" scheme="https://bishoptylaor.github.io/categories/interview/juan/"/>
    
    <category term="NeetCode150" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/"/>
    
    <category term="Sliding Window" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/s-window/"/>
    
    
  </entry>
  
  <entry>
    <title>Leetcode.3 无重复字符的最长子串</title>
    <link href="https://bishoptylaor.github.io/interview/juan/neet150/s-window/leet-3-longest-substring-without-repeating-characters/"/>
    <id>https://bishoptylaor.github.io/interview/juan/neet150/s-window/leet-3-longest-substring-without-repeating-characters/</id>
    <published>2024-05-20T15:20:01.000Z</published>
    <updated>2024-07-12T14:15:22.485Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://leetcode.cn/problems/longest-substring-without-repeating-characters/&quot;&gt;3. 无重复字符的最长子串&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;给定一个字符串 &lt;code&gt;s&lt;/code&gt; ，请你找出其中不含有重复字符的 &lt;strong&gt;最长&lt;/strong&gt; &lt;strong&gt;子串&lt;/strong&gt;的长度。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例 1:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入: s = &amp;quot;abcabcbb&amp;quot;
输出: 3 
解释: 因为无重复字符的最长子串是 `&amp;quot;abc&amp;quot;`，所以其长度为 3。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;示例 2:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入: s = &amp;quot;bbbbb&amp;quot;
输出: 1
解释: 因为无重复字符的最长子串是 `&amp;quot;b&amp;quot;`，所以其长度为 1。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;示例 3:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入: s = &amp;quot;pwwkew&amp;quot;
输出: 3
解释: 因为无重复字符的最长子串是 `&amp;quot;wke&amp;quot;`，所以其长度为 3。
     请注意，你的答案必须是 **子串** 的长度，`&amp;quot;pwke&amp;quot;` 是一个_子序列，_不是子串。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;提示：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;0 &amp;lt;= s.length &amp;lt;= 5 * 104&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;s&lt;/code&gt; 由英文字母、数字、符号和空格组成&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;lengthOfLongestSubstring&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(s &lt;span class=&quot;type&quot;&gt;string&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	hm := &lt;span class=&quot;keyword&quot;&gt;map&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;byte&lt;/span&gt;]&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	l := &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(s)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// 右指针，初始值为-1，代表还未移动&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	rk, ans := &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// i 作为左指针&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i:=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i&amp;lt;l; i++ &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; i != &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;comment&quot;&gt;// 左指针移动，移除一个字符&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;comment&quot;&gt;// 注意移除的是前一个字符&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;built_in&quot;&gt;delete&lt;/span&gt;(hm, s[i&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; rk+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&amp;lt;l &amp;amp;&amp;amp; hm[s[rk+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]] == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;comment&quot;&gt;// 移动右指针，且记录字符数++&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			hm[s[rk+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]]++&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			rk++&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// 第 i 到 rk 个字符是极长的无重复字符的子串&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		ans = max(ans, rk-i+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; ans&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(a, b &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; a &amp;gt; b &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; a&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; b&lt;/span&gt;&lt;br&gt;&lt;span</summary>
        
      
    
    
    
    <category term="面试" scheme="https://bishoptylaor.github.io/categories/interview/"/>
    
    <category term="刷题" scheme="https://bishoptylaor.github.io/categories/interview/juan/"/>
    
    <category term="NeetCode150" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/"/>
    
    <category term="Sliding Window" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/s-window/"/>
    
    
  </entry>
  
  <entry>
    <title>leet79</title>
    <link href="https://bishoptylaor.github.io/interview/juan/neet150/backtracking/leet79/"/>
    <id>https://bishoptylaor.github.io/interview/juan/neet150/backtracking/leet79/</id>
    <published>2024-05-20T15:19:32.000Z</published>
    <updated>2024-07-12T14:15:22.484Z</updated>
    
    
    
    
    <category term="面试" scheme="https://bishoptylaor.github.io/categories/interview/"/>
    
    <category term="刷题" scheme="https://bishoptylaor.github.io/categories/interview/juan/"/>
    
    <category term="NeetCode150" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/"/>
    
    <category term="Backtracking" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/backtracking/"/>
    
    
  </entry>
  
  <entry>
    <title>Leetcode.48 旋转图像</title>
    <link href="https://bishoptylaor.github.io/interview/juan/neet150/math/leet-48-rotate-image/"/>
    <id>https://bishoptylaor.github.io/interview/juan/neet150/math/leet-48-rotate-image/</id>
    <published>2024-05-20T15:19:28.000Z</published>
    <updated>2024-07-12T14:15:22.484Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://leetcode.cn/problems/rotate-image/description/&quot;&gt;Leetcode.48 旋转图像&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;给定一个 &lt;em&gt;n&lt;/em&gt; × &lt;em&gt;n&lt;/em&gt; 的二维矩阵 &lt;code&gt;matrix&lt;/code&gt; 表示一个图像。请你将图像顺时针旋转 90 度。&lt;/p&gt;
&lt;p&gt;你必须在 &lt;strong&gt;原地&lt;/strong&gt; 旋转图像，这意味着你需要直接修改输入的二维矩阵。&lt;strong&gt;请不要&lt;/strong&gt; 使用另一个矩阵来旋转图像。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例 1：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://assets.leetcode.com/uploads/2020/08/28/mat1.jpg&quot;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：matrix = [[1,2,3],[4,5,6],[7,8,9]]
输出：[[7,4,1],[8,5,2],[9,6,3]]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;示例 2：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://assets.leetcode.com/uploads/2020/08/28/mat2.jpg&quot;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：matrix = [[5,1,9,11],[2,4,8,10],[13,3,6,7],[15,14,12,16]]
输出：[[15,13,2,5],[14,3,4,1],[12,6,8,9],[16,7,10,11]]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;提示：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;n == matrix.length == matrix[i].length&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= n &amp;lt;= 20&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-1000 &amp;lt;= matrix[i][j] &amp;lt;= 1000&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;牛了逼了&lt;/strong&gt;，两次翻转达成目标&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;rotate&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(matrix [][]&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	n := &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(matrix) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// 水平翻转 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i := &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; n/&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;; i++ &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		matrix[i], matrix[n&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;-i] = matrix[n&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;-i], matrix[i] &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// 主对角线翻转 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i := &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; n; i++ &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; j := &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; j &amp;lt; i; j++ &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j] &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;


&lt;p&gt;标准解法&lt;br&gt;由于矩阵中的行列从 000 开始计数，因此对于矩阵中的元素 matrix[row][col]，在旋转后，它的新位置为 matrix_new[col][n−row−1]。&lt;br&gt;然后用辅助数组存储翻转后的结果。&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;rotate&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(matrix [][]&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	n := &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(matrix) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	tmp := &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;([][]&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;, n) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i := &lt;span class=&quot;keyword&quot;&gt;range&lt;/span&gt; tmp &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		tmp[i] = &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;([]&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;, n) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i, row := &lt;span class=&quot;keyword&quot;&gt;range&lt;/span&gt; matrix &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; j, v := &lt;span class=&quot;keyword&quot;&gt;range&lt;/span&gt; row &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			tmp[j][n&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;-i] = v &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;copy&lt;/span&gt;(matrix, tmp) &lt;span class=&quot;comment&quot;&gt;// 拷贝 tmp 矩阵每行的引用 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;</summary>
        
      
    
    
    
    <category term="面试" scheme="https://bishoptylaor.github.io/categories/interview/"/>
    
    <category term="刷题" scheme="https://bishoptylaor.github.io/categories/interview/juan/"/>
    
    <category term="NeetCode150" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/"/>
    
    <category term="Math &amp; Geometry" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/math/"/>
    
    
  </entry>
  
  <entry>
    <title>Leetcode.54 螺旋区间</title>
    <link href="https://bishoptylaor.github.io/interview/juan/neet150/math/leet-54-spiral-matrix/"/>
    <id>https://bishoptylaor.github.io/interview/juan/neet150/math/leet-54-spiral-matrix/</id>
    <published>2024-05-20T15:19:24.000Z</published>
    <updated>2024-07-12T14:15:22.484Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://leetcode.cn/problems/spiral-matrix/description/&quot;&gt;Leetcode.54 螺旋区间&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;给你一个 &lt;code&gt;m&lt;/code&gt; 行 &lt;code&gt;n&lt;/code&gt; 列的矩阵 &lt;code&gt;matrix&lt;/code&gt; ，请按照 &lt;strong&gt;顺时针螺旋顺序&lt;/strong&gt; ，返回矩阵中的所有元素。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例 1：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://assets.leetcode.com/uploads/2020/11/13/spiral1.jpg&quot;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：matrix = [[1,2,3],[4,5,6],[7,8,9]]
输出：[1,2,3,6,9,8,7,4,5]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;示例 2：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://assets.leetcode.com/uploads/2020/11/13/spiral.jpg&quot;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：matrix = [[1,2,3,4],[5,6,7,8],[9,10,11,12]]
输出：[1,2,3,4,8,12,11,10,9,5,6,7]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;提示：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;m == matrix.length&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;n == matrix[i].length&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= m, n &amp;lt;= 10&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-100 &amp;lt;= matrix[i][j] &amp;lt;= 100&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;思路：&lt;/strong&gt;&lt;br&gt;用最直观的理解，定边界&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;spiralOrder&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(matrix [][]&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; []&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(matrix) == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; || &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(matrix[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]) == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; []&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	ans := []&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	rowStart, rowEnd := &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(matrix)&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	colStart, colEnd := &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(matrix[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;])&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// 左 - 右&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i:=colStart; i&amp;lt;=colEnd; i++ &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			ans = &lt;span class=&quot;built_in&quot;&gt;append&lt;/span&gt;(ans, matrix[rowStart][i])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		rowStart += &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; rowStart &amp;gt; rowEnd &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// 上 - 下&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i:=rowStart; i&amp;lt;=rowEnd; i++ &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			ans = &lt;span class=&quot;built_in&quot;&gt;append&lt;/span&gt;(ans, matrix[i][colEnd])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		colEnd -= &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; colStart &amp;gt; colEnd &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// 右 - 左&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i:=colEnd; i&amp;gt;=colStart; i-- &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			ans = &lt;span class=&quot;built_in&quot;&gt;append&lt;/span&gt;(ans, matrix[rowEnd][i])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		rowEnd -= &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; rowStart &amp;gt; rowEnd &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// 下 - 上&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i:=rowEnd; i&amp;gt;=rowStart; i-- &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			ans = &lt;span class=&quot;built_in&quot;&gt;append&lt;/span&gt;(ans, matrix[i][colStart])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		colStart += &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; colStart &amp;gt; colEnd &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; ans&lt;/span&gt;&lt;br&gt;&lt;span</summary>
        
      
    
    
    
    <category term="面试" scheme="https://bishoptylaor.github.io/categories/interview/"/>
    
    <category term="刷题" scheme="https://bishoptylaor.github.io/categories/interview/juan/"/>
    
    <category term="NeetCode150" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/"/>
    
    <category term="Math &amp; Geometry" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/math/"/>
    
    
  </entry>
  
  <entry>
    <title>leet73</title>
    <link href="https://bishoptylaor.github.io/interview/juan/neet150/math/leet73/"/>
    <id>https://bishoptylaor.github.io/interview/juan/neet150/math/leet73/</id>
    <published>2024-05-20T15:19:20.000Z</published>
    <updated>2024-07-12T14:15:22.484Z</updated>
    
    
    
    
    <category term="面试" scheme="https://bishoptylaor.github.io/categories/interview/"/>
    
    <category term="刷题" scheme="https://bishoptylaor.github.io/categories/interview/juan/"/>
    
    <category term="NeetCode150" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/"/>
    
    <category term="Math &amp; Geometry" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/math/"/>
    
    
  </entry>
  
  <entry>
    <title>Leetcode.143 重排链表</title>
    <link href="https://bishoptylaor.github.io/interview/juan/neet150/linked-list/leet-143-reorder-list/"/>
    <id>https://bishoptylaor.github.io/interview/juan/neet150/linked-list/leet-143-reorder-list/</id>
    <published>2024-05-20T15:18:53.000Z</published>
    <updated>2024-07-12T14:15:22.485Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://leetcode.cn/problems/reorder-list/&quot;&gt;143. 重排链表&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;给定一个单链表 &lt;code&gt;L&lt;/code&gt; 的头节点 &lt;code&gt;head&lt;/code&gt; ，单链表 &lt;code&gt;L&lt;/code&gt; 表示为：&lt;/p&gt;
&lt;p&gt;L0 → L1 → … → Ln - 1 → Ln&lt;/p&gt;
&lt;p&gt;请将其重新排列后变为：&lt;/p&gt;
&lt;p&gt;L0 → Ln → L1 → Ln - 1 → L2 → Ln - 2 → …&lt;/p&gt;
&lt;p&gt;不能只是单纯的改变节点内部的值，而是需要实际的进行节点交换。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例 1：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://pic.leetcode-cn.com/1626420311-PkUiGI-image.png&quot;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：head = [1,2,3,4]
输出：[1,4,2,3]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;示例 2：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://pic.leetcode-cn.com/1626420320-YUiulT-image.png&quot;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：head = [1,2,3,4,5]
输出：[1,5,2,4,3]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;提示：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;链表的长度范围为 &lt;code&gt;[1, 5 * 104]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= node.val &amp;lt;= 1000&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;方法1：转化为线性表，再按照要求链接节点&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;* Definition for singly-linked list.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;* type ListNode struct &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;* Val int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;* Next *ListNode&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;* &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;reorderList&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(head *ListNode)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; nums []*ListNode&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	dummy := head&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; dummy != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		nums = &lt;span class=&quot;built_in&quot;&gt;append&lt;/span&gt;(nums, dummy)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		dummy = dummy.Next&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	l, r := &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(nums)&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; l&amp;lt;r &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		nums[l].Next = nums[r]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		l++&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; l == r &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		nums[r].Next = nums[l]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		r--&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	nums[l].Next = &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;


&lt;p&gt;方法2：从链表中间切断，后半段逆序，然后再把二者合并&lt;br&gt;链表操作秀肌肉&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;* Definition for singly-linked list.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;* type ListNode struct &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;* Val int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;* Next *ListNode&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;* &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;reorderList&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(head *ListNode)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; head == &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	mid := findMiddle(head)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	l1 := head&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	l2 := mid.Next&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	mid.Next = &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	nl2 := reverse(l2)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	merge(l1, nl2)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;findMiddle&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(head *ListNode)&lt;/span&gt;&lt;/span&gt; *ListNode &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	slow, fast := head, head&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; fast.Next != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;amp;&amp;amp; fast.Next.Next != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		slow = slow.Next&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		fast = fast.Next.Next&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; slow&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;reverse&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(head *ListNode)&lt;/span&gt;&lt;/span&gt; *ListNode &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; pre, cur *ListNode = &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;, head&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; cur != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		nxt := cur.Next&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		cur.Next = pre&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		pre = cur&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		cur = nxt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; pre&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;merge&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(h1, h2 *ListNode)&lt;/span&gt;&lt;/span&gt; *ListNode &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	dummy := &amp;amp;ListNode&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	t := dummy&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; h1 != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;amp;&amp;amp; h2 != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		t.Next = h1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		t = t.Next&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		h1 = h1.Next&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		t.Next = h2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		t = t.Next&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		h2 = h2.Next&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; h1 != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		t.Next = h1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; h2 != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		t.Next = h2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; dummy.Next&lt;/span&gt;&lt;br&gt;&lt;span</summary>
        
      
    
    
    
    <category term="面试" scheme="https://bishoptylaor.github.io/categories/interview/"/>
    
    <category term="刷题" scheme="https://bishoptylaor.github.io/categories/interview/juan/"/>
    
    <category term="NeetCode150" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/"/>
    
    <category term="Linked List" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/linked-list/"/>
    
    
  </entry>
  
  <entry>
    <title>Leetcode.19 删除链表的倒数第 N 个结点</title>
    <link href="https://bishoptylaor.github.io/interview/juan/neet150/linked-list/leet-19-remove-nth-node-from-end-of-list/"/>
    <id>https://bishoptylaor.github.io/interview/juan/neet150/linked-list/leet-19-remove-nth-node-from-end-of-list/</id>
    <published>2024-05-20T15:18:49.000Z</published>
    <updated>2024-07-12T14:15:22.485Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://leetcode.cn/problems/remove-nth-node-from-end-of-list/&quot;&gt;19. 删除链表的倒数第 N 个结点&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;给你一个链表，删除链表的倒数第 &lt;code&gt;n&lt;/code&gt; 个结点，并且返回链表的头结点。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例 1：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://assets.leetcode.com/uploads/2020/10/03/remove_ex1.jpg&quot;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：head = [1,2,3,4,5], n = 2
输出：[1,2,3,5]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;示例 2：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：head = [1], n = 1
输出：[]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;示例 3：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：head = [1,2], n = 1
输出：[1]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;提示：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;链表中结点的数目为 &lt;code&gt;sz&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= sz &amp;lt;= 30&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;0 &amp;lt;= Node.val &amp;lt;= 100&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= n &amp;lt;= sz&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;进阶：&lt;/strong&gt;你能尝试使用一趟扫描实现吗？&lt;/p&gt;
&lt;p&gt;双指针&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;* Definition for singly-linked list.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;* type ListNode struct &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;* Val int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;* Next *ListNode&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;* &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;removeNthFromEnd&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(head *ListNode, n &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; *ListNode &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	dummy := &amp;amp;ListNode&amp;#123;&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, head&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	pre, cur := dummy, head&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i:=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i&amp;lt;n ; i++ &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		cur = cur.Next&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; cur != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		pre = pre.Next&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		cur = cur.Next&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	nod := pre.Next &lt;span class=&quot;comment&quot;&gt;// 待删除的点&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	pre.Next = nod.Next&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; dummy.Next&lt;/span&gt;&lt;br&gt;&lt;span</summary>
        
      
    
    
    
    <category term="面试" scheme="https://bishoptylaor.github.io/categories/interview/"/>
    
    <category term="刷题" scheme="https://bishoptylaor.github.io/categories/interview/juan/"/>
    
    <category term="NeetCode150" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/"/>
    
    <category term="Linked List" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/linked-list/"/>
    
    
  </entry>
  
  <entry>
    <title>Leetcode.21 合并两个有序链表</title>
    <link href="https://bishoptylaor.github.io/interview/juan/neet150/linked-list/leet-21-merge-two-sorted-lists/"/>
    <id>https://bishoptylaor.github.io/interview/juan/neet150/linked-list/leet-21-merge-two-sorted-lists/</id>
    <published>2024-05-20T15:18:38.000Z</published>
    <updated>2024-07-12T14:15:22.485Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://leetcode.cn/problems/merge-two-sorted-lists/&quot;&gt;21. 合并两个有序链表&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;将两个升序链表合并为一个新的 &lt;strong&gt;升序&lt;/strong&gt; 链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。 &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例 1：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://assets.leetcode.com/uploads/2020/10/03/merge_ex1.jpg&quot;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：l1 = [1,2,4], l2 = [1,3,4]
输出：[1,1,2,3,4,4]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;示例 2：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：l1 = [], l2 = []
输出：[]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;示例 3：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：l1 = [], l2 = [0]
输出：[0]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;提示：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;两个链表的节点数目范围是 &lt;code&gt;[0, 50]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-100 &amp;lt;= Node.val &amp;lt;= 100&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;l1&lt;/code&gt; 和 &lt;code&gt;l2&lt;/code&gt; 均按 &lt;strong&gt;非递减顺序&lt;/strong&gt; 排列&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;* Definition for singly-linked list.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;* type ListNode struct &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;* Val int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;* Next *ListNode&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;* &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;mergeTwoLists&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(list1 *ListNode, list2 *ListNode)&lt;/span&gt;&lt;/span&gt; *ListNode &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	newHead, dummy := &amp;amp;ListNode&amp;#123;Val: &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;&amp;#125;, &amp;amp;ListNode&amp;#123;Val: &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	dummy = newHead&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; list1 != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;amp;&amp;amp; list2 != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; list1.Val &amp;lt;= list2.Val &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			dummy.Next = list1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			list1 = list1.Next&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			dummy.Next = list2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			list2 = list2.Next&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		dummy = dummy.Next&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; list1 != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		dummy.Next = list1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		dummy.Next = list2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; newHead.Next&lt;/span&gt;&lt;br&gt;&lt;span</summary>
        
      
    
    
    
    <category term="面试" scheme="https://bishoptylaor.github.io/categories/interview/"/>
    
    <category term="刷题" scheme="https://bishoptylaor.github.io/categories/interview/juan/"/>
    
    <category term="NeetCode150" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/"/>
    
    <category term="Linked List" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/linked-list/"/>
    
    
  </entry>
  
  <entry>
    <title>Leetcode.141 环形链表</title>
    <link href="https://bishoptylaor.github.io/interview/juan/neet150/linked-list/leet-141-linked-list-cycle/"/>
    <id>https://bishoptylaor.github.io/interview/juan/neet150/linked-list/leet-141-linked-list-cycle/</id>
    <published>2024-05-20T15:18:34.000Z</published>
    <updated>2024-07-12T14:15:22.485Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://leetcode.cn/problems/linked-list-cycle/&quot;&gt;141. 环形链表&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;给你一个链表的头节点 &lt;code&gt;head&lt;/code&gt; ，判断链表中是否有环。&lt;/p&gt;
&lt;p&gt;如果链表中有某个节点，可以通过连续跟踪 &lt;code&gt;next&lt;/code&gt; 指针再次到达，则链表中存在环。 为了表示给定链表中的环，评测系统内部使用整数 &lt;code&gt;pos&lt;/code&gt; 来表示链表尾连接到链表中的位置（索引从 0 开始）。&lt;strong&gt;注意：&lt;code&gt;pos&lt;/code&gt; 不作为参数进行传递&lt;/strong&gt; 。仅仅是为了标识链表的实际情况。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;如果链表中存在环&lt;/em&gt; ，则返回 &lt;code&gt;true&lt;/code&gt; 。 否则，返回 &lt;code&gt;false&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例 1：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/07/circularlinkedlist.png&quot;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：head = [3,2,0,-4], pos = 1
输出：true
解释：链表中有一个环，其尾部连接到第二个节点。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;示例 2：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/07/circularlinkedlist_test2.png&quot;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：head = [1,2], pos = 0
输出：true
解释：链表中有一个环，其尾部连接到第一个节点。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;示例 3：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/07/circularlinkedlist_test3.png&quot;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：head = [1], pos = -1
输出：false
解释：链表中没有环。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;提示：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;链表中节点的数目范围是 &lt;code&gt;[0, 104]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-105 &amp;lt;= Node.val &amp;lt;= 105&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pos&lt;/code&gt; 为 &lt;code&gt;-1&lt;/code&gt; 或者链表中的一个 &lt;strong&gt;有效索引&lt;/strong&gt; 。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;进阶：&lt;/strong&gt;你能用 &lt;code&gt;O(1)&lt;/code&gt;（即，常量）内存解决此问题吗？&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;* Definition for singly-linked list.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;* type ListNode struct &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;* Val int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;* Next *ListNode&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;* &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;hasCycle&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(head *ListNode)&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;bool&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// 快慢指针，一个双倍步数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// 如果有环，迟早能碰上&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// 如果没有环，会碰到下一个为空的情况&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; head == &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; head.Next == &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	slow, fast := head, head.Next&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; slow != fast &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// 判断 fast 的情况即可，fast 没到 nil，slow 一定安全&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; fast == &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; || fast.Next == &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		slow = slow.Next&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		fast = fast.Next&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		fast = fast.Next&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span</summary>
        
      
    
    
    
    <category term="面试" scheme="https://bishoptylaor.github.io/categories/interview/"/>
    
    <category term="刷题" scheme="https://bishoptylaor.github.io/categories/interview/juan/"/>
    
    <category term="NeetCode150" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/"/>
    
    <category term="Linked List" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/linked-list/"/>
    
    
  </entry>
  
  <entry>
    <title>Leetcode.206. 反转链表</title>
    <link href="https://bishoptylaor.github.io/interview/juan/neet150/linked-list/leet-206-reverse-linked-list/"/>
    <id>https://bishoptylaor.github.io/interview/juan/neet150/linked-list/leet-206-reverse-linked-list/</id>
    <published>2024-05-20T15:18:31.000Z</published>
    <updated>2024-07-12T14:15:22.485Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://leetcode.cn/problems/reverse-linked-list/&quot;&gt;206. 反转链表&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;给你单链表的头节点 &lt;code&gt;head&lt;/code&gt; ，请你反转链表，并返回反转后的链表。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例 1：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://assets.leetcode.com/uploads/2021/02/19/rev1ex1.jpg&quot;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：head = [1,2,3,4,5]
输出：[5,4,3,2,1]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;示例 2：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://assets.leetcode.com/uploads/2021/02/19/rev1ex2.jpg&quot;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：head = [1,2]
输出：[2,1]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;示例 3：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：head = []
输出：[]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;提示：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;链表中节点的数目范围是 &lt;code&gt;[0, 5000]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-5000 &amp;lt;= Node.val &amp;lt;= 5000&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;进阶：&lt;/strong&gt;链表可以选用迭代或递归方式完成反转。你能否用两种方法解决这道题？&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;* Definition for singly-linked list.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;* type ListNode struct &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;	* Val int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;	* Next *ListNode&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;* &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;reverseList&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(head *ListNode)&lt;/span&gt;&lt;/span&gt; *ListNode &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; head == &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; pre *ListNode&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	curr := head&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; curr != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// 记录下一个节点&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		next := curr.Next&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// 修改上一个节点&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		curr.Next = pre&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// 记录头结点&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		pre = curr&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// 走到下一个节点&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		curr = next&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; pre&lt;/span&gt;&lt;br&gt;&lt;span</summary>
        
      
    
    
    
    <category term="面试" scheme="https://bishoptylaor.github.io/categories/interview/"/>
    
    <category term="刷题" scheme="https://bishoptylaor.github.io/categories/interview/juan/"/>
    
    <category term="NeetCode150" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/"/>
    
    <category term="Linked List" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/linked-list/"/>
    
    
  </entry>
  
  <entry>
    <title>leet435</title>
    <link href="https://bishoptylaor.github.io/interview/juan/neet150/interval/leet435/"/>
    <id>https://bishoptylaor.github.io/interview/juan/neet150/interval/leet435/</id>
    <published>2024-05-20T15:18:01.000Z</published>
    <updated>2024-07-12T14:15:22.485Z</updated>
    
    
    
    
    <category term="面试" scheme="https://bishoptylaor.github.io/categories/interview/"/>
    
    <category term="刷题" scheme="https://bishoptylaor.github.io/categories/interview/juan/"/>
    
    <category term="NeetCode150" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/"/>
    
    <category term="Intervals" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/interval/"/>
    
    
  </entry>
  
  <entry>
    <title>Leetcode.57 插入区间</title>
    <link href="https://bishoptylaor.github.io/interview/juan/neet150/interval/leet-57-insert-interval/"/>
    <id>https://bishoptylaor.github.io/interview/juan/neet150/interval/leet-57-insert-interval/</id>
    <published>2024-05-20T15:17:57.000Z</published>
    <updated>2024-07-12T14:15:22.484Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://leetcode.cn/problems/insert-interval/description/&quot;&gt;Leetcode.57 插入区间&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;给你一个 &lt;strong&gt;无重叠的&lt;/strong&gt; _，_按照区间起始端点排序的区间列表 &lt;code&gt;intervals&lt;/code&gt;，其中 &lt;code&gt;intervals[i] = [starti, endi]&lt;/code&gt; 表示第 &lt;code&gt;i&lt;/code&gt; 个区间的开始和结束，并且 &lt;code&gt;intervals&lt;/code&gt; 按照 &lt;code&gt;starti&lt;/code&gt; 升序排列。同样给定一个区间 &lt;code&gt;newInterval = [start, end]&lt;/code&gt; 表示另一个区间的开始和结束。&lt;/p&gt;
&lt;p&gt;在 &lt;code&gt;intervals&lt;/code&gt; 中插入区间 &lt;code&gt;newInterval&lt;/code&gt;，使得 &lt;code&gt;intervals&lt;/code&gt; 依然按照 &lt;code&gt;starti&lt;/code&gt; 升序排列，且区间之间不重叠（如果有必要的话，可以合并区间）。&lt;/p&gt;
&lt;p&gt;返回插入之后的 &lt;code&gt;intervals&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt; 你不需要原地修改 &lt;code&gt;intervals&lt;/code&gt;。你可以创建一个新数组然后返回它。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例 1：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：intervals = [[1,3],[6,9]], newInterval = [2,5]
输出：[[1,5],[6,9]]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;示例 2：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：intervals = [[1,2],[3,5],[6,7],[8,10],[12,16]], newInterval = [4,8]
输出：[[1,2],[3,10],[12,16]]
解释：这是因为新的区间 `[4,8]` 与 `[3,5],[6,7],[8,10]` 重叠。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;提示：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;0 &amp;lt;= intervals.length &amp;lt;= 104&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;intervals[i].length == 2&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;0 &amp;lt;= starti &amp;lt;= endi &amp;lt;= 105&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;intervals&lt;/code&gt; 根据 &lt;code&gt;starti&lt;/code&gt; 按 &lt;strong&gt;升序&lt;/strong&gt; 排列&lt;/li&gt;
&lt;li&gt;&lt;code&gt;newInterval.length == 2&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;0 &amp;lt;= start &amp;lt;= end &amp;lt;= 105&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(intervals [][]&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;, newInterval []&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; [][]&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	left, right := newInterval[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;], newInterval[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	merged := &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; ans [][]&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; _, inter := &lt;span class=&quot;keyword&quot;&gt;range&lt;/span&gt; intervals &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; inter[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;] &amp;lt; left &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			ans = &lt;span class=&quot;built_in&quot;&gt;append&lt;/span&gt;(ans, inter)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; inter[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;] &amp;gt; right &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; !merged &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			ans = &lt;span class=&quot;built_in&quot;&gt;append&lt;/span&gt;(ans, []&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;&amp;#123;left, right&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			merged = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		ans = &lt;span class=&quot;built_in&quot;&gt;append&lt;/span&gt;(ans, inter)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			left = min(left, inter[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			right = max(right, inter[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; !merged &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// left, right 为原值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		ans = &lt;span class=&quot;built_in&quot;&gt;append&lt;/span&gt;(ans, []&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;&amp;#123;left, right&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; ans&lt;/span&gt;&lt;br&gt;&lt;span</summary>
        
      
    
    
    
    <category term="面试" scheme="https://bishoptylaor.github.io/categories/interview/"/>
    
    <category term="刷题" scheme="https://bishoptylaor.github.io/categories/interview/juan/"/>
    
    <category term="NeetCode150" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/"/>
    
    <category term="Intervals" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/interval/"/>
    
    
  </entry>
  
  <entry>
    <title>Leetcode.128 最长连续序列</title>
    <link href="https://bishoptylaor.github.io/interview/juan/neet150/arrays-hashing/leet-128-longest-consecutive-sequence/"/>
    <id>https://bishoptylaor.github.io/interview/juan/neet150/arrays-hashing/leet-128-longest-consecutive-sequence/</id>
    <published>2024-05-20T15:17:04.000Z</published>
    <updated>2024-07-12T14:15:22.483Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://leetcode.cn/problems/longest-consecutive-sequence/description/&quot;&gt;Leetcode.128 最长连续序列&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;给定一个未排序的整数数组 &lt;code&gt;nums&lt;/code&gt; ，找出数字连续的最长序列（不要求序列元素在原数组中连续）的长度。&lt;/p&gt;
&lt;p&gt;请你设计并实现时间复杂度为 &lt;code&gt;O(n)&lt;/code&gt; 的算法解决此问题。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例 1：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：nums = [100,4,200,1,3,2]
输出：4
解释：最长数字连续序列是 `[1, 2, 3, 4]。它的长度为 4。`
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;示例 2：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：nums = [0,3,7,2,5,8,4,6,0,1]
输出：9
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;提示：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;0 &amp;lt;= nums.length &amp;lt;= 105&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-109 &amp;lt;= nums[i] &amp;lt;= 109&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;longestConsecutive&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(nums []&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	hs := &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;map&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;]&lt;span class=&quot;type&quot;&gt;bool&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i:=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i&amp;lt;&lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(nums); i++ &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		hs[nums[i]] = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	ans := &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; num, _ := &lt;span class=&quot;keyword&quot;&gt;range&lt;/span&gt; hs &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// 找前一个数字，存在则当前数字不是开头&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; _, ok := hs[num&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;]; ok &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;continue&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// num 是开头&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		cn := num&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		cnt := &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; hs[cn+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;] &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			cn += &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			cnt += &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		ans = max(ans, cnt)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; ans&lt;/span&gt;&lt;br&gt;&lt;span</summary>
        
      
    
    
    
    <category term="面试" scheme="https://bishoptylaor.github.io/categories/interview/"/>
    
    <category term="刷题" scheme="https://bishoptylaor.github.io/categories/interview/juan/"/>
    
    <category term="NeetCode150" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/"/>
    
    <category term="Arrays &amp; Hashing" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/arrays-hashing/"/>
    
    
  </entry>
  
  <entry>
    <title>Leetcode.200 岛屿数量</title>
    <link href="https://bishoptylaor.github.io/interview/juan/neet150/graphs/leet-200-number-of-islands/"/>
    <id>https://bishoptylaor.github.io/interview/juan/neet150/graphs/leet-200-number-of-islands/</id>
    <published>2024-05-20T15:17:00.000Z</published>
    <updated>2024-07-12T14:15:22.484Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://leetcode.cn/problems/number-of-islands/&quot;&gt;200. 岛屿数量&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;给你一个由 &lt;code&gt;&amp;#39;1&amp;#39;&lt;/code&gt;（陆地）和 &lt;code&gt;&amp;#39;0&amp;#39;&lt;/code&gt;（水）组成的的二维网格，请你计算网格中岛屿的数量。&lt;/p&gt;
&lt;p&gt;岛屿总是被水包围，并且每座岛屿只能由水平方向和&amp;#x2F;或竖直方向上相邻的陆地连接形成。&lt;/p&gt;
&lt;p&gt;此外，你可以假设该网格的四条边均被水包围。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例 1：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：grid = [
  [&amp;quot;1&amp;quot;,&amp;quot;1&amp;quot;,&amp;quot;1&amp;quot;,&amp;quot;1&amp;quot;,&amp;quot;0&amp;quot;],
  [&amp;quot;1&amp;quot;,&amp;quot;1&amp;quot;,&amp;quot;0&amp;quot;,&amp;quot;1&amp;quot;,&amp;quot;0&amp;quot;],
  [&amp;quot;1&amp;quot;,&amp;quot;1&amp;quot;,&amp;quot;0&amp;quot;,&amp;quot;0&amp;quot;,&amp;quot;0&amp;quot;],
  [&amp;quot;0&amp;quot;,&amp;quot;0&amp;quot;,&amp;quot;0&amp;quot;,&amp;quot;0&amp;quot;,&amp;quot;0&amp;quot;]
]
输出：1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;示例 2：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：grid = [
  [&amp;quot;1&amp;quot;,&amp;quot;1&amp;quot;,&amp;quot;0&amp;quot;,&amp;quot;0&amp;quot;,&amp;quot;0&amp;quot;],
  [&amp;quot;1&amp;quot;,&amp;quot;1&amp;quot;,&amp;quot;0&amp;quot;,&amp;quot;0&amp;quot;,&amp;quot;0&amp;quot;],
  [&amp;quot;0&amp;quot;,&amp;quot;0&amp;quot;,&amp;quot;1&amp;quot;,&amp;quot;0&amp;quot;,&amp;quot;0&amp;quot;],
  [&amp;quot;0&amp;quot;,&amp;quot;0&amp;quot;,&amp;quot;0&amp;quot;,&amp;quot;1&amp;quot;,&amp;quot;1&amp;quot;]
]
输出：3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;提示：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;m == grid.length&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;n == grid[i].length&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= m, n &amp;lt;= 300&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;grid[i][j]&lt;/code&gt; 的值为 &lt;code&gt;&amp;#39;0&amp;#39;&lt;/code&gt; 或 &lt;code&gt;&amp;#39;1&amp;#39;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;很标准的dfs&lt;br&gt;可以省略 visited 标记数组，改为直接修改 grid 中已遍历的元素为 0， 1 之外的任意值即可&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;numIslands&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(grid [][]&lt;span class=&quot;type&quot;&gt;byte&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	visited := &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;([][]&lt;span class=&quot;type&quot;&gt;bool&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(grid))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i := &lt;span class=&quot;keyword&quot;&gt;range&lt;/span&gt; visited &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		visited[i] = &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;([]&lt;span class=&quot;type&quot;&gt;bool&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(grid[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	ans := &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; dfs &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;, &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	dfs = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(m, n &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// 到达边界&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; m &amp;gt;= &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(grid) || n &amp;gt;= &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(grid[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]) || m&amp;lt;&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; || n&amp;lt;&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// 到达岛边界&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; grid[m][n] == &lt;span class=&quot;string&quot;&gt;&amp;#x27;0&amp;#x27;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// 已访问的陆地跳过&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; visited[m][n] &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// 标记陆地访问&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; grid[m][n] == &lt;span class=&quot;string&quot;&gt;&amp;#x27;1&amp;#x27;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			visited[m][n] = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		dfs(m&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;, n)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		dfs(m+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, n)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		dfs(m, n+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		dfs(m, n&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i:=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i&amp;lt;&lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(grid); i++ &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; j:=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; j&amp;lt;&lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(grid[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]); j++ &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; !visited[i][j] &amp;amp;&amp;amp; grid[i][j] == &lt;span class=&quot;string&quot;&gt;&amp;#x27;1&amp;#x27;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				ans += &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				dfs(i, j)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; ans&lt;/span&gt;&lt;br&gt;&lt;span</summary>
        
      
    
    
    
    <category term="面试" scheme="https://bishoptylaor.github.io/categories/interview/"/>
    
    <category term="刷题" scheme="https://bishoptylaor.github.io/categories/interview/juan/"/>
    
    <category term="NeetCode150" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/"/>
    
    <category term="Graphs" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/graphs/"/>
    
    
  </entry>
  
  <entry>
    <title>leet417</title>
    <link href="https://bishoptylaor.github.io/interview/juan/neet150/graphs/leet417/"/>
    <id>https://bishoptylaor.github.io/interview/juan/neet150/graphs/leet417/</id>
    <published>2024-05-20T15:16:57.000Z</published>
    <updated>2024-07-12T14:15:22.484Z</updated>
    
    
    
    
    <category term="面试" scheme="https://bishoptylaor.github.io/categories/interview/"/>
    
    <category term="刷题" scheme="https://bishoptylaor.github.io/categories/interview/juan/"/>
    
    <category term="NeetCode150" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/"/>
    
    <category term="Graphs" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/graphs/"/>
    
    
  </entry>
  
  <entry>
    <title>Leetcode.207 课程表</title>
    <link href="https://bishoptylaor.github.io/interview/juan/neet150/graphs/leet-207-course-schedule/"/>
    <id>https://bishoptylaor.github.io/interview/juan/neet150/graphs/leet-207-course-schedule/</id>
    <published>2024-05-20T15:16:52.000Z</published>
    <updated>2024-07-12T14:15:22.484Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://leetcode.cn/problems/course-schedule/&quot;&gt;207. 课程表&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;你这个学期必须选修 &lt;code&gt;numCourses&lt;/code&gt; 门课程，记为 &lt;code&gt;0&lt;/code&gt; 到 &lt;code&gt;numCourses - 1&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;在选修某些课程之前需要一些先修课程。 先修课程按数组 &lt;code&gt;prerequisites&lt;/code&gt; 给出，其中 &lt;code&gt;prerequisites[i] = [ai, bi]&lt;/code&gt; ，表示如果要学习课程 &lt;code&gt;ai&lt;/code&gt; 则 &lt;strong&gt;必须&lt;/strong&gt; 先学习课程  &lt;code&gt;bi&lt;/code&gt; 。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;例如，先修课程对 &lt;code&gt;[0, 1]&lt;/code&gt; 表示：想要学习课程 &lt;code&gt;0&lt;/code&gt; ，你需要先完成课程 &lt;code&gt;1&lt;/code&gt; 。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;请你判断是否可能完成所有课程的学习？如果可以，返回 &lt;code&gt;true&lt;/code&gt; ；否则，返回 &lt;code&gt;false&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例 1：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：numCourses = 2, prerequisites = [[1,0]]
输出：true
解释：总共有 2 门课程。学习课程 1 之前，你需要完成课程 0 。这是可能的。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;示例 2：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：numCourses = 2, prerequisites = [[1,0],[0,1]]
输出：false
解释：总共有 2 门课程。学习课程 1 之前，你需要先完成​课程 0 ；并且学习课程 0 之前，你还应先完成课程 1 。这是不可能的。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;提示：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= numCourses &amp;lt;= 2000&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;0 &amp;lt;= prerequisites.length &amp;lt;= 5000&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;prerequisites[i].length == 2&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;0 &amp;lt;= ai, bi &amp;lt; numCourses&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;prerequisites[i]&lt;/code&gt; 中的所有课程对 &lt;strong&gt;互不相同&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;canFinish&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(numCourses &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;, prerequisites [][]&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;bool&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	edges := &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;([][]&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;, numCourses)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	visited := &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;([]&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;, numCourses) &lt;span class=&quot;comment&quot;&gt;// 0 未搜索 1 搜索中 2 搜索完毕&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	res := []&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	valid := &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; dfs &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	dfs = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(c &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		visited[c] = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; _, v := &lt;span class=&quot;keyword&quot;&gt;range&lt;/span&gt; edges[c] &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; visited[v] == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				dfs(v)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; !valid &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; visited[v] == &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &amp;#123; &lt;span class=&quot;comment&quot;&gt;// 有环了&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				valid = &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		visited[c] = &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		res = &lt;span class=&quot;built_in&quot;&gt;append&lt;/span&gt;(res, c)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; _, item := &lt;span class=&quot;keyword&quot;&gt;range&lt;/span&gt; prerequisites &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		edges[item[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]] = &lt;span class=&quot;built_in&quot;&gt;append&lt;/span&gt;(edges[item[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]], item[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// 依赖 i 课程的课程存放在 edge[i]中&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i:=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i&amp;lt;numCourses; i++ &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; visited[i] == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			dfs(i)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; valid&lt;/span&gt;&lt;br&gt;&lt;span</summary>
        
      
    
    
    
    <category term="面试" scheme="https://bishoptylaor.github.io/categories/interview/"/>
    
    <category term="刷题" scheme="https://bishoptylaor.github.io/categories/interview/juan/"/>
    
    <category term="NeetCode150" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/"/>
    
    <category term="Graphs" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/graphs/"/>
    
    
  </entry>
  
  <entry>
    <title>leet133</title>
    <link href="https://bishoptylaor.github.io/interview/juan/neet150/graphs/leet133/"/>
    <id>https://bishoptylaor.github.io/interview/juan/neet150/graphs/leet133/</id>
    <published>2024-05-20T15:16:47.000Z</published>
    <updated>2024-07-12T14:15:22.484Z</updated>
    
    
    
    
    <category term="面试" scheme="https://bishoptylaor.github.io/categories/interview/"/>
    
    <category term="刷题" scheme="https://bishoptylaor.github.io/categories/interview/juan/"/>
    
    <category term="NeetCode150" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/"/>
    
    <category term="Graphs" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/graphs/"/>
    
    
  </entry>
  
  <entry>
    <title>Leetcode.55 跳跃游戏</title>
    <link href="https://bishoptylaor.github.io/interview/juan/neet150/greedy/leet-55-jump-game/"/>
    <id>https://bishoptylaor.github.io/interview/juan/neet150/greedy/leet-55-jump-game/</id>
    <published>2024-05-20T15:14:54.000Z</published>
    <updated>2024-07-12T14:15:22.484Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://leetcode.cn/problems/jump-game/&quot;&gt;Leetcode.55 跳跃游戏&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;给你一个非负整数数组 &lt;code&gt;nums&lt;/code&gt; ，你最初位于数组的 &lt;strong&gt;第一个下标&lt;/strong&gt; 。数组中的每个元素代表你在该位置可以跳跃的最大长度。&lt;/p&gt;
&lt;p&gt;判断你是否能够到达最后一个下标，如果可以，返回 &lt;code&gt;true&lt;/code&gt; ；否则，返回 &lt;code&gt;false&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例 1：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：nums = [2,3,1,1,4]
输出：true
解释：可以先跳 1 步，从下标 0 到达下标 1, 然后再从下标 1 跳 3 步到达最后一个下标。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;示例 2：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：nums = [3,2,1,0,4]
输出：false
解释：无论怎样，总会到达下标为 3 的位置。但该下标的最大跳跃长度是 0 ， 所以永远不可能到达最后一个下标。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;提示：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= nums.length &amp;lt;= 104&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;0 &amp;lt;= nums[i] &amp;lt;= 105&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;思路：&lt;/strong&gt;&lt;br&gt;每一步找从当前出发所能到达的最大距离，如果哪个点到不了了，说明不能到达终点。本质是贪心&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;canJump&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(nums []&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;bool&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; dis = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i:=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i&amp;lt;&lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(nums); i++ &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; i &amp;gt; dis &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		dis = max(dis, i + nums[i])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(a, b &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; a &amp;gt;= b &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; a&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; b&lt;/span&gt;&lt;br&gt;&lt;span</summary>
        
      
    
    
    
    <category term="面试" scheme="https://bishoptylaor.github.io/categories/interview/"/>
    
    <category term="刷题" scheme="https://bishoptylaor.github.io/categories/interview/juan/"/>
    
    <category term="NeetCode150" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/"/>
    
    <category term="Greedy" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/greedy/"/>
    
    
  </entry>
  
  <entry>
    <title>Leetcode.62 不同路径</title>
    <link href="https://bishoptylaor.github.io/interview/juan/neet150/2-d-dp/leet-62-unique-paths/"/>
    <id>https://bishoptylaor.github.io/interview/juan/neet150/2-d-dp/leet-62-unique-paths/</id>
    <published>2024-05-20T15:14:50.000Z</published>
    <updated>2024-07-12T14:15:22.484Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://leetcode.cn/problems/unique-paths/description/&quot;&gt;Leetcode.62 不同路径&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;一个机器人位于一个 &lt;code&gt;m x n&lt;/code&gt; 网格的左上角 （起始点在下图中标记为 “Start” ）。&lt;/p&gt;
&lt;p&gt;机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为 “Finish” ）。&lt;/p&gt;
&lt;p&gt;问总共有多少条不同的路径？&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例 1：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://pic.leetcode.cn/1697422740-adxmsI-image.png&quot;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：m = 3, n = 7
输出：28
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;示例 2：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：m = 3, n = 2
输出：3
解释：
从左上角开始，总共有 3 条路径可以到达右下角。
1. 向右 -&amp;gt; 向下 -&amp;gt; 向下
2. 向下 -&amp;gt; 向下 -&amp;gt; 向右
3. 向下 -&amp;gt; 向右 -&amp;gt; 向下
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;示例 3：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：m = 7, n = 3
输出：28
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;示例 4：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：m = 3, n = 3
输出：6
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;提示：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= m, n &amp;lt;= 100&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;题目数据保证答案小于等于 &lt;code&gt;2 * 109&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;uniquePaths&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(m &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;, n &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	dp := &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;([][]&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;, m)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i, _ := &lt;span class=&quot;keyword&quot;&gt;range&lt;/span&gt; dp &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		dp[i] = &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;([]&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;, n)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		dp[i][&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;] = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; j:=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; j&amp;lt;n; j++ &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		dp[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;][j] = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i:=&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; i&amp;lt;m; i++ &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; j:=&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; j&amp;lt;n; j++ &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			dp[i][j] = dp[i&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;][j] + dp[i][j&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; dp[m&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;][n&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span</summary>
        
      
    
    
    
    <category term="面试" scheme="https://bishoptylaor.github.io/categories/interview/"/>
    
    <category term="刷题" scheme="https://bishoptylaor.github.io/categories/interview/juan/"/>
    
    <category term="NeetCode150" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/"/>
    
    <category term="2-D DP" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/2-d-dp/"/>
    
    
  </entry>
  
  <entry>
    <title>Leetcode.63 不同路径ii</title>
    <link href="https://bishoptylaor.github.io/interview/juan/neet150/2-d-dp/leet-63-unique-paths-ii/"/>
    <id>https://bishoptylaor.github.io/interview/juan/neet150/2-d-dp/leet-63-unique-paths-ii/</id>
    <published>2024-05-20T15:14:50.000Z</published>
    <updated>2024-07-12T14:15:22.484Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://leetcode.cn/problems/unique-paths-ii/description/&quot;&gt;Leetcode.63 不同路径ii&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;一个机器人位于一个 &lt;code&gt;m x n&lt;/code&gt; 网格的左上角 （起始点在下图中标记为 “Start” ）。&lt;/p&gt;
&lt;p&gt;机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为 “Finish”）。&lt;/p&gt;
&lt;p&gt;现在考虑网格中有障碍物。那么从左上角到右下角将会有多少条不同的路径？&lt;/p&gt;
&lt;p&gt;网格中的障碍物和空位置分别用 &lt;code&gt;1&lt;/code&gt; 和 &lt;code&gt;0&lt;/code&gt; 来表示。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例 1：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://assets.leetcode.com/uploads/2020/11/04/robot1.jpg&quot;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：obstacleGrid = [[0,0,0],[0,1,0],[0,0,0]]
输出：2
解释：3x3 网格的正中间有一个障碍物。
从左上角到右下角一共有 `2` 条不同的路径：
1. 向右 -&amp;gt; 向右 -&amp;gt; 向下 -&amp;gt; 向下
2. 向下 -&amp;gt; 向下 -&amp;gt; 向右 -&amp;gt; 向右
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;示例 2：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://assets.leetcode.com/uploads/2020/11/04/robot2.jpg&quot;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：obstacleGrid = [[0,1],[0,0]]
输出：1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;提示：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;m == obstacleGrid.length&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;n == obstacleGrid[i].length&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= m, n &amp;lt;= 100&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;obstacleGrid[i][j]&lt;/code&gt; 为 &lt;code&gt;0&lt;/code&gt; 或 &lt;code&gt;1&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;uniquePathsWithObstacles&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(obstacleGrid [][]&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	n, m := &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(obstacleGrid), &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(obstacleGrid[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	f := &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;([]&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;, m) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; obstacleGrid[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;][&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;] == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		f[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;] = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i := &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; n; i++ &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; j := &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; j &amp;lt; m; j++ &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; obstacleGrid[i][j] == &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				f[j] = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;keyword&quot;&gt;continue&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; j - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &amp;gt;= &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;amp;&amp;amp; obstacleGrid[i][j&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;] == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				f[j] += f[j&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;] &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; f[&lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(f)&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;] &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;</summary>
        
      
    
    
    
    <category term="面试" scheme="https://bishoptylaor.github.io/categories/interview/"/>
    
    <category term="刷题" scheme="https://bishoptylaor.github.io/categories/interview/juan/"/>
    
    <category term="NeetCode150" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/"/>
    
    <category term="2-D DP" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/2-d-dp/"/>
    
    
  </entry>
  
  <entry>
    <title>Leetcode.91 解码方法</title>
    <link href="https://bishoptylaor.github.io/interview/juan/neet150/1-d-dp/leet-91-decode-ways/"/>
    <id>https://bishoptylaor.github.io/interview/juan/neet150/1-d-dp/leet-91-decode-ways/</id>
    <published>2024-05-20T15:14:46.000Z</published>
    <updated>2024-07-12T14:15:22.484Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://leetcode.cn/problems/decode-ways/&quot;&gt;91. 解码方法&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;一条包含字母 &lt;code&gt;A-Z&lt;/code&gt; 的消息通过以下映射进行了 &lt;strong&gt;编码&lt;/strong&gt; ：&lt;/p&gt;
&lt;p&gt;‘A’ -&amp;gt; “1”&lt;br&gt;‘B’ -&amp;gt; “2”&lt;br&gt;…&lt;br&gt;‘Z’ -&amp;gt; “26”&lt;/p&gt;
&lt;p&gt;要 &lt;strong&gt;解码&lt;/strong&gt; 已编码的消息，所有数字必须基于上述映射的方法，反向映射回字母（可能有多种方法）。例如，&lt;code&gt;&amp;quot;11106&amp;quot;&lt;/code&gt; 可以映射为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;quot;AAJF&amp;quot;&lt;/code&gt; ，将消息分组为 &lt;code&gt;(1 1 10 6)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;quot;KJF&amp;quot;&lt;/code&gt; ，将消息分组为 &lt;code&gt;(11 10 6)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;注意，消息不能分组为  &lt;code&gt;(1 11 06)&lt;/code&gt; ，因为 &lt;code&gt;&amp;quot;06&amp;quot;&lt;/code&gt; 不能映射为 &lt;code&gt;&amp;quot;F&amp;quot;&lt;/code&gt; ，这是由于 &lt;code&gt;&amp;quot;6&amp;quot;&lt;/code&gt; 和 &lt;code&gt;&amp;quot;06&amp;quot;&lt;/code&gt; 在映射中并不等价。&lt;/p&gt;
&lt;p&gt;给你一个只含数字的 &lt;strong&gt;非空&lt;/strong&gt; 字符串 &lt;code&gt;s&lt;/code&gt; ，请计算并返回 &lt;strong&gt;解码&lt;/strong&gt; 方法的 &lt;strong&gt;总数&lt;/strong&gt; 。&lt;/p&gt;
&lt;p&gt;题目数据保证答案肯定是一个 &lt;strong&gt;32 位&lt;/strong&gt; 的整数。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例 1：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：s = &amp;quot;12&amp;quot;
输出：2
解释：它可以解码为 &amp;quot;AB&amp;quot;（1 2）或者 &amp;quot;L&amp;quot;（12）。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;示例 2：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：s = &amp;quot;226&amp;quot;
输出：3
解释：它可以解码为 &amp;quot;BZ&amp;quot; (2 26), &amp;quot;VF&amp;quot; (22 6), 或者 &amp;quot;BBF&amp;quot; (2 2 6) 。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;示例 3：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：s = &amp;quot;06&amp;quot;
输出：0
解释：&amp;quot;06&amp;quot; 无法映射到 &amp;quot;F&amp;quot; ，因为存在前导零（&amp;quot;6&amp;quot; 和 &amp;quot;06&amp;quot; 并不等价）。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;提示：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= s.length &amp;lt;= 100&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;s&lt;/code&gt; 只包含数字，并且可能包含前导零。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;numDecodings&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(s &lt;span class=&quot;type&quot;&gt;string&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	n := &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(s)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	f := &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;([]&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;, n+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	f[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;] = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;// 空字符串解码结果&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i:=&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; i&amp;lt;=n; i++ &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// 单字符解码&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; s[i&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;] != &lt;span class=&quot;string&quot;&gt;&amp;#x27;0&amp;#x27;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			f[i] += f[i&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// 双字符解码&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; i&amp;gt;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &amp;amp;&amp;amp; s[i&lt;span class=&quot;number&quot;&gt;-2&lt;/span&gt;] != &lt;span class=&quot;string&quot;&gt;&amp;#x27;0&amp;#x27;&lt;/span&gt; &amp;amp;&amp;amp; (s[i&lt;span class=&quot;number&quot;&gt;-2&lt;/span&gt;]-&lt;span class=&quot;string&quot;&gt;&amp;#x27;0&amp;#x27;&lt;/span&gt;) * &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt; + s[i&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;]-&lt;span class=&quot;string&quot;&gt;&amp;#x27;0&amp;#x27;&lt;/span&gt; &amp;lt;= &lt;span class=&quot;number&quot;&gt;26&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			f[i] += f[i&lt;span class=&quot;number&quot;&gt;-2&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; f[n]&lt;/span&gt;&lt;br&gt;&lt;span</summary>
        
      
    
    
    
    <category term="面试" scheme="https://bishoptylaor.github.io/categories/interview/"/>
    
    <category term="刷题" scheme="https://bishoptylaor.github.io/categories/interview/juan/"/>
    
    <category term="NeetCode150" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/"/>
    
    <category term="1-D DP" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/1-d-dp/"/>
    
    
  </entry>
  
  <entry>
    <title>Leetcode.198 打家劫舍</title>
    <link href="https://bishoptylaor.github.io/interview/juan/neet150/1-d-dp/leet-198-house-robber/"/>
    <id>https://bishoptylaor.github.io/interview/juan/neet150/1-d-dp/leet-198-house-robber/</id>
    <published>2024-05-20T15:14:38.000Z</published>
    <updated>2024-07-12T14:15:22.484Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://leetcode.cn/problems/house-robber/&quot;&gt;198. 打家劫舍&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;你是一个专业的小偷，计划偷窃沿街的房屋。每间房内都藏有一定的现金，影响你偷窃的唯一制约因素就是相邻的房屋装有相互连通的防盗系统，&lt;strong&gt;如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;给定一个代表每个房屋存放金额的非负整数数组，计算你 &lt;strong&gt;不触动警报装置的情况下&lt;/strong&gt; ，一夜之内能够偷窃到的最高金额。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例 1：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：[1,2,3,1]
输出：4
解释：偷窃 1 号房屋 (金额 = 1) ，然后偷窃 3 号房屋 (金额 = 3)。
     偷窃到的最高金额 = 1 + 3 = 4 。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;示例 2：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：[2,7,9,3,1]
输出：12
解释：偷窃 1 号房屋 (金额 = 2), 偷窃 3 号房屋 (金额 = 9)，接着偷窃 5 号房屋 (金额 = 1)。
     偷窃到的最高金额 = 2 + 9 + 1 = 12 。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;提示：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= nums.length &amp;lt;= 100&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;0 &amp;lt;= nums[i] &amp;lt;= 400&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;rob&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(nums []&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(nums) == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(nums) == &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; nums[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	dp := &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;([]&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(nums))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// 前一间是 nums[0]，前两间房是 max（nums[0], nums[1]）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	dp[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;] = nums[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	dp[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;] = max(nums[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;], nums[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i:=&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;; i&amp;lt;&lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(nums); i++ &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// 要么已经偷了 i-2，可以继续偷当前 i&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// 要么已经偷了 i-1，不可以继续偷当前 i&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		dp[i] = max(dp[i&lt;span class=&quot;number&quot;&gt;-2&lt;/span&gt;] + nums[i], dp[i&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; dp[&lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(nums)&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span</summary>
        
      
    
    
    
    <category term="面试" scheme="https://bishoptylaor.github.io/categories/interview/"/>
    
    <category term="刷题" scheme="https://bishoptylaor.github.io/categories/interview/juan/"/>
    
    <category term="NeetCode150" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/"/>
    
    <category term="1-D DP" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/1-d-dp/"/>
    
    
  </entry>
  
  <entry>
    <title>Leetcode.40 组合总和 II</title>
    <link href="https://bishoptylaor.github.io/interview/juan/neet150/backtracking/leet-40-combination-sum%20ii/"/>
    <id>https://bishoptylaor.github.io/interview/juan/neet150/backtracking/leet-40-combination-sum%20ii/</id>
    <published>2024-05-20T15:14:33.000Z</published>
    <updated>2024-07-12T14:15:22.483Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://leetcode.cn/problems/combination-sum-ii/&quot;&gt;40. 组合总和 II&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;给定一个候选人编号的集合 &lt;code&gt;candidates&lt;/code&gt; 和一个目标数 &lt;code&gt;target&lt;/code&gt; ，找出 &lt;code&gt;candidates&lt;/code&gt; 中所有可以使数字和为 &lt;code&gt;target&lt;/code&gt; 的组合。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;candidates&lt;/code&gt; 中的每个数字在每个组合中只能使用 &lt;strong&gt;一次&lt;/strong&gt; 。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意：&lt;/strong&gt;解集不能包含重复的组合。 &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例 1:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入: candidates = `[10,1,2,7,6,1,5]`, target = `8`,
输出:
[
[1,1,6],
[1,2,5],
[1,7],
[2,6]
]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;示例 2:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入: candidates = [2,5,2,1,2], target = 5,
输出:
[
[1,2,2],
[5]
]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;提示:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= candidates.length &amp;lt;= 100&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= candidates[i] &amp;lt;= 50&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= target &amp;lt;= 30&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;思路：&lt;/strong&gt;&lt;br&gt;用 &lt;em&gt;dfs(i,left)&lt;/em&gt; 来回溯，设当前枚举到 *candidates[i]*，剩余要选的元素之和为 &lt;em&gt;left&lt;/em&gt;，按照选或不选分类讨论：&lt;/p&gt;
&lt;p&gt;不选：递归到 *dfs(i+1,left)*。&lt;br&gt;选：递归到 *dfs(i,left−candidates[i])*。注意 &lt;em&gt;i&lt;/em&gt; 不变，表示在下次递归中可以继续选 *candidates[i]*。&lt;br&gt;注：这个思路类似 &lt;strong&gt;完全背包&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;如果递归中发现 &lt;em&gt;left&amp;#x3D;0&lt;/em&gt; 则说明找到了一个合法组合，复制一份 &lt;em&gt;path&lt;/em&gt; 加入答案。&lt;/p&gt;
&lt;p&gt;递归边界：如果 &lt;em&gt;i&amp;#x3D;n&lt;/em&gt;-1 或者 &lt;em&gt;left&amp;lt;0&lt;/em&gt; 则返回。&lt;/p&gt;
&lt;p&gt;递归入口：*dfs(0,target)*。&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;combinationSum&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(candidates []&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;, target &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; [][]&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	path := []&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	ans := [][]&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; dfs &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;, &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	dfs = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(i, left &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; left == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;comment&quot;&gt;// 找到解了，注意需要拷贝结果&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			p1 := &lt;span class=&quot;built_in&quot;&gt;append&lt;/span&gt;([]&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;&amp;#123;&amp;#125;, path...)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			ans = &lt;span class=&quot;built_in&quot;&gt;append&lt;/span&gt;(ans, p1)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; i == &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(candidates) || left &amp;lt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// 不选当前数字，选下一个&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		dfs(i+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, left)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// 选中当前数字，left-candidates[i]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		path = &lt;span class=&quot;built_in&quot;&gt;append&lt;/span&gt;(path, candidates[i])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		dfs(i, left - candidates[i])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		path = path[:&lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(path) - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;] &lt;span class=&quot;comment&quot;&gt;// 恢复现场&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	dfs(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, target)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; ans&lt;/span&gt;&lt;br&gt;&lt;span</summary>
        
      
    
    
    
    <category term="面试" scheme="https://bishoptylaor.github.io/categories/interview/"/>
    
    <category term="刷题" scheme="https://bishoptylaor.github.io/categories/interview/juan/"/>
    
    <category term="NeetCode150" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/"/>
    
    <category term="Backtracking" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/backtracking/"/>
    
    
  </entry>
  
  <entry>
    <title>Leetcode.39 组合总和</title>
    <link href="https://bishoptylaor.github.io/interview/juan/neet150/backtracking/leet-39-combination-sum/"/>
    <id>https://bishoptylaor.github.io/interview/juan/neet150/backtracking/leet-39-combination-sum/</id>
    <published>2024-05-20T15:14:33.000Z</published>
    <updated>2024-07-12T14:15:22.483Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://leetcode.cn/problems/combination-sum/description/&quot;&gt;Leetcode.39 组合总和&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;给你一个 &lt;strong&gt;无重复元素&lt;/strong&gt; 的整数数组 &lt;code&gt;candidates&lt;/code&gt; 和一个目标整数 &lt;code&gt;target&lt;/code&gt; ，找出 &lt;code&gt;candidates&lt;/code&gt; 中可以使数字和为目标数 &lt;code&gt;target&lt;/code&gt; 的 所有 &lt;strong&gt;不同组合&lt;/strong&gt; ，并以列表形式返回。你可以按 &lt;strong&gt;任意顺序&lt;/strong&gt; 返回这些组合。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;candidates&lt;/code&gt; 中的 &lt;strong&gt;同一个&lt;/strong&gt; 数字可以 &lt;strong&gt;无限制重复被选取&lt;/strong&gt; 。如果至少一个数字的被选数量不同，则两种组合是不同的。 &lt;/p&gt;
&lt;p&gt;对于给定的输入，保证和为 &lt;code&gt;target&lt;/code&gt; 的不同组合数少于 &lt;code&gt;150&lt;/code&gt; 个。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例 1：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：candidates = `[2,3,6,7],` target = `7`
输出：[[2,2,3],[7]]
解释：
2 和 3 可以形成一组候选，2 + 2 + 3 = 7 。注意 2 可以使用多次。
7 也是一个候选， 7 = 7 。
仅有这两种组合。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;示例 2：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入: candidates = [2,3,5]`,` target = 8
输出: [[2,2,2,2],[2,3,3],[3,5]]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;示例 3：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入: candidates = `[2],` target = 1
输出: []
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;提示：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= candidates.length &amp;lt;= 30&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;2 &amp;lt;= candidates[i] &amp;lt;= 40&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;candidates&lt;/code&gt; 的所有元素 &lt;strong&gt;互不相同&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= target &amp;lt;= 40&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;思路：&lt;/strong&gt;&lt;br&gt;用 &lt;em&gt;dfs(i,left)&lt;/em&gt; 来回溯，设当前枚举到 *candidates[i]*，剩余要选的元素之和为 &lt;em&gt;left&lt;/em&gt;，按照选或不选分类讨论：&lt;/p&gt;
&lt;p&gt;不选：递归到 *dfs(i+1,left)*。&lt;br&gt;选：递归到 *dfs(i,left−candidates[i])*。注意 &lt;em&gt;i&lt;/em&gt; 不变，表示在下次递归中可以继续选 *candidates[i]*。&lt;br&gt;注：这个思路类似 &lt;strong&gt;完全背包&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;如果递归中发现 &lt;em&gt;left&amp;#x3D;0&lt;/em&gt; 则说明找到了一个合法组合，复制一份 &lt;em&gt;path&lt;/em&gt; 加入答案。&lt;/p&gt;
&lt;p&gt;递归边界：如果 &lt;em&gt;i&amp;#x3D;n&lt;/em&gt;-1 或者 &lt;em&gt;left&amp;lt;0&lt;/em&gt; 则返回。&lt;/p&gt;
&lt;p&gt;递归入口：*dfs(0,target)*。&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;combinationSum&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(candidates []&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;, target &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; [][]&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	path := []&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	ans := [][]&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; dfs &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;, &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	dfs = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(i, left &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; left == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;comment&quot;&gt;// 找到解了，注意需要拷贝结果&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			p1 := &lt;span class=&quot;built_in&quot;&gt;append&lt;/span&gt;([]&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;&amp;#123;&amp;#125;, path...)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			ans = &lt;span class=&quot;built_in&quot;&gt;append&lt;/span&gt;(ans, p1)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; i == &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(candidates) || left &amp;lt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// 不选当前数字，选下一个&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		dfs(i+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, left)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// 选中当前数字，left-candidates[i]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		path = &lt;span class=&quot;built_in&quot;&gt;append&lt;/span&gt;(path, candidates[i])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		dfs(i, left - candidates[i])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		path = path[:&lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(path) - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;] &lt;span class=&quot;comment&quot;&gt;// 恢复现场&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	dfs(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, target)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; ans&lt;/span&gt;&lt;br&gt;&lt;span</summary>
        
      
    
    
    
    <category term="面试" scheme="https://bishoptylaor.github.io/categories/interview/"/>
    
    <category term="刷题" scheme="https://bishoptylaor.github.io/categories/interview/juan/"/>
    
    <category term="NeetCode150" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/"/>
    
    <category term="Backtracking" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/backtracking/"/>
    
    
  </entry>
  
  <entry>
    <title>Leetcode.139 单词拆分</title>
    <link href="https://bishoptylaor.github.io/interview/juan/neet150/1-d-dp/leet-139-word-break/"/>
    <id>https://bishoptylaor.github.io/interview/juan/neet150/1-d-dp/leet-139-word-break/</id>
    <published>2024-05-20T15:14:26.000Z</published>
    <updated>2024-07-12T14:15:22.483Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://leetcode.cn/problems/word-break/&quot;&gt;139. 单词拆分&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;给你一个字符串 &lt;code&gt;s&lt;/code&gt; 和一个字符串列表 &lt;code&gt;wordDict&lt;/code&gt; 作为字典。如果可以利用字典中出现的一个或多个单词拼接出 &lt;code&gt;s&lt;/code&gt; 则返回 &lt;code&gt;true&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意：&lt;/strong&gt;不要求字典中出现的单词全部都使用，并且字典中的单词可以重复使用。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例 1：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入: s = &amp;quot;leetcode&amp;quot;, wordDict = [&amp;quot;leet&amp;quot;, &amp;quot;code&amp;quot;]
输出: true
解释: 返回 true 因为 &amp;quot;leetcode&amp;quot; 可以由 &amp;quot;leet&amp;quot; 和 &amp;quot;code&amp;quot; 拼接成。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;示例 2：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入: s = &amp;quot;applepenapple&amp;quot;, wordDict = [&amp;quot;apple&amp;quot;, &amp;quot;pen&amp;quot;]
输出: true
解释: 返回 true 因为 &amp;quot;applepenapple&amp;quot; 可以由 &amp;quot;apple&amp;quot; &amp;quot;pen&amp;quot; &amp;quot;apple&amp;quot; 拼接成。
     注意，你可以重复使用字典中的单词。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;示例 3：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入: s = &amp;quot;catsandog&amp;quot;, wordDict = [&amp;quot;cats&amp;quot;, &amp;quot;dog&amp;quot;, &amp;quot;sand&amp;quot;, &amp;quot;and&amp;quot;, &amp;quot;cat&amp;quot;]
输出: false
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;提示：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= s.length &amp;lt;= 300&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= wordDict.length &amp;lt;= 1000&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= wordDict[i].length &amp;lt;= 20&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;s&lt;/code&gt; 和 &lt;code&gt;wordDict[i]&lt;/code&gt; 仅由小写英文字母组成&lt;/li&gt;
&lt;li&gt;&lt;code&gt;wordDict&lt;/code&gt; 中的所有字符串 &lt;strong&gt;互不相同&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;wordBreak&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(s &lt;span class=&quot;type&quot;&gt;string&lt;/span&gt;, wordDict []&lt;span class=&quot;type&quot;&gt;string&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;bool&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	wordMap := &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;map&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;string&lt;/span&gt;]&lt;span class=&quot;type&quot;&gt;bool&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; _, w := &lt;span class=&quot;keyword&quot;&gt;range&lt;/span&gt; wordDict &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		wordMap[w] = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	dp := &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;([]&lt;span class=&quot;type&quot;&gt;bool&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(s) + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	dp[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;] = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i:=&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; i&amp;lt;=&lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(s); i++ &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// 遍历某个字符之前的区间是否有在字典中的，发现的话标记边界。再从下个字符开始找&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; j:=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; j&amp;lt;i; j++ &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; dp[j] &amp;amp;&amp;amp; wordMap[s[j:i]] &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				dp[i] = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; dp[&lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(s)]&lt;/span&gt;&lt;br&gt;&lt;span</summary>
        
      
    
    
    
    <category term="面试" scheme="https://bishoptylaor.github.io/categories/interview/"/>
    
    <category term="刷题" scheme="https://bishoptylaor.github.io/categories/interview/juan/"/>
    
    <category term="NeetCode150" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/"/>
    
    <category term="1-D DP" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/1-d-dp/"/>
    
    
  </entry>
  
  <entry>
    <title>Leetcode.1143 最长公共子序列</title>
    <link href="https://bishoptylaor.github.io/interview/juan/neet150/2-d-dp/leet-1143-longest-common-subsequence/"/>
    <id>https://bishoptylaor.github.io/interview/juan/neet150/2-d-dp/leet-1143-longest-common-subsequence/</id>
    <published>2024-05-20T15:14:20.000Z</published>
    <updated>2024-07-12T14:15:22.484Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://leetcode.cn/problems/longest-common-subsequence/&quot;&gt;1143. 最长公共子序列&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;给定两个字符串 &lt;code&gt;text1&lt;/code&gt; 和 &lt;code&gt;text2&lt;/code&gt;，返回这两个字符串的最长 &lt;strong&gt;公共子序列&lt;/strong&gt; 的长度。如果不存在 &lt;strong&gt;公共子序列&lt;/strong&gt; ，返回 &lt;code&gt;0&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;一个字符串的 &lt;strong&gt;子序列&lt;/strong&gt; 是指这样一个新的字符串：它是由原字符串在不改变字符的相对顺序的情况下删除某些字符（也可以不删除任何字符）后组成的新字符串。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;例如，&lt;code&gt;&amp;quot;ace&amp;quot;&lt;/code&gt; 是 &lt;code&gt;&amp;quot;abcde&amp;quot;&lt;/code&gt; 的子序列，但 &lt;code&gt;&amp;quot;aec&amp;quot;&lt;/code&gt; 不是 &lt;code&gt;&amp;quot;abcde&amp;quot;&lt;/code&gt; 的子序列。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;两个字符串的 &lt;strong&gt;公共子序列&lt;/strong&gt; 是这两个字符串所共同拥有的子序列。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例 1：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：text1 = &amp;quot;abcde&amp;quot;, text2 = &amp;quot;ace&amp;quot; 
输出：3  
解释：最长公共子序列是 &amp;quot;ace&amp;quot; ，它的长度为 3 。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;示例 2：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：text1 = &amp;quot;abc&amp;quot;, text2 = &amp;quot;abc&amp;quot;
输出：3
解释：最长公共子序列是 &amp;quot;abc&amp;quot; ，它的长度为 3 。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;示例 3：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：text1 = &amp;quot;abc&amp;quot;, text2 = &amp;quot;def&amp;quot;
输出：0
解释：两个字符串没有公共子序列，返回 0 。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;提示：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= text1.length, text2.length &amp;lt;= 1000&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;text1&lt;/code&gt; 和 &lt;code&gt;text2&lt;/code&gt; 仅由小写英文字符组成。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;简单讲是轮着比一圈，但是有一个向外扩散的过程&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;longestCommonSubsequence&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(text1 &lt;span class=&quot;type&quot;&gt;string&lt;/span&gt;, text2 &lt;span class=&quot;type&quot;&gt;string&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	m, n := &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(text1), &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(text2)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	dp := &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;([][]&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;, m+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i:= &lt;span class=&quot;keyword&quot;&gt;range&lt;/span&gt; dp &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		dp[i] = &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;([]&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;, n+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i, c1 := &lt;span class=&quot;keyword&quot;&gt;range&lt;/span&gt; text1 &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; j, c2 := &lt;span class=&quot;keyword&quot;&gt;range&lt;/span&gt; text2 &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; c1 == c2 &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				dp[i+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;][j+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;] = dp[i][j] + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				dp[i+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;][j+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;] = max(dp[i][j+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;], dp[i+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;][j])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; dp[m][n]&lt;/span&gt;&lt;br&gt;&lt;span</summary>
        
      
    
    
    
    <category term="面试" scheme="https://bishoptylaor.github.io/categories/interview/"/>
    
    <category term="刷题" scheme="https://bishoptylaor.github.io/categories/interview/juan/"/>
    
    <category term="NeetCode150" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/"/>
    
    <category term="2-D DP" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/2-d-dp/"/>
    
    
  </entry>
  
  <entry>
    <title>Leetcode.300. 最长递增子序列</title>
    <link href="https://bishoptylaor.github.io/interview/juan/neet150/1-d-dp/leet-300-longest-increasing-subsequence/"/>
    <id>https://bishoptylaor.github.io/interview/juan/neet150/1-d-dp/leet-300-longest-increasing-subsequence/</id>
    <published>2024-05-20T15:14:15.000Z</published>
    <updated>2024-07-12T14:15:22.483Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://leetcode.cn/problems/longest-increasing-subsequence/&quot;&gt;Leetcode.300. 最长递增子序列&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;给你一个整数数组 &lt;code&gt;nums&lt;/code&gt; ，找到其中最长严格递增子序列的长度。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;子序列&lt;/strong&gt; 是由数组派生而来的序列，删除（或不删除）数组中的元素而不改变其余元素的顺序。例如，&lt;code&gt;[3,6,2,7]&lt;/code&gt; 是数组 &lt;code&gt;[0,3,1,6,2,2,7]&lt;/code&gt; 的子序列。&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例 1：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：nums = [10,9,2,5,3,7,101,18]
输出：4
解释：最长递增子序列是 [2,3,7,101]，因此长度为 4 。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;示例 2：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：nums = [0,1,0,3,2,3]
输出：4
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;示例 3：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：nums = [7,7,7,7,7,7,7]
输出：1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;提示：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= nums.length &amp;lt;= 2500&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-104 &amp;lt;= nums[i] &amp;lt;= 104&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;进阶：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;你能将算法的时间复杂度降低到 &lt;code&gt;O(n log(n))&lt;/code&gt; 吗?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;详细解析：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://writings.sh/post/longest-increasing-subsequence-revisited&quot;&gt;最长递增子序列（nlogn 二分法、DAG 模型 和 延伸问题）&lt;/a&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;lengthOfLIS&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(nums []&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; dp []&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i:=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i&amp;lt; &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(nums); i++ &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// dp 为 0 或者 当前值大于 dp 的最后一个元素，入 dp&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(dp) == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; || nums[i] &amp;gt; dp[&lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(dp)&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;] &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			dp = &lt;span class=&quot;built_in&quot;&gt;append&lt;/span&gt;(dp, nums[i])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;comment&quot;&gt;// 二分查找 dp 中第一个大于 nums[i] 的数，更换之&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			l, r := &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(dp)&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			tar := r&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; l&amp;lt;=r &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			mid := (l+r) / &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; dp[mid] &amp;gt;= nums[i] &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				tar = mid&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				r = mid&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				l = mid+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		dp[tar] = nums[i]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	fmt.Print(dp)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(dp)&lt;/span&gt;&lt;br&gt;&lt;span</summary>
        
      
    
    
    
    <category term="面试" scheme="https://bishoptylaor.github.io/categories/interview/"/>
    
    <category term="刷题" scheme="https://bishoptylaor.github.io/categories/interview/juan/"/>
    
    <category term="NeetCode150" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/"/>
    
    <category term="1-D DP" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/1-d-dp/"/>
    
    
  </entry>
  
  <entry>
    <title>Leetcode.70 爬楼梯</title>
    <link href="https://bishoptylaor.github.io/interview/juan/neet150/1-d-dp/leet-70-climbing-stairs/"/>
    <id>https://bishoptylaor.github.io/interview/juan/neet150/1-d-dp/leet-70-climbing-stairs/</id>
    <published>2024-05-20T15:14:02.000Z</published>
    <updated>2024-07-12T14:15:22.484Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://leetcode.cn/problems/climbing-stairs/&quot;&gt;70. 爬楼梯&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;假设你正在爬楼梯。需要 &lt;code&gt;n&lt;/code&gt; 阶你才能到达楼顶。&lt;/p&gt;
&lt;p&gt;每次你可以爬 &lt;code&gt;1&lt;/code&gt; 或 &lt;code&gt;2&lt;/code&gt; 个台阶。你有多少种不同的方法可以爬到楼顶呢？&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例 1：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：n = 2
输出：2
解释：有两种方法可以爬到楼顶。
1. 1 阶 + 1 阶
2. 2 阶
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;示例 2：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：n = 3
输出：3
解释：有三种方法可以爬到楼顶。
1. 1 阶 + 1 阶 + 1 阶
2. 1 阶 + 2 阶
3. 2 阶 + 1 阶
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;提示：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= n &amp;lt;= 45&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;第 n 阶是 第 n-1 阶 + 1步；或者第 n-2 阶 + 2步。其中第 n-2 阶 + 1步 + 1步 这个被包含在了 第 n-1 阶 + 1 步 中&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;climbStairs&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(n &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	choice := []&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;&amp;#123;&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&amp;#125; &lt;span class=&quot;comment&quot;&gt;// 对应0阶1阶和2阶&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; n&amp;lt;&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; choice[n]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i:=&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;; i&amp;lt;=n; i++ &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		cur := choice[i&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;] + choice[i&lt;span class=&quot;number&quot;&gt;-2&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		choice = &lt;span class=&quot;built_in&quot;&gt;append&lt;/span&gt;(choice, cur)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; choice[n]&lt;/span&gt;&lt;br&gt;&lt;span</summary>
        
      
    
    
    
    <category term="面试" scheme="https://bishoptylaor.github.io/categories/interview/"/>
    
    <category term="刷题" scheme="https://bishoptylaor.github.io/categories/interview/juan/"/>
    
    <category term="NeetCode150" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/"/>
    
    <category term="1-D DP" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/1-d-dp/"/>
    
    
  </entry>
  
  <entry>
    <title>leet190</title>
    <link href="https://bishoptylaor.github.io/interview/juan/neet150/bit/leet190/"/>
    <id>https://bishoptylaor.github.io/interview/juan/neet150/bit/leet190/</id>
    <published>2024-05-20T15:12:59.000Z</published>
    <updated>2024-07-12T14:15:22.484Z</updated>
    
    
    
    
    <category term="面试" scheme="https://bishoptylaor.github.io/categories/interview/"/>
    
    <category term="刷题" scheme="https://bishoptylaor.github.io/categories/interview/juan/"/>
    
    <category term="NeetCode150" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/"/>
    
    <category term="Bit Manipulation" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/bit/"/>
    
    
  </entry>
  
  <entry>
    <title>Leetcode.268 丢失的数字</title>
    <link href="https://bishoptylaor.github.io/interview/juan/neet150/bit/leet-268-missing-number/"/>
    <id>https://bishoptylaor.github.io/interview/juan/neet150/bit/leet-268-missing-number/</id>
    <published>2024-05-20T15:12:54.000Z</published>
    <updated>2024-07-12T14:15:22.484Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://leetcode.cn/problems/missing-number/&quot;&gt;Leetcode.268 丢失的数字&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;给定一个包含 &lt;code&gt;[0, n]&lt;/code&gt; 中 &lt;code&gt;n&lt;/code&gt; 个数的数组 &lt;code&gt;nums&lt;/code&gt; ，找出 &lt;code&gt;[0, n]&lt;/code&gt; 这个范围内没有出现在数组中的那个数。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例 1：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：nums = [3,0,1]
输出：2
解释：n = 3，因为有 3 个数字，所以所有的数字都在范围 [0,3] 内。2 是丢失的数字，因为它没有出现在 nums 中。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;示例 2：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;**输入：nums = [0,1]
**输出：2
**解释：n = 2，因为有 2 个数字，所以所有的数字都在范围 [0,2] 内。2 是丢失的数字，因为它没有出现在 nums 中。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;示例 3：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;**输入：nums = [9,6,4,2,3,5,7,0,1]
**输出：8
**解释：n = 9，因为有 9 个数字，所以所有的数字都在范围 [0,9] 内。8 是丢失的数字，因为它没有出现在 nums 中。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;示例 4：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;**输入：nums = [0]
**输出：1
**解释：n = 1，因为有 1 个数字，所以所有的数字都在范围 [0,1] 内。1 是丢失的数字，因为它没有出现在 nums 中。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;提示：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;n == nums.length&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= n &amp;lt;= 104&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;0 &amp;lt;= nums[i] &amp;lt;= n&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nums&lt;/code&gt; 中的所有数字都 &lt;strong&gt;独一无二&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 求和取差值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;missingNumber&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(nums []&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; total &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; sum &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i:=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i&amp;lt;=&lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(nums); i++ &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		total += i&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; i &amp;lt; &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(nums) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			sum += nums[i]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; total - sum&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 异或思路&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// xor 将 nums 中元素异或一遍，然后再异或一遍 0-n，由异或的特性可知，出现两次的数据会消失，最终留下的就是未出现的那个数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;missingNumber&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(nums []&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; xor &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i, n := &lt;span class=&quot;keyword&quot;&gt;range&lt;/span&gt; nums &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		xor ^= i&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		xor ^= n&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; xor ^ &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(nums)&lt;/span&gt;&lt;br&gt;&lt;span</summary>
        
      
    
    
    
    <category term="面试" scheme="https://bishoptylaor.github.io/categories/interview/"/>
    
    <category term="刷题" scheme="https://bishoptylaor.github.io/categories/interview/juan/"/>
    
    <category term="NeetCode150" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/"/>
    
    <category term="Bit Manipulation" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/bit/"/>
    
    
  </entry>
  
  <entry>
    <title>Leetcode.338 比特位计数</title>
    <link href="https://bishoptylaor.github.io/interview/juan/neet150/bit/leet-338-counting-bits/"/>
    <id>https://bishoptylaor.github.io/interview/juan/neet150/bit/leet-338-counting-bits/</id>
    <published>2024-05-20T15:12:47.000Z</published>
    <updated>2024-07-12T14:15:22.484Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://leetcode.cn/problems/counting-bits/&quot;&gt;338. 比特位计数&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;给你一个整数 &lt;code&gt;n&lt;/code&gt; ，对于 &lt;code&gt;0 &amp;lt;= i &amp;lt;= n&lt;/code&gt; 中的每个 &lt;code&gt;i&lt;/code&gt; ，计算其二进制表示中 &lt;strong&gt;&lt;code&gt;1&lt;/code&gt; 的个数&lt;/strong&gt; ，返回一个长度为 &lt;code&gt;n + 1&lt;/code&gt; 的数组 &lt;code&gt;ans&lt;/code&gt; 作为答案。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例 1：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：n = 2
输出：[0,1,1]
解释：
0 --&amp;gt; 0
1 --&amp;gt; 1
2 --&amp;gt; 10
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;示例 2：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：n = 5
输出：[0,1,1,2,1,2]
解释：
0 --&amp;gt; 0
1 --&amp;gt; 1
2 --&amp;gt; 10
3 --&amp;gt; 11
4 --&amp;gt; 100
5 --&amp;gt; 101
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;提示：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;0 &amp;lt;= n &amp;lt;= 105&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;进阶：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;很容易就能实现时间复杂度为 &lt;code&gt;O(n log n)&lt;/code&gt; 的解决方案，你可以在线性时间复杂度 &lt;code&gt;O(n)&lt;/code&gt; 内用一趟扫描解决此问题吗？&lt;/li&gt;
&lt;li&gt;你能不使用任何内置函数解决此问题吗？（如，C++ 中的 &lt;code&gt;__builtin_popcount&lt;/code&gt; ）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;根据二进制特性，前面的位数和  i&amp;#x2F;2 一致，最后新增的一位是 i%2&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;countBits&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(n &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; []&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; n == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		retirn []&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;&amp;#123;&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	ans := []&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;&amp;#123;&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i:=&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;; i&amp;lt;=n; i++ &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		t1, t2 := i/&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, i%&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		ans = &lt;span class=&quot;built_in&quot;&gt;append&lt;/span&gt;(ans, ans[t1] + t2)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; ans&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;


&lt;h4 id=&quot;Brian-Kernighan-算法&quot;&gt;&lt;a href=&quot;#Brian-Kernighan-算法&quot; class=&quot;headerlink&quot; title=&quot;Brian Kernighan 算法&quot;&gt;&lt;/a&gt;Brian Kernighan 算法&lt;/h4&gt;&lt;p&gt;Brian Kernighan 算法的原理是：对于任意整数 xxx，令 x&amp;#x3D;x &amp;amp; (x−1)x&amp;#x3D;x&lt;del&gt;&amp;amp;&lt;/del&gt;(x-1)x&amp;#x3D;x &amp;amp; (x−1)，该运算将 xxx 的二进制表示的最后一个 111 变成 000。因此，对 xxx 重复该操作，直到 xxx 变成 000，则操作次数即为 xxx 的「一比特数」。&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onesCount&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(x &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; (ones &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;) &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; ; x &amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; x &amp;amp;= x - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		ones++ &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;countBits&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(n &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; []&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// 0-n 共 n+1 个数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	bits := &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;([]&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;, n+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i := &lt;span class=&quot;keyword&quot;&gt;range&lt;/span&gt; bits &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		bits[i] = onesCount(i) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; bits &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;</summary>
        
      
    
    
    
    <category term="面试" scheme="https://bishoptylaor.github.io/categories/interview/"/>
    
    <category term="刷题" scheme="https://bishoptylaor.github.io/categories/interview/juan/"/>
    
    <category term="NeetCode150" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/"/>
    
    <category term="Bit Manipulation" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/bit/"/>
    
    
  </entry>
  
  <entry>
    <title>Leetcode.191 位1的个数</title>
    <link href="https://bishoptylaor.github.io/interview/juan/neet150/bit/leet-191-number-of-1-bits/"/>
    <id>https://bishoptylaor.github.io/interview/juan/neet150/bit/leet-191-number-of-1-bits/</id>
    <published>2024-05-20T15:12:41.000Z</published>
    <updated>2024-07-12T14:15:22.484Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://leetcode.cn/problems/number-of-1-bits/description/&quot;&gt;Leetcode.191 位1的个数&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;编写一个函数，输入是一个无符号整数（以二进制串的形式），返回其二进制表达式中 设置位 的个数（也被称为&lt;a href=&quot;https://baike.baidu.com/item/%E6%B1%89%E6%98%8E%E9%87%8D%E9%87%8F&quot;&gt;汉明重量&lt;/a&gt;）。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例 1：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：n = 11
输出：3
解释：输入的二进制串 `1011 中，共有 3 个设置位。`
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;示例 2：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：n = 128
输出：1
解释：输入的二进制串 10000000 中，共有 1 个设置位。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;示例 3：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：n = 2147483645
输出：30
解释：输入的二进制串 11111111111111111111111111111101 中，共有 30 个设置位。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;提示：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= n &amp;lt;= 231 - 1&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;hammingWeight&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(n &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; ones &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i:=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i&amp;lt;&lt;span class=&quot;number&quot;&gt;32&lt;/span&gt;; i++ &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&amp;lt;&amp;lt;i &amp;amp; num &amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			ones += &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; ones&lt;/span&gt;&lt;br&gt;&lt;span</summary>
        
      
    
    
    
    <category term="面试" scheme="https://bishoptylaor.github.io/categories/interview/"/>
    
    <category term="刷题" scheme="https://bishoptylaor.github.io/categories/interview/juan/"/>
    
    <category term="NeetCode150" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/"/>
    
    <category term="Bit Manipulation" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/bit/"/>
    
    
  </entry>
  
  <entry>
    <title>math</title>
    <link href="https://bishoptylaor.github.io/uncategorized/math/"/>
    <id>https://bishoptylaor.github.io/uncategorized/math/</id>
    <published>2024-05-20T09:43:16.000Z</published>
    <updated>2024-07-24T17:05:07.469Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/jzj_c_love/article/details/122279703&quot;&gt;https://blog.csdn.net/jzj_c_love/article/details/122279703&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;基本格式&quot;&gt;&lt;a href=&quot;#基本格式&quot; class=&quot;headerlink&quot; title=&quot;基本格式&quot;&gt;&lt;/a&gt;基本格式&lt;/h1&gt;&lt;h2 id=&quot;上下标&quot;&gt;&lt;a href=&quot;#上下标&quot; class=&quot;headerlink&quot; title=&quot;上下标&quot;&gt;&lt;/a&gt;上下标&lt;/h2&gt;&lt;p&gt;$$&lt;br&gt;A_1^2&lt;br&gt;&#92;&lt;br&gt;B_{12}&lt;br&gt;&#92;&lt;br&gt;2^{x^2+y}&lt;br&gt;$$&lt;/p&gt;
&lt;figure class=&quot;highlight text&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$$&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;A_1^2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;&#92;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;B_&amp;#123;12&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;&#92;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2^&amp;#123;x^2+y&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$$&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&quot;分数&quot;&gt;&lt;a href=&quot;#分数&quot; class=&quot;headerlink&quot; title=&quot;分数&quot;&gt;&lt;/a&gt;分数&lt;/h2&gt;&lt;p&gt;$$&lt;br&gt;&#92;frac{x}{1+x^2}&lt;br&gt;&#92;&lt;br&gt;&#92;frac{&#92;frac{1}{2}+x}{y}&lt;br&gt;&#92;&lt;br&gt;&#92;tfrac{a}{b}&lt;br&gt;&#92;frac{a}{b}&lt;br&gt;$$&lt;/p&gt;
&lt;figure class=&quot;highlight text&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$$&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;frac&amp;#123;x&amp;#125;&amp;#123;1+x^2&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;&#92;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;frac&amp;#123;&#92;frac&amp;#123;1&amp;#125;&amp;#123;2&amp;#125;+x&amp;#125;&amp;#123;y&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;&#92;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;tfrac&amp;#123;a&amp;#125;&amp;#123;b&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;frac&amp;#123;a&amp;#125;&amp;#123;b&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$$&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&quot;开根&quot;&gt;&lt;a href=&quot;#开根&quot; class=&quot;headerlink&quot; title=&quot;开根&quot;&gt;&lt;/a&gt;开根&lt;/h2&gt;&lt;p&gt;$$&lt;br&gt;&#92;sqrt{x}&lt;br&gt;&#92;sqrt[3]{x}&lt;br&gt;$$&lt;/p&gt;
&lt;figure class=&quot;highlight text&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$$&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;sqrt&amp;#123;x&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;sqrt[3]&amp;#123;x&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$$&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&quot;组合数&quot;&gt;&lt;a href=&quot;#组合数&quot; class=&quot;headerlink&quot; title=&quot;组合数&quot;&gt;&lt;/a&gt;组合数&lt;/h2&gt;&lt;p&gt;$$&lt;br&gt;&#92;binom{n}{k}&lt;br&gt;&#92;tbinom{n}{k}&lt;br&gt;$$&lt;/p&gt;
&lt;figure class=&quot;highlight text&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&#92;binom&amp;#123;n&amp;#125;&amp;#123;k&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;tbinom&amp;#123;n&amp;#125;&amp;#123;k&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&quot;导数&quot;&gt;&lt;a href=&quot;#导数&quot; class=&quot;headerlink&quot; title=&quot;导数&quot;&gt;&lt;/a&gt;导数&lt;/h2&gt;&lt;p&gt;$$&lt;br&gt;a′a′′a′&lt;br&gt;$$&lt;/p&gt;
&lt;figure class=&quot;highlight text&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$$&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;𝑎′𝑎″𝑎′&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$$&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&quot;偏微分&quot;&gt;&lt;a href=&quot;#偏微分&quot; class=&quot;headerlink&quot; title=&quot;偏微分&quot;&gt;&lt;/a&gt;偏微分&lt;/h2&gt;&lt;p&gt;$$&lt;br&gt;∂∇∂∇&lt;br&gt;$$&lt;/p&gt;
&lt;figure class=&quot;highlight text&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$$&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;a&amp;#x27;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;a&amp;#x27;&amp;#x27;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;a^&amp;#123;&#92;prime&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$$&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&quot;取模&quot;&gt;&lt;a href=&quot;#取模&quot; class=&quot;headerlink&quot; title=&quot;取模&quot;&gt;&lt;/a&gt;取模&lt;/h2&gt;&lt;p&gt;$$&lt;br&gt;x(moda)2modx𝑥(mod𝑎)2mod𝑥&lt;br&gt;$$&lt;/p&gt;
&lt;figure class=&quot;highlight text&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$$&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;x &#92;pmod a&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;&#92;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&#92;mod&amp;#123;x&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$$&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&quot;积分&quot;&gt;&lt;a href=&quot;#积分&quot; class=&quot;headerlink&quot; title=&quot;积分&quot;&gt;&lt;/a&gt;积分&lt;/h2&gt;&lt;p&gt;$$&lt;br&gt;∫211∫2∮∫∬∯∭∰∫12∫21∮⁡∫∬∯⁡∭∰&lt;br&gt;$$&lt;/p&gt;
&lt;figure class=&quot;highlight fsharp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;operator&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;$&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;&lt;span class=&quot;keyword&quot;&gt;int_&lt;/span&gt;&amp;#123;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&amp;#125;&lt;span class=&quot;operator&quot;&gt;^&lt;/span&gt;&amp;#123;&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;&lt;span class=&quot;keyword&quot;&gt;intop_&lt;/span&gt;&amp;#123;&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&amp;#125;&lt;span class=&quot;operator&quot;&gt;^&lt;/span&gt;&amp;#123;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;oint&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;smallint&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;&#92;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;iint&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;oiint&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;iiint&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;oiiint&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&quot;累加-x2F-累乘-x2F-极限&quot;&gt;&lt;a href=&quot;#累加-x2F-累乘-x2F-极限&quot; class=&quot;headerlink&quot; title=&quot;累加&amp;#x2F;累乘&amp;#x2F;极限&quot;&gt;&lt;/a&gt;累加&amp;#x2F;累乘&amp;#x2F;极限&lt;/h2&gt;&lt;p&gt;k∑i&amp;#x3D;1n∑i&amp;#x3D;1∑ni&amp;#x3D;1k∏i&amp;#x3D;1n∏i&amp;#x3D;1∏ni&amp;#x3D;1limk→∞limk→∞limk→∞∑𝑖&amp;#x3D;1𝑘∑𝑖&amp;#x3D;1𝑛∑𝑖&amp;#x3D;1𝑛∏𝑖&amp;#x3D;1𝑘∏𝑖&amp;#x3D;1𝑛∏𝑖&amp;#x3D;1𝑛lim𝑘→∞lim𝑘→∞lim𝑘→∞&lt;/p&gt;
&lt;figure class=&quot;highlight fsharp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&#92;&lt;span class=&quot;keyword&quot;&gt;sum_&lt;/span&gt;&amp;#123;i&lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&amp;#125;&lt;span class=&quot;operator&quot;&gt;^&lt;/span&gt;&amp;#123;k&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;displaystyle&#92;&lt;span class=&quot;keyword&quot;&gt;sum_&lt;/span&gt;&amp;#123;i&lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&amp;#125;&lt;span class=&quot;symbol&quot;&gt;^n&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;textstyle&#92;&lt;span class=&quot;keyword&quot;&gt;sum_&lt;/span&gt;&amp;#123;i&lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&amp;#125;&lt;span class=&quot;symbol&quot;&gt;^n&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;&#92;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;&lt;span class=&quot;keyword&quot;&gt;prod_&lt;/span&gt;&amp;#123;i&lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&amp;#125;&lt;span class=&quot;operator&quot;&gt;^&lt;/span&gt;&amp;#123;k&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;displaystyle&#92;&lt;span class=&quot;keyword&quot;&gt;prod_&lt;/span&gt;&amp;#123;i&lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&amp;#125;&lt;span class=&quot;symbol&quot;&gt;^n&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;textstyle&#92;&lt;span class=&quot;keyword&quot;&gt;prod_&lt;/span&gt;&amp;#123;i&lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&amp;#125;&lt;span class=&quot;symbol&quot;&gt;^n&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;&#92;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;&lt;span class=&quot;keyword&quot;&gt;lim_&lt;/span&gt;&amp;#123;k &#92;&lt;span class=&quot;keyword&quot;&gt;to&lt;/span&gt; &#92;infty&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;lim&#92;&lt;span class=&quot;keyword&quot;&gt;limits_&lt;/span&gt;&amp;#123;k &#92;&lt;span class=&quot;keyword&quot;&gt;to&lt;/span&gt; &#92;infty&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;lim&#92;&lt;span class=&quot;keyword&quot;&gt;nolimits_&lt;/span&gt;&amp;#123;k &#92;&lt;span class=&quot;keyword&quot;&gt;to&lt;/span&gt; &#92;infty&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h1 id=&quot;修饰符号&quot;&gt;&lt;a href=&quot;#修饰符号&quot; class=&quot;headerlink&quot; title=&quot;修饰符号&quot;&gt;&lt;/a&gt;修饰符号&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;简单的帽子&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;^θˆAB¯y¯¯¯¯¯¯¯¯AB&lt;del&gt;a˜ac¯a´aˇa&amp;#96;a˙a¨a𝜃^𝐴𝐵^𝑦¯𝐴𝐵¯𝑎&lt;/del&gt;𝑎𝑐~𝑎¯𝑎´𝑎ˇ𝑎&amp;#96;𝑎˙𝑎¨&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&#92;hat&amp;#123;&#92;theta&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;widehat&amp;#123;AB&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;&#92;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;bar&amp;#123;y&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;overline&amp;#123;AB&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;&#92;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;tilde&amp;#123;a&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;widetilde&amp;#123;ac&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;&#92;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;bar&amp;#123;a&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;acute&amp;#123;a&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;check&amp;#123;a&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;grave&amp;#123;a&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;&#92;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;dot&amp;#123;a&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;ddot&amp;#123;a&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;帽子和袜子&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;←−−AB−−→AB←→ABAB←−−AB−−→AB←→ABAB¯¯¯¯¯¯¯¯ABAB––––𝐴𝐵←𝐴𝐵→𝐴𝐵↔𝐴𝐵←𝐴𝐵→𝐴𝐵↔𝐴𝐵⏞𝐴𝐵⏟𝐴𝐵¯𝐴𝐵_&lt;/p&gt;
&lt;figure class=&quot;highlight markdown&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&#92;overleftarrow&amp;#123;AB&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;overrightarrow&amp;#123;AB&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;overleftrightarrow&amp;#123;AB&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;&#92;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;underleftarrow&amp;#123;AB&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;underrightarrow&amp;#123;AB&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;underleftrightarrow&amp;#123;AB&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;&#92;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;overbrace&amp;#123;AB&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;underbrace&amp;#123;AB&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;&#92;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;overline&amp;#123;AB&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;underline&amp;#123;AB&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;盖子和盒子&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;notea+b+ca+b+cnoteπ&amp;#x3D;3.14𝑎+𝑏+𝑐⏞note𝑎+𝑏+𝑐⏟note𝜋&amp;#x3D;3.14&lt;/p&gt;
&lt;figure class=&quot;highlight fsharp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&#92;&lt;span class=&quot;keyword&quot;&gt;overbrace&lt;/span&gt;&amp;#123;a&lt;span class=&quot;operator&quot;&gt;+&lt;/span&gt;b&lt;span class=&quot;operator&quot;&gt;+&lt;/span&gt;c&amp;#125;&lt;span class=&quot;operator&quot;&gt;^&lt;/span&gt;&amp;#123;&#92;&lt;span class=&quot;keyword&quot;&gt;text&lt;/span&gt;&amp;#123;note&amp;#125;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;&#92;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;&lt;span class=&quot;keyword&quot;&gt;underbrace&lt;/span&gt;&amp;#123;a&lt;span class=&quot;operator&quot;&gt;+&lt;/span&gt;b&lt;span class=&quot;operator&quot;&gt;+&lt;/span&gt;c&amp;#125;&lt;span class=&quot;keyword&quot;&gt;_&lt;/span&gt;&amp;#123;&#92;&lt;span class=&quot;keyword&quot;&gt;text&lt;/span&gt;&amp;#123;note&amp;#125;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;&#92;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;&lt;span class=&quot;keyword&quot;&gt;boxed&lt;/span&gt;&amp;#123;&#92;pi&lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;3.14&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h1 id=&quot;各种括号&quot;&gt;&lt;a href=&quot;#各种括号&quot; class=&quot;headerlink&quot; title=&quot;各种括号&quot;&gt;&lt;/a&gt;各种括号&lt;/h1&gt;&lt;p&gt;((((((((((&lt;/p&gt;
&lt;figure class=&quot;highlight mipsasm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;&lt;span class=&quot;keyword&quot;&gt;big(&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;&lt;/span&gt;&#92;&lt;span class=&quot;keyword&quot;&gt;Big(&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;&lt;/span&gt;&#92;&lt;span class=&quot;keyword&quot;&gt;bigg(&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;&lt;/span&gt;&#92;&lt;span class=&quot;keyword&quot;&gt;Bigg(&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;[]&amp;lt;&amp;gt;|−2|{}[]&amp;lt;&amp;gt;|−2|{}&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|-2|&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;&amp;#123;&#92;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;⟮x⟯∥a∥⌈2.6⌉⌊1.2⌋⟮𝑥⟯‖𝑎‖⌈2.6⌉⌊1.2⌋&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&#92;lgroup &lt;span class=&quot;attribute&quot;&gt;x&lt;/span&gt; &#92;rgroup&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;lVert &lt;span class=&quot;selector-tag&quot;&gt;a&lt;/span&gt; &#92;rVert&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;lceil &lt;span class=&quot;number&quot;&gt;2.6&lt;/span&gt; &#92;rceil&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;lfloor &lt;span class=&quot;number&quot;&gt;1.2&lt;/span&gt; &#92;rfloor&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;┌┐└┘⌜⌝⌞⌟&lt;/p&gt;
&lt;figure class=&quot;highlight mipsasm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&#92;ulcorner&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;urcorner&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;&lt;span class=&quot;keyword&quot;&gt;llcorner&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;&lt;/span&gt;&#92;lrcorner&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h1 id=&quot;希腊字母&quot;&gt;&lt;a href=&quot;#希腊字母&quot; class=&quot;headerlink&quot; title=&quot;希腊字母&quot;&gt;&lt;/a&gt;希腊字母&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/2068113/202008/2068113-20200816212452725-1705310605.jpg&quot; alt=&quot;希腊字母&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;算术运算符&quot;&gt;&lt;a href=&quot;#算术运算符&quot; class=&quot;headerlink&quot; title=&quot;算术运算符&quot;&gt;&lt;/a&gt;算术运算符&lt;/h1&gt;&lt;p&gt;+−×&amp;#x2F;÷⋅#%+−×&amp;#x2F;÷⋅#%&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;+&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;&lt;span class=&quot;built_in&quot;&gt;times&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;div&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;cdot&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;#&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;%&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;∩∪∧∨⊔⊓∩∪∧∨⊔⊓&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&#92;&lt;span class=&quot;built_in&quot;&gt;cap&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;cup&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;land&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;lor&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;sqcup&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;sqcap&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;∘∗⋆⊗⊕⊙∘∗⋆⊗⊕⊙&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&#92;circ&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;ast&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;star&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;otimes&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;oplus&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;odot&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;±∓∔⋇±∓∔⋇&lt;/p&gt;
&lt;figure class=&quot;highlight mipsasm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&#92;pm&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;mp&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;dotplus&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;&lt;span class=&quot;keyword&quot;&gt;divideontimes&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h1 id=&quot;比较运算符&quot;&gt;&lt;a href=&quot;#比较运算符&quot; class=&quot;headerlink&quot; title=&quot;比较运算符&quot;&gt;&lt;/a&gt;比较运算符&lt;/h1&gt;&lt;p&gt;&amp;#x3D;&amp;#x3D;≢≈≊≅∼&amp;#x3D;&amp;#x3D;≢≈≊≅∼&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;=&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;= &#92;not&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;equiv&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;approx&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;approxeq&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;cong&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;sim&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&amp;lt;&amp;gt;≤≥≫≪&amp;lt;&amp;gt;≤≥≫≪&lt;/p&gt;
&lt;figure class=&quot;highlight markdown&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;quote&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;quote&quot;&gt;&#92;le&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;ge&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;gg&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;ll&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;⋞⋟≺≻⪯⪰⋞⋟≺≻⪯⪰&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&#92;curlyeqprec&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;curlyeqsucc&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;prec&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;succ&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;preceq&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;succeq&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h1 id=&quot;集合-x2F-逻辑相关&quot;&gt;&lt;a href=&quot;#集合-x2F-逻辑相关&quot; class=&quot;headerlink&quot; title=&quot;集合&amp;#x2F;逻辑相关&quot;&gt;&lt;/a&gt;集合&amp;#x2F;逻辑相关&lt;/h1&gt;&lt;p&gt;∈∋⊄⊅⊆⊇∩∪∧∨¬∅∅∵∀∃∴∈∋⊄⊅⊆⊇∩∪∧∨¬∅∅∵∀∃∴&lt;/p&gt;
&lt;figure class=&quot;highlight mipsasm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&#92;in&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;owns &#92;not&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;&lt;span class=&quot;keyword&quot;&gt;subset &lt;/span&gt;&#92;not&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;supset&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;&lt;span class=&quot;keyword&quot;&gt;subseteq&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;&lt;/span&gt;&#92;supseteq&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;&#92;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;cap&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;cup&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;land&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;lor&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;&#92;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;neg&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;emptyset&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;varnothing&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;&#92;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;&lt;span class=&quot;keyword&quot;&gt;because&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;&lt;/span&gt;&#92;forall&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;exists&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;therefore&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h1 id=&quot;各种箭头&quot;&gt;&lt;a href=&quot;#各种箭头&quot; class=&quot;headerlink&quot; title=&quot;各种箭头&quot;&gt;&lt;/a&gt;各种箭头&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;细箭头&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;←←→→↔↑↓↕←←→→↔↑↓↕&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&#92;gets&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;leftarrow&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;&lt;span class=&quot;selector-tag&quot;&gt;to&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;rightarrow&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;leftrightarrow&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;&#92;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;uparrow&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;downarrow&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;updownarrow&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;粗箭头&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;⇐⇒⇔⟺⇑⇓⇕⇐⇒⇔⟺⇑⇓⇕&lt;/p&gt;
&lt;figure class=&quot;highlight verilog&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&#92;Leftarrow&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;Rightarrow&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;Leftrightarrow&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;&lt;span class=&quot;keyword&quot;&gt;iff&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;&#92;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;Uparrow&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;Downarrow&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;Updownarrow&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;斜箭头&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;↗↘↙↖↗↘↙↖&lt;/p&gt;
&lt;figure class=&quot;highlight mipsasm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&#92;nearrow&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;searrow&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;&lt;span class=&quot;keyword&quot;&gt;swarrow&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;&lt;/span&gt;&#92;nwarrow&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;半边箭头&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;↼↽⇀⇁⇌↼↽⇀⇁⇌&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&#92;leftharpoonup&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;leftharpoondown&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;rightharpoonup&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;rightharpoondown&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;rightleftharpoons&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;特殊箭头&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;↦⇝↩↪↦⇝↩↪&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&#92;mapsto&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;leadsto&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;hookleftarrow&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;hookrightarrow&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;加长箭头&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;⟵⟶⟷⟸⟹⟺⟼⟵⟶⟷⟸⟹⟺⟼&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&#92;longleftarrow&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;longrightarrow&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;longleftrightarrow&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;Longleftarrow&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;Longrightarrow&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;Longleftrightarrow&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;longmapsto&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;带文本箭头&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;over−−→−−→overover−−−→underover←−−←−−−underover←−−−under→𝑜𝑣𝑒𝑟→𝑜𝑣𝑒𝑟→𝑢𝑛𝑑𝑒𝑟𝑜𝑣𝑒𝑟←𝑜𝑣𝑒𝑟←𝑢𝑛𝑑𝑒𝑟←𝑢𝑛𝑑𝑒𝑟𝑜𝑣𝑒𝑟&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&#92;xrightarrow&amp;#123;over&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;xrightarrow&lt;span class=&quot;selector-attr&quot;&gt;[over]&lt;/span&gt;&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;xrightarrow&lt;span class=&quot;selector-attr&quot;&gt;[under]&lt;/span&gt;&amp;#123;over&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;xleftarrow&lt;span class=&quot;selector-attr&quot;&gt;[]&lt;/span&gt;&amp;#123;over&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;xleftarrow&lt;span class=&quot;selector-attr&quot;&gt;[under]&lt;/span&gt;&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;xleftarrow&lt;span class=&quot;selector-attr&quot;&gt;[under]&lt;/span&gt;&amp;#123;over&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h1 id=&quot;空格间距&quot;&gt;&lt;a href=&quot;#空格间距&quot; class=&quot;headerlink&quot; title=&quot;空格间距&quot;&gt;&lt;/a&gt;空格间距&lt;/h1&gt;&lt;p&gt;ABABABABA BABABAB𝐴𝐵𝐴𝐵𝐴𝐵𝐴𝐵𝐴 𝐵𝐴𝐵𝐴𝐵𝐴𝐵&lt;/p&gt;
&lt;figure class=&quot;highlight markdown&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;A&#92;!B&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;&#92;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;AB&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;&#92;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;A&#92;thinspace B&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;&#92;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;A&#92;:B&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;&#92;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;A&#92; B&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;&#92;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;A &#92;enspace B&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;&#92;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;A&#92;quad B&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;&#92;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;A&#92;qquad B&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h1 id=&quot;矩阵&quot;&gt;&lt;a href=&quot;#矩阵&quot; class=&quot;headerlink&quot; title=&quot;矩阵&quot;&gt;&lt;/a&gt;矩阵&lt;/h1&gt;&lt;p&gt;A&amp;#x3D;abcd𝐴&amp;#x3D;𝑎𝑏𝑐𝑑&lt;/p&gt;
&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;A = &#92;&lt;span class=&quot;keyword&quot;&gt;begin&lt;/span&gt;&amp;#123;matrix&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;a &amp;amp; b&#92;&#92;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;c &amp;amp; d&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&amp;#123;matrix&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;B&amp;#x3D;(abcd)𝐵&amp;#x3D;(𝑎𝑏𝑐𝑑)&lt;/p&gt;
&lt;figure class=&quot;highlight mipsasm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;B &lt;/span&gt;= &#92;&lt;span class=&quot;keyword&quot;&gt;begin&amp;#123;pmatrix&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;&lt;/span&gt;a &amp;amp; &lt;span class=&quot;keyword&quot;&gt;b&#92;&#92;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;&lt;/span&gt;c &amp;amp; d&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;end&amp;#123;pmatrix&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;C&amp;#x3D;∣∣∣abcd∣∣∣𝐶&amp;#x3D;|𝑎𝑏𝑐𝑑|&lt;/p&gt;
&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;C = &#92;&lt;span class=&quot;keyword&quot;&gt;begin&lt;/span&gt;&amp;#123;vmatrix&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;a &amp;amp; b&#92;&#92;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;c &amp;amp; d&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&amp;#123;vmatrix&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;D&amp;#x3D;[abcd]𝐷&amp;#x3D;[𝑎𝑏𝑐𝑑]&lt;/p&gt;
&lt;figure class=&quot;highlight mipsasm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;D = &#92;&lt;span class=&quot;keyword&quot;&gt;begin&amp;#123;bmatrix&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;&lt;/span&gt;a &amp;amp; &lt;span class=&quot;keyword&quot;&gt;b&#92;&#92;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;&lt;/span&gt;c &amp;amp; d&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;end&amp;#123;&lt;span class=&quot;keyword&quot;&gt;bmatrix&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;E&amp;#x3D;∥∥∥abcd∥∥∥𝐸&amp;#x3D;‖𝑎𝑏𝑐𝑑‖&lt;/p&gt;
&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;E = &#92;&lt;span class=&quot;keyword&quot;&gt;begin&lt;/span&gt;&amp;#123;&lt;span class=&quot;title class_&quot;&gt;Vmatrix&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;a &amp;amp; b&#92;&#92;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;c &amp;amp; d&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&amp;#123;&lt;span class=&quot;title class_&quot;&gt;Vmatrix&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;F&amp;#x3D;{abcd}𝐹&amp;#x3D;{𝑎𝑏𝑐𝑑}&lt;/p&gt;
&lt;figure class=&quot;highlight mipsasm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;F = &#92;&lt;span class=&quot;keyword&quot;&gt;begin&amp;#123;Bmatrix&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;&lt;/span&gt;a &amp;amp; &lt;span class=&quot;keyword&quot;&gt;b&#92;&#92;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;&lt;/span&gt;c &amp;amp; d&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;end&amp;#123;&lt;span class=&quot;keyword&quot;&gt;Bmatrix&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;[A b]&amp;#x3D;⎡⎢ ⎢⎣a11a12a13b1a21a22a23b2a31a32a33b3⎤⎥ ⎥⎦[𝐴 𝑏]&amp;#x3D;[𝑎11𝑎12𝑎13𝑏1𝑎21𝑎22𝑎23𝑏2𝑎31𝑎32𝑎33𝑏3]&lt;/p&gt;
&lt;figure class=&quot;highlight fsharp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[A&#92; b] &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;&lt;span class=&quot;keyword&quot;&gt;begin&lt;/span&gt;&amp;#123;bmatrix&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;&lt;span class=&quot;keyword&quot;&gt;begin&lt;/span&gt;&amp;#123;array&amp;#125;&amp;#123;c c c&lt;span class=&quot;operator&quot;&gt;|&lt;/span&gt;c&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;a_&lt;/span&gt;&amp;#123;&lt;span class=&quot;number&quot;&gt;11&lt;/span&gt;&amp;#125; &lt;span class=&quot;operator&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;a_&lt;/span&gt;&amp;#123;&lt;span class=&quot;number&quot;&gt;12&lt;/span&gt;&amp;#125; &lt;span class=&quot;operator&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;a_&lt;/span&gt;&amp;#123;&lt;span class=&quot;number&quot;&gt;13&lt;/span&gt;&amp;#125; &lt;span class=&quot;operator&quot;&gt;&amp;amp;&lt;/span&gt; b_1&#92;&#92;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;a_&lt;/span&gt;&amp;#123;&lt;span class=&quot;number&quot;&gt;21&lt;/span&gt;&amp;#125; &lt;span class=&quot;operator&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;a_&lt;/span&gt;&amp;#123;&lt;span class=&quot;number&quot;&gt;22&lt;/span&gt;&amp;#125; &lt;span class=&quot;operator&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;a_&lt;/span&gt;&amp;#123;&lt;span class=&quot;number&quot;&gt;23&lt;/span&gt;&amp;#125; &lt;span class=&quot;operator&quot;&gt;&amp;amp;&lt;/span&gt; b_2&#92;&#92;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;a_&lt;/span&gt;&amp;#123;&lt;span class=&quot;number&quot;&gt;31&lt;/span&gt;&amp;#125; &lt;span class=&quot;operator&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;a_&lt;/span&gt;&amp;#123;&lt;span class=&quot;number&quot;&gt;32&lt;/span&gt;&amp;#125; &lt;span class=&quot;operator&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;a_&lt;/span&gt;&amp;#123;&lt;span class=&quot;number&quot;&gt;33&lt;/span&gt;&amp;#125; &lt;span class=&quot;operator&quot;&gt;&amp;amp;&lt;/span&gt; b_3&#92;&#92;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&amp;#123;array&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&amp;#123;bmatrix&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;abcdefghi𝑎𝑏𝑐𝑑𝑒𝑓𝑔ℎ𝑖&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&#92;begin&amp;#123;array&amp;#125;&amp;#123;c:c:c&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;a&lt;/span&gt; &amp;amp; &lt;span class=&quot;selector-tag&quot;&gt;b&lt;/span&gt; &amp;amp; c &#92;&#92; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;hline&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;d &amp;amp; e &amp;amp; f &#92;&#92;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;hdashline&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;selector-tag&quot;&gt;g&lt;/span&gt; &amp;amp; h &amp;amp; &lt;span class=&quot;selector-tag&quot;&gt;i&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;end&amp;#123;array&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Ln×n&amp;#x3D;⎡⎢ ⎢ ⎢ ⎢ ⎢⎣a11a12⋯a1na21a22⋯a2n⋮⋮⋱⋮an1an2⋯ann⎤⎥ ⎥ ⎥ ⎥ ⎥⎦𝐿𝑛×𝑛&amp;#x3D;[𝑎11𝑎12⋯𝑎1𝑛𝑎21𝑎22⋯𝑎2𝑛⋮⋮⋱⋮𝑎𝑛1𝑎𝑛2⋯𝑎𝑛𝑛]&lt;/p&gt;
&lt;figure class=&quot;highlight fsharp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;L_&amp;#123;n&#92;times n&amp;#125; &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; &#92;&lt;span class=&quot;keyword&quot;&gt;begin&lt;/span&gt;&amp;#123;bmatrix&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;a_&lt;/span&gt;&amp;#123;&lt;span class=&quot;number&quot;&gt;11&lt;/span&gt;&amp;#125; &lt;span class=&quot;operator&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;a_&lt;/span&gt;&amp;#123;&lt;span class=&quot;number&quot;&gt;12&lt;/span&gt;&amp;#125; &lt;span class=&quot;operator&quot;&gt;&amp;amp;&lt;/span&gt; &#92;cdots &lt;span class=&quot;operator&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;a_&lt;/span&gt;&amp;#123;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;n&amp;#125; &#92;&#92; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;a_&lt;/span&gt;&amp;#123;&lt;span class=&quot;number&quot;&gt;21&lt;/span&gt;&amp;#125; &lt;span class=&quot;operator&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;a_&lt;/span&gt;&amp;#123;&lt;span class=&quot;number&quot;&gt;22&lt;/span&gt;&amp;#125; &lt;span class=&quot;operator&quot;&gt;&amp;amp;&lt;/span&gt; &#92;cdots &lt;span class=&quot;operator&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;a_&lt;/span&gt;&amp;#123;&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;n&amp;#125; &#92;&#92; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;vdots &lt;span class=&quot;operator&quot;&gt;&amp;amp;&lt;/span&gt; &#92;vdots &lt;span class=&quot;operator&quot;&gt;&amp;amp;&lt;/span&gt;&#92;ddots &lt;span class=&quot;operator&quot;&gt;&amp;amp;&lt;/span&gt; &#92;vdots&#92;&#92;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;a_&lt;/span&gt;&amp;#123;n1&amp;#125; &lt;span class=&quot;operator&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;a_&lt;/span&gt;&amp;#123;n2&amp;#125; &lt;span class=&quot;operator&quot;&gt;&amp;amp;&lt;/span&gt; &#92;cdots &lt;span class=&quot;operator&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;a_&lt;/span&gt;&amp;#123;nn&amp;#125; &#92;&#92; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&amp;#123;bmatrix&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h1 id=&quot;列式-x2F-方程组&quot;&gt;&lt;a href=&quot;#列式-x2F-方程组&quot; class=&quot;headerlink&quot; title=&quot;列式&amp;#x2F;方程组&quot;&gt;&lt;/a&gt;列式&amp;#x2F;方程组&lt;/h1&gt;&lt;p&gt;f(x)&amp;#x3D;(x+1)2&amp;#x3D;x2+2x+1𝑓(𝑥)&amp;#x3D;(𝑥+1)2&amp;#x3D;𝑥2+2𝑥+1&lt;/p&gt;
&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&#92;&lt;span class=&quot;keyword&quot;&gt;begin&lt;/span&gt;&amp;#123;aligned&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;f(x) &amp;amp;= (x+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)^&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&#92;&#92;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;amp;= x^&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; + 2x + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&amp;#123;aligned&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;f(x)&amp;#x3D;{aif bbif a𝑓(𝑥)&amp;#x3D;{𝑎if b𝑏if a&lt;/p&gt;
&lt;figure class=&quot;highlight fsharp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;f(x) &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; &#92;&lt;span class=&quot;keyword&quot;&gt;begin&lt;/span&gt;&amp;#123;cases&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;a &lt;span class=&quot;operator&quot;&gt;&amp;amp;&lt;/span&gt;&#92;&lt;span class=&quot;keyword&quot;&gt;text&lt;/span&gt;&amp;#123;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; b&amp;#125;&#92;&#92;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;b &lt;span class=&quot;operator&quot;&gt;&amp;amp;&lt;/span&gt;&#92;&lt;span class=&quot;keyword&quot;&gt;text&lt;/span&gt;&amp;#123;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; a&amp;#125;&#92;&#92;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&amp;#123;cases&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;{x+2y&amp;#x3D;13x−y&amp;#x3D;5{𝑥+2𝑦&amp;#x3D;13𝑥−𝑦&amp;#x3D;5&lt;/p&gt;
&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&#92;&lt;span class=&quot;keyword&quot;&gt;begin&lt;/span&gt;&amp;#123;cases&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;&lt;span class=&quot;keyword&quot;&gt;begin&lt;/span&gt;&amp;#123;aligned&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;x + 2y &amp;amp;= &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&#92;&#92;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3x - y &amp;amp;= &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&amp;#123;aligned&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&amp;#123;cases&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h1 id=&quot;字体操作&quot;&gt;&lt;a href=&quot;#字体操作&quot; class=&quot;headerlink&quot; title=&quot;字体操作&quot;&gt;&lt;/a&gt;字体操作&lt;/h1&gt;&lt;h2 id=&quot;修改字体&quot;&gt;&lt;a href=&quot;#修改字体&quot; class=&quot;headerlink&quot; title=&quot;修改字体&quot;&gt;&lt;/a&gt;修改字体&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/2068113/202008/2068113-20200816212537331-1196114732.jpg&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;修改大小&quot;&gt;&lt;a href=&quot;#修改大小&quot; class=&quot;headerlink&quot; title=&quot;修改大小&quot;&gt;&lt;/a&gt;修改大小&lt;/h2&gt;&lt;p&gt;dABddAB𝑑𝐴𝐵𝑑𝑑𝐴𝐵&lt;/p&gt;
&lt;figure class=&quot;highlight mipsasm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&#92;Huge AB&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;d&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;&#92;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;d&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;&lt;span class=&quot;keyword&quot;&gt;normalsize &lt;/span&gt;AB&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;修改字体的操作影响效果到行末。&lt;/p&gt;
&lt;p&gt;ABABABABABABABABABAB𝐴𝐵𝐴𝐵𝐴𝐵𝐴𝐵𝐴𝐵𝐴𝐵𝐴𝐵𝐴𝐵𝐴𝐵𝐴𝐵&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;AB&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;Huge AB&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;huge AB&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;&#92;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;AB&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;&lt;span class=&quot;keyword&quot;&gt;LARGE&lt;/span&gt; AB&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;&lt;span class=&quot;keyword&quot;&gt;Large&lt;/span&gt; AB&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;&lt;span class=&quot;keyword&quot;&gt;large&lt;/span&gt; AB&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;&#92;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;AB&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;small AB&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;tiny AB&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&quot;修改颜色&quot;&gt;&lt;a href=&quot;#修改颜色&quot; class=&quot;headerlink&quot; title=&quot;修改颜色&quot;&gt;&lt;/a&gt;修改颜色&lt;/h2&gt;&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&#92;textcolor&amp;#123;blue&amp;#125;&amp;#123;F=ma&amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;&#92;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;textcolor&amp;#123;#00ff00&amp;#125;&amp;#123;F=ma&amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;&#92;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;textcolor&amp;#123;#ff0000&amp;#125;&amp;#123;F=ma&amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;&#92;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;color&amp;#123;blue&amp;#125; one&#92; line  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;&#92;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;nothing&#92;textcolor&amp;#123;blue&amp;#125;&amp;#123;F=ma&amp;#125;&#92;&#92;&#92;textcolor&amp;#123;#00ff00&amp;#125;&amp;#123;F=ma&amp;#125;&#92;&#92;&#92;textcolor&amp;#123;#ff0000&amp;#125;&amp;#123;F=ma&amp;#125;&#92;&#92;&#92;color&amp;#123;blue&amp;#125; one&#92; line&#92;&#92;nothing&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;博客园的MD不能使用，给大伙一张在typora中的演示图康康&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/2068113/202008/2068113-20200816212700467-21726386.jpg&quot;&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight mipsasm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&#92;textcolor&amp;#123;&lt;span class=&quot;keyword&quot;&gt;blue&amp;#125;&amp;#123;F=ma&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;&lt;/span&gt;&#92;&#92;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;textcolor&amp;#123;&lt;span class=&quot;comment&quot;&gt;#00ff00&amp;#125;&amp;#123;F=ma&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;&#92;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;textcolor&amp;#123;&lt;span class=&quot;comment&quot;&gt;#ff0000&amp;#125;&amp;#123;F=ma&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;&#92;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;color&amp;#123;&lt;span class=&quot;keyword&quot;&gt;blue&amp;#125; &lt;/span&gt;one&#92; line&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;&#92;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;nothing&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;colorbox&amp;#123;&lt;span class=&quot;comment&quot;&gt;#00ff00&amp;#125;&amp;#123;F=ma&amp;#125;  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;&#92;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;colorbox&amp;#123;aqua&amp;#125;&amp;#123;A&amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;&#92;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;fcolorbox&amp;#123;red&amp;#125;&amp;#123;aqua&amp;#125;&amp;#123;A&amp;#125;&#92;colorbox&amp;#123;&lt;span class=&quot;comment&quot;&gt;#00ff00&amp;#125;&amp;#123;F=ma&amp;#125;&#92;&#92;&#92;colorbox&amp;#123;aqua&amp;#125;&amp;#123;A&amp;#125;&#92;&#92;&#92;fcolorbox&amp;#123;red&amp;#125;&amp;#123;aqua&amp;#125;&amp;#123;A&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;



&lt;p&gt;博客园的MD同样不能使用&lt;br&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/2068113/202008/2068113-20200816212823358-551538593.jpg&quot;&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight fsharp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&#92;&lt;span class=&quot;keyword&quot;&gt;colorbox&lt;/span&gt;&amp;#123;#&lt;span class=&quot;number&quot;&gt;00&lt;/span&gt;ff00&amp;#125;&amp;#123;F&lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt;ma&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;&#92;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;&lt;span class=&quot;keyword&quot;&gt;colorbox&lt;/span&gt;&amp;#123;aqua&amp;#125;&amp;#123;A&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;&#92;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;&lt;span class=&quot;keyword&quot;&gt;fcolorbox&lt;/span&gt;&amp;#123;red&amp;#125;&amp;#123;aqua&amp;#125;&amp;#123;A&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&quot;划掉&quot;&gt;&lt;a href=&quot;#划掉&quot; class=&quot;headerlink&quot; title=&quot;划掉&quot;&gt;&lt;/a&gt;划掉&lt;/h2&gt;&lt;p&gt;&#92;cancel5&#92;bcancel5&#92;xcancelABC≠&#92;cancel5&#92;bcancel5&#92;xcancel𝐴𝐵𝐶≠&lt;/p&gt;
&lt;p&gt;博客园的MD同样不能使用&lt;br&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/2068113/202008/2068113-20200816212841764-646057837.jpg&quot;&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight fsharp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&#92;&lt;span class=&quot;keyword&quot;&gt;cancel&lt;/span&gt;&amp;#123;&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;&lt;span class=&quot;keyword&quot;&gt;bcancel&lt;/span&gt;&amp;#123;&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;&lt;span class=&quot;keyword&quot;&gt;xcancel&lt;/span&gt;&amp;#123;ABC&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;&lt;span class=&quot;built_in&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h1 id=&quot;常见图形&quot;&gt;&lt;a href=&quot;#常见图形&quot; class=&quot;headerlink&quot; title=&quot;常见图形&quot;&gt;&lt;/a&gt;常见图形&lt;/h1&gt;&lt;p&gt;□□■△▽▲⋄◊⋆★∘∙◯⨀◻◻◼△▽▴⋄◊⋆★∘∙◯⨀&lt;/p&gt;
&lt;figure class=&quot;highlight mipsasm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&#92;&lt;span class=&quot;keyword&quot;&gt;Box&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;&lt;/span&gt;&#92;square&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;&lt;span class=&quot;keyword&quot;&gt;blacksquare&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;&lt;/span&gt;&#92;triangle&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;triangledown&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;&lt;span class=&quot;keyword&quot;&gt;blacktriangle&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;&lt;/span&gt;&#92;&lt;span class=&quot;keyword&quot;&gt;diamond&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;&lt;/span&gt;&#92;&lt;span class=&quot;keyword&quot;&gt;Diamond&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;&lt;/span&gt;&#92;star&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;&lt;span class=&quot;keyword&quot;&gt;bigstar&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;&lt;/span&gt;&#92;circ&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;&lt;span class=&quot;keyword&quot;&gt;bullet&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;&lt;/span&gt;&#92;&lt;span class=&quot;keyword&quot;&gt;bigcirc&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;&lt;/span&gt;&#92;&lt;span class=&quot;keyword&quot;&gt;bigodot&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;♢♣♡♠♢♣♡♠&lt;/p&gt;
&lt;figure class=&quot;highlight mipsasm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&#92;&lt;span class=&quot;keyword&quot;&gt;diamondsuit&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;&lt;/span&gt;&#92;clubsuit&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;heartsuit&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;spadesuit&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;∠∡⊤⊥∞∠∡⊤⊥∞&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&#92;angle&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;measuredangle&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;&lt;span class=&quot;attribute&quot;&gt;top&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;bot&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;infty&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;✓†‡¥$✓†‡¥$&lt;/p&gt;
&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&#92;checkmark&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;dagger&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;ddagger&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;yen&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;$&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h1 id=&quot;声明宏&quot;&gt;&lt;a href=&quot;#声明宏&quot; class=&quot;headerlink&quot; title=&quot;声明宏&quot;&gt;&lt;/a&gt;声明宏&lt;/h1&gt;&lt;p&gt;对于一些复杂但只是有少许不同的表达式，可以声明一个函数来调用，提高原码的可读性，减少出错。&lt;/p&gt;
&lt;p&gt;基本的语法为&lt;/p&gt;
&lt;figure class=&quot;highlight markdown&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&#92;def&#92;macroname#1#2&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;your command&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;宏允许带任意数量的参数（也可以不带参），必须是&lt;code&gt;#1,#2,……&lt;/code&gt;这样的命名格式，同时注意再定义宏的时候注意让&lt;code&gt;#1&lt;/code&gt;与&lt;code&gt;&#92;&lt;/code&gt;中间隔一个空格，否则会解析成#。再调用的时候格式为&lt;code&gt;&#92;macroname&amp;#123;x&amp;#125;&amp;#123;y&amp;#125;&amp;#123;z&amp;#125;&lt;/code&gt;，可以参考一下的例子：&lt;/p&gt;
&lt;p&gt;f(x)&amp;#x3D;1√2π σ1exp[−(x−u1)22 σ21]f(y)&amp;#x3D;1√2π σ2exp[−(y−u2)22 σ22]𝑓(𝑥)&amp;#x3D;12𝜋 𝜎1exp⁡[−(𝑥−𝑢1)22 𝜎12]𝑓(𝑦)&amp;#x3D;12𝜋 𝜎2exp⁡[−(𝑦−𝑢2)22 𝜎22]&lt;/p&gt;
&lt;figure class=&quot;highlight r&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;punctuation&quot;&gt;&#92;&lt;/span&gt;def&lt;span class=&quot;punctuation&quot;&gt;&#92;&lt;/span&gt;Normal&lt;span class=&quot;comment&quot;&gt;#1#2#3&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;punctuation&quot;&gt;&#92;&lt;/span&gt;frac&lt;span class=&quot;punctuation&quot;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;punctuation&quot;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&quot;punctuation&quot;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&quot;punctuation&quot;&gt;&#92;&lt;/span&gt;&lt;span class=&quot;built_in&quot;&gt;sqrt&lt;/span&gt;&lt;span class=&quot;punctuation&quot;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;punctuation&quot;&gt;&#92;&lt;/span&gt;&lt;span class=&quot;built_in&quot;&gt;pi&lt;/span&gt;&lt;span class=&quot;punctuation&quot;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&quot;punctuation&quot;&gt;&#92;&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;#3&amp;#125;&#92;exp&amp;#123;[-&#92;frac&amp;#123;(#1 - #2)^2&amp;#125;&amp;#123;2&#92; #3^2&amp;#125;]&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;punctuation&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;f&lt;span class=&quot;punctuation&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;punctuation&quot;&gt;&#92;&lt;/span&gt;Normal&lt;span class=&quot;punctuation&quot;&gt;&amp;#123;&lt;/span&gt;x&lt;span class=&quot;punctuation&quot;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&quot;punctuation&quot;&gt;&amp;#123;&lt;/span&gt;u_1&lt;span class=&quot;punctuation&quot;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&quot;punctuation&quot;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&quot;punctuation&quot;&gt;&#92;&lt;/span&gt;sigma_1&lt;span class=&quot;punctuation&quot;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&quot;punctuation&quot;&gt;&#92;&lt;/span&gt;&lt;span class=&quot;punctuation&quot;&gt;&#92;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;f&lt;span class=&quot;punctuation&quot;&gt;(&lt;/span&gt;y&lt;span class=&quot;punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;punctuation&quot;&gt;&#92;&lt;/span&gt;Normal&lt;span class=&quot;punctuation&quot;&gt;&amp;#123;&lt;/span&gt;y&lt;span class=&quot;punctuation&quot;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&quot;punctuation&quot;&gt;&amp;#123;&lt;/span&gt;u_2&lt;span class=&quot;punctuation&quot;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&quot;punctuation&quot;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&quot;punctuation&quot;&gt;&#92;&lt;/span&gt;sigma_2&lt;span class=&quot;punctuation&quot;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&quot;punctuation&quot;&gt;&#92;&lt;/span&gt;&lt;span class=&quot;punctuation&quot;&gt;&#92;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;ex&amp;#x3D;1+x+12!x2+13!x3+⋯𝑒𝑥&amp;#x3D;1+𝑥+12!𝑥2+13!𝑥3+⋯&lt;/p&gt;
&lt;figure class=&quot;highlight fsharp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&#92;def&#92;EXP&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;e&lt;span class=&quot;operator&quot;&gt;^&lt;/span&gt;x &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;+&lt;/span&gt; x &lt;span class=&quot;operator&quot;&gt;+&lt;/span&gt; &#92;&lt;span class=&quot;keyword&quot;&gt;frac&lt;/span&gt;&amp;#123;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&amp;#125;&amp;#123;&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;!&lt;/span&gt;&amp;#125;x&lt;span class=&quot;operator&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;+&lt;/span&gt; &#92;&lt;span class=&quot;keyword&quot;&gt;frac&lt;/span&gt;&amp;#123;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&amp;#125;&amp;#123;&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;!&lt;/span&gt;&amp;#125;x&lt;span class=&quot;operator&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;  &lt;span class=&quot;operator&quot;&gt;+&lt;/span&gt; &#92;cdots&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span</summary>
        
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Leetcode121. 买卖股票的最佳时间</title>
    <link href="https://bishoptylaor.github.io/interview/juan/neet150/s-window/leet-121-best-time-to-buy-and-sell-stock/"/>
    <id>https://bishoptylaor.github.io/interview/juan/neet150/s-window/leet-121-best-time-to-buy-and-sell-stock/</id>
    <published>2024-05-20T08:47:20.000Z</published>
    <updated>2024-07-12T14:15:22.485Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://leetcode.cn/problems/best-time-to-buy-and-sell-stock/description/&quot;&gt;Leetcode121. 买卖股票的最佳时间&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;给定一个数组 &lt;code&gt;prices&lt;/code&gt; ，它的第 &lt;code&gt;i&lt;/code&gt; 个元素 &lt;code&gt;prices[i]&lt;/code&gt; 表示一支给定股票第 &lt;code&gt;i&lt;/code&gt; 天的价格。&lt;/p&gt;
&lt;p&gt;你只能选择 &lt;strong&gt;某一天&lt;/strong&gt; 买入这只股票，并选择在 &lt;strong&gt;未来的某一个不同的日子&lt;/strong&gt; 卖出该股票。设计一个算法来计算你所能获取的最大利润。&lt;/p&gt;
&lt;p&gt;返回你可以从这笔交易中获取的最大利润。如果你不能获取任何利润，返回 &lt;code&gt;0&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例 1：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：[7,1,5,3,6,4]
输出：5
解释：在第 2 天（股票价格 = 1）的时候买入，在第 5 天（股票价格 = 6）的时候卖出，最大利润 = 6-1 = 5 。
 注意利润不能是 7-1 = 6, 因为卖出价格需要大于买入价格；同时，你不能在买入前卖出股票。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;示例 2：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：prices = [7,6,4,3,1]
输出：0
解释：在这种情况下, 没有交易完成, 所以最大利润为 0。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;提示：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= prices.length &amp;lt;= 105&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;0 &amp;lt;= prices[i] &amp;lt;= 104&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;遍历的过程当中找到 cost 最小的那一天 or 那一天的成本，用当前的 price 减去 cost，就是在这一天所能达到的最大收益&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;maxProfit&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(prices []&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	cost, profit := prices[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;], &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i, n := &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(prices); i&amp;lt;n; i++ &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		cost = min(cost, prices[i])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		profit = max(profit, prices[i] - cost)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; profit&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(a, b &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; a &amp;lt;= b &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; a&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; b&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(a, b &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; a &amp;gt;= b &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; a&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; b&lt;/span&gt;&lt;br&gt;&lt;span</summary>
        
      
    
    
    
    <category term="面试" scheme="https://bishoptylaor.github.io/categories/interview/"/>
    
    <category term="刷题" scheme="https://bishoptylaor.github.io/categories/interview/juan/"/>
    
    <category term="NeetCode150" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/"/>
    
    <category term="Sliding Window" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/s-window/"/>
    
    
  </entry>
  
  <entry>
    <title>Leetcode.217 存在重复元素</title>
    <link href="https://bishoptylaor.github.io/interview/juan/neet150/arrays-hashing/leet-217-contains-duplicate/"/>
    <id>https://bishoptylaor.github.io/interview/juan/neet150/arrays-hashing/leet-217-contains-duplicate/</id>
    <published>2024-05-20T08:47:13.000Z</published>
    <updated>2024-07-12T14:15:22.483Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://leetcode.cn/problems/contains-duplicate/description/&quot;&gt;Leetcode.217 存在重复元素&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;给你一个整数数组 &lt;code&gt;nums&lt;/code&gt; 。如果任一值在数组中出现 &lt;strong&gt;至少两次&lt;/strong&gt; ，返回 &lt;code&gt;true&lt;/code&gt; ；如果数组中每个元素互不相同，返回 &lt;code&gt;false&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例 1：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：nums = [1,2,3,1]
输出：true
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;示例 2：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：nums = [1,2,3,4]
输出：false
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;示例 3：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：nums = [1,1,1,3,3,4,3,2,4,2]
输出：true
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;提示：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= nums.length &amp;lt;= 105&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-109 &amp;lt;= nums[i] &amp;lt;= 109&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;哈希表，秒了！&lt;br&gt;直接排序，秒了！&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;containsDuplicate&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(nums []&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;bool&lt;/span&gt; &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	sort.Ints(nums) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i := &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(nums); i++ &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; nums[i] == nums[i&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;] &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;containsDuplicate&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(nums []&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;bool&lt;/span&gt; &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	set := &lt;span class=&quot;keyword&quot;&gt;map&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;]&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt;&amp;#123;&amp;#125;&amp;#123;&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; _, v := &lt;span class=&quot;keyword&quot;&gt;range&lt;/span&gt; nums &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; _, has := set[v]; has &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		set[v] = &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt;&amp;#123;&amp;#125;&amp;#123;&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;</summary>
        
      
    
    
    
    <category term="面试" scheme="https://bishoptylaor.github.io/categories/interview/"/>
    
    <category term="刷题" scheme="https://bishoptylaor.github.io/categories/interview/juan/"/>
    
    <category term="NeetCode150" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/"/>
    
    <category term="Arrays &amp; Hashing" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/arrays-hashing/"/>
    
    
  </entry>
  
  <entry>
    <title>Leetcode.238 除自身以外数组的乘积</title>
    <link href="https://bishoptylaor.github.io/interview/juan/neet150/arrays-hashing/leet-238-product-of-array-except-self/"/>
    <id>https://bishoptylaor.github.io/interview/juan/neet150/arrays-hashing/leet-238-product-of-array-except-self/</id>
    <published>2024-05-20T08:47:08.000Z</published>
    <updated>2024-07-12T14:15:22.483Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://leetcode.cn/problems/product-of-array-except-self/description/&quot;&gt;Leetcode.238 除自身以外数组的乘积&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;给你一个整数数组 &lt;code&gt;nums&lt;/code&gt;，返回 &lt;em&gt;数组 &lt;code&gt;answer&lt;/code&gt; ，其中 &lt;code&gt;answer[i]&lt;/code&gt; 等于 &lt;code&gt;nums&lt;/code&gt; 中除 &lt;code&gt;nums[i]&lt;/code&gt; 之外其余各元素的乘积&lt;/em&gt; 。&lt;/p&gt;
&lt;p&gt;题目数据 &lt;strong&gt;保证&lt;/strong&gt; 数组 &lt;code&gt;nums&lt;/code&gt;之中任意元素的全部前缀元素和后缀的乘积都在  &lt;strong&gt;32 位&lt;/strong&gt; 整数范围内。&lt;/p&gt;
&lt;p&gt;请 &lt;strong&gt;不要使用除法，&lt;/strong&gt;且在 &lt;code&gt;O(_n_)&lt;/code&gt; 时间复杂度内完成此题。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例 1:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入: nums = `[1,2,3,4]`
输出: `[24,12,8,6]`
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;示例 2:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入: nums = [-1,1,0,-3,3]
输出: [0,0,9,0,0]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;提示：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;2 &amp;lt;= nums.length &amp;lt;= 105&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-30 &amp;lt;= nums[i] &amp;lt;= 30&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;保证&lt;/strong&gt; 数组 &lt;code&gt;nums&lt;/code&gt;之中任意元素的全部前缀元素和后缀的乘积都在  &lt;strong&gt;32 位&lt;/strong&gt; 整数范围内&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;进阶：&lt;/strong&gt;你可以在 &lt;code&gt;O(1)&lt;/code&gt; 的额外空间复杂度内完成这个题目吗？（ 出于对空间复杂度分析的目的，输出数组 &lt;strong&gt;不被视为&lt;/strong&gt; 额外空间。）&lt;/p&gt;
&lt;p&gt;主要思路是想办法计算当前位置的前缀和后缀乘积&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;productExceptSelf&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(nums []&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; []&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	length := &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(nums) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// L 和 R 分别表示左右两侧的乘积列表 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	L, R, answer := &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;([]&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;, length), &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;([]&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;, length), &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;([]&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;, length) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// L[i] 为索引 i 左侧所有元素的乘积 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// 对于索引为 &amp;#x27;0&amp;#x27; 的元素，因为左侧没有元素，所以 L[0] = 1 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	L[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;] = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i := &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; i &amp;lt; length; i++ &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		L[i] = nums[i&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;] * L[i&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;] &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// R[i] 为索引 i 右侧所有元素的乘积 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// 对于索引为 &amp;#x27;length-1&amp;#x27; 的元素，因为右侧没有元素，所以 R[length-1] = 1 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	R[length&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;] = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i := length - &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;; i &amp;gt;= &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i-- &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		R[i] = nums[i+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;] * R[i+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;] &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// 对于索引 i，除 nums[i] 之外其余各元素的乘积就是左侧所有元素的乘积乘以右侧所有元素的乘积 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i := &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; length; i++ &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		answer[i] = L[i] * R[i] &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; answer &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// O(1) 版本&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;productExceptSelf&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(nums []&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; []&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	length := &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(nums)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	ans := &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;([]&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;, length)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; x &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// ans[i] 表示索引 i 左侧所有元素的乘积&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 因为索引为 &amp;#x27;0&amp;#x27; 的元素左侧没有元素， 所以 ans[0] = 1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	ans[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;] = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i:=&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; i&amp;lt;&lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(nums); i++ &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		ans[i] = nums[i&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;] * ans[i&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// x 为右侧所有元素的乘积&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// 刚开始右边没有元素，所以 x = 1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	x = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; j:=length&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;; j &amp;gt;=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; j-- &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// 对于索引 i，左边的乘积为 ans[i]，右边的乘积为 x&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		ans[j] = ans[j] * x&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// x 需要包含右边所有的乘积，所以计算下一个结果时需要将当前值乘到 x 上&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		x = nums[j] * x&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; ans&lt;/span&gt;&lt;br&gt;&lt;span</summary>
        
      
    
    
    
    <category term="面试" scheme="https://bishoptylaor.github.io/categories/interview/"/>
    
    <category term="刷题" scheme="https://bishoptylaor.github.io/categories/interview/juan/"/>
    
    <category term="NeetCode150" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/"/>
    
    <category term="Arrays &amp; Hashing" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/arrays-hashing/"/>
    
    
  </entry>
  
  <entry>
    <title>Leetcode53. 最大子数组和</title>
    <link href="https://bishoptylaor.github.io/interview/juan/neet150/greedy/leet-53-maximum-subarray/"/>
    <id>https://bishoptylaor.github.io/interview/juan/neet150/greedy/leet-53-maximum-subarray/</id>
    <published>2024-05-20T08:47:04.000Z</published>
    <updated>2024-07-12T14:15:22.484Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://leetcode.cn/problems/maximum-subarray/description/&quot;&gt;Leetcode53. 最大子数组和&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;给你一个整数数组 &lt;code&gt;nums&lt;/code&gt; ，请你找出一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;子数组&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;是数组中的一个连续部分。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例 1：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：nums = [-2,1,-3,4,-1,2,1,-5,4]
输出：6
解释：连续子数组 [4,-1,2,1] 的和最大，为 6 。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;示例 2：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：nums = [1]
输出：1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;示例 3：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：nums = [5,4,-1,7,8]
输出：23
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;提示：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= nums.length &amp;lt;= 105&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-104 &amp;lt;= nums[i] &amp;lt;= 104&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;思路和算法&lt;/p&gt;
&lt;p&gt;假设 nums 数组的长度是 n，下标从 0 到 n−1。&lt;/p&gt;
&lt;p&gt;我们用 f(i) 代表以第 i 个数结尾的「连续子数组的最大和」，那么很显然我们要求的答案就是：&lt;/p&gt;
&lt;p&gt;$$max0≤i≤n−1​{f(i)}$$&lt;/p&gt;
&lt;p&gt;因此我们只需要求出每个位置的 f(i)，然后返回 f 数组中的最大值即可。那么我们如何求 f(i) 呢？我们可以考虑 nums[i] 单独成为一段还是加入 f(i−1) 对应的那一段，这取决于 nums[i] 和 f(i−1)+nums[i] 的大小，我们希望获得一个比较大的，于是可以写出这样的动态规划转移方程：&lt;/p&gt;
&lt;p&gt;$$f(i)&amp;#x3D;max{f(i−1)+nums[i],nums[i]}$$&lt;/p&gt;
&lt;p&gt;不难给出一个时间复杂度 O(n)、空间复杂度 O(n) 的实现，即用一个 f 数组来保存 f(i) 的值，用一个循环求出所有 f(i)。考虑到 f(i) 只和 f(i−1) 相关，于是我们可以只用一个变量 pre 来维护对于当前 f(i) 的 f(i−1) 的值是多少，从而让空间复杂度降低到 O(1)，这有点类似「滚动数组」的思想。&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;maxSubArray&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(nums []&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	max := nums[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;] &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i := &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(nums); i++ &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; nums[i] + nums[i&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;] &amp;gt; nums[i] &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			nums[i] += nums[i&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;] &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; nums[i] &amp;gt; max &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			max = nums[i] &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; max &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// -2,1,-3,4,-1,2,1,-5,4&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// -2,1,-2,4,3,5,6,1,5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;简单来说就是看前一个元素是否大于 0 ，如果符合条件，那么就加到当前位置上&lt;/p&gt;
&lt;p&gt;另一种方法是前缀和，找到每个位置的前缀和，那么某两个前缀和的最大差值就是我们要找的 子数组 区间和最大值&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;maxSubArray&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(nums []&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	ans := math.MinInt64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	minPreSum, preSum := &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; _, num := &lt;span class=&quot;keyword&quot;&gt;range&lt;/span&gt; nums &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		preSum += num&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		ans = max(ans, preSum-minPreSum)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		minPreSum = min(minPreSum, preSum)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; ans&lt;/span&gt;&lt;br&gt;&lt;span</summary>
        
      
    
    
    
    <category term="面试" scheme="https://bishoptylaor.github.io/categories/interview/"/>
    
    <category term="刷题" scheme="https://bishoptylaor.github.io/categories/interview/juan/"/>
    
    <category term="NeetCode150" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/"/>
    
    <category term="Greedy" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/greedy/"/>
    
    
  </entry>
  
  <entry>
    <title>Leetcode.152 乘积最大子数组</title>
    <link href="https://bishoptylaor.github.io/interview/juan/neet150/1-d-dp/leet-152-maximum-product-subarray/"/>
    <id>https://bishoptylaor.github.io/interview/juan/neet150/1-d-dp/leet-152-maximum-product-subarray/</id>
    <published>2024-05-20T08:46:58.000Z</published>
    <updated>2024-07-12T14:15:22.483Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://leetcode.cn/problems/maximum-product-subarray/description/&quot;&gt;Leetcode.152 乘积最大子数组&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;给你一个整数数组 &lt;code&gt;nums&lt;/code&gt; ，请你找出数组中乘积最大的非空连续子数组（该子数组中至少包含一个数字），并返回该子数组所对应的乘积。&lt;/p&gt;
&lt;p&gt;测试用例的答案是一个 &lt;strong&gt;32-位&lt;/strong&gt; 整数。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例 1:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入: nums = [2,3,-2,4]
输出: 6
解释: 子数组 [2,3] 有最大乘积 6。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;示例 2:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入: nums = [-2,0,-1]
输出: 0
解释: 结果不能为 2, 因为 [-2,-1] 不是子数组。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;提示:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= nums.length &amp;lt;= 2 * 104&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-10 &amp;lt;= nums[i] &amp;lt;= 10&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nums&lt;/code&gt; 的任何前缀或后缀的乘积都 &lt;strong&gt;保证&lt;/strong&gt; 是一个 &lt;strong&gt;32-位&lt;/strong&gt; 整数&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span</summary>
        
      
    
    
    
    <category term="面试" scheme="https://bishoptylaor.github.io/categories/interview/"/>
    
    <category term="刷题" scheme="https://bishoptylaor.github.io/categories/interview/juan/"/>
    
    <category term="NeetCode150" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/"/>
    
    <category term="1-D DP" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/1-d-dp/"/>
    
    
  </entry>
  
  <entry>
    <title>Leetcode.153 寻找旋转排序数组中的最小值</title>
    <link href="https://bishoptylaor.github.io/interview/juan/neet150/b-search/leet-153-find-minimum-in-rotated-sorted-array/"/>
    <id>https://bishoptylaor.github.io/interview/juan/neet150/b-search/leet-153-find-minimum-in-rotated-sorted-array/</id>
    <published>2024-05-20T08:46:53.000Z</published>
    <updated>2024-07-12T14:15:22.484Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://leetcode.cn/problems/find-minimum-in-rotated-sorted-array/&quot;&gt;Leetcode.153 寻找旋转排序数组中的最小值&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;已知一个长度为 &lt;code&gt;n&lt;/code&gt; 的数组，预先按照升序排列，经由 &lt;code&gt;1&lt;/code&gt; 到 &lt;code&gt;n&lt;/code&gt; 次 &lt;strong&gt;旋转&lt;/strong&gt; 后，得到输入数组。例如，原数组 &lt;code&gt;nums = [0,1,2,4,5,6,7]&lt;/code&gt; 在变化后可能得到：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;若旋转 &lt;code&gt;4&lt;/code&gt; 次，则可以得到 &lt;code&gt;[4,5,6,7,0,1,2]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;若旋转 &lt;code&gt;7&lt;/code&gt; 次，则可以得到 &lt;code&gt;[0,1,2,4,5,6,7]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;注意，数组 &lt;code&gt;[a[0], a[1], a[2], ..., a[n-1]]&lt;/code&gt; &lt;strong&gt;旋转一次&lt;/strong&gt; 的结果为数组 &lt;code&gt;[a[n-1], a[0], a[1], a[2], ..., a[n-2]]&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;给你一个元素值 &lt;strong&gt;互不相同&lt;/strong&gt; 的数组 &lt;code&gt;nums&lt;/code&gt; ，它原来是一个升序排列的数组，并按上述情形进行了多次旋转。请你找出并返回数组中的 &lt;strong&gt;最小元素&lt;/strong&gt; 。&lt;/p&gt;
&lt;p&gt;你必须设计一个时间复杂度为 &lt;code&gt;O(log n)&lt;/code&gt; 的算法解决此问题。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例 1：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：nums = [3,4,5,1,2]
输出：1
解释：原数组为 [1,2,3,4,5] ，旋转 3 次得到输入数组。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;示例 2：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：nums = [4,5,6,7,0,1,2]
输出：0
解释：原数组为 [0,1,2,4,5,6,7] ，旋转 3 次得到输入数组。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;示例 3：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：nums = [11,13,15,17]
输出：11
解释：原数组为 [11,13,15,17] ，旋转 4 次得到输入数组。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;提示：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;n == nums.length&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= n &amp;lt;= 5000&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-5000 &amp;lt;= nums[i] &amp;lt;= 5000&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nums&lt;/code&gt; 中的所有整数 &lt;strong&gt;互不相同&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nums&lt;/code&gt; 原来是一个升序排序的数组，并进行了 &lt;code&gt;1&lt;/code&gt; 至 &lt;code&gt;n&lt;/code&gt; 次旋转&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;类比 &lt;a href=&quot;https://leetcode.cn/problems/search-in-rotated-sorted-array/description/&quot;&gt;Leetcode.33 搜索旋转排序数组&lt;/a&gt; 也可以用二分查找的思路&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;findMin&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(nums []&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	low, high := &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(nums) - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; low &amp;lt; high &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		pivot := low + (high - low) / &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; nums[pivot] &amp;lt; nums[high] &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			high = pivot&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			low = pivot + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; nums[low]&lt;/span&gt;&lt;br&gt;&lt;span</summary>
        
      
    
    
    
    <category term="面试" scheme="https://bishoptylaor.github.io/categories/interview/"/>
    
    <category term="刷题" scheme="https://bishoptylaor.github.io/categories/interview/juan/"/>
    
    <category term="NeetCode150" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/"/>
    
    <category term="Binary Search" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/b-search/"/>
    
    
  </entry>
  
  <entry>
    <title>Leetcode.33 搜索旋转排序数组</title>
    <link href="https://bishoptylaor.github.io/interview/juan/neet150/b-search/leet-33-search-in-rotated-sorted-array/"/>
    <id>https://bishoptylaor.github.io/interview/juan/neet150/b-search/leet-33-search-in-rotated-sorted-array/</id>
    <published>2024-05-20T08:46:48.000Z</published>
    <updated>2024-07-12T14:15:22.485Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://leetcode.cn/problems/search-in-rotated-sorted-array/description/&quot;&gt;Leetcode.33 搜索旋转排序数组&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;整数数组 &lt;code&gt;nums&lt;/code&gt; 按升序排列，数组中的值 &lt;strong&gt;互不相同&lt;/strong&gt; 。&lt;/p&gt;
&lt;p&gt;在传递给函数之前，&lt;code&gt;nums&lt;/code&gt; 在预先未知的某个下标 &lt;code&gt;k&lt;/code&gt;（&lt;code&gt;0 &amp;lt;= k &amp;lt; nums.length&lt;/code&gt;）上进行了 &lt;strong&gt;旋转&lt;/strong&gt;，使数组变为 &lt;code&gt;[nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]]&lt;/code&gt;（下标 &lt;strong&gt;从 0 开始&lt;/strong&gt; 计数）。例如， &lt;code&gt;[0,1,2,4,5,6,7]&lt;/code&gt; 在下标 &lt;code&gt;3&lt;/code&gt; 处经旋转后可能变为 &lt;code&gt;[4,5,6,7,0,1,2]&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;给你 &lt;strong&gt;旋转后&lt;/strong&gt; 的数组 &lt;code&gt;nums&lt;/code&gt; 和一个整数 &lt;code&gt;target&lt;/code&gt; ，如果 &lt;code&gt;nums&lt;/code&gt; 中存在这个目标值 &lt;code&gt;target&lt;/code&gt; ，则返回它的下标，否则返回 &lt;code&gt;-1&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;你必须设计一个时间复杂度为 &lt;code&gt;O(log n)&lt;/code&gt; 的算法解决此问题。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例 1：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：nums = [`4,5,6,7,0,1,2]`, target = 0
输出：4
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;示例 2：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：nums = [`4,5,6,7,0,1,2]`, target = 3
输出：-1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;示例 3：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：nums = [1], target = 0
输出：-1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;提示：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= nums.length &amp;lt;= 5000&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-104 &amp;lt;= nums[i] &amp;lt;= 104&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nums&lt;/code&gt; 中的每个值都 &lt;strong&gt;独一无二&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;题目数据保证 &lt;code&gt;nums&lt;/code&gt; 在预先未知的某个下标上进行了旋转&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-104 &amp;lt;= target &amp;lt;= 104&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;二分查找嗷&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;search&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(nums []&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;, target &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(nums) == &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; nums[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;] != target &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	l, r := &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(nums)&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; l&amp;lt;=r &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		mid := (r + l)/&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; nums[mid] == target &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; mid&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// 左侧递增&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; nums[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;] &amp;lt;= nums[mid] &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;comment&quot;&gt;// 落在左，从左侧找&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; nums[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;] &amp;lt;= target &amp;amp;&amp;amp; target &amp;lt; nums[mid] &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				r = mid&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;comment&quot;&gt;// mid 左侧非递增，尝试从右边找&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				l = mid+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;comment&quot;&gt;// 落在右区间内，从右侧找&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; nums[mid] &amp;lt; target &amp;amp;&amp;amp; target &amp;lt;= nums[&lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(nums)&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;] &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				l = mid+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				r = mid&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;思路和算法&lt;/p&gt;
&lt;p&gt;对于有序数组，可以使用二分查找的方法查找元素。&lt;/p&gt;
&lt;p&gt;但是这道题中，数组本身不是有序的，进行旋转后只保证了数组的局部是有序的，这还能进行二分查找吗？答案是可以的。&lt;/p&gt;
&lt;p&gt;可以发现的是，我们将数组从中间分开成左右两部分的时候，一定有一部分的数组是有序的。拿示例来看，我们从 6 这个位置分开以后数组变成了 [4, 5, 6] 和 [7, 0, 1, 2] 两个部分，其中左边 [4, 5, 6] 这个部分的数组是有序的，其他也是如此。&lt;/p&gt;
&lt;p&gt;这启示我们可以在常规二分查找的时候查看当前 mid 为分割位置分割出来的两个部分 [l, mid] 和 [mid + 1, r] 哪个部分是有序的，并根据有序的那个部分确定我们该如何改变二分查找的上下界，因为我们能够根据有序的那部分判断出 target 在不在这个部分：&lt;/p&gt;
&lt;p&gt;如果 [l, mid - 1] 是有序数组，且 target 的大小满足 [nums[l],nums[mid])[&#92;textit{nums}[l],&#92;textit{nums}[mid])[nums[l],nums[mid])，则我们应该将搜索范围缩小至 [l, mid - 1]，否则在 [mid + 1, r] 中寻找。&lt;br&gt;如果 [mid, r] 是有序数组，且 target 的大小满足 (nums[mid+1],nums[r]](&#92;textit{nums}[mid+1],&#92;textit{nums}[r]](nums[mid+1],nums[r]]，则我们应该将搜索范围缩小至 [mid + 1, r]，否则在 [l, mid - 1] 中寻找。&lt;/p&gt;
&lt;p&gt;&lt;img</summary>
        
      
    
    
    
    <category term="面试" scheme="https://bishoptylaor.github.io/categories/interview/"/>
    
    <category term="刷题" scheme="https://bishoptylaor.github.io/categories/interview/juan/"/>
    
    <category term="NeetCode150" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/"/>
    
    <category term="Binary Search" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/b-search/"/>
    
    
  </entry>
  
  <entry>
    <title>Leetcode.15 三数之和</title>
    <link href="https://bishoptylaor.github.io/interview/juan/neet150/two-ptr/leet-15-3sum/"/>
    <id>https://bishoptylaor.github.io/interview/juan/neet150/two-ptr/leet-15-3sum/</id>
    <published>2024-05-20T08:46:44.000Z</published>
    <updated>2024-07-12T14:15:22.486Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://leetcode.cn/problems/3sum/description/&quot;&gt;Leetcode.15 三数之和&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;给你一个整数数组 &lt;code&gt;nums&lt;/code&gt; ，判断是否存在三元组 &lt;code&gt;[nums[i], nums[j], nums[k]]&lt;/code&gt; 满足 &lt;code&gt;i != j&lt;/code&gt;、&lt;code&gt;i != k&lt;/code&gt; 且 &lt;code&gt;j != k&lt;/code&gt; ，同时还满足 &lt;code&gt;nums[i] + nums[j] + nums[k] == 0&lt;/code&gt; 。请&lt;/p&gt;
&lt;p&gt;你返回所有和为 &lt;code&gt;0&lt;/code&gt; 且不重复的三元组。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意：&lt;/strong&gt;答案中不可以包含重复的三元组。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例 1：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：nums = [-1,0,1,2,-1,-4]
输出：[[-1,-1,2],[-1,0,1]]
解释：
nums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0 。
nums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0 。
nums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0 。
不同的三元组是 [-1,0,1] 和 [-1,-1,2] 。
注意，输出的顺序和三元组的顺序并不重要。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;示例 2：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：nums = [0,1,1]
输出：[]
解释：唯一可能的三元组和不为 0 。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;示例 3：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：nums = [0,0,0]
输出：[[0,0,0]]
解释：唯一可能的三元组和为 0 。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;提示：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;3 &amp;lt;= nums.length &amp;lt;= 3000&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-105 &amp;lt;= nums[i] &amp;lt;= 105&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;思路解析&quot;&gt;&lt;a href=&quot;#思路解析&quot; class=&quot;headerlink&quot; title=&quot;思路解析&quot;&gt;&lt;/a&gt;思路解析&lt;/h3&gt;&lt;p&gt;流程可以参考 &lt;a href=&quot;https://leetcode.cn/problems/two-sum/&quot;&gt;两数之和&lt;/a&gt; 和 &lt;a href=&quot;https://leetcode.cn/problems/two-sum-ii-input-array-is-sorted/description/&quot;&gt;两数之和 II&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;设置 a，b，c 三个指针，首先固定 a 指针，可以确定当前目标求和为 - nums[a]&lt;br&gt;在 a 指针后续的位置设置 b 指针，通过 c 指针遍历 b 后面的位置，确定符合的三元组&lt;br&gt;c 指针遍历一轮之后，可以将 b 指针向后移动，直到当前从 a 指针出发的所有三元组都被找到&lt;br&gt;然后再移动 a 指针&lt;/p&gt;
&lt;p&gt;比较关键的点是，结果中的三元组不能重复，那么我们可以通过先排序的方法，在求解过程中提前将重复结果过滤掉&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;threeSum&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(nums []&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; [][]&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	n := &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(nums) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	sort.Ints(nums) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	ans := &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;([][]&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// 枚举 a &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; first := &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; first &amp;lt; n; first++ &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// 需要和上一次枚举的数不相同 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; first &amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;amp;&amp;amp; nums[first] == nums[first - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;] &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;continue&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// c 对应的指针初始指向数组的最右端 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		third := n - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		target := &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt; * nums[first] &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// 枚举 b &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; second := first + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; second &amp;lt; n; second++ &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;comment&quot;&gt;// 需要和上一次枚举的数不相同 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; second &amp;gt; first + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &amp;amp;&amp;amp; nums[second] == nums[second - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;] &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;keyword&quot;&gt;continue&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;comment&quot;&gt;// 需要保证 b 的指针在 c 的指针的左侧 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; second &amp;lt; third &amp;amp;&amp;amp; nums[second] + nums[third] &amp;gt; target &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				third-- &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;comment&quot;&gt;// 如果指针重合，随着 b 后续的增加 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;comment&quot;&gt;// 就不会有满足 a+b+c=0 并且 b&amp;lt;c 的 c 了，可以退出循环 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; second == third &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; nums[second] + nums[third] == target &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				ans = &lt;span class=&quot;built_in&quot;&gt;append&lt;/span&gt;(ans, []&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;&amp;#123;nums[first], nums[second], nums[third]&amp;#125;) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; ans &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;</summary>
        
      
    
    
    
    <category term="面试" scheme="https://bishoptylaor.github.io/categories/interview/"/>
    
    <category term="刷题" scheme="https://bishoptylaor.github.io/categories/interview/juan/"/>
    
    <category term="NeetCode150" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/"/>
    
    <category term="Two Pointers" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/two-ptr/"/>
    
    
  </entry>
  
  <entry>
    <title>Leetcode.11 盛最多水的容器</title>
    <link href="https://bishoptylaor.github.io/interview/juan/neet150/two-ptr/leet-11-container-with-most-water/"/>
    <id>https://bishoptylaor.github.io/interview/juan/neet150/two-ptr/leet-11-container-with-most-water/</id>
    <published>2024-05-20T08:46:41.000Z</published>
    <updated>2024-07-12T14:15:22.486Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://leetcode.cn/problems/container-with-most-water/description/&quot;&gt;Leetcode.11 盛最多水的容器&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;给定一个长度为 &lt;code&gt;n&lt;/code&gt; 的整数数组 &lt;code&gt;height&lt;/code&gt; 。有 &lt;code&gt;n&lt;/code&gt; 条垂线，第 &lt;code&gt;i&lt;/code&gt; 条线的两个端点是 &lt;code&gt;(i, 0)&lt;/code&gt; 和 &lt;code&gt;(i, height[i])&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;找出其中的两条线，使得它们与 &lt;code&gt;x&lt;/code&gt; 轴共同构成的容器可以容纳最多的水。&lt;/p&gt;
&lt;p&gt;返回容器可以储存的最大水量。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;说明：&lt;/strong&gt;你不能倾斜容器。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例 1：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://aliyun-lc-upload.oss-cn-hangzhou.aliyuncs.com/aliyun-lc-upload/uploads/2018/07/25/question_11.jpg&quot;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：[1,8,6,2,5,4,8,3,7]
输出：49 
解释：图中垂直线代表输入数组 [1,8,6,2,5,4,8,3,7]。在此情况下，容器能够容纳水（表示为蓝色部分）的最大值为 49。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;示例 2：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：height = [1,1]
输出：1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;提示：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;n == height.length&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;2 &amp;lt;= n &amp;lt;= 105&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;0 &amp;lt;= height[i] &amp;lt;= 104&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;采用双指针方式，每次移动短边&lt;br&gt;移动短边可能变得更好，一定不会变得更坏&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;maxArea&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(height []&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	l, r := &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(height)&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	ans := &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; l&amp;lt;r &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		area := min(height[l], height[r]) * (r-l)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		ans = max(area, ans)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; height[l] &amp;lt;= height[r] &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			l += &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			r -= &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; ans&lt;/span&gt;&lt;br&gt;&lt;span</summary>
        
      
    
    
    
    <category term="面试" scheme="https://bishoptylaor.github.io/categories/interview/"/>
    
    <category term="刷题" scheme="https://bishoptylaor.github.io/categories/interview/juan/"/>
    
    <category term="NeetCode150" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/"/>
    
    <category term="Two Pointers" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/two-ptr/"/>
    
    
  </entry>
  
  <entry>
    <title>Leetcode.1 两数之和</title>
    <link href="https://bishoptylaor.github.io/interview/juan/neet150/arrays-hashing/leet-1-2sum/"/>
    <id>https://bishoptylaor.github.io/interview/juan/neet150/arrays-hashing/leet-1-2sum/</id>
    <published>2024-05-20T08:45:52.000Z</published>
    <updated>2024-07-12T14:15:22.483Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://leetcode.cn/problems/two-sum/description/&quot;&gt;Leetcode.1 两数之和&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;给定一个整数数组 &lt;code&gt;nums&lt;/code&gt; 和一个整数目标值 &lt;code&gt;target&lt;/code&gt;，请你在该数组中找出 &lt;strong&gt;和为目标值&lt;/strong&gt; &lt;em&gt;&lt;code&gt;target&lt;/code&gt;&lt;/em&gt;  的那 &lt;strong&gt;两个&lt;/strong&gt; 整数，并返回它们的数组下标。&lt;br&gt;你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。&lt;br&gt;你可以按任意顺序返回答案。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例 1：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：nums = [2,7,11,15], target = 9
输出：[0,1]
解释：因为 nums[0] + nums[1] == 9 ，返回 [0, 1] 。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;示例 2：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：nums = [3,2,4], target = 6
输出：[1,2]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;示例 3：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：nums = [3,3], target = 6
输出：[0,1]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;提示：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;2 &amp;lt;= nums.length &amp;lt;= 104&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-109 &amp;lt;= nums[i] &amp;lt;= 109&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-109 &amp;lt;= target &amp;lt;= 109&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;暴力法 O(N^2)&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;twoSum&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(nums []&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;, target &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; []&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; first:=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; first&amp;lt;&lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(nums)&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;; first++ &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; second := first + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; second&amp;lt;&lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(nums); second ++ &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; nums[first] + nums[second] == target &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; []&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;&amp;#123;first, second&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; []&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;哈希法 O(N)&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;twoSum&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(nums []&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;, target &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; []&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	hashTable := &lt;span class=&quot;keyword&quot;&gt;map&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;]&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i, x := &lt;span class=&quot;keyword&quot;&gt;range&lt;/span&gt; nums &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; p, ok := hashTable[target-x]; ok &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; []&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;&amp;#123;p, i&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        hashTable[x] = i&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; []&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span</summary>
        
      
    
    
    
    <category term="面试" scheme="https://bishoptylaor.github.io/categories/interview/"/>
    
    <category term="刷题" scheme="https://bishoptylaor.github.io/categories/interview/juan/"/>
    
    <category term="NeetCode150" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/"/>
    
    <category term="Arrays &amp; Hashing" scheme="https://bishoptylaor.github.io/categories/interview/juan/neet150/arrays-hashing/"/>
    
    
  </entry>
  
  <entry>
    <title>go 八股</title>
    <link href="https://bishoptylaor.github.io/interview/go/go-eight-part-frame/"/>
    <id>https://bishoptylaor.github.io/interview/go/go-eight-part-frame/</id>
    <published>2024-05-14T12:06:53.000Z</published>
    <updated>2024-07-25T17:42:53.340Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;sync-Map&quot;&gt;&lt;a href=&quot;#sync-Map&quot; class=&quot;headerlink&quot; title=&quot;sync.Map&quot;&gt;&lt;/a&gt;sync.Map&lt;/h1&gt;&lt;h3 id=&quot;golang-中原生的-map-本身是线程不安全的，主要表现在以下方面：&quot;&gt;&lt;a href=&quot;#golang-中原生的-map-本身是线程不安全的，主要表现在以下方面：&quot; class=&quot;headerlink&quot; title=&quot;golang 中原生的 map 本身是线程不安全的，主要表现在以下方面：&quot;&gt;&lt;/a&gt;golang 中原生的 map 本身是线程不安全的，主要表现在以下方面：&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;对于 map 结构的并发访问，会报错 panic。&lt;/li&gt;
&lt;li&gt;即使通过某种方式不同时写一个 key，在 map 扩容的时候也会有问题，因为 map 的扩容是线程不安全的&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;sync-Map-相对-map-的优势：&quot;&gt;&lt;a href=&quot;#sync-Map-相对-map-的优势：&quot; class=&quot;headerlink&quot; title=&quot;sync.Map 相对 map 的优势：&quot;&gt;&lt;/a&gt;sync.Map 相对 map 的优势：&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;一写多读&lt;/li&gt;
&lt;li&gt;空间换时间 &amp;#x3D; read 和 dirty&lt;/li&gt;
&lt;li&gt;double-checking&lt;/li&gt;
&lt;li&gt;缓存思路&lt;/li&gt;
&lt;li&gt;延时删除&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;关于-dirty-的提升&quot;&gt;&lt;a href=&quot;#关于-dirty-的提升&quot; class=&quot;headerlink&quot; title=&quot;关于 dirty 的提升&quot;&gt;&lt;/a&gt;关于 dirty 的提升&lt;/h3&gt;&lt;p&gt;Map 中维持了一个 int 类型的 &lt;code&gt;misses&lt;/code&gt; 每当 Map 未命中 read 时，会将该值自增 1， 当该值大于 dirty 的长度后，dirty 就会被提升为 read，提升之后，dirty 和 misses 会被重置，等下一次插入新值时，会将 read 中未删除的数据复制到 dirty 中。&lt;br&gt;除此之外，执行 &lt;code&gt;Range&lt;/code&gt; 时，也会先进行一次提升。&lt;/p&gt;
&lt;h3 id=&quot;关于延迟删除&quot;&gt;&lt;a href=&quot;#关于延迟删除&quot; class=&quot;headerlink&quot; title=&quot;关于延迟删除&quot;&gt;&lt;/a&gt;关于延迟删除&lt;/h3&gt;&lt;p&gt;当执行 &lt;code&gt;Delete&lt;/code&gt; 时，如果 read 没有击中， 就会直接从 dirty 中删除，否则如果键值在 read 中，会先将其 Value 的指针（enter.p）标记为 nil, 等下一次执行复制时，这些被标记为 nil 的键值会被重新标记为 expunged，即 enter.p 有三种可能的值：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;nil: 表示 键值已经被删除，但这一版的 read 还没有被复制到 dirty 中，所以 dirty 此时为 nil, 遇到要重新插入这个key时，可以直接修改 read，之后进行复制时，这个最新的值会被同步回 dirty。&lt;/li&gt;
&lt;li&gt;expunged: 表示该键值已经被删除并且经历了复制， dirty 不为 nil， 这时需要同时修改 read 和 dirty， 避免 read 的数据比 dirty 中的数据新，导致下一次提升时丢失新数据。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;!= nil&lt;/code&gt;: 表示存储的是具体的 value 的指针。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;sync.Map 具有以下结构和方法&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;103&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;104&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;105&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;106&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;107&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;108&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;109&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;110&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;111&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;112&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;113&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;114&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;115&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;116&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;117&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;118&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;119&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;120&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;121&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;122&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;123&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;124&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;125&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;126&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;127&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;128&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;129&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;130&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;131&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;132&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;133&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;134&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;135&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;136&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;137&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;138&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;139&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;140&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;141&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;142&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;143&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;144&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;145&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;146&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;147&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;148&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;149&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;150&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;151&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;152&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;153&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;154&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;155&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;156&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;157&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;158&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;159&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;160&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;161&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;162&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;163&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;164&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;165&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;166&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;167&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;168&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;169&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;170&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;171&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;172&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;173&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;174&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;175&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;176&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;177&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;178&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;179&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;180&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;181&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;182&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;183&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;184&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;185&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; Map &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	mu sync.Mutex &lt;span class=&quot;comment&quot;&gt;// 互斥锁&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	read atomic.Value &lt;span class=&quot;comment&quot;&gt;// 原子化只读操作&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	dirty &lt;span class=&quot;keyword&quot;&gt;map&lt;/span&gt;[&lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt;&amp;#123;&amp;#125;]*entry &lt;span class=&quot;comment&quot;&gt;// 新增的 kv 会存储到这里&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	misses &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;// 当 read 中查询失败时，misses+=1，当 miss 的数量超过 dirty 时，会触发将 dirty 转化到 read&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 从 Map 中取出一个 value &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(m *Map)&lt;/span&gt;&lt;/span&gt; Load(key &lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt;&amp;#123;&amp;#125;) (value &lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt;&amp;#123;&amp;#125;, ok &lt;span class=&quot;type&quot;&gt;bool&lt;/span&gt;) &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	read, _ := m.read.Load().(readOnly) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// 优先从 read 中读取&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	e, ok := read.m[key] &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// 当读不到且 amended = true 时，再互斥的从 dirty 中查找&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; !ok &amp;amp;&amp;amp; read.amended &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		m.mu.Lock() &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// double-checking， 避免在加锁过程中有其他 goroutine 将 dirty 提升为 read 的情况&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		read, _ = m.read.Load().(readOnly) e, ok = read.m[key] &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// 双重查找后还找不到，再去 dirty 中查找，同时 misses += 1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; !ok &amp;amp;&amp;amp; read.amended &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			e, ok = m.dirty[key] &lt;span class=&quot;comment&quot;&gt;// 修改 misses，尝试提升 dirty &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			m.missLocked() &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		m.mu.Unlock()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; !ok &amp;#123; &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt; &amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// 需要注意这里取到的是指向真实 value 的指针，还需要读取出真正的 value&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; e.load() &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(m *Map)&lt;/span&gt;&lt;/span&gt; missLocked() &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	m.misses++ &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; m.misses &amp;lt; &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(m.dirty) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// 将 dirty 提升为 read &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	m.read.Store(readOnly&amp;#123;m: m.dirty&amp;#125;) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// 重置相关字段 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	m.dirty = &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	m.misses = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 向 Map 中 存入一个 KV 对 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(m *Map)&lt;/span&gt;&lt;/span&gt; Store(key, value &lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt;&amp;#123;&amp;#125;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// 优先从 read 中读取&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// 如果 read 中找到了，利用 entry 的 tryStore 方法更新 value&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	read, _ := m.read.Load().(readOnly) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; e, ok := read.m[key]; ok &amp;amp;&amp;amp; e.tryStore(&amp;amp;value) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// 加锁， 二次检查&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	m.mu.Lock() &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	read, _ = m.read.Load().(readOnly) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; e, ok := read.m[key]; ok &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// 当对已经存在于 `read` 中的键值对执行删除操作时，而是会把其暂时标记为 `nil`,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// 等 dirty 升级为 read 后再插入新值时会把 read 中标记为 `nil` 的值标记为 `expunged`, &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// 而其他的值会被重新复制到 dirty 中，当这时插入刚被删除的键后，就会直接把之前标记为 `expunged` 的键的值赋为新值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; e.unexpungeLocked() &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			m.dirty[key] = e &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		e.storeLocked(&amp;amp;value) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; e, ok := m.dirty[key]; ok &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// 如果 dirty 中找到了，通过 storeLocked 修改 dirty 中的 entry&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		e.storeLocked(&amp;amp;value) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// dirty 中也没有，那么就直接插入到 dirty 中&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; !read.amended &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;comment&quot;&gt;// 此时如果 amended == false，对应两种情况&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;comment&quot;&gt;// 1. 第一次插入数据，read 和 dirty 都为空，此时需要对 read 进行初始化&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;comment&quot;&gt;// 2. 之前的 dirty 刚刚升级成为 read，此时 dirty 为空，需要将之前有可能存在的已标记删除的进行惰性删除&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			m.dirtyLocked() &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			m.read.Store(readOnly&amp;#123;m: read.m, amended: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&amp;#125;) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		m.dirty[key] = newEntry(value) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	m.mu.Unlock()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 如果 Map 中存在 key,覆盖并返回 (旧值, true), 否则返回 (新值, false) &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(m *Map)&lt;/span&gt;&lt;/span&gt; LoadOrStore(key, value &lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt;&amp;#123;&amp;#125;) (actual &lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt;&amp;#123;&amp;#125;, loaded &lt;span class=&quot;type&quot;&gt;bool&lt;/span&gt;) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 从 Map 中删除一个 KV 对 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(m *Map)&lt;/span&gt;&lt;/span&gt; Delete(key &lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt;&amp;#123;&amp;#125;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// 二次检查 read&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	read, _ := m.read.Load().(readOnly) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	e, ok := read.m[key] &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; !ok &amp;amp;&amp;amp; read.amended &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		m.mu.Lock() &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		read, _ = m.read.Load().(readOnly) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		e, ok = read.m[key] &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// 不存在，就从 dirty 中删除&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; !ok &amp;amp;&amp;amp; read.amended &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;built_in&quot;&gt;delete&lt;/span&gt;(m.dirty, key) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		m.mu.Unlock() &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// 存在的话就调用 entry 的 delete() 从 read 中删除&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ok &amp;#123; e.&lt;span class=&quot;built_in&quot;&gt;delete&lt;/span&gt;() &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 对 Map 中的所有 KV 执行 f, 直到 f 返回 false &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(m *Map)&lt;/span&gt;&lt;/span&gt; Range(f &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(key, value &lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt;&amp;#123;&amp;#125;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;bool&lt;/span&gt;) &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	read, _ := m.read.Load().(readOnly) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; read.amended &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// double-checking&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		m.mu.Lock() &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		read, _ = m.read.Load().(readOnly) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; read.amended &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;comment&quot;&gt;// 提升 dirty&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			read = readOnly&amp;#123;m: m.dirty&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			m.read.Store(read) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			m.dirty = &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			m.misses = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		m.mu.Unlock() &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; k, e := &lt;span class=&quot;keyword&quot;&gt;range&lt;/span&gt; read.m &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		v, ok := e.load() &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; !ok &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;continue&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; !f(k, v) &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(m *Map)&lt;/span&gt;&lt;/span&gt; dirtyLocked() &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// 对应情况 1 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; m.dirty != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123; &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// 情况 2 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	read, _ := m.read.Load().(readOnly) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	m.dirty = &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;map&lt;/span&gt;[&lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt;&amp;#123;&amp;#125;]*entry, &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(read.m)) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; k, e := &lt;span class=&quot;keyword&quot;&gt;range&lt;/span&gt; read.m &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// 没有被删除，复制到 dirty 中 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; !e.tryExpungeLocked() &amp;#123; m.dirty[k] = e &amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; readOnly &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// m 和 dirty 中的 value 是同一块内存 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	m &lt;span class=&quot;keyword&quot;&gt;map&lt;/span&gt;[&lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt;&amp;#123;&amp;#125;]*entry &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// 如果 dirty 和 read 中的数据不一致时，amended 为 true。若此时 read 中读不到，就要去 dirty 中查询&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	amended &lt;span class=&quot;type&quot;&gt;bool&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// read 和 dirty 中的 entry 指向的是同一地址，修改会同时生效；减少空间浪费&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; entry &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	p unsafe.Pointer &lt;span class=&quot;comment&quot;&gt;// *interface&amp;#123;&amp;#125; &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(e *entry)&lt;/span&gt;&lt;/span&gt; load() (value &lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt;&amp;#123;&amp;#125;, ok &lt;span class=&quot;type&quot;&gt;bool&lt;/span&gt;) &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	p := atomic.LoadPointer(&amp;amp;e.p) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; p == &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; || p == expunged &amp;#123; &lt;span class=&quot;comment&quot;&gt;// 由于 Map 的延时删除策略，出现这两种情况均代表 kv 已经不存在了&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; *(*&lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt;&amp;#123;&amp;#125;)(p), &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(e *entry)&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;delete&lt;/span&gt;() (hadValue &lt;span class=&quot;type&quot;&gt;bool&lt;/span&gt;) &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// 这里不是真的删除嗷，只是将对应 value 的 p 指向了 nil。直到下一次 dirty 升级时才会真正的删除，aka Map 的延时删除策略&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; &amp;#123; p := atomic.LoadPointer(&amp;amp;e.p) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// 不存在或被删除&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; p == &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; || p == expunged &amp;#123; &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt; &amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// CAS 将 enter.p 指向 nil &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; atomic.CompareAndSwapPointer(&amp;amp;e.p, p, &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;) &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(e *entry)&lt;/span&gt;&lt;/span&gt; tryStore(i *&lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt;&amp;#123;&amp;#125;) &lt;span class=&quot;type&quot;&gt;bool&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		p := atomic.LoadPointer(&amp;amp;e.p) &lt;span class=&quot;comment&quot;&gt;// 被删除 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; p == expunged &amp;#123; &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt; &amp;#125; &lt;span class=&quot;comment&quot;&gt;// 比较 e.p 与 p, 相等赋新值，否则自旋比较 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; atomic.CompareAndSwapPointer(&amp;amp;e.p, p, unsafe.Pointer(i)) &amp;#123; &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt; &amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(e *entry)&lt;/span&gt;&lt;/span&gt; storeLocked(i *&lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt;&amp;#123;&amp;#125;) &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	atomic.StorePointer(&amp;amp;e.p, unsafe.Pointer(i)) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 用来判断 `entry` 是否被删除，当 `entry.p == nil` 时，说明这个 value 被标记为删除，这时会把它重新标记为 `expunged` 返回 true， 否则返回 false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(e *entry)&lt;/span&gt;&lt;/span&gt; tryExpungeLocked() (isExpunged &lt;span class=&quot;type&quot;&gt;bool&lt;/span&gt;) &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	p := atomic.LoadPointer(&amp;amp;e.p) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; p == &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; atomic.CompareAndSwapPointer(&amp;amp;e.p, &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;, expunged) &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		p = atomic.LoadPointer(&amp;amp;e.p) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; p == expunged &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;


&lt;h1 id=&quot;sync-Once&quot;&gt;&lt;a href=&quot;#sync-Once&quot; class=&quot;headerlink&quot; title=&quot;sync.Once&quot;&gt;&lt;/a&gt;sync.Once&lt;/h1&gt;&lt;p&gt;用于执行一次性操作，通常用于初始化只需执行一次的任务。它的作用是确保某个操作只会执行一次，无论是在单线程环境还是多线程环境下都可以保证。&lt;br&gt;比较值得学习的是使用到的&lt;strong&gt;快慢路径&lt;/strong&gt;这个编程范式。&lt;/p&gt;
&lt;h4 id=&quot;慢路径（Slow-Path）&quot;&gt;&lt;a href=&quot;#慢路径（Slow-Path）&quot; class=&quot;headerlink&quot; title=&quot;慢路径（Slow Path）&quot;&gt;&lt;/a&gt;慢路径（Slow Path）&lt;/h4&gt;&lt;p&gt;慢路径（Slow Path）指一种更加保守、安全但性能较低的解决方案。代码会使用互斥锁等同步原语来确保并发安全性。慢路径会导致性能开销增加，因为它需要在多个线程之间进行显式的同步和互斥操作，以确保数据的一致性和正确性。&lt;/p&gt;
&lt;h4 id=&quot;快路径（Fast-Path）&quot;&gt;&lt;a href=&quot;#快路径（Fast-Path）&quot; class=&quot;headerlink&quot; title=&quot;快路径（Fast Path）&quot;&gt;&lt;/a&gt;快路径（Fast Path）&lt;/h4&gt;&lt;p&gt;快路径（Fast Path）指一种更加高效但风险较高的解决方案。代码会使用原子操作等非阻塞的同步机制来尽量减少同步开销。快路径会更高效，因为它避免了显式的同步和互斥操作，但在某些情况下会导致竞态条件或数据不一致的问题。&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; Once &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	done &lt;span class=&quot;type&quot;&gt;uint32&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	m    Mutex &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(o *Once)&lt;/span&gt;&lt;/span&gt; Do(f &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;) &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; atomic.LoadUint32(&amp;amp;o.done) == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		o.doSlow(f) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(o *Once)&lt;/span&gt;&lt;/span&gt; doSlow(f &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;) &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	o.m.Lock() &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;defer&lt;/span&gt; o.m.Unlock() &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; o.done == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;defer&lt;/span&gt; atomic.StoreUint32(&amp;amp;o.done, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		f() &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;


&lt;h1 id=&quot;Slice&quot;&gt;&lt;a href=&quot;#Slice&quot; class=&quot;headerlink&quot; title=&quot;Slice&quot;&gt;&lt;/a&gt;Slice&lt;/h1&gt;&lt;p&gt;比较常见的问题是 slice 和普通 array 的区别：array 是值类型；slice 是引用类型，指向底层的数组地址&lt;br&gt;子切片：引用的底层数组是一致的，但是 slice 本身对应的内存地址不一致；当子切片长度超过原切片的时候，会产生扩容，替换掉原来的底层数组。&lt;br&gt;有一个特性是，如果使用 append 语句一次性加入多个元素，且新增元素数量超过了原始 slice 的容量，那么 golang 会自动根据总元素数量来申请新的容量进行扩容。其中还涉及到了申请时内存对齐的问题，可能申请到的容量会稍大于元素数量&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; s []&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;// nil 未分配内存&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;s1 := []&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;&amp;#123;&amp;#125; &lt;span class=&quot;comment&quot;&gt;// 声明 + 初始化 一个长度为 0 的 slice&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;s2 := []&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;&amp;#123;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;&amp;#125; &lt;span class=&quot;comment&quot;&gt;// 声明 + 初始化 一个长度为 3 的 slice&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h1 id=&quot;Channel&quot;&gt;&lt;a href=&quot;#Channel&quot; class=&quot;headerlink&quot; title=&quot;Channel&quot;&gt;&lt;/a&gt;Channel&lt;/h1&gt;&lt;p&gt;Channel是异步进行的, channel存在3种状态：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;nil，未初始化的状态，只进行了声明，或者手动赋值为nil&lt;/li&gt;
&lt;li&gt;active，正常的channel，可读或者可写&lt;/li&gt;
&lt;li&gt;closed，已关闭，千万不要误认为关闭channel后，channel的值是nil&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;操作&lt;/th&gt;
&lt;th&gt;一个零值nil通道&lt;/th&gt;
&lt;th&gt;一个非零值但已关闭的通道&lt;/th&gt;
&lt;th&gt;一个非零值且尚未关闭的通道&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;关闭&lt;/td&gt;
&lt;td&gt;产生恐慌&lt;/td&gt;
&lt;td&gt;产生恐慌&lt;/td&gt;
&lt;td&gt;成功关闭&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;发送数据&lt;/td&gt;
&lt;td&gt;永久阻塞&lt;/td&gt;
&lt;td&gt;产生恐慌&lt;/td&gt;
&lt;td&gt;阻塞或者成功发送&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;接收数据&lt;/td&gt;
&lt;td&gt;永久阻塞&lt;/td&gt;
&lt;td&gt;永不阻塞&lt;/td&gt;
&lt;td&gt;阻塞或者成功接收&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;ol&gt;
&lt;li&gt;Channel本质上是由三个FIFO（First In FirstOut，先进先出）队列组成的用于协程之间传输数据的协程安全的通道；FIFO的设计是为了保障公平，让事情变得简单，原则是让等待时间最长的协程最有资格先从channel发送或接收数据；&lt;/li&gt;
&lt;li&gt;三个FIFO队列依次是buf循环队列，sendq待发送者队列，recvq待接收者队列。buf循环队列是大小固定的用来存放channel接收的数据的队列；sendq待发送者队列，用来存放等待发送数据到channel的goroutine的双向链表，recvq待接收者队列，用来存放等待从channel读取数据的goroutine的双向链表；sendq和recvq可以认为不限大小；&lt;/li&gt;
&lt;li&gt;跟函数调用传参本质都是传值一样，channel传递数据的本质就是值拷贝，引用类型数据的传递也是地址拷贝；有从缓冲区buf地址拷贝数据到接收者receiver栈内存地址，也有从发送者sender栈内存地址拷贝数据到缓冲区buf；&lt;/li&gt;
&lt;li&gt;Channel里面参数的修改不是并发安全的，包括对三个队列及其他参数的访问，因此需要加锁，本质上，channel就是一个有锁队列；&lt;/li&gt;
&lt;li&gt;Channel 的性能跟 sync.Mutex 差不多，没有谁比谁强。Go官方之所以推荐使用Channel进行并发协程的数据交互，是因为channel的设计理念能让程序变得简单，在大型程序、高并发复杂的运行状况中也是如此。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;关注下方代码 &lt;code&gt;makechan&lt;/code&gt; 中 &lt;code&gt;switch-case&lt;/code&gt; 相关语句，可以发现当存储在 buf 中的元素不包含指针时，hchan 中也不包含 GC 关心的指针。buf 指向一段相同元素类型的内存，elemtype 固定不变。受到垃圾回收器的限制，指针类型的缓冲 buf 需要单独分配内存。&lt;br&gt;channel 本身是引用类型，其创建全部调用的是 mallocgc()，在&lt;em&gt;堆&lt;/em&gt;上开辟的内存空间，说明 channel 本身会被 GC 自动回收。&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; hchan &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	qcount &lt;span class=&quot;type&quot;&gt;uint&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;// 队列中所有数据总数 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	dataqsiz &lt;span class=&quot;type&quot;&gt;uint&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;// 循环队列大小 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	buf unsafe.Pointer &lt;span class=&quot;comment&quot;&gt;// 指向循环队列的指针 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	elemsize &lt;span class=&quot;type&quot;&gt;uint16&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;// 循环队列中元素的大小 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	closed &lt;span class=&quot;type&quot;&gt;uint32&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;// chan是否关闭的标识 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	elemtype *_type &lt;span class=&quot;comment&quot;&gt;// 循环队列中元素的类型 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	sendx &lt;span class=&quot;type&quot;&gt;uint&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;// 已发送元素在循环队列中的位置 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	recvx &lt;span class=&quot;type&quot;&gt;uint&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;// 已接收元素在循环队列中的位置 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	recvq waitq &lt;span class=&quot;comment&quot;&gt;// 等待接收的goroutine的等待队列 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	sendq waitq &lt;span class=&quot;comment&quot;&gt;// 等待发送的goroutine的等待队列 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	lock mutex &lt;span class=&quot;comment&quot;&gt;// 控制chan并发访问的互斥锁 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;makechan&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(t *chantype, size &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; *hchan &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	elem := t.elem &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// 检查数据项大小不能超过 64KB &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; elem.size &amp;gt;= &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=&quot;number&quot;&gt;16&lt;/span&gt; &amp;#123; throw(&lt;span class=&quot;string&quot;&gt;&amp;quot;makechan: invalid channel element type&amp;quot;&lt;/span&gt;) &amp;#125; &lt;span class=&quot;comment&quot;&gt;// 检查内存对齐是否正确 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; hchanSize%maxAlign != &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; || elem.align &amp;gt; maxAlign &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		throw(&lt;span class=&quot;string&quot;&gt;&amp;quot;makechan: bad alignment&amp;quot;&lt;/span&gt;) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// 缓冲区大小检查，判断是否溢出 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	mem, overflow := math.MulUintptr(elem.size, &lt;span class=&quot;type&quot;&gt;uintptr&lt;/span&gt;(size)) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; overflow || mem &amp;gt; maxAlloc-hchanSize || size &amp;lt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;built_in&quot;&gt;panic&lt;/span&gt;(plainError(&lt;span class=&quot;string&quot;&gt;&amp;quot;makechan: size out of range&amp;quot;&lt;/span&gt;)) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; c *hchan &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;switch&lt;/span&gt; &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// 当队列或者元素大小为 0 时，调用 mallocgc() 在堆上为 channel 开辟一段大小为 hchanSize 的内存空间；&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; mem == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;: &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			c = (*hchan)(mallocgc(hchanSize, &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;)) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;comment&quot;&gt;// 竞态检查，利用这个地址进行同步操作. &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			c.buf = c.raceaddr() &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// 当元素类型不是指针类型时，调用 mallocgc() 在堆上为 channel 和底层 buf 缓冲区数组开辟一段大小为 hchanSize + mem 连续的内存空间；&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; elem.ptrdata == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;: &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			c = (*hchan)(mallocgc(hchanSize+mem, &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;)) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;comment&quot;&gt;// 表示hchan后面在内存里紧跟着就是buf环形队列 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			c.buf = add(unsafe.Pointer(c), hchanSize) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// 默认情况元素类型中有指针类型，调用 mallocgc() 在堆上分别为 channel 和 buf 缓冲区分配内存。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt;:  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			c = &lt;span class=&quot;built_in&quot;&gt;new&lt;/span&gt;(hchan) c.buf = mallocgc(mem, elem, &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// 设置元素个数、元素类型给创建的chan &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	c.elemsize = &lt;span class=&quot;type&quot;&gt;uint16&lt;/span&gt;(elem.size) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	c.elemtype = elem &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	c.dataqsiz = &lt;span class=&quot;type&quot;&gt;uint&lt;/span&gt;(size) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	lockInit(&amp;amp;c.lock, lockRankHchan) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; debugChan &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;makechan: chan=&amp;quot;&lt;/span&gt;, c, &lt;span class=&quot;string&quot;&gt;&amp;quot;; elemsize=&amp;quot;&lt;/span&gt;, elem.size, &lt;span class=&quot;string&quot;&gt;&amp;quot;; dataqsiz=&amp;quot;&lt;/span&gt;, size, &lt;span class=&quot;string&quot;&gt;&amp;quot;&#92;n&amp;quot;&lt;/span&gt;) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; c &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&quot;发送数据&quot;&gt;&lt;a href=&quot;#发送数据&quot; class=&quot;headerlink&quot; title=&quot;发送数据&quot;&gt;&lt;/a&gt;发送数据&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;首先 select 非阻塞的发送，需要判断两种情况；&lt;/li&gt;
&lt;li&gt;一般的阻塞调用，先判断 recvq 等待接收队列是否为空，如果不为空，那么说明缓冲区为空 or 无缓冲 Channel；&lt;/li&gt;
&lt;li&gt;如果 recvq 有接收者，则属于缓冲区空，从 recvq 中取出一个 goroutine，然后写入数据，接着唤醒 goroutine，结束发送过程；&lt;/li&gt;
&lt;li&gt;如果缓冲区有空位，写入数据到缓冲区，完成发送；&lt;/li&gt;
&lt;li&gt;如果缓冲区满，将发送数据的 goroutine 放到 sendq 中，进入睡眠，等待唤醒。&lt;h3 id=&quot;接收数据&quot;&gt;&lt;a href=&quot;#接收数据&quot; class=&quot;headerlink&quot; title=&quot;接收数据&quot;&gt;&lt;/a&gt;接收数据&lt;/h3&gt;&lt;/li&gt;
&lt;li&gt;也是先判断select这种非阻塞接收的两种情况（block为false）；然后是加锁进行阻塞调用的逻辑；&lt;/li&gt;
&lt;li&gt;同步接收：如果发送者队列 sendq 不为空，且没有缓冲区，直接从 sendq 中取出一个 goroutine，读取消息，唤醒该 goroutine，结束读取；&lt;/li&gt;
&lt;li&gt;同步接收：如果发送者队列 sendq 不为空，有缓冲区，说明缓冲区已经满了，移动 recvx 指针的位置，取出一个数据，同时从 sendq 中取出一个 goroutine，拷贝里面的数据到 buf 中，结束读取；&lt;/li&gt;
&lt;li&gt;异步接收：如果发送者队列 sendq 为空，且缓冲区有数据（有缓冲 channel），直接从缓冲区取出数据，结束读取；&lt;/li&gt;
&lt;li&gt;阻塞接收：如果发送者队列 sendq 为空，且缓冲区无数据（无缓冲 channel），就将当前的 goroutine 加入 recvq，进入睡眠等待唤醒。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;关闭-Chan&quot;&gt;&lt;a href=&quot;#关闭-Chan&quot; class=&quot;headerlink&quot; title=&quot;关闭 Chan&quot;&gt;&lt;/a&gt;关闭 Chan&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;判断 channel 当前状态，如果 channel &amp;#x3D;&amp;#x3D; nil || channel 已经关闭，会直接 panic；&lt;/li&gt;
&lt;li&gt;关闭的主要工作是释放所有的接收者和发送者：先回收接收者，因为从一个关闭的 channel 中读数据，不会发生 panic，顶多读到一个默认零值。再回收发送者。注意这里可能会产生 panic，因为往一个关闭的 channel 中发送数据，会产生 panic。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;生产者-消费者模型&quot;&gt;&lt;a href=&quot;#生产者-消费者模型&quot; class=&quot;headerlink&quot; title=&quot;生产者-消费者模型&quot;&gt;&lt;/a&gt;生产者-消费者模型&lt;/h3&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; wg sync.WaitGroup &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;producer&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(data &lt;span class=&quot;keyword&quot;&gt;chan&lt;/span&gt;&amp;lt;- &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i := &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;; i++ &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		data &amp;lt;- i &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// 这里记得要关闭channel，不然会发生阻塞，因为消费者的数量没有限制， &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// 当消费者从空的channel取值的时候会阻塞 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;close&lt;/span&gt;(data) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;consumer&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(data &amp;lt;-&lt;span class=&quot;keyword&quot;&gt;chan&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;defer&lt;/span&gt; wg.Done() &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		v, ok := &amp;lt;-data &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; !ok &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		fmt.Println(&lt;span class=&quot;string&quot;&gt;&amp;quot;---:&amp;quot;&lt;/span&gt;, v, &lt;span class=&quot;string&quot;&gt;&amp;quot; ===:&amp;quot;&lt;/span&gt;, ok) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	data := &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;chan&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;go&lt;/span&gt; producer(data) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	wg.Add(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;go&lt;/span&gt; consumer(data) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	wg.Wait() &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Output // ---: 0 ===: true // ---: 1 ===: true // ---: 2 ===: true // ---: 3 ===: true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&quot;发布订阅模型&quot;&gt;&lt;a href=&quot;#发布订阅模型&quot; class=&quot;headerlink&quot; title=&quot;发布订阅模型&quot;&gt;&lt;/a&gt;发布订阅模型&lt;/h3&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; Broker &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	consumers []*Consumer &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; Consumer &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	ch &lt;span class=&quot;keyword&quot;&gt;chan&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;string&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(b *Broker)&lt;/span&gt;&lt;/span&gt; produce(msg &lt;span class=&quot;type&quot;&gt;string&lt;/span&gt;) &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// 轮询给消费者发送消息 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; _, v := &lt;span class=&quot;keyword&quot;&gt;range&lt;/span&gt; b.consumers &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		v.ch &amp;lt;- msg &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(b *Broker)&lt;/span&gt;&lt;/span&gt; subscribe(consumer *Consumer) &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	b.consumers = &lt;span class=&quot;built_in&quot;&gt;append&lt;/span&gt;(b.consumers, consumer) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;TestMq1&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(t *testing.T)&lt;/span&gt;&lt;/span&gt; &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// 初始化一个Broker节点 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	b := &amp;amp;Broker&amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		consumers: &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;([]*Consumer, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;), &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// 创建2个消费者 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	consumer1 := &amp;amp;Consumer&amp;#123; ch: &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;chan&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;string&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;), &amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	consumer2 := &amp;amp;Consumer&amp;#123; ch: &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;chan&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;string&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;), &amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// 这2个消费者订阅Broker &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	b.subscribe(consumer1) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	b.subscribe(consumer2) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// 生产者发送一个消息 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	b.produce(&lt;span class=&quot;string&quot;&gt;&amp;quot;一条消息&amp;quot;&lt;/span&gt;) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// 2个消费者拿到了刚才生产者发送的消息 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	fmt.Println(&amp;lt;-consumer1.ch) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	fmt.Println(&amp;lt;-consumer2.ch) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// Output &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// 一条消息 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// 一条消息 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&quot;循环打印abc&quot;&gt;&lt;a href=&quot;#循环打印abc&quot; class=&quot;headerlink&quot; title=&quot;循环打印abc&quot;&gt;&lt;/a&gt;循环打印abc&lt;/h3&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; count = &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   wg := sync.WaitGroup&amp;#123;&amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   chanA := &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;chan&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt;&amp;#123;&amp;#125;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   chanB := &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;chan&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt;&amp;#123;&amp;#125;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   chanC := &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;chan&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt;&amp;#123;&amp;#125;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;)  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   chanA &amp;lt;- &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt;&amp;#123;&amp;#125;&amp;#123;&amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   wg.Add(&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;)  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;go&lt;/span&gt; printA(&amp;amp;wg, chanA, chanB)  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;go&lt;/span&gt; printB(&amp;amp;wg, chanB, chanC)  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;go&lt;/span&gt; printC(&amp;amp;wg, chanC, chanA)  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   wg.Wait()  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;printA&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(wg *sync.WaitGroup, chanA &lt;span class=&quot;keyword&quot;&gt;chan&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt;&amp;#123;&amp;#125;, chanB &lt;span class=&quot;keyword&quot;&gt;chan&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt;&amp;#123;&amp;#125;)&lt;/span&gt;&lt;/span&gt; &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;defer&lt;/span&gt; wg.Done()  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i := &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; count; i++ &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;lt;-chanA  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;built_in&quot;&gt;println&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;A&amp;quot;&lt;/span&gt;)  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      chanB &amp;lt;- &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt;&amp;#123;&amp;#125;&amp;#123;&amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;printB&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(wg *sync.WaitGroup, chanB &lt;span class=&quot;keyword&quot;&gt;chan&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt;&amp;#123;&amp;#125;, chanC &lt;span class=&quot;keyword&quot;&gt;chan&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt;&amp;#123;&amp;#125;)&lt;/span&gt;&lt;/span&gt; &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;defer&lt;/span&gt; wg.Done()  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i := &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; count; i++ &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;lt;-chanB  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;built_in&quot;&gt;println&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;B&amp;quot;&lt;/span&gt;)  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      chanC &amp;lt;- &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt;&amp;#123;&amp;#125;&amp;#123;&amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;printC&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(wg *sync.WaitGroup, chanC &lt;span class=&quot;keyword&quot;&gt;chan&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt;&amp;#123;&amp;#125;, chanA &lt;span class=&quot;keyword&quot;&gt;chan&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt;&amp;#123;&amp;#125;)&lt;/span&gt;&lt;/span&gt; &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;defer&lt;/span&gt; wg.Done()  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i := &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; count; i++ &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;lt;-chanC  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;built_in&quot;&gt;println&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;C&amp;quot;&lt;/span&gt;)  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      chanA &amp;lt;- &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt;&amp;#123;&amp;#125;&amp;#123;&amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&quot;另一种循环打印&quot;&gt;&lt;a href=&quot;#另一种循环打印&quot; class=&quot;headerlink&quot; title=&quot;另一种循环打印&quot;&gt;&lt;/a&gt;另一种循环打印&lt;/h3&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 当前的写法是可运行的，注意 可能会造成死锁，main 协程无法退出&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   c1 := &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;chan&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;)  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   c2 := &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;chan&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;)  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   c3 := &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;chan&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;)  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   stop := &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;chan&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;)   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;comment&quot;&gt;// c1 &amp;lt;- 1  // 不可以放到这里，会造成死锁，目前我还没明白原理&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;go&lt;/span&gt; print1(c1, c2, stop)  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;go&lt;/span&gt; print2(c2, c3, stop)  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;go&lt;/span&gt; print3(c3, c1, stop)  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   c1 &amp;lt;- &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;comment&quot;&gt;// &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   time.Sleep(time.Millisecond)  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;comment&quot;&gt;// go func() &amp;#123; stop &amp;lt;- 1 &amp;#125;()  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   stop &amp;lt;- &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;print1&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(c &lt;span class=&quot;keyword&quot;&gt;chan&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;, c2 &lt;span class=&quot;keyword&quot;&gt;chan&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;, stop &lt;span class=&quot;keyword&quot;&gt;chan&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;select&lt;/span&gt; &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &amp;lt;-stop:  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &amp;lt;-c:  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         fmt.Println(&lt;span class=&quot;string&quot;&gt;&amp;quot;1&amp;quot;&lt;/span&gt;)  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         c2 &amp;lt;- &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;print2&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(c &lt;span class=&quot;keyword&quot;&gt;chan&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;, c2 &lt;span class=&quot;keyword&quot;&gt;chan&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;, stop &lt;span class=&quot;keyword&quot;&gt;chan&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;select&lt;/span&gt; &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &amp;lt;-stop:  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &amp;lt;-c:  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         fmt.Println(&lt;span class=&quot;string&quot;&gt;&amp;quot;2&amp;quot;&lt;/span&gt;)  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         c2 &amp;lt;- &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;print3&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(c &lt;span class=&quot;keyword&quot;&gt;chan&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;, c2 &lt;span class=&quot;keyword&quot;&gt;chan&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;, stop &lt;span class=&quot;keyword&quot;&gt;chan&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;select&lt;/span&gt; &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &amp;lt;-stop:  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &amp;lt;-c:  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         fmt.Println(&lt;span class=&quot;string&quot;&gt;&amp;quot;3&amp;quot;&lt;/span&gt;)  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         c2 &amp;lt;- &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&quot;常见用法&quot;&gt;&lt;a href=&quot;#常见用法&quot; class=&quot;headerlink&quot; title=&quot;常见用法&quot;&gt;&lt;/a&gt;常见用法&lt;/h4&gt;&lt;p&gt;定时任务&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;select&lt;/span&gt; &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &amp;lt;-time.After(&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt; * time.Millisecond): &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &amp;lt;-s.stopc: &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;控制并发数&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; limit = &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;chan&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// ………… &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; _, w := &lt;span class=&quot;keyword&quot;&gt;range&lt;/span&gt; work &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			limit &amp;lt;- &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			w() &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;lt;-limit &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;() &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// ………… &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;遍历&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i:= &lt;span class=&quot;keyword&quot;&gt;range&lt;/span&gt; ch&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 这里需要注意的是 会一直尝试从 ch 中取数据，直到 ch 被关闭位置，期间状态为阻塞&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 可以结合以下代码 理解&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ch := &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;chan&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;)  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;wg := sync.WaitGroup&amp;#123;&amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i := &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;; i++ &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(i &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         wg.Add(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; i &amp;gt; &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt; &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            time.Sleep(time.Second)  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         ch &amp;lt;- i  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;keyword&quot;&gt;defer&lt;/span&gt; wg.Done()  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;(i)  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   time.Sleep(time.Second * &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;)  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   wg.Wait()  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;built_in&quot;&gt;close&lt;/span&gt;(ch)  &lt;span class=&quot;comment&quot;&gt;// 如果不关闭，下方会一直阻塞，造成死锁&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;()  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i := &lt;span class=&quot;keyword&quot;&gt;range&lt;/span&gt; ch &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   fmt.Printf(&lt;span class=&quot;string&quot;&gt;&amp;quot;printing: %d at %d &#92;n&amp;quot;&lt;/span&gt;, i, time.Now().Unix())  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;


&lt;h1 id=&quot;Golang-atomic&quot;&gt;&lt;a href=&quot;#Golang-atomic&quot; class=&quot;headerlink&quot; title=&quot;Golang atomic&quot;&gt;&lt;/a&gt;Golang atomic&lt;/h1&gt;&lt;h4 id=&quot;常规总结&quot;&gt;&lt;a href=&quot;#常规总结&quot; class=&quot;headerlink&quot; title=&quot;常规总结&quot;&gt;&lt;/a&gt;常规总结&lt;/h4&gt;&lt;p&gt;1、  原子指针函数和类型+方法的两种方式都可以执行原子操作，我更建议用类型+方法的方式，因为更简单更清晰。&lt;br&gt;2、  原子操作比互斥锁更轻便，但使用也是有限制的，原子操作仅提供有限的数据类型，使用时要珍酌清楚。&lt;br&gt;3、  atomic.Value 原子值中存储引用类型时，使用一定要注意否则会有安全性问题哈，最好别存引用类型。&lt;br&gt;4、  atomic.Value 不要存 nil，后续添加的类型一定要是第一次添加的类型，否则会 Panic。&lt;br&gt;5、  不要对外暴露原子变量（原子变量控制在包内访问）、不要将原子值及其指针值通过参数、通道等传递。&lt;/p&gt;
&lt;h1 id=&quot;原生-Map&quot;&gt;&lt;a href=&quot;#原生-Map&quot; class=&quot;headerlink&quot; title=&quot;原生 Map&quot;&gt;&lt;/a&gt;原生 Map&lt;/h1&gt;&lt;p&gt;实际使用中需要注意以下几点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;并发读写不安全&lt;/li&gt;
&lt;li&gt;迭代中修改 map 会造成迭代器失效和不确定的结果&lt;/li&gt;
&lt;li&gt;对 map 的遍历认为是无序的&lt;/li&gt;
&lt;li&gt;对 nil 的 map 操作不当会造成 panic&lt;/li&gt;
&lt;li&gt;内存泄漏：向 map 中添加键值对会增加底层哈希表的大小。对于不用的或者已删除的键值对，推荐使用 delete() 删除，释放内存。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Golang 中 map 是一个指针，占用 8 个字节。当使用 make 创建 map 时，底层调用的是 makemap() 函数，makemap() 函数返回的是一个指针，因为返回的是指针，所以 map 作为参数的时候，函数内部能修改map。&lt;br&gt;golang 中 map 底层使用的是哈希查找表，用链表来解决哈希冲突。每个 map 的底层结构是 hmap，是由若干个结构为 bmap 的 bucket 组成的数组，每个 bucket 底层都采用链表结构。&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; hmap &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	count      &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;            &lt;span class=&quot;comment&quot;&gt;// map中元素的数量，调用len()直接返回此值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	flags      &lt;span class=&quot;type&quot;&gt;uint8&lt;/span&gt;          &lt;span class=&quot;comment&quot;&gt;// 状态标识符，key和value是否包指针、是否正在扩容、是否已经被迭代&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	B          &lt;span class=&quot;type&quot;&gt;uint8&lt;/span&gt;          &lt;span class=&quot;comment&quot;&gt;// map中桶数组的数量，桶数组的长度的对数，len(buckets) == 2^B，可以最多容纳 6.5 * 2 ^ B 个元素，6.5为装载因子&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	noverflow  &lt;span class=&quot;type&quot;&gt;uint16&lt;/span&gt;         &lt;span class=&quot;comment&quot;&gt;// 溢出桶的大概数量，当B小于16时是准确值，大于等于16时是大概的值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	hash0      &lt;span class=&quot;type&quot;&gt;uint32&lt;/span&gt;         &lt;span class=&quot;comment&quot;&gt;// 哈希种子，用于计算哈希值，为哈希函数的结果引入一定的随机性&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	buckets    unsafe.Pointer &lt;span class=&quot;comment&quot;&gt;// 指向桶数组的指针，长度为 2^B ，如果元素个数为0，就为 nil&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	oldbuckets unsafe.Pointer &lt;span class=&quot;comment&quot;&gt;// 指向一个旧桶数组，用于扩容，它的长度是当前桶数组的一半&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	nevacuate  &lt;span class=&quot;type&quot;&gt;uintptr&lt;/span&gt;        &lt;span class=&quot;comment&quot;&gt;// 搬迁进度，小于此地址的桶数组迁移完成&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	extra      *mapextra      &lt;span class=&quot;comment&quot;&gt;// 可选字段，用于gc，指向所有的溢出桶，避免gc时扫描整个map，仅扫描所有溢出桶就足够了&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 溢出桶结构&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; mapextra &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	overflow    *[]*bmap &lt;span class=&quot;comment&quot;&gt;// 指针数组，指向所有溢出桶&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	oldoverflow *[]*bmap &lt;span class=&quot;comment&quot;&gt;// 指针数组，发生扩容时，指向所有旧的溢出桶&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	nextOverflow *bmap &lt;span class=&quot;comment&quot;&gt;// 指向所有溢出桶中下一个可以使用的溢出桶&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;bmap的结构：&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; bmap &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    tophash [bucketCnt]&lt;span class=&quot;type&quot;&gt;uint8&lt;/span&gt;    &lt;span class=&quot;comment&quot;&gt;// bucketCnt=8，// 存放key哈希值的高8位，用于决定kv键值对放在桶内的哪个位置&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//实际上编辑期间会动态生成一个新的结构体&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; bmap &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	topbits  [&lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;]&lt;span class=&quot;type&quot;&gt;uint8&lt;/span&gt;     &lt;span class=&quot;comment&quot;&gt;// 存放key哈希值的高8位，用于决定kv键值对放在桶内的哪个位置&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	keys     [&lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;]keytype   &lt;span class=&quot;comment&quot;&gt;// 存放key的数组&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	values   [&lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;]valuetype &lt;span class=&quot;comment&quot;&gt;// 存放value的数组&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	pad      &lt;span class=&quot;type&quot;&gt;uintptr&lt;/span&gt;      &lt;span class=&quot;comment&quot;&gt;// 用于对齐内存&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	overflow &lt;span class=&quot;type&quot;&gt;uintptr&lt;/span&gt;      &lt;span class=&quot;comment&quot;&gt;// 指向下一个桶，即溢出桶，拉链法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;buckets是一个bmap数组，数组的长度就是 2^B。每个bucket固定包含8个key和value，实现上面是一个固定的大小连续内存块，分成四部分：tophash 值，8个key值，8个value值，指向下个bucket的指针。&lt;br&gt;tophash 值用于快速查找key是否在该bucket中，当插入和查询运行时都会使用哈希哈数对key做哈希运算，获取一个hashcode，取高8位存放在bmap tophash字段中。&lt;br&gt;桶里面会最多装 8 个 key，这些 key 之所以会落入同一个桶，是因为它们经过哈希计算后，哈希结果是“一类”的。在桶内，又会根据 key 计算出来的 hash 值的高 8 位来决定 key 到底落入桶内的哪个位置（一个桶内最多有8个位置）&lt;br&gt;桶结构的很多字段得在编译时才会动态生成，比如key和values等&lt;br&gt;桶结构中，之所以所有的key放一起，所有的value放一起，而不是key&amp;#x2F;value一对对的一起存放，目的便是在某些情况下可以省去pad字段，节省内存空间。由于内存对齐的原因，key0&amp;#x2F;value0&amp;#x2F;key1&amp;#x2F;value1… 这样的形式可能需要更多的补齐空间，比如 map[int64]int8 ，1字节的value后面需要补齐7个字节才能保证下一个key是 int64 对齐的。&lt;br&gt;golang中的map使用的内存是不会收缩的，只会越用越多。&lt;/p&gt;
&lt;h3 id=&quot;扩容&quot;&gt;&lt;a href=&quot;#扩容&quot; class=&quot;headerlink&quot; title=&quot;扩容&quot;&gt;&lt;/a&gt;扩容&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;触发 map 扩容的时机（插入、删除key）&lt;ul&gt;
&lt;li&gt;当装载因子超过6.5时，扩容一倍，属于增量扩容；&lt;/li&gt;
&lt;li&gt;当使用的溢出桶过多时，重新分配一样大的内存空间，属于等量扩容；（实际上没有扩容，主要是为了回收空闲的溢出桶，节省空间，提高 map 的查找和插入效率）&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;为什么会出现这种情况？&lt;br&gt;   这种情况可能是因为 map 删除的特性导致的。当我们不断向哈希表中插入数据，并且将他们又全部删除时，其内存占用并不会减少，因为删除只是将桶对应位置的 tophash 置 nil 而已。&lt;br&gt;   这种情况下，就会不断的积累溢出桶造成内存泄露，为了解决这种情况，采用了等量扩容的机制，一旦哈希表中出现了过多的溢出桶，会创建新桶保存数据，gc 会清理掉老的溢出桶，从而避免内存泄露。&lt;/li&gt;
&lt;li&gt;如何定义溢出桶是否太多需要等量扩容呢？两种情况：&lt;ul&gt;
&lt;li&gt;当 B 小于 15时，溢出桶的数量超过 2^B，属于溢出桶数量太多，需要等量扩容；&lt;/li&gt;
&lt;li&gt;当 B 大于等于 15 时，溢出桶数量超过 2^15，属于溢出桶数量太多，需要等量扩容。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;扩容策略（怎么扩容？）&lt;br&gt;  Go 会创建一个新的 buckets 数组，新的 buckets 数组的容量是旧buckets数组的两倍（或者和旧桶容量相同），将原始桶数组中的所有元素重新散列到新的桶数组中。这样做的目的是为了使每个桶中的元素数量尽可能平均分布，以提高查询效率。&lt;br&gt;  旧的 buckets 数组不会被直接删除，而是会把原来对旧数组的引用去掉，让 GC 来清除内存。&lt;br&gt;  在 map 进行扩容迁移的期间，不会触发第二次扩容。只有在前一个扩容迁移工作完成后，map 才能进行下一次扩容操作。&lt;/li&gt;
&lt;li&gt;搬迁策略&lt;br&gt;  由于 map 扩容需要将原有的 kv 键值对搬迁到新的内存地址，如果一下子全部搬完，会非常的影响性能。go 中 map 的扩容采用渐进式的搬迁策略，原有的 key 并不会一次性搬迁完毕，每次最多只会搬迁 2 个 bucket，将搬迁的O(N)开销均摊到O(1)的赋值和删除操作上。&lt;br&gt;  hashGrow() 只是分配了新的 buckets，并将老 buckets 挂在到 oldbuckets 字段上。&lt;br&gt;  而且实际的搬迁并不在 hashGrow() 而是在 growWork() 函数中，而调用 growWork() 函数的动作是在 mapassign 和 mapdelete 函数中，所以真正的‘搬迁’操作被离散在了 map 插入修改、删除 key 的动作中。会尝试检查 oldbucket，有待执行的数据，则‘搬迁’。&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;Sync-Mutex&quot;&gt;&lt;a href=&quot;#Sync-Mutex&quot; class=&quot;headerlink&quot; title=&quot;Sync.Mutex&quot;&gt;&lt;/a&gt;Sync.Mutex&lt;/h1&gt;&lt;h3 id=&quot;正常模式&quot;&gt;&lt;a href=&quot;#正常模式&quot; class=&quot;headerlink&quot; title=&quot;正常模式&quot;&gt;&lt;/a&gt;正常模式&lt;/h3&gt;&lt;p&gt;当一个 goroutine 持有锁时，后续的 goroutine 会以先进先出的方式排队等待，当锁被释放时，队列中第一个 goroutine 会被唤醒。但是它需要和新到来的 goroutine 争夺锁，由于新来的 goroutine 已经在 CPU 中，刚刚唤醒的大概率会竞争失败，重新被放到队首。这种情况有可能导致 goroutine 迟迟不能被执行而被“饿死”&lt;/p&gt;
&lt;h3 id=&quot;饥饿模式&quot;&gt;&lt;a href=&quot;#饥饿模式&quot; class=&quot;headerlink&quot; title=&quot;饥饿模式&quot;&gt;&lt;/a&gt;饥饿模式&lt;/h3&gt;&lt;p&gt;为了解决“饿死”的问题，如果一个等待的 goroutine 超过 1 ms (starvationThresholdNs) 没有得到锁，这个锁就会被转换为饥饿模式。饥饿模式下，锁会直接交给队列中的第一个 goroutine，而新来的 goroutine 会放到队尾等待。正常状态下的性能是高于饥饿模式的，所以在大部分情况下，还是应该回到正常模式去的。&lt;br&gt;当队列中最后一个 goroutine 被执行或者它的等待时间低于 1 ms 时，会将该锁的状态切换回正常模式。&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; Mutex &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// +---------------------------------+-----------+&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// |        WaitersCount             |  status   | &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// +---------------------------------+-----------+ &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// &amp;lt;-----------+ 29 +---------------&amp;gt; &amp;lt;--+ 3 +---&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	state &lt;span class=&quot;type&quot;&gt;int32&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;// 锁状态，其中低三位用来表示锁状态，高 29 位用来记录等待当前互斥锁的 goroutine 个数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	sema &lt;span class=&quot;type&quot;&gt;uint32&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;// 控制锁状态的信号量&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; ( &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	mutexLocked = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;literal&quot;&gt;iota&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;// 0001 表示互斥锁处于锁定状态 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	mutexWoken &lt;span class=&quot;comment&quot;&gt;// 0010 表示从正常模式被唤醒 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	mutexStarving &lt;span class=&quot;comment&quot;&gt;// 0100 饥饿模式 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	mutexWaiterShift = &lt;span class=&quot;literal&quot;&gt;iota&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;// 3 表示除 WaitersCount 外，状态占用了三个 bite &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	starvationThresholdNs = &lt;span class=&quot;number&quot;&gt;1e6&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;// 饥饿的阈值， 1ms &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Lock&quot;&gt;&lt;a href=&quot;#Lock&quot; class=&quot;headerlink&quot; title=&quot;Lock&quot;&gt;&lt;/a&gt;Lock&lt;/h3&gt;&lt;p&gt;通过 CAS 判断 &lt;code&gt;m.state == 0&lt;/code&gt; 时，意味着当前锁处于正常的解锁状态，只需要将锁设置为 &lt;code&gt;mutexLocked&lt;/code&gt; 即可，否则就需要进入 &lt;code&gt;lockSlow&lt;/code&gt; 通过自旋等方式等待锁释放。&lt;code&gt;lockslow&lt;/code&gt; 大致分为以下几个部分：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;判断是否可以自旋：自旋需要满足两个条件：&lt;ul&gt;
&lt;li&gt;处于正常模式，且锁已经被锁定&lt;/li&gt;
&lt;li&gt;&lt;code&gt;runtime_canSpin&lt;/code&gt; 返回 true:&lt;ul&gt;
&lt;li&gt;运行在多 CPU 的机器上；&lt;/li&gt;
&lt;li&gt;当前 Goroutine 为了获取该锁进入自旋的次数小于四次；&lt;/li&gt;
&lt;li&gt;当前机器上至少存在一个正在运行的处理器 P 并且处理的运行队列为空；&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;一旦进入自旋，会通过 &lt;code&gt;runtime_doSpin&lt;/code&gt; ,去执行 30 次的 &lt;code&gt;PAUSE&lt;/code&gt; 指令，该指令只会占用 CPU 并消耗 CPU 时间，一旦不满足上面的两个条件了，就会去计算当前锁的最新状态，导致其不满足的原因有很多，如：&lt;ul&gt;
&lt;li&gt;其他 goroutine 已经释放锁&lt;/li&gt;
&lt;li&gt;其他 goroutine 导致该锁进入饥饿模式&lt;/li&gt;
&lt;li&gt;自旋次数超过 4 次&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;计算和更新状态其实就是去更新 &lt;code&gt;state&lt;/code&gt; 中的四个值；一旦计算完毕后，通过 CAS 尝试更新&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(m *Mutex)&lt;/span&gt;&lt;/span&gt; Lock() &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// Fast path: grab unlocked mutex. &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; atomic.CompareAndSwapInt32(&amp;amp;m.state, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, mutexLocked) &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; race.Enabled &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			race.Acquire(unsafe.Pointer(m)) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// Slow path (outlined so that the fast path can be inlined) &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	m.lockSlow() &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;Unlock&quot;&gt;&lt;a href=&quot;#Unlock&quot; class=&quot;headerlink&quot; title=&quot;Unlock&quot;&gt;&lt;/a&gt;Unlock&lt;/h3&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(m *Mutex)&lt;/span&gt;&lt;/span&gt; Unlock() &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; race.Enabled &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		_ = m.state race.Release(unsafe.Pointer(m)) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// 如果 m.state - mutexLocked == 0 说明没人等待该锁，同时该锁处于正常状态 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// 这时可以快速解锁，即锁状态会直接赋成 0 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;new&lt;/span&gt; := atomic.AddInt32(&amp;amp;m.state, -mutexLocked) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;new&lt;/span&gt; != &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// 否则则需要慢速解锁 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		m.unlockSlow(&lt;span class=&quot;built_in&quot;&gt;new&lt;/span&gt;) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(m *Mutex)&lt;/span&gt;&lt;/span&gt; unlockSlow(&lt;span class=&quot;built_in&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;int32&lt;/span&gt;) &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// 如果锁没锁定，直接抛出异常 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;built_in&quot;&gt;new&lt;/span&gt;+mutexLocked)&amp;amp;mutexLocked == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		throw(&lt;span class=&quot;string&quot;&gt;&amp;quot;sync: unlock of unlocked mutex&amp;quot;&lt;/span&gt;) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// 正常模式下 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;new&lt;/span&gt;&amp;amp;mutexStarving == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		old := &lt;span class=&quot;built_in&quot;&gt;new&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;comment&quot;&gt;// 如果没有其他等待者或者锁不处于空闲状态，直接返回，不需要唤醒其他等待着 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; old&amp;gt;&amp;gt;mutexWaiterShift == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; || old&amp;amp;(mutexLocked|mutexWoken|mutexStarving) != &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;comment&quot;&gt;// 唤醒新的等待者 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;comment&quot;&gt;// 等待者减一，设置唤醒标志 woken &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;built_in&quot;&gt;new&lt;/span&gt; = (old - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&amp;lt;&amp;lt;mutexWaiterShift) | mutexWoken &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;comment&quot;&gt;// 设置 state, 唤醒一个阻塞着的 goroutine &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; atomic.CompareAndSwapInt32(&amp;amp;m.state, old, &lt;span class=&quot;built_in&quot;&gt;new&lt;/span&gt;) &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				runtime_Semrelease(&amp;amp;m.sema, &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;comment&quot;&gt;// 设置失败，重新获取状态设置 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			old = m.state &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// 饥饿模式下，直接唤醒队首的 goroutine，这时 mutexLocked 位依然是 0 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// 但由于处在饥饿状态下，锁不会被其他新来的 goroutine 抢占 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		runtime_Semrelease(&amp;amp;m.sema, &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;



&lt;h1 id=&quot;Context&quot;&gt;&lt;a href=&quot;#Context&quot; class=&quot;headerlink&quot; title=&quot;Context&quot;&gt;&lt;/a&gt;Context&lt;/h1&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Context 提供跨越API的截止时间获取，取消信号，以及请求范围值的功能。 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 它的这些方案在多个 goroutine 中使用是安全的 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; Context &lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; &amp;#123;     &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// 如果设置了截止时间，这个方法ok会是true，并返回设置的截止时间  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	Deadline() (deadline time.Time, ok &lt;span class=&quot;type&quot;&gt;bool&lt;/span&gt;)     &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// 如果 Context 超时或者主动取消返回一个关闭的channel，如果返回的是nil，表示这个     &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// context 永远不会关闭，比如：Background()  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	Done() &amp;lt;-&lt;span class=&quot;keyword&quot;&gt;chan&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt;&amp;#123;&amp;#125;     &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// 返回发生的错误  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	Err() &lt;span class=&quot;type&quot;&gt;error&lt;/span&gt;     &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// 它的作用就是传值  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	Value(key &lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt;&amp;#123;&amp;#125;) &lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt;&amp;#123;&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 常用方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ctx, cancel := context.WithCancel(context.Background())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(ctx context.Context)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;select&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &amp;lt;-ctx.Done():&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            fmt.Println(&lt;span class=&quot;string&quot;&gt;&amp;quot;Goroutine canceled&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            fmt.Println(&lt;span class=&quot;string&quot;&gt;&amp;quot;Working...&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            time.Sleep(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; * time.Second)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;(ctx)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;time.Sleep(&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; * time.Second)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cancel()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ctx := context.Background()  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;fmt.Printf(&lt;span class=&quot;string&quot;&gt;&amp;quot;ctx: %p &#92;n&amp;quot;&lt;/span&gt;, &amp;amp;ctx)  &lt;span class=&quot;comment&quot;&gt;// ctx: 0xc0000103f0 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ctx1 := ctx  &lt;span class=&quot;comment&quot;&gt;// 深拷贝&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;fmt.Printf(&lt;span class=&quot;string&quot;&gt;&amp;quot;ctx1: %p &#92;n&amp;quot;&lt;/span&gt;, &amp;amp;ctx1) &lt;span class=&quot;comment&quot;&gt;// ctx1: 0xc000010400 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;


&lt;h1 id=&quot;拷贝&quot;&gt;&lt;a href=&quot;#拷贝&quot; class=&quot;headerlink&quot; title=&quot;拷贝&quot;&gt;&lt;/a&gt;拷贝&lt;/h1&gt;&lt;h3 id=&quot;1、浅拷贝&quot;&gt;&lt;a href=&quot;#1、浅拷贝&quot; class=&quot;headerlink&quot; title=&quot;1、浅拷贝&quot;&gt;&lt;/a&gt;1、浅拷贝&lt;/h3&gt;&lt;p&gt;浅拷贝是指对地址的拷贝&lt;br&gt;浅拷贝的是数据地址，只复制指向的对象的指针，此时新对象和老对象指向的内存地址是一样的，新对象值修改时老对象也会变化，释放内存地址时，同时释放内存地址&lt;br&gt;引用类型的都是浅拷贝：&lt;code&gt;slice&lt;/code&gt;、&lt;code&gt;map&lt;/code&gt;、&lt;code&gt;function&lt;/code&gt;&lt;br&gt;浅拷贝的特点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;拷贝的时候仅仅拷贝地址，地址指向的都是同一个值&lt;/li&gt;
&lt;li&gt;在&lt;code&gt;a&lt;/code&gt;中修改，则&lt;code&gt;b&lt;/code&gt;中也跟着变化&lt;/li&gt;
&lt;li&gt;内存销毁是一致的&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;2、深拷贝&quot;&gt;&lt;a href=&quot;#2、深拷贝&quot; class=&quot;headerlink&quot; title=&quot;2、深拷贝&quot;&gt;&lt;/a&gt;2、深拷贝&lt;/h3&gt;&lt;p&gt;深拷贝是指将地址指向的值进行拷贝&lt;br&gt;深拷贝的是数据本身，创造一个一样的新对象，新创建的对象与原对象不共享内存，新创建的对象在内存中开辟一个新的内存地址，新对象值修改时不会影响原对象值。既然内存地址不同，释放内存地址时，可分别释放&lt;br&gt;值类似的都是深拷贝：&lt;code&gt;int&lt;/code&gt;、&lt;code&gt;float&lt;/code&gt;、&lt;code&gt;bool&lt;/code&gt;、&lt;code&gt;array&lt;/code&gt;、&lt;code&gt;struct&lt;/code&gt;&lt;br&gt;深拷贝的特点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;复制的时候会新创建一个对象&lt;/li&gt;
&lt;li&gt;指向完全不同的内存地址&lt;/li&gt;
&lt;li&gt;修改是互不影响的&lt;br&gt;通过指针求值，将值拷贝实现，修改拷贝的值不影响原来的值&lt;h3 id=&quot;3、结构体的深拷贝&quot;&gt;&lt;a href=&quot;#3、结构体的深拷贝&quot; class=&quot;headerlink&quot; title=&quot;3、结构体的深拷贝&quot;&gt;&lt;/a&gt;3、结构体的深拷贝&lt;/h3&gt;默认情况下，结构体类型中的字段是值类型，拷贝时都是深拷贝&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; Per &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	Name &lt;span class=&quot;type&quot;&gt;string&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	Age &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	HouseIds [&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;]&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	p1 := Per&amp;#123; Name: &lt;span class=&quot;string&quot;&gt;&amp;quot;ssgeek&amp;quot;&lt;/span&gt;, Age: &lt;span class=&quot;number&quot;&gt;24&lt;/span&gt;, HouseIds: [&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;]&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;&amp;#123;&lt;span class=&quot;number&quot;&gt;22&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;33&lt;/span&gt;&amp;#125;, &amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	p2 := p1 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	fmt.Printf(&lt;span class=&quot;string&quot;&gt;&amp;quot;%v %p &#92;n&amp;quot;&lt;/span&gt;, p1, &amp;amp;p1) &lt;span class=&quot;comment&quot;&gt;// &amp;#123;ssgeek 24 [22 33]&amp;#125; 0xc000180030 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	fmt.Printf(&lt;span class=&quot;string&quot;&gt;&amp;quot;%v %p &#92;n&amp;quot;&lt;/span&gt;, p2, &amp;amp;p2) &lt;span class=&quot;comment&quot;&gt;// &amp;#123;ssgeek 24 [22 33]&amp;#125; 0xc000180060 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	p2.Age = &lt;span class=&quot;number&quot;&gt;19&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	p2.Name = &lt;span class=&quot;string&quot;&gt;&amp;quot;likui&amp;quot;&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	p2.HouseIds[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;] = &lt;span class=&quot;number&quot;&gt;44&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	fmt.Printf(&lt;span class=&quot;string&quot;&gt;&amp;quot;%v %p &#92;n&amp;quot;&lt;/span&gt;, p1, &amp;amp;p1) &lt;span class=&quot;comment&quot;&gt;// &amp;#123;ssgeek 24 [22 33]&amp;#125; 0xc000098180 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	fmt.Printf(&lt;span class=&quot;string&quot;&gt;&amp;quot;%v %p &#92;n&amp;quot;&lt;/span&gt;, p2, &amp;amp;p2) &lt;span class=&quot;comment&quot;&gt;// &amp;#123;likui 19 [22 44]&amp;#125; 0xc0000981b0 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;4、结构体的浅拷贝&quot;&gt;&lt;a href=&quot;#4、结构体的浅拷贝&quot; class=&quot;headerlink&quot; title=&quot;4、结构体的浅拷贝&quot;&gt;&lt;/a&gt;4、结构体的浅拷贝&lt;/h3&gt;使用指针进行浅拷贝，浅拷贝中，可以看到&lt;code&gt;p1&lt;/code&gt;和&lt;code&gt;p2&lt;/code&gt;的内存地址是相同的，修改其中一个对象的属性时，另一个也会产生变化&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; main &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;quot;fmt&amp;quot;&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; Per &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	Name &lt;span class=&quot;type&quot;&gt;string&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	Age &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	HouseIds [&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;]&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	p1 := Per&amp;#123; Name: &lt;span class=&quot;string&quot;&gt;&amp;quot;ssgeek&amp;quot;&lt;/span&gt;, Age: &lt;span class=&quot;number&quot;&gt;24&lt;/span&gt;, HouseIds: [&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;]&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;&amp;#123;&lt;span class=&quot;number&quot;&gt;22&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;33&lt;/span&gt;&amp;#125;, &amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	p2 := &amp;amp;p1 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	fmt.Printf(&lt;span class=&quot;string&quot;&gt;&amp;quot;%v %p &#92;n&amp;quot;&lt;/span&gt;, p1, &amp;amp;p1) &lt;span class=&quot;comment&quot;&gt;// &amp;#123;ssgeek 24 [22 33]&amp;#125; 0xc000076180 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	fmt.Printf(&lt;span class=&quot;string&quot;&gt;&amp;quot;%v %p &#92;n&amp;quot;&lt;/span&gt;, p2, p2) &lt;span class=&quot;comment&quot;&gt;// &amp;amp;&amp;#123;ssgeek 24 [22 33]&amp;#125; 0xc000076180 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	p2.Age = &lt;span class=&quot;number&quot;&gt;19&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	p2.Name = &lt;span class=&quot;string&quot;&gt;&amp;quot;likui&amp;quot;&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	p2.HouseIds[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;] = &lt;span class=&quot;number&quot;&gt;44&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	fmt.Printf(&lt;span class=&quot;string&quot;&gt;&amp;quot;%v %p &#92;n&amp;quot;&lt;/span&gt;, p1, &amp;amp;p1) &lt;span class=&quot;comment&quot;&gt;// &amp;#123;likui 19 [22 44]&amp;#125; 0xc000076180 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	fmt.Printf(&lt;span class=&quot;string&quot;&gt;&amp;quot;%v %p &#92;n&amp;quot;&lt;/span&gt;, p2, p2) &lt;span class=&quot;comment&quot;&gt;// &amp;amp;&amp;#123;likui 19 [22 44]&amp;#125; 0xc000076180 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;5、结构体值类型的浅拷贝&quot;&gt;&lt;a href=&quot;#5、结构体值类型的浅拷贝&quot; class=&quot;headerlink&quot; title=&quot;5、结构体值类型的浅拷贝&quot;&gt;&lt;/a&gt;5、结构体值类型的浅拷贝&lt;/h3&gt;&lt;p&gt;使用&lt;code&gt;new&lt;/code&gt;函数实现值类型的浅拷贝&lt;br&gt;值类型的默认是深拷贝，想要实现值类型的浅拷贝，一般是两种方法&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用指针&lt;/li&gt;
&lt;li&gt;使用new函数（new函数返回的是指针）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;6、结构体引用类型的浅拷贝&quot;&gt;&lt;a href=&quot;#6、结构体引用类型的浅拷贝&quot; class=&quot;headerlink&quot; title=&quot;6、结构体引用类型的浅拷贝&quot;&gt;&lt;/a&gt;6、结构体引用类型的浅拷贝&lt;/h3&gt;&lt;p&gt;结构体默认是深拷贝，但如果结构体中包含map、slice等这些引用类型，默认也还是浅拷贝&lt;br&gt;map是引用类型，引用类型浅拷贝是默认的情况&lt;/p&gt;
&lt;h3 id=&quot;7、结构体引用类型的深拷贝&quot;&gt;&lt;a href=&quot;#7、结构体引用类型的深拷贝&quot; class=&quot;headerlink&quot; title=&quot;7、结构体引用类型的深拷贝&quot;&gt;&lt;/a&gt;7、结构体引用类型的深拷贝&lt;/h3&gt;&lt;p&gt;结构体中含有引用类型的字段，那么这个字段就是浅拷贝，但是往往希望的是深拷贝，解决方案如下&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;方法一：挨个把可导致浅拷贝的引用类型字段自行赋值。赋值后，修改值就相互不影响了&lt;/li&gt;
&lt;li&gt;方法二：使用&lt;code&gt;json&lt;/code&gt;或反射。简单来说：&lt;code&gt;json&lt;/code&gt;将引用类型的数据进行&lt;code&gt;dump&lt;/code&gt;，&lt;code&gt;dump&lt;/code&gt;后就和原来的引用类型没有关系了&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;GMP&quot;&gt;&lt;a href=&quot;#GMP&quot; class=&quot;headerlink&quot; title=&quot;GMP&quot;&gt;&lt;/a&gt;GMP&lt;/h1&gt;&lt;h3 id=&quot;Go-协程为什么快？&quot;&gt;&lt;a href=&quot;#Go-协程为什么快？&quot; class=&quot;headerlink&quot; title=&quot;Go 协程为什么快？&quot;&gt;&lt;/a&gt;Go 协程为什么快？&lt;/h3&gt;&lt;p&gt;这就要从进程，线程，协程三者的关系讲起。&lt;br&gt;最早的进程时代，是单 CPU 单进程，一切皆是串行执行；到了多进程&amp;#x2F;线程时代，当一个进程阻塞时，切换到另外等候的进程，时间片轮转法保证了等待的进程都能够被运行，但是进程间的调度会占用CPU大部分时间；而到了高并发的场景下，为每个任务都去创建一个线程显然是不合理的，那么，golang 将原来的线程分为了两部分，一个是用户级别的线程（轻量级的线程，运行在用户态，即 goroutine），一个是内核级的线程（即一般意义上的线程，运行在内核态），这样，对于协程的切换和调度都是在用户态进行，不涉及内核级别的调度，因此这是 goroutine 能够很好地支持高并发的场景的基础。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;进程: 进程是具有一定独立功能的程序，进程是系统资源分配和调度的最小单位。每个进程都有自己的独立内存空间，不同进程通过进程间通信来通信。由于进程比较重量，占据独立的内存，所以上下文进程间的切换开销（栈、寄存器、虚拟内存、文件句柄等）比较大，但相对比较稳定安全。&lt;/li&gt;
&lt;li&gt;线程: 线程是进程的一个实体,线程是内核态,而且是CPU调度和分派的基本单位,它是比进程更小的能独立运行的基本单位。线程间通信主要通过共享内存，上下文切换很快，资源开销较少，但相比进程不够稳定容易丢失数据。独立的栈空间，共享堆空间，调度由用户自己控制，本质上有点类似于用户级线程，这些用户级线程的调度也是自己实现的。创建一个 goroutine 的栈内存消耗为 2-4 KB，实际运行过程中，如果栈空间不够用，会自动进行扩容。创建一个 thread 则需要消耗 1 MB 栈内存，而且还需要一个被称为 “a guard page” 的区域用于和其他 thread 的栈空间进行隔离。&lt;/li&gt;
&lt;li&gt;协程: 协程是一种用户态的轻量级线程，协程的调度完全是由用户来控制的。协程拥有自己的寄存器上下文和栈。协程调度切换时，将寄存器上下文和栈保存到其他地方，在切回来的时候，恢复先前保存的寄存器上下文和栈，直接操作栈则基本没有内核切换的开销，可以不加锁的访问全局变量，所以上下文的切换非常快。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;线程的时间成本主要来自于切换线程上下文时，用户态与内核态的切换、线程的调度、寄存器变量以及状态信息的存储。&lt;/p&gt;
&lt;p&gt;Goroutine采用的是半抢占式的协作调度，只有在当前Goroutine发生阻塞时才会导致调度；同时发生在用户态，调度器会根据具体函数只保存必要的寄存器，切换的代价要比系统线程低得多。运行时有一个runtime.GOMAXPROCS变量，用于控制当前运行正常非阻塞Goroutine的系统线程数目。&lt;br&gt;goroutine 只是由官方实现的超级”线程池”。&lt;br&gt;goroutine 的栈空间是从堆内存中分配的。&lt;/p&gt;
&lt;p&gt;每个实例2KB (在1.4新版本发布的运行时信息当中明确指出,从以前的1.2版本到1.3版本协程占用大小4kb到8kb，到现在的2kb左右，是一个性能上和的大跃进。)的栈内存占用和由于实现机制而大幅减少的创建和销毁开销是go高并发的根本原因。&lt;/p&gt;
&lt;h3 id=&quot;调度器的三个基本对象：&quot;&gt;&lt;a href=&quot;#调度器的三个基本对象：&quot; class=&quot;headerlink&quot; title=&quot;调度器的三个基本对象：&quot;&gt;&lt;/a&gt;调度器的三个基本对象：&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;G（Goroutine），代表协程，go关键字创建的对象&lt;/li&gt;
&lt;li&gt;M（Work Thread），工作线程，一个 M 关联一个内核级线程&lt;/li&gt;
&lt;li&gt;P（Processor），代表一个 处理器，又称上下文&lt;h3 id=&quot;G-M-P三者的关系与特点：&quot;&gt;&lt;a href=&quot;#G-M-P三者的关系与特点：&quot; class=&quot;headerlink&quot; title=&quot;G-M-P三者的关系与特点：&quot;&gt;&lt;/a&gt;G-M-P三者的关系与特点：&lt;/h3&gt;&lt;/li&gt;
&lt;li&gt;每一个运行的 M 必须绑定一个 P，线程 M 创建后会检查并执行G（goroutine）对象。&lt;/li&gt;
&lt;li&gt;每一个 P 保存着一个协程 G 的队列。&lt;/li&gt;
&lt;li&gt;除了每个 P 自身保存的G的队列外，调度器还有一个全局的G队列&lt;/li&gt;
&lt;li&gt;M 从队列中提取 G，并执行&lt;/li&gt;
&lt;li&gt;P 的个数就是 GOMAXPROCS（最大256），启动时固定，一般不修改&lt;/li&gt;
&lt;li&gt;M 的个数和 P 的个数不一定一样多（会有sleep的M或者P不绑定M）(最大10000)&lt;/li&gt;
&lt;li&gt;P 是用一个全局数组(255)来保存的，并维护一个全局的 P 的空闲链表&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;局部G队列与全局G队列的关系&quot;&gt;&lt;a href=&quot;#局部G队列与全局G队列的关系&quot; class=&quot;headerlink&quot; title=&quot;局部G队列与全局G队列的关系&quot;&gt;&lt;/a&gt;局部G队列与全局G队列的关系&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;全局G任务队列会和本地G任务队列按照一定策略互相交换。&lt;/li&gt;
&lt;li&gt;G的执行顺序，先从本地队列找，本地没有则从全局队列找&lt;/li&gt;
&lt;li&gt;转移：局部与全局，全局G个数&amp;#x2F;P个数   局部与局部，一次性转移一半&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Gorutine-从入队到执行&quot;&gt;&lt;a href=&quot;#Gorutine-从入队到执行&quot; class=&quot;headerlink&quot; title=&quot;Gorutine 从入队到执行&quot;&gt;&lt;/a&gt;Gorutine 从入队到执行&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;当我们创建一个G对象，就是 gorutine，它会加入到本地队列或者全局队列&lt;/li&gt;
&lt;li&gt;如果还有空闲的P，则创建一个M 绑定该 P ，注意！这里，P 此前必须还没绑定过M 的，否则不满足空闲的条件&lt;ol&gt;
&lt;li&gt;先找到一个空闲的P，如果没有则直接返回&lt;/li&gt;
&lt;li&gt;P 个数不会占用超过自己设定的cpu个数&lt;/li&gt;
&lt;li&gt;P 在被 M 绑定后，就会初始化自己的 G 队列，此时是一个空队列&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;M 会启动一个底层线程，循环执行能找到的 G 任务。这里的寻找的 G 从下面几方面找：&lt;ol&gt;
&lt;li&gt;当前 M 所绑的 P 队列中找&lt;/li&gt;
&lt;li&gt;去别的 P 的队列中找&lt;/li&gt;
&lt;li&gt;去全局 G 队列中找&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;G任务的执行顺序是，先从本地队列找，本地没有则从全局队列找&lt;/li&gt;
&lt;li&gt;程序启动的时候，首先跑的是主线程，然后这个主线程会绑定第一个 P&lt;/li&gt;
&lt;li&gt;入口 main 函数，其实是作为一个 goroutine 来执行&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;Gorutine-从入队到执行详细流程&quot;&gt;&lt;a href=&quot;#Gorutine-从入队到执行详细流程&quot; class=&quot;headerlink&quot; title=&quot;Gorutine 从入队到执行详细流程&quot;&gt;&lt;/a&gt;Gorutine 从入队到执行详细流程&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;runtime创建第一个线程M0：M0是启动进程后的编号为0的主线程，这个M对应的实例会在全局变量runtime.m0中，不需要在heap上分配，M0负责执行初始化操作和启动第一个G，在之后M0就和其他的M一样了。&lt;/li&gt;
&lt;li&gt;runtime创建第一个Go协程G0：G0是每次启动一个M都会第一个创建的 goroutine，G0仅用于负责调度G，G0不指向任何可执行函数，每个M都会有一个自己的G0。在调度或系统调用时会使用G0的栈空间，全局变量的G0是M0的G0。一般的G0放在本地队列中。&lt;/li&gt;
&lt;li&gt;关联M0和G0。&lt;/li&gt;
&lt;li&gt;调度初始化初始化M0、栈、垃圾回收，以及创建和初始化由 GOMAXPROCS 个P构成的P列表。&lt;/li&gt;
&lt;li&gt;创建 main() 中的 goroutine，即 runtime.main 创建 goroutine。&lt;/li&gt;
&lt;li&gt;启动M0，此时M0已经绑定了P，从P的本地队列中获取G，获取到 main goroutine。&lt;/li&gt;
&lt;li&gt;M绑定P。&lt;/li&gt;
&lt;li&gt;循环判断M通过P是否能够获取到G。&lt;/li&gt;
&lt;li&gt;获取不到则M进入休眠队列，等待被唤醒后再重新与P绑定。&lt;/li&gt;
&lt;li&gt;能够获取到G，则M根据G中的栈信息和调度信息设置运行环境。&lt;/li&gt;
&lt;li&gt;M执行G。&lt;/li&gt;
&lt;li&gt;G退出，runtime.main 执行 Defer 和 Panic 处理，或调用 runtime.exit 退出程序。&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;中断挂起与恢复&quot;&gt;&lt;a href=&quot;#中断挂起与恢复&quot; class=&quot;headerlink&quot; title=&quot;中断挂起与恢复&quot;&gt;&lt;/a&gt;中断挂起与恢复&lt;/h4&gt;&lt;p&gt;goroutine协程的中断挂起与恢复 ：协程的切换时间片是10ms，也就是说 goroutine 最多执行10ms就会被 M 切换到下一个 G。这个过程，又被称为 中断，挂起&lt;br&gt;go程序启动时会首先创建一个特殊的内核线程 sysmon，用来监控和管理，其内部是一个循环：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;记录所有 P 的 G 任务的计数 schedtick，schedtick 会在每执行一个G任务后递增&lt;/li&gt;
&lt;li&gt;如果检查到 schedtick 一直没有递增，说明这个 P 一直在执行同一个 G 任务，如果超过10ms，就在这个G任务的栈信息里面加一个 tag 标记&lt;/li&gt;
&lt;li&gt;然后这个 G 任务在执行的时候，如果遇到非内联函数调用，就会检查一次这个标记，然后中断自己，把自己加到队列末尾，执行下一个G&lt;/li&gt;
&lt;li&gt;如果没有遇到非内联函数 调用（有时候正常的小函数会被优化成内联函数）的话，那就会一直执行这个G任务，直到它自己结束；如果是个死循环，并且 GOMAXPROCS&amp;#x3D;1 的话。那么一直只会只有一个 P 与一个 M，且队列中的其他 G 不会被执行！&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;中断后的恢复&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;中断的时候将寄存器里的栈信息，保存到自己的 G 对象里面&lt;/li&gt;
&lt;li&gt;当再次轮到自己执行时，将自己保存的栈信息复制到寄存器里面，这样就接着上次之后运行&lt;h5 id=&quot;GOMAXPROCS–性能调优&quot;&gt;&lt;a href=&quot;#GOMAXPROCS–性能调优&quot; class=&quot;headerlink&quot; title=&quot;GOMAXPROCS–性能调优&quot;&gt;&lt;/a&gt;GOMAXPROCS–性能调优&lt;/h5&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;看完上面的内容，相信你已经知道，&lt;code&gt;GOMAXPROCS&lt;/code&gt; 就是 go 中 runtime 包的一个函数。它设置了 P 的最多的个数。这也就直接导致了 M 最多的个数是多少，而 M 的个数就决定了各个 G 队列能同时被多少个 M 线程来进行调取执行！&lt;/p&gt;
&lt;h2 id=&quot;GC&quot;&gt;&lt;a href=&quot;#GC&quot; class=&quot;headerlink&quot; title=&quot;GC&quot;&gt;&lt;/a&gt;GC&lt;/h2&gt;&lt;p&gt;最常见的垃圾回收算法有标记清除(Mark-Sweep) 和引用计数(Reference Count)，Go 语言 采用的是标记清除算法。1.5 版本以后在此基础上使用了三色标记法和写屏障技术，提高了效率。&lt;/p&gt;
&lt;p&gt;标记清除收集器是跟踪式垃圾收集器，其执行过程可以分成标记（Mark）和清除（Sweep）两个阶段：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;标记阶段 — 从根对象出发查找并标记堆中所有存活的对象；&lt;/li&gt;
&lt;li&gt;清除阶段 — 遍历堆中的全部对象，回收未被标记的垃圾对象并将回收的内存加入空闲链表。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;标记清除算法的一大问题是在标记期间，需要暂停程序（Stop the world，STW，这也是 GC 算法优化的重点），标记结束之后，用户程序才可以继续执行。为了能够异步执行，减少 STW 的时间，Go 语言采用了三色标记法。&lt;/p&gt;
&lt;p&gt;三色标记算法将程序中的对象分成白色、黑色和灰色三类。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;白色：不确定对象。&lt;/li&gt;
&lt;li&gt;灰色：存活对象，子对象待处理。&lt;/li&gt;
&lt;li&gt;黑色：存活对象。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;标记开始时，所有内存加入白色集合（这一步需 STW ）。首先将根对象标记为灰色，加入待扫描队列（灰色集合）；使用并发的 goroutine 扫描队列，取出一个灰色对象，将其标记为黑色，并将其指向的对象标记为灰色，加入队列。重复这个过程，直到灰色集合为空为止，标记阶段结束。那么白色对象即可需要清理的对象，而黑色对象均为根可达的对象，不能被清理。&lt;/p&gt;
&lt;p&gt;三色标记法因为多了一个白色的状态来存放不确定对象，所以后续的标记阶段可以并发地执行。当然并发执行的代价是可能会造成一些遗漏，因为那些早先被标记为黑色的对象可能目前已经是不可达的了。所以三色标记法是一个 false negative（假阴性）的算法。&lt;/p&gt;
&lt;p&gt;三色标记法并发执行仍存在一个问题，即在 GC 过程中，对象指针发生了改变。比如下面的例子：&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;A (黑) -&amp;gt; B (灰) -&amp;gt; C (白) -&amp;gt; D (白)  &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;正常情况下，D 对象最终会被标记为黑色，不应被回收。但在标记和用户程序并发执行过程中，用户程序删除了 C 对 D 的引用，而 A 获得了 D 的引用。标记继续进行，D 就没有机会被标记为黑色了（A 已经处理过，这一轮不会再被处理）。&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;A (黑) -&amp;gt; B (灰) -&amp;gt; C (白)   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; ↓  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;D (白)  &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;为了解决这个问题，Go 使用了内存屏障技术，它是在用户程序读取对象、创建新对象以及更新对象指针时执行的一段代码，类似于一个钩子。垃圾收集器使用了写屏障（Write Barrier）技术，这个计数会拦截将白色指针插入黑色对象的操作，当对象新增或更新时，会将其着色为灰色。这样即使与用户程序并发执行，对象的引用发生改变时，垃圾收集器也能正确处理了。&lt;/p&gt;
&lt;p&gt;写屏障破坏两个条件其一即可&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;破坏条件1：Dijistra写屏障&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;满足强三色不变性：黑色节点不允许引用白色节点 当黑色节点新增了白色节点的引用时，将对应的白色节点改为灰色&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;破坏条件2：Yuasa写屏障&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;满足弱三色不变性：黑色节点允许引用白色节点，但是该白色节点有其他灰色节点间接的引用（确保不会被遗漏） 当白色节点被删除了一个引用时，悲观地认为它一定会被一个黑色节点新增引用，所以将它置为灰色&lt;/p&gt;
&lt;h4 id=&quot;一次完整的-GC-分为四个阶段：&quot;&gt;&lt;a href=&quot;#一次完整的-GC-分为四个阶段：&quot; class=&quot;headerlink&quot; title=&quot;一次完整的 GC 分为四个阶段：&quot;&gt;&lt;/a&gt;一次完整的 GC 分为四个阶段：&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;标记准备(Mark Setup，需 STW)，打开写屏障(Write Barrier)，开启辅助 GC （mutator assist），统计 root 对象的任务数量&lt;/li&gt;
&lt;li&gt;使用三色标记法标记（Marking, 并发）&lt;/li&gt;
&lt;li&gt;标记结束(Mark Termination，需 STW)，关闭写屏障。&lt;/li&gt;
&lt;li&gt;清理(Sweeping, 并发)&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;GC-的触发时机&quot;&gt;&lt;a href=&quot;#GC-的触发时机&quot; class=&quot;headerlink&quot; title=&quot;GC 的触发时机&quot;&gt;&lt;/a&gt;GC 的触发时机&lt;/h4&gt;&lt;p&gt;使用系统监控，该触发条件由 &lt;code&gt;runtime.forcegcperiod&lt;/code&gt; 变量控制，默认为 2 分 钟。当超过两分钟没有产生任何 GC 时，强制触发 GC。 使用步调（Pacing）算法，其核心思想是控制内存增长的比例。如 Go 的 GC 是一种比例 GC, 下一次 GC 结束时的堆大小和上一次 GC &lt;code&gt;存活&lt;/code&gt;堆大小成比例。一般来说，当前申请的内存是上一次 GC 两倍时触发。&lt;/p&gt;
&lt;h2 id=&quot;一些细碎知识点&quot;&gt;&lt;a href=&quot;#一些细碎知识点&quot; class=&quot;headerlink&quot; title=&quot;一些细碎知识点&quot;&gt;&lt;/a&gt;一些细碎知识点&lt;/h2&gt;&lt;h4 id=&quot;Golang-传参&quot;&gt;&lt;a href=&quot;#Golang-传参&quot; class=&quot;headerlink&quot; title=&quot;Golang 传参&quot;&gt;&lt;/a&gt;Golang 传参&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;理论上来说，Golang 只有值传递，所有协程的入参都是值拷贝，协程内部的修改，无法影响原参数&lt;/li&gt;
&lt;li&gt;对于指针类型的参数，是对其指向地址的拷贝，因此可以使用地址来修改原参数&lt;/li&gt;
&lt;li&gt;Slice 底层是引用数组，因此对于 Slice 的修改可以反映到原数组；注意 扩容相关内容&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;defer&quot;&gt;&lt;a href=&quot;#defer&quot; class=&quot;headerlink&quot; title=&quot;defer&quot;&gt;&lt;/a&gt;defer&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;在编译期间压入操作栈&lt;/li&gt;
&lt;li&gt;多个 defer 的执行顺序为“后进先出”；&lt;/li&gt;
&lt;li&gt;所有函数在执行 RET 返回指令之前，都会先检查是否存在 defer 语句，若存在则先逆序调用 defer 语句进行收尾工作再退出返回；&lt;/li&gt;
&lt;li&gt;匿名返回值是在 return 执行时被声明，有名返回值则是在函数声明的同时被声明，因此在 defer 语句中只能访问有名返回值，而不能直接访问匿名返回值；&lt;/li&gt;
&lt;li&gt;return 其实应该包含前后两个步骤：第一步是给返回值赋值（若为有名返回值则直接赋值，若为匿名返回值则先声明再赋值）；第二步是调用 RET 返回指令并传入返回值，而 RET 则会检查 defer 是否存在，若存在就先逆序插播 defer 语句，最后 RET 携带返回值退出函数；&lt;/li&gt;
&lt;li&gt;defer 声明时会先确定函数参数，推迟执行的仅仅是函数体&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;OOM&quot;&gt;&lt;a href=&quot;#OOM&quot; class=&quot;headerlink&quot; title=&quot;OOM&quot;&gt;&lt;/a&gt;OOM&lt;/h4&gt;&lt;p&gt;一般的解决办法是通过 pprof 进行内存分析，发现瓶颈&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;go tool pprof http://123.456.789.1:1234/debug/pprof/heap&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;


&lt;h4 id=&quot;interface-比较&quot;&gt;&lt;a href=&quot;#interface-比较&quot; class=&quot;headerlink&quot; title=&quot;interface 比较&quot;&gt;&lt;/a&gt;interface 比较&lt;/h4&gt;&lt;h4 id=&quot;Struct-能否比较&quot;&gt;&lt;a href=&quot;#Struct-能否比较&quot; class=&quot;headerlink&quot; title=&quot;Struct 能否比较&quot;&gt;&lt;/a&gt;Struct 能否比较&lt;/h4&gt;&lt;p&gt;不同类型的 struct 无法进行比较，而同一个 struct 的两个实例需要判断其成员能否比较，如果是 slice、map、func 中的一种就无法比较。同时无法比较的类型无法作为 map 的键。&lt;/p&gt;
&lt;h4 id=&quot;不能比较的类型如何比较是否相等&quot;&gt;&lt;a href=&quot;#不能比较的类型如何比较是否相等&quot; class=&quot;headerlink&quot; title=&quot;不能比较的类型如何比较是否相等&quot;&gt;&lt;/a&gt;不能比较的类型如何比较是否相等&lt;/h4&gt;&lt;p&gt;string，int，float，interface 等可以通过 reflect.DeepEqual 和 等于号进行比较&lt;br&gt;而 slice、struct、map 一般使用 reflect.DeepEqual 进行比较。&lt;/p&gt;
&lt;h4 id=&quot;标准化输入&quot;&gt;&lt;a href=&quot;#标准化输入&quot; class=&quot;headerlink&quot; title=&quot;标准化输入&quot;&gt;&lt;/a&gt;标准化输入&lt;/h4&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;string&quot;&gt;&amp;quot;bufio&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;string&quot;&gt;&amp;quot;os&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;reader := bufio.NewReader(os.Stdin)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;input1, _ := reader.ReadString(&lt;span class=&quot;string&quot;&gt;&amp;#x27;&#92;n&amp;#x27;&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;// 读到的是 string 类型的一行数据&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;


&lt;h4 id=&quot;使用-goroutine-有没有遇到什么问题？&quot;&gt;&lt;a href=&quot;#使用-goroutine-有没有遇到什么问题？&quot; class=&quot;headerlink&quot; title=&quot;使用 goroutine 有没有遇到什么问题？&quot;&gt;&lt;/a&gt;使用 goroutine 有没有遇到什么问题？&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;内存泄漏：goroutine 没有适当的结束，被文件或链接句柄阻塞，有死锁或者 channel 阻塞，造成内存泄露&lt;ol&gt;
&lt;li&gt;确保明确退出&lt;/li&gt;
&lt;li&gt;使用 defer 结束句柄&lt;/li&gt;
&lt;li&gt;使用 context 管理生命周期&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;并发访问数据，造成数据竞争。&lt;ol&gt;
&lt;li&gt;sync.mutex 或者 channel 来同步访问&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;死锁&lt;ol&gt;
&lt;li&gt;多个 goroutine 互相等待对方的 channel 信道，造成死锁&lt;/li&gt;
&lt;li&gt;主线程 channel 阻塞，造成死锁&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;过量创建 goroutine &lt;ol&gt;
&lt;li&gt;使用 waitgroup 或者 channel  控制并发量&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;panic 传播：goroutine 中的 panic 无法传播到主协程，可能导致程序停止工作&lt;ol&gt;
&lt;li&gt;使用 defer recover 收集</summary>
        
      
    
    
    
    <category term="面试" scheme="https://bishoptylaor.github.io/categories/interview/"/>
    
    <category term="go" scheme="https://bishoptylaor.github.io/categories/interview/go/"/>
    
    
  </entry>
  
  <entry>
    <title>todo</title>
    <link href="https://bishoptylaor.github.io/uncategorized/todo/"/>
    <id>https://bishoptylaor.github.io/uncategorized/todo/</id>
    <published>2024-05-11T11:11:13.000Z</published>
    <updated>2024-06-23T03:00:26.126Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;raft&lt;br&gt;&lt;a href=&quot;https://cloud.tencent.com/developer/article/2168468&quot;&gt;https://cloud.tencent.com/developer/article/2168468&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://www.infoq.cn/article/us5gjqqz8bmbeha25io0&quot;&gt;https://www.infoq.cn/article/us5gjqqz8bmbeha25io0&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;kafka&lt;br&gt;&lt;a href=&quot;https://cloud.tencent.com/developer/article/2240297?areaId=106001&quot;&gt;https://cloud.tencent.com/developer/article/2240297?areaId=106001&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://cloud.tencent.com/developer/article/2415900&quot;&gt;https://cloud.tencent.com/developer/article/2415900&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://cloud.tencent.com/developer/article/2203064&quot;&gt;https://cloud.tencent.com/developer/article/2203064&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;sync.map&lt;br&gt;&lt;a href=&quot;https://cloud.tencent.com/developer/article/2140224&quot;&gt;https://cloud.tencent.com/developer/article/2140224&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://cloud.tencent.com/developer/article/2140226&quot;&gt;https://cloud.tencent.com/developer/article/2140226&lt;/a&gt;&lt;br&gt;go.map&lt;br&gt;&lt;a href=&quot;https://blog.csdn.net/lp15929801907/article/details/130229409?utm_source=miniapp_weixin&quot;&gt;https://blog.csdn.net/lp15929801907/article/details/130229409?utm_source=miniapp_weixin&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://segmentfault.com/a/1190000023879178?utm_source=sf-similar-article&quot;&gt;https://segmentfault.com/a/1190000023879178?utm_source=sf-similar-article&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;sync.Mutex&lt;br&gt;&lt;a href=&quot;https://cloud.tencent.com/developer/article/2140227&quot;&gt;https://cloud.tencent.com/developer/article/2140227&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;defer&lt;br&gt;&lt;a href=&quot;https://cloud.tencent.com/developer/article/1410243&quot;&gt;https://cloud.tencent.com/developer/article/1410243&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;gmp&lt;br&gt;&lt;a href=&quot;https://cloud.tencent.com/developer/article/2191347&quot;&gt;https://cloud.tencent.com/developer/article/2191347&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://cloud.tencent.com/developer/article/1680164&quot;&gt;https://cloud.tencent.com/developer/article/1680164&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;redis&lt;br&gt;&lt;a href=&quot;https://blog.csdn.net/qq1515312832/article/details/113880849&quot;&gt;https://blog.csdn.net/qq1515312832/article/details/113880849&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://cloud.tencent.com/developer/article/2077086&quot;&gt;https://cloud.tencent.com/developer/article/2077086&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://cloud.tencent.com/developer/article/1796102&quot;&gt;https://cloud.tencent.com/developer/article/1796102&lt;/a&gt;&lt;br&gt;skiplist&lt;br&gt;&lt;a href=&quot;https://lotabout.me/2018/max-level-of-skiplist/&quot;&gt;https://lotabout.me/2018/max-level-of-skiplist/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;channel&lt;br&gt;&lt;a href=&quot;https://cloud.tencent.com/developer/article/1651356&quot;&gt;https://cloud.tencent.com/developer/article/1651356&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://cloud.tencent.com/developer/article/2078995?areaId=106001&quot;&gt;https://cloud.tencent.com/developer/article/2078995?areaId=106001&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://cloud.tencent.com/developer/article/2366292&quot;&gt;https://cloud.tencent.com/developer/article/2366292&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;sync.singleflight&lt;br&gt;&lt;a href=&quot;https://cloud.tencent.com/developer/article/2064811&quot;&gt;https://cloud.tencent.com/developer/article/2064811&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;pprof&lt;br&gt;&lt;a href=&quot;https://cloud.tencent.com/developer/article/2369200&quot;&gt;https://cloud.tencent.com/developer/article/2369200&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;并发&lt;br&gt;&lt;a href=&quot;https://cloud.tencent.com/developer/article/2366295&quot;&gt;https://cloud.tencent.com/developer/article/2366295&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;拷贝&lt;br&gt;&lt;a href=&quot;https://cloud.tencent.com/developer/article/1870553&quot;&gt;https://cloud.tencent.com/developer/article/1870553&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;位运算&lt;br&gt;&lt;a href=&quot;https://cloud.tencent.com/developer/article/2046380&quot;&gt;https://cloud.tencent.com/developer/article/2046380&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;context&lt;br&gt;&lt;a href=&quot;https://cloud.tencent.com/developer/article/2259772&quot;&gt;https://cloud.tencent.com/developer/article/2259772&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;排序&lt;br&gt;&lt;a href=&quot;https://www.cnblogs.com/onepixel/p/7674659.html&quot;&gt;https://www.cnblogs.com/onepixel/p/7674659.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;dns&lt;br&gt;&lt;a href=&quot;https://cloud.tencent.com/developer/article/2018599&quot;&gt;https://cloud.tencent.com/developer/article/2018599&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;mysql&lt;br&gt;&lt;a href=&quot;https://blog.csdn.net/qq_44918090/article/details/120278339&quot;&gt;https://blog.csdn.net/qq_44918090/article/details/120278339&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;刷题 Leetcode&lt;br&gt;152&lt;/p&gt;
&lt;p&gt;go&lt;br&gt;&lt;a href=&quot;https://github.com/KeKe-Li/For-learning-Go-Tutorial/blob/master/src/spec/02.0.md&quot;&gt;https://github.com/KeKe-Li/For-learning-Go-Tutorial/blob/master/src/spec/02.0.md&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://cloud.tencent.com/developer/article/2358698&quot;&gt;https://cloud.tencent.com/developer/article/2358698&lt;/a&gt;&lt;br&gt;gmp&lt;br&gt;&lt;a href=&quot;https://cloud.tencent.com/developer/article/1343134&quot;&gt;https://cloud.tencent.com/developer/article/1343134&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status&quot;&gt;https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://www.ruanyifeng.com/blog/2014/09/illustration-ssl.html&quot;&gt;https://www.ruanyifeng.com/blog/2014/09/illustration-ssl.html&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://www.digitalocean.com/community/tutorials/http-1-1-vs-http-2-what-s-the-difference&quot;&gt;https://www.digitalocean.com/community/tutorials/http-1-1-vs-http-2-what-s-the-difference&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://hit-alibaba.github.io/interview/basic/network/HTTPS.html&quot;&gt;https://hit-alibaba.github.io/interview/basic/network/HTTPS.html&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://hit-alibaba.github.io/interview/basic/network/HTTP.html&quot;&gt;https://hit-alibaba.github.io/interview/basic/network/HTTP.html&lt;/a&gt;&lt;br&gt;进程间通信&lt;br&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/mblyh6XrLj1bCwL0Evs-Vg&quot;&gt;https://mp.weixin.qq.com/s/mblyh6XrLj1bCwL0Evs-Vg&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;es&lt;br&gt;&lt;a href=&quot;https://cloud.tencent.com/developer/article/2199065&quot;&gt;https://cloud.tencent.com/developer/article/2199065&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://cloud.tencent.com/developer/article/2134425&quot;&gt;https://cloud.tencent.com/developer/article/2134425&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;数据库&lt;br&gt;&lt;a</summary>
        
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://bishoptylaor.github.io/interview/simulation/%E8%AF%9D%E6%9C%AF/"/>
    <id>https://bishoptylaor.github.io/interview/simulation/%E8%AF%9D%E6%9C%AF/</id>
    <published>2024-05-10T02:37:28.480Z</published>
    <updated>2024-06-21T13:37:24.769Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h3 id=&quot;自我介绍：&quot;&gt;&lt;a href=&quot;#自我介绍：&quot; class=&quot;headerlink&quot; title=&quot;自我介绍：&quot;&gt;&lt;/a&gt;自我介绍：&lt;/h3&gt;&lt;p&gt;您好，我是王鑫宇，非常感谢给我的这次面试机会，拥有几年k12教育公司负责增长业务相关的系统和模型设计，其中主要包括活动营销平台的开发，以及相关系统的重构与升级，有过多次大型系统研发经验，有过多次跨部门系统研发经验。有过5人小组的管理经验。&lt;/p&gt;
&lt;h3 id=&quot;您在前一家公司的离职原因是什么？&quot;&gt;&lt;a href=&quot;#您在前一家公司的离职原因是什么？&quot; class=&quot;headerlink&quot; title=&quot;您在前一家公司的离职原因是什么？&quot;&gt;&lt;/a&gt;您在前一家公司的离职原因是什么？&lt;/h3&gt;&lt;p&gt;政策限制后，公司尝试了多种方向，比如海外业务、多学科等探索，初步是有一些成果的。我自身来说还是想要和公司一同发展的，但是随着时间的推移，各方向业务收缩，研发工作以维护为主，对于系统层面的迭代实际上是在不断地做减法。并且家人生病，需要人照顾，综合考虑下就出来了&lt;/p&gt;
&lt;h3 id=&quot;项目-STAR原则！（Situation、Task、Action、Result）&quot;&gt;&lt;a href=&quot;#项目-STAR原则！（Situation、Task、Action、Result）&quot; class=&quot;headerlink&quot; title=&quot;项目 STAR原则！（Situation、Task、Action、Result）&quot;&gt;&lt;/a&gt;项目 STAR原则！（Situation、Task、Action、Result）&lt;/h3&gt;&lt;h4 id=&quot;广告平台&quot;&gt;&lt;a href=&quot;#广告平台&quot; class=&quot;headerlink&quot; title=&quot;广告平台&quot;&gt;&lt;/a&gt;广告平台&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;Situation：&lt;/strong&gt;&lt;br&gt;初衷是这样的，做活动的时候需要在公司内部多个 app 做展示推送，那么涉及到了不同业务方的展示规则不尽相同，需求提过去又需要结合其他业务方评估是否支持，以及研发周期，对于所有人来说都是很高的成本，并且数据统计也是各管各的，从活动角度很难一键式的获取营销数据，需要额外的再提一些数据需求；再者，有一些 ab 实验的展示要求，也很难推广，基本上只能选取最大流量的来做评估，但是最大流量的 app 从付费模式上来说又不一样，所以其实获取的数据很难得到想要的结果。&lt;br&gt;&lt;strong&gt;Task：&lt;/strong&gt;&lt;br&gt;为了解决上述的问题，首先要做的是先收集各种广告的样式以及投放规则，然后做整合和分类。并且由于新系统目标要支持整个公司多个 App 的访问流量，可以预见的是相关并发量会比常规的活动要高。一个用户单 app 大概有十几个位置需要拉取信息，绘本的用户因为没有严格的上课时间，所以虽然用户量大，日活高，但是理论上不会短时间集中访问。但是一对一就不一样了，用户一般上下课时间是固定的，那么这一段短时间内，可能会有2-3w用户并发的来获取广告内容，双减前高峰期也能有 5w+ 的用户，估算大概至少是百万级别的 qps。&lt;br&gt;其次是要做好与各个第三方功能系统的交互，关键的是数据怎么流通和冗余。&lt;br&gt;&lt;strong&gt;Action：&lt;/strong&gt;&lt;br&gt;大概整理出来的分类有：轮播、点播、弹窗、开屏（轮换）、首页条、金刚位、浮窗（常驻）等。&lt;br&gt;大概的筛选项有：静默期、轮播、最近N（小时&amp;#x2F;天&amp;#x2F;周&amp;#x2F;月）最多投放M次、每日活跃区间等。还有关联的第三方 用户属性、ab实验分组、简单的版本控制等。&lt;br&gt;广告位：定义分类和展示内容规则（大小、多少等）&lt;br&gt;广告组：定义一批广告的内容素材，以及广告点击后跳转地址等&lt;br&gt;广告：组和位 多对多 的单个组合，是用户可见营销内容的基本单位&lt;br&gt;为了保证服务的质量和稳定性，采用了 内存-redis-tidb 三层缓存结构，系统启动时，将相关广告配置加载到内存和 redis 中，如果是活动或者营销高峰，还会针对热点数据再缓存一层到 redis 中，第三层是 tidb 持久化的数据。为了减少前两层同时失效的情况，内存缓存做了随机定时更新，更新阶段会请求会透传到 redis 这一层。由于是读多写少的场景，redis 层一般会随配置更新而更新，除此之外也有自己的随机刷新时间，间隔相较于内存缓存会长一点。整体的刷新时间基本在1-2分钟，从业务上评估的话，对于这种延时是可以接受且影响不大的。&lt;br&gt;容灾：为了应对极端情况，比如数据库挂掉，会在动态配置和前端分别做默认数据的相关处理，保证业务基本可用；如果是配置错误造成的缓存污染的情况，如果比较紧急，也提供了强制刷新的动态配置开关。在配置正确的情况下，一般会在 1-2 分钟内完成缓存更新。&lt;/p&gt;
&lt;p&gt;能够支持的配置维度大概有：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;静默期&lt;/li&gt;
&lt;li&gt;最近N（小时&amp;#x2F;天&amp;#x2F;周&amp;#x2F;月）最多投放M次、&lt;ol&gt;
&lt;li&gt;按照自然周期设置一个桶，用户a在该周期1展示的广告x，用户每次展示成功了就往该 key 中添加一个元素，最后判断是否达到 M 来确定是否继续展示&lt;/li&gt;
&lt;li&gt;zset 结构&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;每日投放区间&lt;ol&gt;
&lt;li&gt;可以配置多个&lt;/li&gt;
&lt;li&gt;设计上比较像 leet 合并区间，&lt;/li&gt;
&lt;li&gt;最后判断当前时间即可&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;用户标签 or 用户身份规则&lt;br&gt;并且对接了 ab 测试系统，可以自动的参与实验。且使用广告的唯一标识来串联了数据漏斗，可以很好地查看投放的效果。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;一个比较有意思的功能是轮播，用户每次进来都能看到不同的广告，实现方式是利用了redis中zset的结构。首先用户有一个可见广告的集合，用户+广告位来标识一个桶，每次访问将广告的唯一id加入桶内，利用 zscore 来做判断，访问一轮以后清除桶重新计数。当时也是想了一些缓存计数方案，但是都不如 zset 来的方便。&lt;br&gt;&lt;strong&gt;Result：&lt;/strong&gt;&lt;br&gt;最终的效果是可以支持多 app 多种类型广告位，多种展示规则，多种过滤规则，对接了ab实验，以及串联起来前后端数据流统计和漏斗统计，方便运营优化策略。&lt;br&gt;能够很好的支持百万级别的访问量&lt;/p&gt;
&lt;h4 id=&quot;排行榜&quot;&gt;&lt;a href=&quot;#排行榜&quot; class=&quot;headerlink&quot; title=&quot;排行榜&quot;&gt;&lt;/a&gt;排行榜&lt;/h4&gt;&lt;p&gt;很明确的排行榜需求嘛&lt;br&gt;&lt;strong&gt;Task：&lt;/strong&gt;&lt;br&gt;提供总排名，查询用户个人排名，查询排行榜分数，以及可能相关的翻页需求。基础的分数计数器。&lt;br&gt;&lt;strong&gt;Action：&lt;/strong&gt;&lt;br&gt;分数变动入口由计数器处理，计数器设计上是单实例串行的逻辑，相关接口配用户维度的分布式锁，且接入消息队列，对于大量 or 并发高的数据，可以考虑接入队列。用户的个人分数也有计数器来提供功能。&lt;br&gt;使用 zset 来存储，对于简单的活动，一般一个排行榜就是一个 zset。里面是用户和分数。对于同分选手，需要按照先达到该分数的排名靠前（方案可以是到达时间与基准时间做差值，当做score的小数部分参与排序。执行&lt;code&gt;时间排序值 =（基准时间 - 玩家达到分数时间）/ 基准时间&lt;/code&gt;公式计算，得到的结果值一定小于 1，正好可作为 score 小数部分。越早达到，这个值就越大，满足排序。）&lt;br&gt;ZREVRANGE 命令来获取排行榜，其中成员的位置按 score 值递减 (从大到小) 来排列。具有相同 score 值的成员按字典序的反序排列。&lt;br&gt;还可以用负分数参与排序，使用 zrange 命令&lt;br&gt;对于参与人数大的排行榜，全部放到一起显然是不可行的。一般会根据业务形态，如果是短期营销，用户的分数分布更可能是金字塔型&lt;br&gt;前几页热门排行，会再加一层缓存数据，随业务更新异步刷新，展示相对实时内容；&lt;br&gt;或者前几页单独配置一个排行榜，但是会涉及到多个排行榜之间的排名及翻页的复杂计算，还有用户积分变化后从榜a出来进入榜b等，这个需要看情况要不要做成这么复杂的。&lt;br&gt;如果还不够支持，可以考虑做成内存缓存。&lt;br&gt;可以按照分段分成不同的 zset ，并且配合缓存每个 zset 的用户数量。那么用户自身排名就是他之前的 bucket 数量和 + 本 bucket 排名。&lt;br&gt;积分变动可能有两种，一种是 bucket 不变，积分变化，那么 zset 可以支持；另一种积分变化导致 bucket 变化，需要有 出榜 和 入榜 的操作。&lt;br&gt;还有一种不太要求实时排名的情况，可以定时去拉积分变动的 binlog ，来做更新。&lt;/p&gt;
&lt;p&gt;本质上是读取和写入两个部分嘛，读取就要做好防击穿和雪崩的应对。写入的话分两种，一种是队列每一种是接口调用，都要保证并发安全；另外还可以每天晚上根据 binlog 对账。&lt;br&gt;还有一个是需要注意 bucket 中的人数数量级，及时准备应对方案。&lt;br&gt;&lt;strong&gt;Result：&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;长链转短链&quot;&gt;&lt;a href=&quot;#长链转短链&quot; class=&quot;headerlink&quot; title=&quot;长链转短链&quot;&gt;&lt;/a&gt;长链转短链&lt;/h2&gt;&lt;p&gt;长链转短链是日常很容易碰到的场景嘛，可用于消息触达、解决关键词屏蔽问题或者域名屏蔽问题，可以统计用户点击等；另外可能的情景是分享二维码的时候长连接会影响生成的二维码密度，也需要转链服务的支持。&lt;/p&gt;
&lt;p&gt;主要流程是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;用户访问某域名下短链，例：&lt;a href=&quot;https://short.com/1a2b3c&quot;&gt;https://short.com/1a2b3c&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;短链服务收到请求后，去相应的缓存或者 db 中查找 kv 对，找到原始长链接&lt;/li&gt;
&lt;li&gt;返回状态码 302（临时重定向），并将响应头中的Location设置为原长链接地址（301永久重定向，不好统计点击次数）&lt;/li&gt;
&lt;li&gt;浏览器重新请求原链接&lt;/li&gt;
&lt;li&gt;返回响应&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;理论上不可能存在将所有长链一一对应成短链；也不存在某种 hash 函数，可以不重复的计算出长链对应的短链&lt;br&gt;所以问题就回归到发号器上边，来一个长地址，就给分配一个短地址。简单的方案，使用自增ID即可，从10进制往62进制转换即可；&lt;/p&gt;
&lt;p&gt;但是在分布式场景下，这个方案就变得不那么可行了。改进方案可以参考 tidb 的自增id，为每个实例分配不同的号段，或者设定某种取模方案均衡号段&lt;/p&gt;
&lt;h4 id=&quot;算法优化&quot;&gt;&lt;a href=&quot;#算法优化&quot; class=&quot;headerlink&quot; title=&quot;算法优化&quot;&gt;&lt;/a&gt;算法优化&lt;/h4&gt;&lt;p&gt;短链接标识一般是 [0-9, a-z, A-Z] 随机组合而成的字符串，字符一共有 62 个，因此短链接标识可以用 62 进制的字符串表示。&lt;/p&gt;
&lt;p&gt;首先维护一个自增的 ID，当生成短链接时，将 10 进制的自增 ID 转换成 62 进制字符串，这个字符串就可以唯一标识一个长链接。由于 ID 是自增的，对应的 62 进制字符串是不同的，这样就不会出现一个短链接对应多个长链接的问题，62 个字符排列组合，可以保证短链接是用不完的，就算仅限于 6 位长度标识的短链接，也有 558 亿多种情况，这种算法在网上被称为自增序列算法。&lt;/p&gt;
&lt;p&gt;1、62 进制的顺序并不一定严格按照 0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ 的顺序来表示，这个顺序可以是打乱的，这样生成的短链接标识更随机不易被破解。&lt;/p&gt;
&lt;p&gt;2、长链接与短链接是否需要一对多关系，同一个长链接使用自增主键 ID 算法生成的短链接是不同的，因为自增主键 ID 不同，生成的 62 进制字符串自然也不同。如果我们有一个长链接唯一对应一个短链接需求，可以将长链接进行 md5 加密，将加密后的 md5 值存储在 DB 中，每次生成短链接前都根据长链接 md5 值查询 DB，如果存在，则直接返回短链接，当然也可以使用其他方式维护这种关系。&lt;/p&gt;
&lt;p&gt;如果创建一个短链系统，我们应该做什么呢？&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;将长链接变为短链；&lt;/li&gt;
&lt;li&gt;用户访问短链接，会跳转到正确的长链接上去。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;查找到对应的长网址，并跳转到对应的页面。&lt;/p&gt;
&lt;h5 id=&quot;短链生成方法&quot;&gt;&lt;a href=&quot;#短链生成方法&quot; class=&quot;headerlink&quot; title=&quot;短链生成方法&quot;&gt;&lt;/a&gt;短链生成方法&lt;/h5&gt;&lt;p&gt;短码一般是由 &lt;code&gt;[a - z, A - Z, 0 - 9]&lt;/code&gt; 这62 个字母或数字组成，短码的长度也可以自定义，但一般不超过8位。比较常用的都是6位，6位的短码已经能有568亿种的组合：(26+26+10)^6 &amp;#x3D; 56800235584，已满足绝大多数的使用场景。&lt;/p&gt;
&lt;p&gt;目前比较流行的生成短码方法有：&lt;code&gt;自增id&lt;/code&gt;、&lt;code&gt;摘要算法&lt;/code&gt;、&lt;code&gt;普通随机数&lt;/code&gt;。&lt;/p&gt;
&lt;h6 id=&quot;自增id&quot;&gt;&lt;a href=&quot;#自增id&quot; class=&quot;headerlink&quot; title=&quot;自增id&quot;&gt;&lt;/a&gt;自增id&lt;/h6&gt;&lt;p&gt;该方法是一种无碰撞的方法，原理是，每新增一个短码，就在上次添加的短码id基础上加1，然后将这个10进制的id值，转化成一个62进制的字符串。&lt;/p&gt;
&lt;p&gt;一般利用数据表中的自增id来完成：每次先查询数据表中的自增id最大值max，那么需要插入的长网址对应自增id值就是 max+1，将max+1转成62进制即可得到短码。&lt;/p&gt;
&lt;p&gt;但是短码 id 是从一位长度开始递增，短码的长度不固定，不过可以用 id 从指定的数字开始递增的方式来处理，确保所有的短码长度都一致。同时，生成的短码是有序的，可能会有安全的问题，可以将生成的短码id，结合长网址等其他关键字，进行md5运算生成最后的短码。&lt;/p&gt;
&lt;h6 id=&quot;摘要算法&quot;&gt;&lt;a href=&quot;#摘要算法&quot; class=&quot;headerlink&quot; title=&quot;摘要算法&quot;&gt;&lt;/a&gt;摘要算法&lt;/h6&gt;&lt;p&gt;摘要算法又称哈希算法，它表示输入任意长度的数据，输出固定长度的数据。相同的输入数据始终得到相同的输出，不同的输入数据尽量得到不同的输出。&lt;/p&gt;
&lt;p&gt;算法过程：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;将长网址md5生成32位签名串,分为4段, 每段8个字节；&lt;/li&gt;
&lt;li&gt;对这四段循环处理, 取8个字节, 将他看成16进制串与0x3fffffff(30位1)与操作, 即超过30位的忽略处理；&lt;/li&gt;
&lt;li&gt;这30位分成6段, 每5位的数字作为字母表的索引取得特定字符, 依次进行获得6位字符串；&lt;/li&gt;
&lt;li&gt;总的md5串可以获得4个6位串；取里面的任意一个就可作为这个长url的短url地址；&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这种算法,虽然会生成4个,但是仍然存在重复几率。&lt;/p&gt;
&lt;p&gt;虽然几率很小，但是该方法依然存在碰撞的可能性，解决冲突会比较麻烦。不过该方法生成的短码位数是固定的，也不存在连续生成的短码有序的情况。&lt;/p&gt;
&lt;h6 id=&quot;普通随机数&quot;&gt;&lt;a href=&quot;#普通随机数&quot; class=&quot;headerlink&quot; title=&quot;普通随机数&quot;&gt;&lt;/a&gt;普通随机数&lt;/h6&gt;&lt;p&gt;该方法是从62个字符串中随机取出一个6位短码的组合，然后去&lt;a href=&quot;https://cloud.tencent.com/solution/database?from_column=20065&amp;from=20065&quot;&gt;数据库&lt;/a&gt;中查询该短码是否已存在。如果已存在，就继续循环该方法重新获取短码，否则就直接返回。&lt;/p&gt;
&lt;p&gt;该方法是最简单的一种实现，不过由于 &lt;code&gt;Math.round()&lt;/code&gt;方法生成的随机数属于伪随机数，碰撞的可能性也不小。在数据比较多的情况下，可能会循环很多次，才能生成一个不冲突的短码。&lt;/p&gt;
&lt;h1 id=&quot;对于分布式系统，有哪些新认识？&quot;&gt;&lt;a href=&quot;#对于分布式系统，有哪些新认识？&quot; class=&quot;headerlink&quot; title=&quot;对于分布式系统，有哪些新认识？&quot;&gt;&lt;/a&gt;对于分布式系统，有哪些新认识？&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;cap原理，可用性和数据一致性和分区容忍性三者不可兼得嘛。需要根据业务做权衡，数据的一致性也有 最终一致性、强一致性等不同要求。&lt;/li&gt;
&lt;li&gt;数据跟随微服务，放在靠近使用者的位置，可以减少网络延时&lt;/li&gt;
&lt;li&gt;多实例就会涉及到分布式架构的弹性伸缩和自动恢复，也会涉及到熔断降级等应对操作&lt;/li&gt;
&lt;li&gt;微服务架构大致会按照功能或者业务划分成不同的微服务，方便各自拓展边界和维护。但是要注意微服务之间的调用链和依赖路径。&lt;/li&gt;
&lt;li&gt;一致性协议包括 paxos 和 raft 。raft 是增加了任期概念的 paxos。保证多节点之间的数据一致性和容错性。&lt;/li&gt;
&lt;li&gt;rpc：使用 http2 协议，传输文本为 protobuffer 二进制序列化，&lt;/li&gt;
&lt;li&gt;多服务多实例的话就需要可观测和监控，比如访问量、访问延时、调用数据库延时、堆栈内存变化等指标，及时应对异常&lt;/li&gt;
&lt;li&gt;大数据流量和高并发场景下，kafka 这种流式处理组件就很重要了。&lt;/li&gt;
&lt;li&gt;故障隔离和容错，增加熔断、降级机制，避免故障扩散&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;使用 etcd 来完成微服务注册和发现，使用 thrift 和 grpc 作为微服务的框架。&lt;br&gt;rpc访问量、耗时，sql耗时等关键指标暴露给 Prometheus，并通过 Grafana 展示，便于监控服务质量，以及出现问题时可以帮助快速定位异常接口&lt;/p&gt;
&lt;p&gt;context多数用来进行上下文信息传递，在实际开发中，会记录整条调用链路。一般来说，需要注意的是超时机制；context只能自顶向下传值；context一定不能为nil，在不确定的情况下可以使用 context.TODO() 或者 context.Background()&lt;/p&gt;
&lt;p&gt;etcd中的分布式锁一般用来在集群系统启动时确定由哪一个系统来全局单例业务操作，比如数据刷新、业务数据清洗等&lt;br&gt;依据当前接口的唯一标识数据来实现幂等&lt;br&gt;不同系统间调用顺序可以用消息队列保证&lt;br&gt;分布式的CAP理论告诉我们“任何一个分布式系统都无法同时满足一致性（Consistency）、可用性（Availability）和分区容错性（Partition tolerance），最多只能同时满足两项。”所以，很多系统在设计之初就要对这三者做出取舍。在互联网领域的绝大多数的场景中，都需要牺牲强一致性来换取系统的高可用性，系统往往只需要保证“最终一致性”，只要这个最终时间是在用户可以接受的范围内即可。&lt;/p&gt;
&lt;p&gt;分布式系统一般使用 redis 来做分布式锁（缺点：redis主从切换时可能丢失数据）&lt;br&gt;redis分布式锁，我们使用的业务场景，加锁时间一般为1s-3s，根据场景浮动，其中3s是我们设定的最长响应时间。&lt;/p&gt;
&lt;p&gt;如果加锁后，过期时间内业务由于某种原因还没执行完，下一次请求再次加锁后打进来，而此时上一次的请求还未执行完毕，这时候需要对锁进行延期。可以采用协程的方法来设置一个ticker，在执行完毕的channel中如果没有收到通知，那么就需要对这个锁进行有限次的续期，来保证不会出现超卖这类情况。&lt;/p&gt;
&lt;p&gt;另一种情况是如果当前锁是全局的，那么可能会出现锁被其他集群的进程解锁的情况，这种一般针对加锁的key进行处理即可&lt;/p&gt;
&lt;p&gt;对于活动呢，由于运营提出的活动形式有很多，且对于上线时间有强要求，所以一般初次出现的活动形式，会采取敏捷开发的方式，以达到最快且稳定上线的目的&lt;/p&gt;
&lt;p&gt;任务系统，初期设计呢是很死板的，根据运营设计的任务动作从涉及到的多个方向拉取或者等待信息推送，但是这个方案对于其他业务的侵入性太高，风险极高。针对这一点，我将所有的业务动作全部转移到消息队列来获取，这样对于其他业务线或者系统来说，大部分是已经支持的&lt;/p&gt;
&lt;p&gt;抽奖系统，可以讲讲分布式锁相关，&lt;/p&gt;
&lt;p&gt;slice底层实现方法，map底层实现方法&lt;/p&gt;
&lt;p&gt;redis 跳表&lt;/p&gt;
&lt;p&gt;golang 语言的优势：静态语言，编译阶段可以发现一些问题；并发支持好，耗时随并发数线性增加；垃圾回收处理好&lt;/p&gt;
&lt;p&gt;golang 文件操作使用比较少，了解不多&lt;/p&gt;
&lt;p&gt;golang channel 利用协程通信来共享内存&lt;/p&gt;
&lt;p&gt;常见排序：快排，堆排，归并&lt;/p&gt;
&lt;p&gt;内核线程才是并行的基本单位&lt;/p&gt;
&lt;p&gt;k8s 运维同学可以用运营商的相关配置&lt;/p&gt;
&lt;h2 id=&quot;如果你现在重头来看当时的一个设计-或者当时遇到的一些困难的问题-有没有更好的做法？&quot;&gt;&lt;a href=&quot;#如果你现在重头来看当时的一个设计-或者当时遇到的一些困难的问题-有没有更好的做法？&quot; class=&quot;headerlink&quot; title=&quot;如果你现在重头来看当时的一个设计 或者当时遇到的一些困难的问题 有没有更好的做法？&quot;&gt;&lt;/a&gt;如果你现在重头来看当时的一个设计 或者当时遇到的一些困难的问题 有没有更好的做法？&lt;/h2&gt;&lt;p&gt;哥，我想的是可以拿团购来说，就是不要把业务流程和功能绑定太死，尽量要抽取主框架，然后往上边填模块&lt;br&gt;可以结合业务发展来讲。主流程就是开团参团嘛，还有自动脚本成团啥的，成员分成团长团员机器人三个嘛，不同身份在流程节点的动作是抽象在成员的函数内的；成员会挂载到一个团概念上，团又会有啥阶梯、普通这种分类，在成团发奖方面也有自己的抽象方法。甚至开团参团也可以抽象成一个 tunnel，一条购买消息来了，根据上下文走不通的逻辑，执行不同的pre校验和post动作。就这种方案的话，以后加入加个别的什么功能或者概念，往上边套就行&lt;/p&gt;
&lt;p&gt;您提供的描述已经非常详细和专业，但如果想要进一步优化，可以考虑以下几个方面：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;精简和突出重点&lt;/strong&gt;：将最重要的技能和经验放在前面，以便快速抓住读者的注意力。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;使用专业术语&lt;/strong&gt;：确保使用行业内广泛认可的术语，以显示您的专业性。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;量化成果&lt;/strong&gt;：如果可能，提供具体的例子或数字来量化您的成果和经验。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;个人特质&lt;/strong&gt;：强调您的个人特质和工作态度，让读者了解您作为团队成员的价值。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;以下是优化后的版本：&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;技术专长&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;精通 Golang 编程语言，具备扎实的编程基础和优秀的逻辑思维能力。&lt;/li&gt;
&lt;li&gt;熟练掌握 MySQL、TiDB 等主流关系型数据库，以及 MongoDB、Redis 等 NoSQL 数据库的应用。&lt;/li&gt;
&lt;li&gt;深入理解 Kafka 等消息中间件的工作原理。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;架构与设计&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;熟悉微服务架构，具有丰富的系统设计经验，能够高效地进行系统架构规划和设计。&lt;/li&gt;
&lt;li&gt;强大的系统设计能力，能够应对复杂系统的设计挑战。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;项目管理&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;拥有5人团队的项目管理经验，曾作为项目负责人成功主持跨部门项目的设计、研发和上线。&lt;/li&gt;
&lt;li&gt;强烈的团队合作意识，能够在团队中发挥领导作用。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;个人素质&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;认真负责，具备出色的执行力和良好的抗压能力。&lt;/li&gt;
&lt;li&gt;对编程充满热情，面对挑战和问题时表现出高度的积极性和解决问题的能力。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;这样的描述更加精炼，同时突出了您的专业技能、项目管理能力和个人素质。&lt;/p&gt;
&lt;p&gt;离职原因&lt;/p&gt;
&lt;p&gt;当时更看好做教育方向，也想换语言到 golang ，更支持微服务这个方向&lt;/p&gt;
&lt;p&gt;双减算是黑天鹅事件了&lt;/p&gt;
&lt;p&gt;职业规划：这次看机会就几个方向，一个是看有没有搭建基础中台的机会&lt;/p&gt;
&lt;p&gt;另一个是看有没有机会入行 ai 方向，毕竟这也算是未来一段时间的主流蓝海了&lt;/p&gt;
&lt;p&gt;继续提升技术，寻找一些大型项目的机会（搭建基础中台的机会），进而看有没有成为项目 leader 或者架构的方向。&lt;/p&gt;
&lt;p&gt;个人优势？&lt;br&gt;golang 语言，微服务，活动营销平台，总结抽象系统，喜欢重构，喜欢研究有需求的东西并做一些自己的理解和发散。&lt;/p&gt;
&lt;p&gt;家人原因离职&lt;/p&gt;
&lt;p&gt;学科探索 新加坡数学，中英，国学（流量池但不大）&lt;br&gt;有现金流的话其实就很好，可以在稳定的前提下再探索嘛，这部分相对来说也是可控的。&lt;/p&gt;
&lt;p&gt;伴鱼的话，感觉1对1还算可以，能有相对稳定的流水，但是增长的话目前是没什么好的方案&lt;/p&gt;
&lt;p&gt;其他业务线绘本啊、自然拼读啊，因为本身付费周期相对较短，而且结合一些头部主播做专场，流水倒是还行。&lt;/p&gt;
&lt;p&gt;获客成本高，直播流量对于1对1的增长感觉有折扣。活动角度的话，很多时候为了活动而活动，感觉对于产品本身的一些特性没有很突出，后期大多数时候是成为了一个促单促销的工具，又受限于营销成本，可能用户角度的优惠也没有那么大。&lt;/p&gt;
&lt;p&gt;有没有涉及翻译功能？学习交流的是目标语言还是？学习者是在纯目标语言环境中体验虚拟情景？&lt;br&gt;有没有一些预设的学习目标？口语这个感觉不好找量化指标？&lt;br&gt;结合社交与游戏玩法让用户练习口语。目标人群是 青少年 还是成人方向？内容和虚拟形象是否会做差异化？&lt;br&gt;语音识别？&lt;/p&gt;
&lt;p&gt;会往 vrchat</summary>
        
      
    
    
    
    <category term="面试" scheme="https://bishoptylaor.github.io/categories/interview/"/>
    
    <category term="实录" scheme="https://bishoptylaor.github.io/categories/interview/simulation/"/>
    
    
  </entry>
  
  <entry>
    <title>常见排序</title>
    <link href="https://bishoptylaor.github.io/library/algorithm/algorithm-sort/"/>
    <id>https://bishoptylaor.github.io/library/algorithm/algorithm-sort/</id>
    <published>2024-04-29T12:45:51.000Z</published>
    <updated>2024-07-25T16:18:33.000Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;![[img&amp;#x2F;elementary-sort.png]]&lt;/p&gt;
&lt;h2 id=&quot;常考排序&quot;&gt;&lt;a href=&quot;#常考排序&quot; class=&quot;headerlink&quot; title=&quot;常考排序&quot;&gt;&lt;/a&gt;常考排序&lt;/h2&gt;&lt;h3 id=&quot;快速排序&quot;&gt;&lt;a href=&quot;#快速排序&quot; class=&quot;headerlink&quot; title=&quot;快速排序&quot;&gt;&lt;/a&gt;快速排序&lt;/h3&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;QuickSort&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(nums []&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; []&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 思路：把一个数组分为左右两段，左段小于右段&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    quickSort(nums, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(nums)&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; nums&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 原地交换，所以传入交换索引&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;quickSort&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(nums []&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;, start, end &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; start &amp;lt; end &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 分治法：divide&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        pivot := partition(nums, start, end)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        quickSort(nums, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, pivot&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        quickSort(nums, pivot+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, end)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 分区&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;partition&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(nums []&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;, start, end &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 选取最后一个元素作为基准pivot&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    p := nums[end]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    i := start&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 最后一个值就是基准所以不用比较&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; j := start; j &amp;lt; end; j++ &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; nums[j] &amp;lt; p &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            swap(nums, i, j)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            i++&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 把基准值换到中间&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    swap(nums, i, end)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; i&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 交换两个元素&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;swap&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(nums []&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;, i, j &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    t := nums[i]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    nums[i] = nums[j]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    nums[j] = t&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&quot;归并排序&quot;&gt;&lt;a href=&quot;#归并排序&quot; class=&quot;headerlink&quot; title=&quot;归并排序&quot;&gt;&lt;/a&gt;归并排序&lt;/h3&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MergeSort&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(nums []&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; []&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; mergeSort(nums)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;mergeSort&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(nums []&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; []&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(nums) &amp;lt;= &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; nums&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 分治法：divide 分为两段&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    mid := &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(nums) / &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    left := mergeSort(nums[:mid])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    right := mergeSort(nums[mid:])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 合并两段数据&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    result := merge(left, right)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; result&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;merge&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(left, right []&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; (result []&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 两边数组合并游标&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    l := &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    r := &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 注意不能越界&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; l &amp;lt; &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(left) &amp;amp;&amp;amp; r &amp;lt; &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(right) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 谁小合并谁&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; left[l] &amp;gt; right[r] &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            result = &lt;span class=&quot;built_in&quot;&gt;append&lt;/span&gt;(result, right[r])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            r++&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            result = &lt;span class=&quot;built_in&quot;&gt;append&lt;/span&gt;(result, left[l])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            l++&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 剩余部分合并&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    result = &lt;span class=&quot;built_in&quot;&gt;append&lt;/span&gt;(result, left[l:]...)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    result = &lt;span class=&quot;built_in&quot;&gt;append&lt;/span&gt;(result, right[r:]...)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&quot;堆排序&quot;&gt;&lt;a href=&quot;#堆排序&quot; class=&quot;headerlink&quot; title=&quot;堆排序&quot;&gt;&lt;/a&gt;堆排序&lt;/h3&gt;&lt;p&gt;用数组表示的完美二叉树 complete binary tree&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;完美二叉树 VS 其他二叉树&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://greyireland.gitbook.io/~gitbook/image?url=https://img.fuiboom.com/img/tree_type.png&amp;width=768&amp;dpr=4&amp;quality=100&amp;sign=da697a19f8b79e11953a90709485d8e615dda884e21047841e538aa29ce671d3&quot;&gt;&lt;/p&gt;
&lt;p&gt;核心代码&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; main&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;HeapSort&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(a []&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; []&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 1、无序数组a&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 2、将无序数组a构建为一个大根堆&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i := &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(a)/&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; i &amp;gt;= &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i-- &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        sink(a, i, &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(a))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 3、交换a[0]和a[len(a)-1]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 4、然后把前面这段数组继续下沉保持堆结构，如此循环即可&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i := &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(a) - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; i &amp;gt;= &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; i-- &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 从后往前填充值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        swap(a, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, i)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 前面的长度也减一&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        sink(a, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, i)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; a&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;sink&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(a []&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;, i &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;, length &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 左节点索引(从0开始，所以左节点为i*2+1)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        l := i*&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 右节点索引&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        r := i*&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; + &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// idx保存根、左、右三者之间较大值的索引&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        idx := i&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 存在左节点，左节点值较大，则取左节点&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; l &amp;lt; length &amp;amp;&amp;amp; a[l] &amp;gt; a[idx] &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            idx = l&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 存在右节点，且值较大，取右节点&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; r &amp;lt; length &amp;amp;&amp;amp; a[r] &amp;gt; a[idx] &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            idx = r&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 如果根节点较大，则不用下沉&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; idx == i &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 如果根节点较小，则交换值，并继续下沉&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        swap(a, i, idx)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 继续下沉idx节点&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        i = idx&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;swap&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(a []&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;, i, j &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    a[i], a[j] = a[j], a[i]&lt;/span&gt;&lt;br&gt;&lt;span</summary>
        
      
    
    
    
    <category term="知识库" scheme="https://bishoptylaor.github.io/categories/library/"/>
    
    <category term="算法题" scheme="https://bishoptylaor.github.io/categories/library/algorithm/"/>
    
    
    <category term="必看必会" scheme="https://bishoptylaor.github.io/tags/%E5%BF%85%E7%9C%8B%E5%BF%85%E4%BC%9A/"/>
    
    <category term="基础知识" scheme="https://bishoptylaor.github.io/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>时间复杂度</title>
    <link href="https://bishoptylaor.github.io/library/algorithm/algorithm-time-complixty/"/>
    <id>https://bishoptylaor.github.io/library/algorithm/algorithm-time-complixty/</id>
    <published>2024-04-29T11:40:08.000Z</published>
    <updated>2024-05-22T10:45:53.940Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h2 id=&quot;时间复杂度-大-O&quot;&gt;&lt;a href=&quot;#时间复杂度-大-O&quot; class=&quot;headerlink&quot; title=&quot;时间复杂度 (大 O)&quot;&gt;&lt;/a&gt;时间复杂度 (大 O)&lt;/h2&gt;&lt;p&gt;![[Pasted image 20240429194251.png]]&lt;/p&gt;
&lt;p&gt;![[Pasted image 20240429194302.png]]&lt;/p&gt;
&lt;p&gt;首先，我们来谈谈常用操作的时间复杂度，按数据结构&amp;#x2F;算法划分。然后，我们将讨论给定输入大小的合理复杂性。&lt;/p&gt;
&lt;h4 id=&quot;数组（动态数组-x2F-列表）&quot;&gt;&lt;a href=&quot;#数组（动态数组-x2F-列表）&quot; class=&quot;headerlink&quot; title=&quot;数组（动态数组&amp;#x2F;列表）&quot;&gt;&lt;/a&gt;数组（动态数组&amp;#x2F;列表）&lt;/h4&gt;&lt;p&gt;规定 &lt;em&gt;n &amp;#x3D; arr.length&lt;/em&gt;,&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;结尾添加或删除元素: 𝑂(1)&lt;/li&gt;
&lt;li&gt;从任意索引中添加或删除元素: 𝑂(𝑛)&lt;/li&gt;
&lt;li&gt;访问或修改任意索引处的元素: 𝑂(1)&lt;/li&gt;
&lt;li&gt;检查元素是否存在: 𝑂(𝑛)&lt;/li&gt;
&lt;li&gt;双指针: 𝑂(𝑛⋅𝑘), 𝑘 是每次迭代所做的工作，包括滑动窗口&lt;/li&gt;
&lt;li&gt;构建前缀和: 𝑂(𝑛)&lt;/li&gt;
&lt;li&gt;求给定前缀和的子数组的和：𝑂(1)&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;字符串-不可变&quot;&gt;&lt;a href=&quot;#字符串-不可变&quot; class=&quot;headerlink&quot; title=&quot;字符串 (不可变)&quot;&gt;&lt;/a&gt;字符串 (不可变)&lt;/h4&gt;&lt;p&gt;规定 &lt;em&gt;n &amp;#x3D; s.length&lt;/em&gt;,&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;添加或删除字符: 𝑂(𝑛)&lt;/li&gt;
&lt;li&gt;任意索引处的访问元素: 𝑂(1)&lt;/li&gt;
&lt;li&gt;两个字符串之间的连接: 𝑂(𝑛+𝑚), 𝑚 是另一个字符串的长度&lt;/li&gt;
&lt;li&gt;创建子字符串: 𝑂(𝑚), 𝑚 是子字符串的长度&lt;/li&gt;
&lt;li&gt;双指针: 𝑂(𝑛⋅𝑘), 𝑘 是每次迭代所做的工作，包括滑动窗口&lt;/li&gt;
&lt;li&gt;通过连接数组、stringbuilder 等构建字符串：𝑂(𝑛)&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;链表&quot;&gt;&lt;a href=&quot;#链表&quot; class=&quot;headerlink&quot; title=&quot;链表&quot;&gt;&lt;/a&gt;链表&lt;/h4&gt;&lt;p&gt;给定 𝑛n 作为链表中的节点数，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;给定指针位置的后面添加或删除元素: 𝑂(1)&lt;/li&gt;
&lt;li&gt;如果是双向链表，给定指针位置添加或删除元素: 𝑂(1)&lt;/li&gt;
&lt;li&gt;在没有指针的任意位置添加或删除元素: 𝑂(𝑛)&lt;/li&gt;
&lt;li&gt;无指针任意位置的访问元素: 𝑂(𝑛)&lt;/li&gt;
&lt;li&gt;检查元素是否存在: 𝑂(𝑛)&lt;/li&gt;
&lt;li&gt;在位置 i 和 j 之间反转: 𝑂(𝑗−𝑖)&lt;/li&gt;
&lt;li&gt;使用快慢指针或哈希映射完成一次遍历: 𝑂(𝑛)&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;哈希表-x2F-字典&quot;&gt;&lt;a href=&quot;#哈希表-x2F-字典&quot; class=&quot;headerlink&quot; title=&quot;哈希表&amp;#x2F;字典&quot;&gt;&lt;/a&gt;哈希表&amp;#x2F;字典&lt;/h4&gt;&lt;p&gt;给定 &lt;em&gt;n &amp;#x3D; dic.length&lt;/em&gt;,&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;添加或删除键值对: 𝑂(1)&lt;/li&gt;
&lt;li&gt;检查 key 是否存在: 𝑂(1)&lt;/li&gt;
&lt;li&gt;检查值是否存在: 𝑂(𝑛)&lt;/li&gt;
&lt;li&gt;访问或修改与 key 相关的值: 𝑂(1)&lt;/li&gt;
&lt;li&gt;遍历所有键值: 𝑂(𝑛)&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;注意: 𝑂(1)O(1) 操作相对于 n 是常数.实际上，哈希算法可能代价很高。例如，如果你的键是字符串，那么它将花费 𝑂(𝑚)O(m)，其中 𝑚m 是字符串的长度。 这些操作只需要相对于哈希映射大小的常数时间。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;集合&quot;&gt;&lt;a href=&quot;#集合&quot; class=&quot;headerlink&quot; title=&quot;集合&quot;&gt;&lt;/a&gt;集合&lt;/h4&gt;&lt;p&gt;给定 &lt;em&gt;n &amp;#x3D; set.length&lt;/em&gt;,&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;添加或删除元素: 𝑂(1)&lt;/li&gt;
&lt;li&gt;检测元素是否存在: 𝑂(1)&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;上面的说明也适用于这里。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;栈&quot;&gt;&lt;a href=&quot;#栈&quot; class=&quot;headerlink&quot; title=&quot;栈&quot;&gt;&lt;/a&gt;栈&lt;/h4&gt;&lt;p&gt;栈操作依赖于它们的实现。栈只需要支持弹出和推入。如果使用动态数组实现:给定 &lt;em&gt;n &amp;#x3D; stack.length&lt;/em&gt;,&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;推入元素: 𝑂(1)&lt;/li&gt;
&lt;li&gt;弹出元素: 𝑂(1)&lt;/li&gt;
&lt;li&gt;查看 (查看栈顶元素): 𝑂(1)&lt;/li&gt;
&lt;li&gt;访问或修改任意索引处的元素: 𝑂(1)&lt;/li&gt;
&lt;li&gt;检测元素是否存在: 𝑂(𝑛)&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;队列&quot;&gt;&lt;a href=&quot;#队列&quot; class=&quot;headerlink&quot; title=&quot;队列&quot;&gt;&lt;/a&gt;队列&lt;/h4&gt;&lt;p&gt;队列操作依赖于它们的实现。队列只需要支持出队列和入队列。如果使用双链表实现:给定 &lt;em&gt;n &amp;#x3D; queue.length&lt;/em&gt;,&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;入队的元素: 𝑂(1)&lt;/li&gt;
&lt;li&gt;出队的元素: 𝑂(1)&lt;/li&gt;
&lt;li&gt;查看 (查看队列前面的元素): 𝑂(1)&lt;/li&gt;
&lt;li&gt;访问或修改任意索引处的元素: 𝑂(𝑛)&lt;/li&gt;
&lt;li&gt;检查元素是否存在: 𝑂(𝑛)&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;注意:大多数编程语言实现队列的方式比简单的双链表更复杂。根据实现的不同，通过索引访问元素可能比 𝑂(𝑛)O(n) 快，但有一个重要的常量除数。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;二叉树问题-DFS-x2F-BFS&quot;&gt;&lt;a href=&quot;#二叉树问题-DFS-x2F-BFS&quot; class=&quot;headerlink&quot; title=&quot;二叉树问题 (DFS&amp;#x2F;BFS)&quot;&gt;&lt;/a&gt;二叉树问题 (DFS&amp;#x2F;BFS)&lt;/h4&gt;&lt;p&gt;给定  𝑛 作为树的节点数，大多数算法的时间复杂度为 𝑂(𝑛⋅𝑘), 𝑘 是在每个节点上做的操作数, 通常是 𝑂(1)。这只是一个普遍规律，并非总是如此。我们在这里假设 BFS 是用高效队列实现的。&lt;/p&gt;
&lt;h4 id=&quot;二叉搜索树&quot;&gt;&lt;a href=&quot;#二叉搜索树&quot; class=&quot;headerlink&quot; title=&quot;二叉搜索树&quot;&gt;&lt;/a&gt;二叉搜索树&lt;/h4&gt;&lt;p&gt;给定 𝑛 作为树中的节点数，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;添加或删除元素：最坏的情况下 𝑂(𝑛),平均情况 𝑂(log⁡𝑛)&lt;/li&gt;
&lt;li&gt;检查元素是否存在：最坏的情况下 𝑂(𝑛), 平均情况 𝑂(log⁡𝑛)&lt;br&gt;平均情况是当树很平衡时 —— 每个深度都接近满。最坏的情况是树只是一条直线。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;堆-x2F-优先队列&quot;&gt;&lt;a href=&quot;#堆-x2F-优先队列&quot; class=&quot;headerlink&quot; title=&quot;堆&amp;#x2F;优先队列&quot;&gt;&lt;/a&gt;堆&amp;#x2F;优先队列&lt;/h4&gt;&lt;p&gt;给定 &lt;em&gt;n &amp;#x3D; heap.length&lt;/em&gt; 并讨论最小堆,&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;添加一个元素: 𝑂(log⁡𝑛)&lt;/li&gt;
&lt;li&gt;删除最小的元素: 𝑂(log⁡𝑛)&lt;/li&gt;
&lt;li&gt;找到最小的元素: 𝑂(1)&lt;/li&gt;
&lt;li&gt;查看元素是否存在: 𝑂(𝑛)&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;二分查找&quot;&gt;&lt;a href=&quot;#二分查找&quot; class=&quot;headerlink&quot; title=&quot;二分查找&quot;&gt;&lt;/a&gt;二分查找&lt;/h4&gt;&lt;p&gt;在最坏的情况下，二分查找的时间复杂度为 𝑂(log⁡𝑛)，其中 𝑛 是初始搜索空间的大小。&lt;/p&gt;
&lt;h4 id=&quot;其他&quot;&gt;&lt;a href=&quot;#其他&quot; class=&quot;headerlink&quot; title=&quot;其他&quot;&gt;&lt;/a&gt;其他&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;排序: 𝑂(𝑛⋅log⁡𝑛), 其中 𝑛 是要排序的数据的大小&lt;/li&gt;
&lt;li&gt;图上的 DFS 和 BFS：𝑂(𝑛⋅𝑘+𝑒)，其中 𝑛 是节点数，𝑒 是边数，前提是每个节点处理花费都是 𝑂(1)，不需要重复遍历。&lt;/li&gt;
&lt;li&gt;DFS 和 BFS 空间复杂度：通常为 𝑂(𝑛)，但如果它在图形中，则可能为 𝑂(𝑛+𝑒) 来存储图形&lt;/li&gt;
&lt;li&gt;动态规划时间复杂度：𝑂(𝑛⋅𝑘)，其中 𝑛 是状态数，𝑘 是每个状态所需要的操作数&lt;/li&gt;
&lt;li&gt;动态规划空间复杂度：𝑂(𝑛)，其中 𝑛</summary>
        
      
    
    
    
    <category term="知识库" scheme="https://bishoptylaor.github.io/categories/library/"/>
    
    <category term="算法题" scheme="https://bishoptylaor.github.io/categories/library/algorithm/"/>
    
    
    <category term="必看必会" scheme="https://bishoptylaor.github.io/tags/%E5%BF%85%E7%9C%8B%E5%BF%85%E4%BC%9A/"/>
    
    <category term="基础知识" scheme="https://bishoptylaor.github.io/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>Raft 面试必备</title>
    <link href="https://bishoptylaor.github.io/interview/raft-interview/"/>
    <id>https://bishoptylaor.github.io/interview/raft-interview/</id>
    <published>2024-04-28T13:22:37.000Z</published>
    <updated>2024-05-23T16:48:00.064Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;Raft&lt;br&gt;Raft协议呢，一般包括这三种节点：Follower、Candidate、Leader；其中，候选人是只有在选举期间才存在的节点，一旦选举结束，那么集群中就只有 Leader，Follower&lt;/p&gt;
&lt;p&gt;节点之间使用 rpc 来通信，包括 投票rpc，复制日志心跳rpc，快照rpc&lt;/p&gt;
&lt;p&gt;选举过程如下：&lt;br&gt;选举时机：当网络刚刚启动或者集群节点变更，或者上一任期结束后。所有节点进入选举阶段，每个人持有一个随机的选举时钟，时钟结束后，节点优先给自己投票，然后广播投票rpc。会有三种结果：赢得多数选票成为 Leader； 其他人当选，自己成为 follower；没有人当选，开启下一轮投票。&lt;br&gt;由于raft的机制，可以认为能够成为 Leader 的节点，一定是包含所有日志的节点&lt;br&gt;leader选举的过程是：1、增加term号；2、给自己投票；3、重置选举超时计时器；4、发送请求投票的RPC给其它节点&lt;/p&gt;
&lt;p&gt;Leader 被选举出来以后，就开始接收客户端的消息。Leader 会将这一条消息作为日志记录下来，并将其通过心跳包同步给集群中的 follower，当大部分节点都同步这条日志以后，Leader 将这个请求应用到自身的状态机并回复客户端。follower 如果发生宕机或者丢包，Leader 会不断尝试直到所有节点都同步了这条日志。&lt;br&gt;日志由有序编号（log index）的日志条目组成。每个日志条目包含它被创建时的任期号（term）和用于状态机执行的命令。&lt;/p&gt;
&lt;p&gt;日志复制的过程有两条保证：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;如果不同节点的两条日志有相同的索引和任期，那么他们存储的命令是一致的（由于主从同步的特性，Leader 节点上的日志和命令落库后就不会更改）&lt;/li&gt;
&lt;li&gt;如果不同节点的两条日志有相同的索引和任期，那么他们之前存储的日志也是一致的（由于日志的一致性检查，当 follower 收到来自 Leader 的心跳包以后，会与本地的日志索引和任期做匹配，如果有不一致，那么会拒绝掉这个心跳包）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;日志复制的异常情况包括：&lt;br&gt;Leader 宕机或者崩溃，旧 Leader 没有复制完所有的日志。可能多，可能少，可能不一致&lt;/p&gt;
&lt;p&gt;日志复制的过程，需要通过与 Leader 保证强一致性来保证安全复制。当日志产生不一致时，Leader 会从后往前尝试同步日志心跳包给其他节点，直到找到一个双方都符合的日志，然后 Leader 会把从这条日志以后的所有内容同步给该节点，将不一致的部分覆盖掉，直到与 Leader 保持完全一致&lt;br&gt;&lt;strong&gt;当 leader 和 follower 日志冲突的时候&lt;/strong&gt;，leader 将&lt;strong&gt;校验 follower 最后一条日志是否和 leader 匹配&lt;/strong&gt;，如果不匹配，&lt;strong&gt;将递减查询，直到匹配，匹配后，删除冲突的日志&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;那么像之前提到 Leader 中的日志可能也不是最新的，会不会同步出去的日志本身就是异常的呢？&lt;br&gt;这个就是 raft 通过两条限制来保证了日志复制的安全性：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;只有log索引和任期是最新的节点才有可能成为 Leader，这个在选举投票期间是可以判断的，非最新的就不给他投票&lt;/li&gt;
&lt;li&gt;Leader 只能推进日志的索引进行提交，以前任期的要在检查一致性的过程中同步过去。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;那么在实际使用过程中，为了保证日志不会无限增长，每隔一段时间，每个节点独立的进行快照，将某个时间点以前的日志落库后丢弃。&lt;br&gt;当 Leader 在同步日志的过程中发现某个节点的日志特别老，那么这时候，Leader 会发送快照rpc来将日志打包复制。&lt;br&gt;当然实际使用中，需要控制间隔的时间，和快照的频率（防止发生 io 阻塞），一般达到固定大小发生一次。&lt;br&gt;同时可以使用 copy-on-write 技术来保证正常的日志同步&lt;/p&gt;
&lt;p&gt;脑裂问题是说一次性在集群中增加了太多的节点，比如超过了原来节点数量的一半，那么就有可能产生双主的现象，即一个集群中有两个 Leader，彼此成员之间没有交集。解决办法是一次变更一个节点，少量多次的来完成。&lt;br&gt;另外还有一个情况是，如果发生了网络分区故障或者异常，导致老 Leader 失联了，剩下的节点会重新选举出一个新 Leader，并与客户端继续交流。当老 Leader 恢复连接以后，他上面的 commit 都会被视作失效，本身会转化为 follower 接收从新 Leader 来的日志。&lt;/p&gt;
&lt;p&gt;另外一种还有一个 &lt;strong&gt;Prevote&lt;/strong&gt; 机制&lt;br&gt;当有一个 follower 与集群隔离后，他会自己进入候选阶段，并由于无法获得投票成为 Leader 而一直刷新任期，导致该节点任期非常大。当该节点重进集群以后，会由于任期导致选举混乱，因此 raft 采用 prevote</summary>
        
      
    
    
    
    <category term="面试" scheme="https://bishoptylaor.github.io/categories/interview/"/>
    
    
  </entry>
  
  <entry>
    <title>simulation02</title>
    <link href="https://bishoptylaor.github.io/interview/simulation/simulation02/"/>
    <id>https://bishoptylaor.github.io/interview/simulation/simulation02/</id>
    <published>2024-04-28T10:51:47.000Z</published>
    <updated>2024-06-25T01:44:35.655Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;深维：&lt;br&gt;一面：&lt;/p&gt;
&lt;h4 id=&quot;1-用过哪些分布式锁-redis-key用什么类型-用string有什么坏处-？没抢到的都在干等着，浪费cpu？如何规避。-etcd如何分布式锁&quot;&gt;&lt;a href=&quot;#1-用过哪些分布式锁-redis-key用什么类型-用string有什么坏处-？没抢到的都在干等着，浪费cpu？如何规避。-etcd如何分布式锁&quot; class=&quot;headerlink&quot; title=&quot;1.用过哪些分布式锁 redis key用什么类型 用string有什么坏处 ？没抢到的都在干等着，浪费cpu？如何规避。 etcd如何分布式锁&quot;&gt;&lt;/a&gt;1.用过哪些分布式锁 redis key用什么类型 用string有什么坏处 ？没抢到的都在干等着，浪费cpu？如何规避。 etcd如何分布式锁&lt;/h4&gt;&lt;p&gt;redis 锁 可能存在的问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;业务超时，导致锁失效，造成多实例持有锁：延长过期时间（不推荐）；类似 java 的看门狗机制，另外启用一个协程对锁续约。&lt;/li&gt;
&lt;li&gt;redis 主从切换时可能造成多实例持有锁，这个是用的 redlock 来解决的，不过具体的方案我就没有看过了&lt;br&gt;用过redis锁， setnx属于原子操作，上锁失败一般认为是锁已经存在了。一般使用string类型作为key，string类型有一个缺点是会占用比较大的空间，&lt;br&gt;可以根据业务具体情况使用 hset ，但是需要保证单个集合中的 kv 数量，如果超过某个界限，redis 就不会用 ziplist 来存储这个集合了&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;2-数据库-隔离级别-没有解决什么问题-幻读是什么&quot;&gt;&lt;a href=&quot;#2-数据库-隔离级别-没有解决什么问题-幻读是什么&quot; class=&quot;headerlink&quot; title=&quot;2.数据库 隔离级别 没有解决什么问题 幻读是什么&quot;&gt;&lt;/a&gt;2.数据库 隔离级别 没有解决什么问题 幻读是什么&lt;/h4&gt;&lt;p&gt;一共有五种：&lt;br&gt;不使用事务&lt;br&gt;read uncommitted 允许脏读&lt;br&gt;read committed 防止脏读 最常用&lt;br&gt;repeatable read 防止脏读，不可重复读 mysql 默认&lt;br&gt;serilized 串行事务，防止幻读，脏读，不可重复读&lt;br&gt;级别越高，安全性越好，并发性能约低&lt;/p&gt;
&lt;p&gt;幻读就是在一个事务过程中用相同条件查询时，获取的结果不一致&lt;br&gt;事务A获取的结果集，事务B对其中的数据进行了修改并提交，事务A在重新执行查询时，可能会发现原本不存在的数据行（幻影），或者原本存在的数据行消失了&lt;/p&gt;
&lt;h4 id=&quot;5-slice和数组的区别-各自的好处-地址引用和值引用的好处&quot;&gt;&lt;a href=&quot;#5-slice和数组的区别-各自的好处-地址引用和值引用的好处&quot; class=&quot;headerlink&quot; title=&quot;5.slice和数组的区别 各自的好处 地址引用和值引用的好处&quot;&gt;&lt;/a&gt;5.slice和数组的区别 各自的好处 地址引用和值引用的好处&lt;/h4&gt;&lt;p&gt;区别仅在于数据在声明时定长，切片可拓展长度&lt;br&gt;值引用是对原数据进行了一份拷贝后传入函数，一般用于函数改值不影响原数据的场景；地址引用是对原数据地址指针的引用，一般函数中对于这个引用的改动会反映到原数据上&lt;/p&gt;
&lt;h4 id=&quot;6-mysql的索引如何实现的，二级索引如何实现的&quot;&gt;&lt;a href=&quot;#6-mysql的索引如何实现的，二级索引如何实现的&quot; class=&quot;headerlink&quot; title=&quot;6.mysql的索引如何实现的，二级索引如何实现的&quot;&gt;&lt;/a&gt;6.mysql的索引如何实现的，二级索引如何实现的&lt;/h4&gt;&lt;p&gt;由于聚集索引是利用表的主键构建的，所以每张表只能拥有一个聚集索引。&lt;/p&gt;
&lt;p&gt;聚集索引的叶子节点就是数据页。换句话说，数据页上存放的是完整的每行记录。因此聚集索引的一个优点就是：通过过聚集索引能获取完整的整行数据。另一个优点是：对于主键的排序查找和范围查找速度非常快。&lt;br&gt;使用B+树作为索引结构，其中聚集索引（Primary Index）的叶子节点包含行数据，而非聚集索引（Secondary Index）的叶子节点包含主键值。&lt;br&gt;二级索引（也称为辅助索引）实现方式与主索引类似，只是它不是主键。在InnoDB中，二级索引的叶子节点包含指向主键的指针，这个指针用于回表查询获取完整的数据行。&lt;/p&gt;
&lt;h4 id=&quot;7-map的底层如何实现的-什么类型不能用做map的key&quot;&gt;&lt;a href=&quot;#7-map的底层如何实现的-什么类型不能用做map的key&quot; class=&quot;headerlink&quot; title=&quot;7.map的底层如何实现的 什么类型不能用做map的key&quot;&gt;&lt;/a&gt;7.map的底层如何实现的 什么类型不能用做map的key&lt;/h4&gt;&lt;h4 id=&quot;9-如何实现LRU&quot;&gt;&lt;a href=&quot;#9-如何实现LRU&quot; class=&quot;headerlink&quot; title=&quot;9.如何实现LRU&quot;&gt;&lt;/a&gt;9.如何实现LRU&lt;/h4&gt;&lt;p&gt;双向链表 + 哈希表&lt;br&gt;双向链表存储节点，哈希表存储节点值到节点地址的映射&lt;/p&gt;
&lt;h4 id=&quot;10-索引（a-b-c-a-x3D-b-x3D-c-x3D-c-x3D-b-x3D-a-x3D-a-x3D-b-gt-c-x3D-命中索引的哪一段&quot;&gt;&lt;a href=&quot;#10-索引（a-b-c-a-x3D-b-x3D-c-x3D-c-x3D-b-x3D-a-x3D-a-x3D-b-gt-c-x3D-命中索引的哪一段&quot; class=&quot;headerlink&quot; title=&quot;10.索引（a,b,c) a&amp;#x3D; b&amp;#x3D; c&amp;#x3D;, c&amp;#x3D; b&amp;#x3D; a&amp;#x3D;, a&amp;#x3D; b&amp;gt; c&amp;#x3D;命中索引的哪一段&quot;&gt;&lt;/a&gt;10.索引（a,b,c) a&amp;#x3D; b&amp;#x3D; c&amp;#x3D;, c&amp;#x3D; b&amp;#x3D; a&amp;#x3D;, a&amp;#x3D; b&amp;gt; c&amp;#x3D;命中索引的哪一段&lt;/h4&gt;&lt;h4 id=&quot;11-数据库间隙锁是什么&quot;&gt;&lt;a href=&quot;#11-数据库间隙锁是什么&quot; class=&quot;headerlink&quot; title=&quot;11.数据库间隙锁是什么&quot;&gt;&lt;/a&gt;11.数据库间隙锁是什么&lt;/h4&gt;&lt;p&gt;MySQL InnoDB支持三种行锁定方式：&lt;/p&gt;
&lt;p&gt;行锁（Record Lock）：锁直接加在索引记录上面。&lt;br&gt;间隙锁（Gap Lock）：锁加在不存在的空闲空间，可以是两个索引记录之间，也可能是第一个索引记录之前或最后一个索引之后的空间。&lt;br&gt;Next-Key Lock：行锁与间隙锁组合起来用就叫做Next-Key Lock。&lt;/p&gt;
&lt;p&gt;在一般范围区间查询数据时，会对命中的行加行锁，但是对于条件范围内但是还不存在的行也会加间隙锁。如果上一次区间查询没有执行完毕，那么针对该表区间内的insert操作会因为间隙锁而阻塞，直到查询执行完毕才会继续执行&lt;br&gt;可以解决幻读问题&lt;/p&gt;
&lt;p&gt;可以防止数据误删改&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;时间&lt;/th&gt;
&lt;th&gt;事务A&lt;/th&gt;
&lt;th&gt;事务B&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;T0&lt;/td&gt;
&lt;td&gt;BEGIN;&lt;/td&gt;
&lt;td&gt;BEGIN;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;T1&lt;/td&gt;
&lt;td&gt;delete from t_student where id &amp;lt; 4;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;T2&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;insert into t_student VALUES(2,‘戏子111’,1,“杭州”);&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;T3&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;commit;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;T4&lt;/td&gt;
&lt;td&gt;commit;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;会对插入性能有一定影响&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h4 id=&quot;12-分布式事务了解过哪些-如何实现&quot;&gt;&lt;a href=&quot;#12-分布式事务了解过哪些-如何实现&quot; class=&quot;headerlink&quot; title=&quot;12.分布式事务了解过哪些 如何实现&quot;&gt;&lt;/a&gt;12.分布式事务了解过哪些 如何实现&lt;/h4&gt;&lt;h4 id=&quot;13-电商系统如何防止超买超卖&quot;&gt;&lt;a href=&quot;#13-电商系统如何防止超买超卖&quot; class=&quot;headerlink&quot; title=&quot;13.电商系统如何防止超买超卖&quot;&gt;&lt;/a&gt;13.电商系统如何防止超买超卖&lt;/h4&gt;&lt;p&gt;一般来说，超买超卖发生在高并发的情况下。那么针对高并发的情况，可以通过加并发锁控制并发；采用队列方式改为顺序执行；利用数据库的原子语句（不推荐）&lt;br&gt;一般减库存区分 下单、付款、预扣（例如下单后保留10分钟）这几个节点&lt;/p&gt;
&lt;h4 id=&quot;14-悲观锁和乐观锁分别适合什么样的场景&quot;&gt;&lt;a href=&quot;#14-悲观锁和乐观锁分别适合什么样的场景&quot; class=&quot;headerlink&quot; title=&quot;14.悲观锁和乐观锁分别适合什么样的场景&quot;&gt;&lt;/a&gt;14.悲观锁和乐观锁分别适合什么样的场景&lt;/h4&gt;&lt;p&gt;悲观锁：担心数据被他人修改，因此每次修改都期望加锁，适合写大于读的情况。主要利用数据库中的读锁，行锁，写锁&lt;br&gt;乐观锁因为不担心数据修改问题，更多适合读大于写的场景，使用版本号或者时间戳（updatetime）&lt;/p&gt;
&lt;h4 id=&quot;15-负载均衡-etcd如何做-NGINX如何做-k8s如何做&quot;&gt;&lt;a href=&quot;#15-负载均衡-etcd如何做-NGINX如何做-k8s如何做&quot; class=&quot;headerlink&quot; title=&quot;15.负载均衡 etcd如何做 NGINX如何做 k8s如何做&quot;&gt;&lt;/a&gt;15.负载均衡 etcd如何做 NGINX如何做 k8s如何做&lt;/h4&gt;&lt;p&gt;轮询和加权轮询；权重可以根据节点的状态来动态调整。要注意权重的上下限&lt;br&gt;一致性哈希： 哈希环，服务端节点在环上，距离哈希结果最近的下一个节点&lt;br&gt;最少连接数&lt;br&gt;最快响应等&lt;/p&gt;
&lt;h4 id=&quot;16-普罗米修斯&quot;&gt;&lt;a href=&quot;#16-普罗米修斯&quot; class=&quot;headerlink&quot; title=&quot;16.普罗米修斯&quot;&gt;&lt;/a&gt;16.普罗米修斯&lt;/h4&gt;&lt;h4 id=&quot;17-traceid系统怎么做的-如何从前端传到后端各个服务&quot;&gt;&lt;a href=&quot;#17-traceid系统怎么做的-如何从前端传到后端各个服务&quot; class=&quot;headerlink&quot; title=&quot;17.traceid系统怎么做的 如何从前端传到后端各个服务&quot;&gt;&lt;/a&gt;17.traceid系统怎么做的 如何从前端传到后端各个服务&lt;/h4&gt;&lt;p&gt;伴鱼使用的是jager，最初的采集方式是每隔一段时间采集一次。主要用来排查异常，解决业务问题，但是有间隔的采样命中相关异常的概率很小，经常是遇到了问题但是采集不到。后期结合社区内的一些组件，更新了采集方式，&lt;/p&gt;
&lt;p&gt;二面：&lt;br&gt;1.挑一个项目能代表你的架构设计或者解决问题的能力（需要偏技术而不是业务）&lt;/p&gt;
&lt;p&gt;2.如何做服务治理&lt;/p&gt;
&lt;p&gt;3.etcd是ap系统还是cp系统&lt;br&gt;&amp;#x3D;&amp;#x3D;&lt;strong&gt;etcd是CP实现&lt;/strong&gt;&amp;#x3D;&amp;#x3D;,它保证一致性与分区容错性,一定程度上牺牲了可用性。&lt;/p&gt;
&lt;p&gt;4.etcd如何做负载均衡&lt;/p&gt;
&lt;p&gt;5.K8S+docker A服务调用B服务是怎么知道B服务的地址的 &lt;/p&gt;
&lt;p&gt;6.降级限流熔断怎么做的 熔断的原理是什么&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;降级（Degradation）&lt;br&gt;概念：降级是指在系统遇到异常或高负载等情况下，暂时关闭或者切换到一些功能简化的模式，以保证核心流程的可用性和稳定性。&lt;br&gt;作用：通过舍弃一些非核心或不重要的功能，保护核心功能的正常运行。&lt;br&gt;示例：在高负载情况下，关闭一些消耗较大的查询功能，只提供基本的读写操作。&lt;/li&gt;
&lt;li&gt;熔断（Circuit Breaker）&lt;br&gt;概念：熔断是指在服务调用过程中，当某个服务出现故障或不可用时，暂时停止调用该服务，直到服务恢复正常。&lt;br&gt;作用：通过熔断机制，保护系统免受故障服务的影响，避免雪崩效应。&lt;br&gt;示例：监控服务调用的失败率或错误率，当达到一定阈值时，打开熔断器，停止对该服务的调用。一段时间后，再进行尝试，如果调用成功，则关闭熔断器，继续正常调用。&lt;/li&gt;
&lt;li&gt;限流（Rate Limiting）&lt;br&gt;概念：限流是指在系统的请求流量过大时，对请求进行控制和限制，使得系统在可接受的范围内进行处理，避免系统超出处理能力而崩溃。&lt;br&gt;作用：通过限制请求的数量或速度，保护系统免受过载的影响。&lt;br&gt;示例：设置每秒最大请求数或最大并发数，当请求数或并发数达到阈值时，拒绝额外的请求或者将其放入等待队列，直到系统能够处理。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;7.post报文由什么组成&lt;/p&gt;
&lt;p&gt;8.tcp如何定位双方 三次握手&lt;/p&gt;
&lt;p&gt;9.如果有M个东西，每8个为一组，每两组之间有两个重叠，会分成多少组&lt;/p&gt;
&lt;p&gt;10.人才管理&lt;/p&gt;
&lt;p&gt;11.逃逸分析&lt;/p&gt;
&lt;p&gt;12.设计模式&lt;/p&gt;
&lt;h4 id=&quot;grpc-和-http-的区别&quot;&gt;&lt;a href=&quot;#grpc-和-http-的区别&quot; class=&quot;headerlink&quot; title=&quot;grpc 和 http 的区别&quot;&gt;&lt;/a&gt;grpc 和 http 的区别&lt;/h4&gt;&lt;p&gt;grpc的话是使用 http&amp;#x2F;2 协议进行通信，传输内容为二进制内容，因此grpc的关键算法是 payload 的序列化和反序列化，一般使用 protocol buffer 序列化库。服务之间使用 rpc 调用&lt;/p&gt;
&lt;h5 id=&quot;数据序列化：&quot;&gt;&lt;a href=&quot;#数据序列化：&quot; class=&quot;headerlink&quot; title=&quot;数据序列化：&quot;&gt;&lt;/a&gt;数据序列化：&lt;/h5&gt;&lt;p&gt;gRPC使用Protocol Buffers对数据进行序列化和反序列化，实现跨语言、跨平台的数据交换。Protocol Buffers的序列化和反序列化过程可以通过以下公式表示：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;序列化(M)&amp;#x3D;Encode(M)&lt;/li&gt;
&lt;li&gt;反序列化(M)&amp;#x3D;Decode(M)&lt;br&gt;其中，$M$ 是数据结构，$Encode$ 和 $Decode$ 分别表示序列化和反序列化操作。&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&quot;RPC调用：&quot;&gt;&lt;a href=&quot;#RPC调用：&quot; class=&quot;headerlink&quot; title=&quot;RPC调用：&quot;&gt;&lt;/a&gt;RPC调用：&lt;/h5&gt;&lt;p&gt;gRPC的RPC调用过程可以分为以下步骤：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;客户端通过Protocol Buffers序列化请求数据，并使用HTTP&amp;#x2F;2发送请求。&lt;/li&gt;
&lt;li&gt;服务器接收请求，使用Protocol Buffers反序列化请求数据。&lt;/li&gt;
&lt;li&gt;服务器执行RPC方法，并将结果序列化为Protocol Buffers格式。&lt;/li&gt;
&lt;li&gt;服务器使用HTTP&amp;#x2F;2发送响应给客户端。&lt;/li&gt;
&lt;li&gt;客户端使用Protocol Buffers反序列化响应数据，并处理结果。&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;通信方式&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;RPC:远程过程调用,是一种进程间通信方式。双方建立链接后,一个进程可以直接调用另一个进程的函数。&lt;/li&gt;
&lt;li&gt;HTTP:超文本传输协议,是一种客户端和服务器之间的请求-响应模式。客户端发送请求,服务器返回响应,两者连接后立即断开。&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;传输协议&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;RPC:可以使用TCP或UDP作为传输协议。&lt;/li&gt;
&lt;li&gt;HTTP:使用TCP作为传输协议。&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;数据格式&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;RPC:通常使用自定义的数据格式,比如XML、JSON等。&lt;/li&gt;
&lt;li&gt;HTTP:使用标准的MIME类型,如HTML、XML、JSON、图片等多种格式。&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&quot;4&quot;&gt;
&lt;li&gt;连接方式&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;RPC:双方在通信期间会持续连接。&lt;/li&gt;
&lt;li&gt;HTTP:采用无连接的传输协议,每次连接后立即断开,下次通信需要重新建立连接。&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&quot;5&quot;&gt;
&lt;li&gt;应用场景&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;RPC:适用于内部系统集成,提供服务的调用和响应。&lt;/li&gt;
&lt;li&gt;HTTP:适用于Web应用,网页访问和文件传输。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;总结一下&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;RPC是一种进程内通信机制,HTTP是一种网络应用协议。&lt;/li&gt;
&lt;li&gt;RPC使用TCP或UDP,HTTP只使用TCP。 &lt;/li&gt;
&lt;li&gt;RPC使用自定义的数据格式,HTTP使用标准MIME类型。&lt;/li&gt;
&lt;li&gt;RPC是持续连接,HTTP是短连接。&lt;/li&gt;
&lt;li&gt;RPC用于内部集成,HTTP用于Web应用。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;伊对&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;项目，活动营销平台，感觉没有什么技术难点。。。&lt;/li&gt;
&lt;li&gt;slice 底层实现是什么，源代码里面有哪些结构，是否是线程安全的&lt;/li&gt;
&lt;li&gt;sync.map 怎么实现的？为什么他是线程安全的，做了哪些处理&lt;/li&gt;
&lt;li&gt;redis zset，是什么数据结构，redis怎么存的&lt;/li&gt;
&lt;li&gt;redis 大key问题？&lt;/li&gt;
&lt;li&gt;mysql 慢查询怎么解决？除了索引（创建合适的索引和修改语句）+数据量 还有哪些方法？&lt;/li&gt;
&lt;li&gt;go 内存泄漏？ 哪些情况会产生内存泄漏&lt;ol&gt;
&lt;li&gt;内存泄漏可能是因为长期运行的后台服务，或者是因为对象没有被适当地清理。&lt;/li&gt;
&lt;li&gt;比如写入超过channel缓冲区间的 goroutine，但是没有人消费，后续写入全部阻塞&lt;/li&gt;
&lt;li&gt;比如读取channel数据时，由于写入端已经执行完毕，造成饥饿阻塞&lt;/li&gt;
&lt;li&gt;多个协程由于通信问题造成死锁&lt;/li&gt;
&lt;li&gt;某些链接句柄采用了无限循环的方式来保证链接成功&lt;br&gt; 解决方法：&lt;/li&gt;
&lt;li&gt;检查代码中是否有全局变量或长生命周期对象持有小对象的引用，导致小对象不能被垃圾回收。  &lt;/li&gt;
&lt;li&gt;确保使用了智能指针（如&lt;code&gt;sync.Pool&lt;/code&gt;）来管理共享资源的生命周期。&lt;/li&gt;
&lt;li&gt;使用工具如&lt;code&gt;go tool pprof&lt;/code&gt;分析内存使用情况，找出内存泄漏的位置。&lt;/li&gt;
&lt;li&gt;定期重启服务以清理内存中的无用数据。&lt;/li&gt;
&lt;li&gt;如果使用了第三方库，确保它们在使用后释放所有资源。&lt;/li&gt;
&lt;li&gt;在代码中使用&lt;code&gt;defer&lt;/code&gt;语句释放资源，如文件句柄、数据库连接等。&lt;/li&gt;
&lt;li&gt;如果可能，使用上下文（Context）管理和取消长时间运行的操作，以便在操作完成前取消，释放资源。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;题：283 移动0 改为 移动target；移动至末尾改为移动至前面&lt;/p&gt;
&lt;p&gt;给定一个字符串str，返回字符串中字母顺序最大的而且同时在字符串中出现大写和小写的字母。 如果不存在这样的字母，返回‘~‘。&lt;br&gt;请返回大写字母&lt;br&gt;|str|&amp;lt;&amp;#x3D;1000&lt;br&gt;‘aAbBcD’ 返回 B&lt;/p&gt;
&lt;p&gt;leetcode 931&lt;/p&gt;
&lt;p&gt;需要自己写输入输出&lt;/p&gt;
&lt;h3 id=&quot;昆仑万维&quot;&gt;&lt;a href=&quot;#昆仑万维&quot; class=&quot;headerlink&quot; title=&quot;昆仑万维&quot;&gt;&lt;/a&gt;昆仑万维&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;gc流程？gc触发时机？&lt;/li&gt;
&lt;li&gt;channel底层实现？&lt;/li&gt;
&lt;li&gt;mutex底层实现？ 自旋？&lt;/li&gt;
&lt;li&gt;mysql 多主多从？&lt;/li&gt;
&lt;li&gt;raft协议，怎么同步日志？脑裂？怎么解决？&lt;/li&gt;
&lt;li&gt;Kafka 为什么不支持读写分离？&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;leet 71&lt;br&gt;leet 三数之和&lt;/p&gt;
&lt;p&gt;Go channel mutex map slice 源码解析 check&lt;br&gt;Go gc gmp check&lt;br&gt;mysql B+树&lt;br&gt;redis raft&lt;br&gt;kafka&lt;br&gt;elasticsearch&lt;br&gt;etcd&lt;br&gt;grpc&lt;br&gt;zookeeper&lt;/p&gt;
&lt;p&gt;微服务拆分。服务治理（服务发现，管理配置？流量控制，日志监控？容错容灾？）&lt;br&gt;网络协议：tcp&amp;#x2F;ip，http，&lt;br&gt;高并发，高可用，数据一致性&lt;/p&gt;
&lt;p&gt;dau 1-2w 上课人数，绘本 20w+&lt;br&gt;广告位：十几个位置 乘 dau 差不多 百万级别 qps；活动高峰期总参与差不多百万，日均大概能有10-20w，任务接口大概10-20个，综合起来差不多大几百万qps&lt;br&gt;相关系统 差不多 4核8g，4实例&lt;/p&gt;
&lt;p&gt;区块链&lt;br&gt;1.接口加密怎么做&lt;br&gt;2.https是安全的么？&lt;br&gt;3.map为什么是线程不安全的，添加kv的流程是怎么样的？&lt;br&gt;4.channel区满，剩下阻塞状态的 routine 是怎么调度的？&lt;br&gt;5.redis 大key&lt;br&gt;6.go内存对齐&lt;br&gt;7.mysql B+树&lt;br&gt;8.雪崩，穿透（互斥锁 + 空缓存；布隆，但是怎么给所有接口加？）是什么？怎么解决？&lt;br&gt;9.kafka为什么读取比较快？&lt;br&gt;10.10个G的手机号，内存1G，怎么排序？&lt;/p&gt;
&lt;p&gt;newstart 做企业erp的，说是tob但是有点像外包了&lt;br&gt;1.go for 和 for range 有什么区别？哪个好？&lt;br&gt;2.go context 过期、复制&lt;br&gt;3.go slice底层有哪些结构？ 扩容怎么扩的&lt;br&gt;4.做工资报表，有一批人员，有一批第三方考勤数据，有一批历史工资数据。你会怎么设计数据库？&lt;/p&gt;
&lt;p&gt;区块链&lt;br&gt;接口怎么加密？可以用类似 sign ，对接口参数前后端同时加密对比&lt;br&gt;https 安全么？抓包？&lt;br&gt;k8s 崩溃了 有什么恢复手段？自动重启靠什么？&lt;br&gt;map 为什么线程不安全？ 扩容不是原子性&lt;br&gt;channel 10缓冲区，100 协程，写满了以后，阻塞的协程会被调度到哪里？归谁管？&lt;br&gt;redis 大key 问题。kv 中的 v 大，主因还是在于 redis 中 string 类型是用 sds 结构存储，最大一块内存区是 128k，更大的 value 会造成不连续的磁盘存储，影响取值速度；另一个会影响io，但相对不是主要原因&lt;br&gt;kafka 为什么会快呢？因为他的存储是在一段连续的区域&lt;br&gt;go 内存对齐&lt;br&gt;tidb 用的底层是啥？&lt;br&gt;mysql b+树，叶子节点存在哪里&lt;br&gt;缓存雪崩？&lt;br&gt;击穿怎么解决？&lt;br&gt;10个G的手机号文件，内存1个G，怎么排序？：拆文件，然后可以根据手机号特性，排序第一位第二位，分别放到不同的文件内&lt;/p&gt;
&lt;p&gt;阿里：&lt;br&gt;1.服务拆分 原则 为什么要拆 方法论  颗粒度的粗细 数据一致性 上线之后遇到的问题&lt;br&gt;2.mongo mysql tidb 有什么优劣&lt;br&gt;3.kafka pulsuar 有什么优劣&lt;br&gt;4.数据库迁移遇到过哪些问题 怎么解决的&lt;br&gt;5.幂等 如何设计&lt;br&gt;6.给一个视频评论页面，数据库如何设计 索引 缓存&lt;br&gt;7.二分查找一个小于X的最大数&lt;br&gt;8.ES的原理&lt;/p&gt;
&lt;p&gt;conviva:&lt;br&gt;1.网址敲了之后会发生什么&lt;br&gt;2.为什么用tidb&lt;br&gt;3.数据统计怎么做的&lt;br&gt;4.算法题 有向无环图求经过三个点的路径总数&lt;/p&gt;
&lt;p&gt;旷视：&lt;br&gt;1.写一个结构体的快排&lt;br&gt;2.append的第二个参数是什么&lt;br&gt;3.append了之后会发生什么&lt;br&gt;3.用var 初始化一个slice 容量有多大 占多少字节&lt;br&gt;4.随机写一个leetcode中等难度的题&lt;/p&gt;
&lt;p&gt;作业帮&lt;br&gt;1.讲项目，问了问活动数据&lt;br&gt;2.压力测试怎么做的&lt;br&gt;3.怎么避免高并发的请求到数据库（我讲了缓存）&lt;br&gt;4.数据迁移怎么做的？&lt;br&gt;5.算法题：不重叠的区间&lt;br&gt;6.go interface 能不能比较？&lt;br&gt;7.go 协程为什么快？&lt;/p&gt;
&lt;p&gt;海纳AI&lt;br&gt;1.打开文件 应该是打开了才关，没打开不用关&lt;br&gt;2.for range 是复制出来的&lt;br&gt;3.协程传参&lt;br&gt;4.你写代码的层级架构是什么样&lt;br&gt;5.update where 如果没有索引会发生什么 跟隔离级别有关系吗&lt;br&gt;6.如何保证数据库和缓存的一致性：&lt;br&gt;    读缓存失败读sql的时候同时更新缓存&lt;br&gt;    对于更新频繁且一致性要求高的场景：更新时先更新缓存，再同步更新sql&lt;br&gt;    更新频繁但是一致性要求低：优先更新缓存，异步更新sql&lt;br&gt;    事务方式双写&lt;br&gt;    使用乐观锁 + 版本控制&lt;br&gt;7.缓存雪崩的解决办法&lt;br&gt;8.限流是怎么做的 令牌桶算法 有什么特点&lt;br&gt;    控制请求速率&lt;br&gt;    定时生成令牌，请求需要拿取令牌来执行&lt;br&gt;    漏桶算法：未满入桶，定速漏出来执行&lt;br&gt;9.假设有一场几十万人的在线考试，如何做到数据持久化数据一致性和高可用&lt;br&gt;10.什么是k8s的hpa&lt;br&gt;11.这种场景下redis和数据库的一致性&lt;br&gt;12.假如有一个表有几百个字段 这时候怎么办&lt;/p&gt;
&lt;p&gt;进程，线程，协程的区别&lt;br&gt;进程间怎么通信&lt;br&gt;http，socket，rpc 概念和区别？优缺点&lt;br&gt;微服务怎么分的&lt;br&gt;raft&lt;/p&gt;
&lt;p&gt;n个数，任取 0-k 个求和，求有多少种可能的结果&lt;/p&gt;
&lt;p&gt;与爱为舞&lt;/p&gt;
&lt;p&gt;项目&lt;br&gt;微服务&lt;br&gt;数据库&lt;br&gt;redis&lt;br&gt;es&lt;br&gt;kafka&lt;/p&gt;
&lt;p&gt;缓存怎么做的&lt;br&gt;消息触达平台 - kafka - 延时队列，&lt;br&gt;mysql 数据怎么落到磁盘上的&lt;br&gt;前后端加密 session 鉴权怎么做的&lt;br&gt;服务治理&lt;br&gt;dns 和 ip 怎么弄得？如果是自建站，是什么流程&lt;br&gt;redis 相关结构底层 跳表，压缩表，跳表怎么确定层级&lt;br&gt;由概率问到了项目里面的抽奖&lt;/p&gt;
&lt;p&gt;tcp和udp区别&lt;br&gt;TCP 面向连接（如打电话要先拨号建立连接）提供可靠的服务，UDP 是无连接的，即发送数据之前不需要建立连接，UDP 尽最大努力交付，即不保证可靠交付。&lt;br&gt;UDP 具有较好的实时性，工作效率比 TCP 高，适用于对高速传输和实时性有较高的通信或广播通信。&lt;br&gt;每一条 TCP 连接只能是一对一的，UDP 支持一对一，一对多，多对一和多对多的交互通信。&lt;br&gt;UDP 分组首部开销小，TCP 首部开销 20 字节，UDP 的首部开销小，只有 8 个字节。&lt;br&gt;TCP 面向字节流，实际上是 TCP 把数据看成一连串无结构的字节流，UDP 是面向报文的一次交付一个完整的报文，报文不可分割，报文是 UDP 数据报处理的最小单位。&lt;br&gt;UDP 适合一次性传输较小数据的网络应用，如 DNS，SNMP 等。&lt;/p&gt;
&lt;p&gt;华为二&lt;br&gt;go map 底层结构&lt;br&gt;gc 写屏障&lt;br&gt;gmp&lt;br&gt;看过哪些源码？讲讲 slice&lt;br&gt;go 性能分析工具和方法&lt;br&gt;为什么要加 redis 这一层，为什么他们快？&lt;/p&gt;
&lt;p&gt;什么情况下会存在分布式锁误删的情况&lt;/p&gt;
&lt;p&gt;docker 多实例，服务发现 etcd，负载均衡，hpa（自动伸缩），docker file&lt;br&gt;监控 普罗米修斯、心跳包。限流（令牌桶） 熔断，降级（用的什么中间件）&lt;/p&gt;
&lt;p&gt;服务怎么保证稳定性和可用性：报警，服务等级（报警标准），慢查询，监控&lt;br&gt;微服务设计方式，分区部署，故障隔离&lt;br&gt;注意流量控制和负载均衡&lt;br&gt;实例数量自动伸缩 and 服务降级&lt;br&gt;数据容错和备份&lt;br&gt;定期健康检查、心跳包&lt;br&gt;普罗米修斯监控（CPU，内存，堆栈，磁盘使用，请求数，错误率，慢查询统计，数据库连接数量，数据库响应时间，接口响应时间）&lt;br&gt;日志和钉钉报警，&lt;br&gt;持续集成和持续部署&lt;br&gt;身份验证和授权等&lt;br&gt;性能优化：缓存 and sql&lt;/p&gt;
&lt;p&gt;线上有没有经历过内存泄漏，怎么解决？发现（监控指标，堆数量，）， + 定位 + 解决&lt;/p&gt;
&lt;p&gt;在Go语言的线上应用中，内存泄漏虽然不常见，但确实可能发生，特别是在高并发和长期运行的服务中。以下是一些常见的内存泄漏问题及其解决方法：&lt;/p&gt;
&lt;h3 id=&quot;常见内存泄漏原因&quot;&gt;&lt;a href=&quot;#常见内存泄漏原因&quot; class=&quot;headerlink&quot; title=&quot;常见内存泄漏原因&quot;&gt;&lt;/a&gt;常见内存泄漏原因&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;长生命周期的对象持有短生命周期对象的引用&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;描述&lt;/strong&gt;：全局变量、单例模式等长生命周期对象持有短生命周期对象的引用，导致短生命周期对象无法被垃圾回收（GC）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;解决方法&lt;/strong&gt;：尽量避免使用全局变量，或在使用完毕后及时将引用置为nil。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;未关闭的Goroutine&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;描述&lt;/strong&gt;：未正确关闭的Goroutine会继续占用内存。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;解决方法&lt;/strong&gt;：确保在适当的时机通过通道（channel）或上下文（context）关闭Goroutine。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;未释放的资源&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;描述&lt;/strong&gt;：未正确关闭文件、数据库连接等资源，导致内存占用。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;解决方法&lt;/strong&gt;：使用&lt;code&gt;defer&lt;/code&gt;语句确保资源在使用完毕后被正确关闭。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;缓冲区无限增长&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;描述&lt;/strong&gt;：使用缓冲区（如slice、map）时，未对其增长进行限制，导致内存占用不断增加。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;解决方法&lt;/strong&gt;：对缓冲区大小进行合理限制，并定期清理过期或无用的数据。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;检测内存泄漏&quot;&gt;&lt;a href=&quot;#检测内存泄漏&quot; class=&quot;headerlink&quot; title=&quot;检测内存泄漏&quot;&gt;&lt;/a&gt;检测内存泄漏&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;pprof工具&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Go自带的pprof工具可以用来检测内存使用情况和内存泄漏。&lt;/li&gt;
&lt;li&gt;使用方法：&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&amp;quot;net/http&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    _ &lt;span class=&quot;string&quot;&gt;&amp;quot;net/http/pprof&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        log.Println(http.ListenAndServe(&lt;span class=&quot;string&quot;&gt;&amp;quot;localhost:6060&amp;quot;&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 其他代码&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
运行应用后，可以通过&lt;code&gt;http://localhost:6060/debug/pprof/heap&lt;/code&gt;查看内存使用情况。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;go-torch工具&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用于生成火焰图（flame graph），帮助分析Goroutine和内存分配。&lt;/li&gt;
&lt;li&gt;使用方法：&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;go-torch -u http://localhost:6060 -f torch.svg&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;生成的torch.svg可以用浏览器打开查看内存分配情况。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;解决方法&quot;&gt;&lt;a href=&quot;#解决方法&quot; class=&quot;headerlink&quot; title=&quot;解决方法&quot;&gt;&lt;/a&gt;解决方法&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;定期检查和优化代码&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;定期进行代码审查，确保所有资源都在使用完毕后被正确释放。&lt;/li&gt;
&lt;li&gt;对长生命周期的对象进行检查，确保不会持有不必要的引用。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;使用上下文管理Goroutine&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通过context包管理Goroutine的生命周期，确保在需要时正确关闭Goroutine。&lt;/li&gt;
&lt;li&gt;示例：&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;worker&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(ctx context.Context)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;select&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &amp;lt;-ctx.Done():&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;// 执行任务&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ctx, cancel := context.WithCancel(context.Background())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;go&lt;/span&gt; worker(ctx)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 其他代码&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    cancel()  &lt;span class=&quot;comment&quot;&gt;// 关闭Goroutine&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;限制缓冲区大小&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对slice、map等缓冲区进行合理大小限制，避免无限增长。&lt;/li&gt;
&lt;li&gt;定期清理过期或无用的数据，确保内存使用不会不断增加。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;使用内存分析工具&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;定期使用pprof和go-torch等工具进行内存分析，及时发现和解决内存泄漏问题。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;通过以上方法，可以有效检测和解决Go语言中的内存泄漏问题，确保线上服务的稳定运行。&lt;/p&gt;
&lt;p&gt;k8s &lt;/p&gt;
&lt;p&gt;kafka 线上有没有遇到什么问题？怎么解决的？&lt;br&gt;消息堆积：消费者并发处理，消费者自主转发再消费，优化消费逻辑，增加消费者服务实例和 kafka 分区&lt;br&gt;kafka broker宕机：利用多副本机制，确保宕机时仍有数据可用；定期监控和维护&lt;br&gt;磁盘空间不足：定期清理过期消息；增加存储或者拓展集群；优化消息存储策略&lt;br&gt;数据丢失：确保所有副本确认消息接收；启用消息日志压缩和快照功能，保证数据恢复&lt;/p&gt;
&lt;p&gt;es&lt;/p&gt;
&lt;p&gt;高内聚低耦合，&lt;/p&gt;
&lt;p&gt;update where 不走索引 和隔离级别有关么？&lt;/p&gt;
&lt;p&gt;项目数据？怎么造一下？亮点&lt;br&gt;排行榜，@马哥&lt;br&gt;奖励库存&lt;/p&gt;
&lt;p&gt;go routine有没有遇到什么问题&lt;br&gt;panic 传播&lt;br&gt;内存泄漏&lt;br&gt;过量创建&lt;br&gt;死锁&lt;br&gt;并发读写造成数据竞争&lt;/p&gt;
&lt;p&gt;微服务的层级结构是怎么划分的？架构设计&lt;br&gt;api网关层：接入 http 接口，处理 post get 等请求，请求转发给相应的微服务，处理某些数据整合逻辑&lt;br&gt;    分为内部接口和外部接口，可能会涉及到不同的鉴权和身份，需要互相隔离&lt;br&gt;服务层：实现业务逻辑，提供核心功能&lt;br&gt;数据层：与数据库交互，一般这一层会放到服务层内部&lt;br&gt;基础运维层：&lt;/p&gt;
&lt;p&gt;golang 的缺点？？&lt;br&gt;不支持泛型&lt;br&gt;错误处理需要层层收集和显示处理&lt;br&gt;第三方库待完善&lt;br&gt;gc 的 stw &lt;/p&gt;
&lt;p&gt;mysql 数据怎么 放到磁盘里的&lt;/p&gt;
&lt;p&gt;B+ 多路查找树是怎么构建的？&lt;br&gt;那条数据构建出来的 b+ 树有多高？&lt;br&gt;二级索引和一级索引的区别？&lt;/p&gt;
&lt;p&gt;负载均衡算法?&lt;/p&gt;
&lt;p&gt;ab测试原理&lt;/p&gt;
&lt;p&gt;cpu跑多少并发量&lt;/p&gt;
&lt;p&gt;map 为什么不安全&lt;/p&gt;
&lt;p&gt;kafka 为什么会重复消费，&lt;br&gt;partition 和 消费组的关系？&lt;br&gt;为什么消息要均分到 partition 上&lt;br&gt;mysql 有哪些锁？都是怎么实现的？&lt;br&gt;有哪些索引，外键和主键的区别，联合索引是怎么存的？为什么要弄联合索引这个东西？最左匹配是什么原理？&lt;br&gt;mysql 分库分表大概的数量级？&lt;br&gt;zset 做排行榜是怎么排序的？&lt;/p&gt;
&lt;p&gt;kafka 的同步方式？kafka 写入是否是顺序的？&lt;br&gt;redis 持久化？宕机了怎么恢复数据&lt;/p&gt;
&lt;p&gt;字节&lt;br&gt;一面&lt;br&gt;自我介绍&lt;br&gt;讲一个感觉技术难度比较高的，重点介绍下项目背景和你的角色&lt;br&gt;题的话就是 &lt;a href=&quot;https://leetcode.cn/problems/er-wei-shu-zu-zhong-de-cha-zhao-lcof/description/&quot;&gt;https://leetcode.cn/problems/er-wei-shu-zu-zhong-de-cha-zhao-lcof/description/&lt;/a&gt;&lt;br&gt;问了最左匹配，然后讨论下具体原理&lt;br&gt;redis zset 具体结构，问 zrange 是怎么查出来数据的。讲完结构还问了查询复杂度。&lt;br&gt;主播订阅场景：有订阅周期，怎么设计用户订阅表？订阅失效怎么修改状态？&lt;/p&gt;
&lt;p&gt;二面&lt;br&gt;讲项目的架构设计，需求是什么，怎么分模块设计的&lt;br&gt;会问服务器数量和qps&lt;br&gt;mysql acid 具体怎么保证的，持久性怎么实现的？为什么需要redolog，为什么不直接把数据刷盘&lt;br&gt;系统设计：订单表，日两千万，怎么存？我答分库分表，问怎么分；按照用户查询订单列表怎么查&lt;br&gt;题：leet3&lt;/p&gt;
&lt;p&gt;AI 大模型应用落地 AI口语教练 AI虚拟角色社交 这些东西 然后围绕上面提到的东西思考一下 看一下邮件里那个公司介绍的文档&lt;br&gt;什么是AI agent 什么是RAG 通用的应用落地一般是怎么做的 然后发散性的思考就行了 就是用GPT教法国人学英语 东西不难&lt;br&gt;![[Pasted image 20240623123910.png]]&lt;/p&gt;
&lt;h3 id=&quot;Detailed-Analysis-of-Work-Experience-Continued&quot;&gt;&lt;a href=&quot;#Detailed-Analysis-of-Work-Experience-Continued&quot; class=&quot;headerlink&quot; title=&quot;Detailed Analysis of Work Experience (Continued)&quot;&gt;&lt;/a&gt;Detailed Analysis of Work Experience (Continued)&lt;/h3&gt;&lt;h4 id=&quot;北京读我科技有限公司&quot;&gt;&lt;a href=&quot;#北京读我科技有限公司&quot; class=&quot;headerlink&quot; title=&quot;北京读我科技有限公司&quot;&gt;&lt;/a&gt;北京读我科技有限公司&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;资深服务端开发工程师 (Go)&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;2019.02 - 2023.10&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;重构转介绍节点奖励平台&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;重新梳理了转介绍双方的映射关系，奖励的配置、更新以及发放等多种规则。  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Problem Identified:&lt;/strong&gt; Needs more specific methodology and quantification.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Improved Version:&lt;/strong&gt; 重构了转介绍节点奖励平台，通过重新梳理映射关系和优化奖励配置，实现奖励发放效率提升50%。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;对多表多关联的历史数据进行迁移，并完善了迁移算法实现与验证、风险评估、数据备份、实时双写、线上实时报错与熔断、并发压力测试、数据比对、操作实施方案制定等任务。  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Problem Identified:&lt;/strong&gt; Very detailed, consider breaking into multiple points.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Improved Version:&lt;/strong&gt; &lt;ul&gt;
&lt;li&gt;实施了多表多关联的历史数据迁移，优化了迁移算法并进行了风险评估和数据备份。&lt;/li&gt;
&lt;li&gt;确保数据迁移的准确性和系统稳定性，通过实时双写和并发压力测试等手段提高了迁移效率和安全性。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;一对一增长业务&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;项目负责人，负责一对一业务线增长业务的业务模型设计、接口交互设计以及日常需求的迭代。  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Problem Identified:&lt;/strong&gt; Lacks quantification and more detailed accomplishments.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Improved Version:&lt;/strong&gt; 作为项目负责人，设计并迭代一对一业务线的增长业务模型和接口交互设计，带领团队实现增长率提高20%。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;承接一对一和绘本等多个业务线的节日节点和大型活动：新年，618，教师节，双11等大型活动，高效稳定地完成了预期的促活、转介绍、促课消等目标。  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Problem Identified:&lt;/strong&gt; Needs specific examples of achievements and methodology.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Improved Version:&lt;/strong&gt; 组织并执行了一对一和绘本业务线的新年、618、教师节、双11等节日活动，实现了促活、转介绍和促课消目标，提高用户参与率30%。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;研发消息触达配置平台&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;规范不同触达方式，提升研发效率，支持运营侧个性化触达方案。  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Problem Identified:&lt;/strong&gt; Lacks specific achievements and quantification.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Improved Version:&lt;/strong&gt; 开发了消息触达配置平台，规范不同触达方式，提高研发效率50%，支持个性化触达方案，实现用户触达率提升25%。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;通过 Kafka 进行系统间通信，同时支持了多业务、万级别 TPS 的用户触达。  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Problem Identified:&lt;/strong&gt; Lacks specific methodology and impact.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Improved Version:&lt;/strong&gt; 利用 Kafka 进行系统间通信，支持多业务和万级别 TPS 的用户触达，提高系统通信效率和稳定性。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;搭建海报平台&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;针对用户拉新中重要的海报分享行为搭建，为运营同学高效快速更新海报内容及落地页活动提供支持。  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Problem Identified:&lt;/strong&gt; Needs more quantification and specific achievements.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Improved Version:&lt;/strong&gt; 搭建了海报平台，优化用户拉新分享流程，支持快速更新海报内容和活动页面，提高新用户转化率20%。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;对新老用户扫码行为进行数据监控与识别，提升 leads 激活效率；与营销活动结合，利用识别结果协助优化拉新路径。  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Problem Identified:&lt;/strong&gt; Needs specific impact and achievements.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Improved Version:&lt;/strong&gt; 实施了新老用户扫码行为的数据监控与识别，提高 leads 激活效率30%，优化用户拉新路径。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;搭建活动营销平台&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;抽象总结承接的各种营销活动，将其拆分为：任务，抽奖，奖品发放，数据统计，分享，签到，问卷，团购，基础配置等多个组件。  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Problem Identified:&lt;/strong&gt; Very detailed, consider breaking into multiple points.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Improved Version:&lt;/strong&gt; &lt;ul&gt;
&lt;li&gt;构建了活动营销平台，将活动拆分为多个组件，提高活动配置灵活性和开发效率。&lt;/li&gt;
&lt;li&gt;实现活动上线速度提升50%，支持多项百万级并发活动，提高系统稳定性和性能。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;组件间使用消息队列进行通信，打通了业务节点、用户标签、用户动作、前端配置化体系、数据中心等多个系统、多个业务线的路径。  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Problem Identified:&lt;/strong&gt; Lacks specific achievements and quantification.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Improved Version:&lt;/strong&gt; 使用消息队列进行组件间通信，打通多个系统和业务线路径，提高数据处理效率和系统整合能力。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;搭建广告投放平台&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;抽象和整理了公司各 app 30+ 投放位置的多种展示模式；支持用户标签、访问渠道、业务线、版本等多种筛选模式；支持静默期、投放区间、投放频率等等多种细分功能；结合前端，支持投放数据上报与检测。  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Problem Identified:&lt;/strong&gt; Very detailed, consider breaking into multiple points, lacks specific impact.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Improved Version:&lt;/strong&gt; 搭建了广告投放平台，支持多种展示和筛选模式，提高广告投放灵活性和效率，实现广告点击率提高20%。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;采用内存 - Redis - TiDB 三级缓存结构支持高并发访问。  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Problem Identified:&lt;/strong&gt; Needs more specific impact and achievements.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Improved Version:&lt;/strong&gt; 采用三级缓存结构，支持高并发访问，提高系统响应速度和稳定性。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;平台上线3个月内对接至全部 app 展示位置，运行稳定，最高支持百万级别的用户访问，在提升业务侧配置效率的同时，协助搭建运营模型和升级运营策略。  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Problem Identified:&lt;/strong&gt; Needs specific impact and more detailed accomplishments.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Improved Version:&lt;/strong&gt; 平台上线3个月内完成对接，运行稳定，支持百万级用户访问，提高配置效率和运营策略。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;负责第三方广告商的对接和维护&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;对接小红书、华为、头条、OPPO、百度等多个广告商。  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Problem Identified:&lt;/strong&gt; Needs more specific impact and achievements.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Improved Version:&lt;/strong&gt; 对接小红书、华为、头条、OPPO、百度等广告商，提高广告投放效果，实现广告转化率提升20%。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;针对注册、登录、业务意向、付款等关键节点进行监控和数据上报，生成数据漏斗协助运营优化投放方案。  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Problem Identified:&lt;/strong&gt; Needs more specific methodology and impact.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Improved Version:&lt;/strong&gt; 监控关键节点并生成数据漏斗，协助运营优化广告投放方案，提高投放效果和转化率。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;领导五人团队开发增长业务相关项目&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;把控研发进度，合理分配人员工作，确保项目顺利进行。  &lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Problem Identified:&lt;/strong&gt; Lacks specific achievements and quantification.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Improved Version:&lt;/strong&gt; 领导五人团队开发增长业务项目，合理分配工作，确保项目按时完成，带领团队实现增长目标。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;搭建分销系统&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;管理和维护第三方分销员，管理和维护分销商品，管理和维护分销员与用户的映射关系，并提供海报、链接、分享话术等相关分销工具。  &lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Problem Identified:&lt;/strong&gt; Needs more specific achievements and quantification.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Improved Version:&lt;/strong&gt; 搭建分销系统，管理分销员和商品，提供分销工具，提高分销效率和转化率，实现分销目标。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;负责搭建背诗小程序后台&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;支持后台古诗文导入；支持用户分句分段多种背诵模式。  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Problem Identified:&lt;/strong&gt; Lacks specific achievements and quantification.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Improved Version:&lt;/strong&gt; 开发背诗小程序后台，支持古诗文导入和多种背诵模式，提高用户学习效率和参与度。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;提供好友排位、拉新分享等营销功能。  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Problem Identified:&lt;/strong&gt; Lacks specific achievements and quantification.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Improved Version:&lt;/strong&gt; 提供好友排位和拉新分享功能，提高用户互动和参与度，实现拉新目标。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;一对一 CRM 业务&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;负责 leads 激活的流量管理与提纯，销售路径数据收集与反馈。  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Problem Identified:&lt;/strong&gt; Lacks specific achievements and quantification.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Improved Version:&lt;/strong&gt; 负责 leads 激活的流量管理与提纯，优化销售路径数据收集和反馈，提高销售转化率20%。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;优化销售数据分配规则；在用户拉新、激活、维护、售卖等节点为销售人员提供数据和工具支持。  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Problem Identified:&lt;/strong&gt; Lacks specific achievements and quantification.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Improved Version:&lt;/strong&gt;</summary>
        
      
    
    
    
    <category term="面试" scheme="https://bishoptylaor.github.io/categories/interview/"/>
    
    <category term="实录" scheme="https://bishoptylaor.github.io/categories/interview/simulation/"/>
    
    
  </entry>
  
  <entry>
    <title>ETCD 面试必备</title>
    <link href="https://bishoptylaor.github.io/interview/etcd-interview/"/>
    <id>https://bishoptylaor.github.io/interview/etcd-interview/</id>
    <published>2024-04-28T02:36:46.000Z</published>
    <updated>2024-05-26T08:01:37.794Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;etcd分布式锁的实现流程&quot;&gt;&lt;a href=&quot;#etcd分布式锁的实现流程&quot; class=&quot;headerlink&quot; title=&quot;etcd分布式锁的实现流程&quot;&gt;&lt;/a&gt;etcd分布式锁的实现流程&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;建立连接&lt;br&gt;客户端连接 etcd，以 &amp;#x2F;etcd&amp;#x2F;lock 为前缀创建全局唯一的 key， 假设第一个客户端对应的 key&amp;#x3D;“&amp;#x2F;etcd&amp;#x2F;lock&amp;#x2F;UUID1”，第二个为 key&amp;#x3D;“&amp;#x2F;etcd&amp;#x2F;lock&amp;#x2F;UUID2”； 客户端分别为自己的 key 创建租约 - Lease，租约的长度根据业务耗时确定；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;创建定时任务作为租约的“心跳”&lt;br&gt;当一个客户端持有锁期间，其它客户端只能等待，为了避免等待期间租约失效， 客户端需创建一个定时任务作为“心跳”进行续约。此外，如果持有锁期间客户端崩溃， 心跳停止，key 将因租约到期而被删除，从而锁释放，避免死锁；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;客户端将自己全局唯一的 key 写入 etcd&lt;br&gt;执行 put 操作，将步骤 1 中创建的 key 绑定租约写入 Etcd，根据 Etcd 的 Revision 机制， 假设两个客户端 put 操作返回的 Revision 分别为 1、2，客户端需记录 Revision 用以 接下来判断自己是否获得锁；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;客户端判断是否获得锁&lt;br&gt;客户端以前缀 &amp;#x2F;etcd&amp;#x2F;lock&amp;#x2F; 读取 key-Value 列表，判断自己 key 的 Revision 是否为当前列表中 最小的，如果是则认为获得锁；否则监听列表中前一个 Revision 比自己小的 key</summary>
        
      
    
    
    
    <category term="面试" scheme="https://bishoptylaor.github.io/categories/interview/"/>
    
    
    <category term="必看必会" scheme="https://bishoptylaor.github.io/tags/%E5%BF%85%E7%9C%8B%E5%BF%85%E4%BC%9A/"/>
    
    <category term="面试" scheme="https://bishoptylaor.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="etcd" scheme="https://bishoptylaor.github.io/tags/etcd/"/>
    
  </entry>
  
  <entry>
    <title>Kafka 面试必备</title>
    <link href="https://bishoptylaor.github.io/interview/kafka-interview/"/>
    <id>https://bishoptylaor.github.io/interview/kafka-interview/</id>
    <published>2024-04-28T02:36:20.000Z</published>
    <updated>2024-05-30T17:04:41.966Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h2 id=&quot;消费者消费流程&quot;&gt;&lt;a href=&quot;#消费者消费流程&quot; class=&quot;headerlink&quot; title=&quot;消费者消费流程&quot;&gt;&lt;/a&gt;消费者消费流程&lt;/h2&gt;&lt;p&gt;消费流程：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;从zk获取要消费的partition 的leader的位置 以及 offset位置&lt;/li&gt;
&lt;li&gt;拉数据，这里拉数据是直接从broker的pagecash拉取，零拷贝（应用程序可以直接把磁盘中的数据从内核中，直接传输到socket，不用互相拷贝） ，所以很快。&lt;/li&gt;
&lt;li&gt;如果pagecash数据不全，就会从磁盘中拉取，并发送&lt;/li&gt;
&lt;li&gt;消费完成后，可以手动提交offset，也可以自动提交offset。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;如何避免重复消费？&quot;&gt;&lt;a href=&quot;#如何避免重复消费？&quot; class=&quot;headerlink&quot; title=&quot;如何避免重复消费？&quot;&gt;&lt;/a&gt;如何避免重复消费？&lt;/h2&gt;&lt;h3 id=&quot;分析原因：&quot;&gt;&lt;a href=&quot;#分析原因：&quot; class=&quot;headerlink&quot; title=&quot;分析原因：&quot;&gt;&lt;/a&gt;分析原因：&lt;/h3&gt;&lt;p&gt;1.生产者重复提交 2.rebalence引起重复消费&lt;/p&gt;
&lt;p&gt;超过一定时间（max.poll.interval.ms设置的值，默认5分钟）未进行poll拉取消息，则会导致客户端主动离开队列，而引发Rebalance，提交offset失败。其他消费者会从没有提交的位置消费，从而导致重复消费。&lt;/p&gt;
&lt;h3 id=&quot;解决方案：&quot;&gt;&lt;a href=&quot;#解决方案：&quot; class=&quot;headerlink&quot; title=&quot;解决方案：&quot;&gt;&lt;/a&gt;解决方案：&lt;/h3&gt;&lt;p&gt;1.提高消费速度&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;增加消费者&lt;/li&gt;
&lt;li&gt;多线程消费&lt;/li&gt;
&lt;li&gt;异步消费&lt;/li&gt;
&lt;li&gt;调整消费处理时间&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2.幂等处理&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;消费者设置幂等校验&lt;/li&gt;
&lt;li&gt;开启kafka幂等配置，生产者开启幂等配置，将消息生成md5，然后保存到redis中，处理新消息的时候先校验。这个尽量不要开启，消耗性能。&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&quot;Kafka-线上消息积压怎么解决&quot;&gt;&lt;a href=&quot;#Kafka-线上消息积压怎么解决&quot; class=&quot;headerlink&quot; title=&quot;Kafka 线上消息积压怎么解决&quot;&gt;&lt;/a&gt;Kafka 线上消息积压怎么解决&lt;/h5&gt;&lt;ol&gt;
&lt;li&gt;消费端拿到的消息并发消耗掉&lt;/li&gt;
&lt;li&gt;转发到一个新的队列&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id=&quot;kafka-消息重复消费？怎么解决？&quot;&gt;&lt;a href=&quot;#kafka-消息重复消费？怎么解决？&quot; class=&quot;headerlink&quot; title=&quot;kafka 消息重复消费？怎么解决？&quot;&gt;&lt;/a&gt;kafka 消息重复消费？怎么解决？&lt;/h5&gt;&lt;ol&gt;
&lt;li&gt;如果发送端使用了重试机制，由于网络原因没有收到发送成功的 ACK&lt;/li&gt;
&lt;li&gt;消费者手动提交 offset，拉取一批数据，没有执行完但是服务宕机，这部分会再次拉出来执行&lt;br&gt;解决方法：幂等处理，自动提交&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id=&quot;Kafka-消息丢失？怎么解决？&quot;&gt;&lt;a href=&quot;#Kafka-消息丢失？怎么解决？&quot; class=&quot;headerlink&quot; title=&quot;Kafka 消息丢失？怎么解决？&quot;&gt;&lt;/a&gt;Kafka 消息丢失？怎么解决？&lt;/h5&gt;&lt;p&gt;学习 kafka 呢需要明确几个概念&lt;br&gt;生产者发送消息到 broker 中某一个 topic 的具体分区里，消费者从一个或多个分区中拉取数据进行消费&lt;/p&gt;
&lt;p&gt;这里整理了 Kafka 的一些关键术语：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Producer：生产者，消息产生和发送端。&lt;/li&gt;
&lt;li&gt;Broker：Kafka 实例，多个 broker 组成一个 Kafka 集群，通常一台机器部署一个 Kafka 实例，一个实例挂了不影响其他实例。&lt;/li&gt;
&lt;li&gt;Consumer：消费者，拉取消息进行消费。 一个 topic 可以让若干个消费者进行消费，若干个消费者组成一个 Consumer Group 即消费组，一条消息只能被消费组中一个 Consumer 消费。&lt;/li&gt;
&lt;li&gt;Topic：主题，服务端消息的逻辑存储单元。一个 topic 通常包含若干个 Partition 分区。&lt;/li&gt;
&lt;li&gt;Partition：topic 的分区，分布式存储在各个 broker 中， 实现发布与订阅的负载均衡。若干个分区可以被若干个 Consumer 同时消费，达到消费者高吞吐量。一个分区拥有多个副本（Replica），这是Kafka在可靠性和可用性方面的设计，后面会重点介绍。&lt;/li&gt;
&lt;li&gt;message：消息，或称日志消息，是 Kafka 服务端实际存储的数据，每一条消息都由一个 key、一个 value 以及消息时间戳 timestamp 组成。&lt;/li&gt;
&lt;li&gt;offset：偏移量，分区中的消息位置，由 Kafka 自身维护，Consumer 消费时也要保存一份 offset 以维护消费过的消息位置。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;消费队列呢一般用来实现 同步到异步的转换，削峰，解耦 等目标&lt;/p&gt;
&lt;h5 id=&quot;kafka-设计特性&quot;&gt;&lt;a href=&quot;#kafka-设计特性&quot; class=&quot;headerlink&quot; title=&quot;kafka 设计特性&quot;&gt;&lt;/a&gt;kafka 设计特性&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;高吞吐、低延迟：kakfa 最大的特点就是收发消息非常快，kafka 每秒可以处理几十万条消息，它的最低延迟只有几毫秒。&lt;/li&gt;
&lt;li&gt;高伸缩性： 每个主题(topic) 包含多个分区(partition)，主题中的分区可以分布在不同的主机(broker)中。&lt;/li&gt;
&lt;li&gt;持久性、可靠性： Kafka 能够允许数据的持久化存储，消息被持久化到磁盘，并支持数据备份防止数据丢失，Kafka 底层的数据存储是基于 Zookeeper 存储的，Zookeeper 我们知道它的数据能够持久存储。&lt;/li&gt;
&lt;li&gt;容错性： 允许集群中的节点失败，某个节点宕机，Kafka 集群能够正常工作&lt;/li&gt;
&lt;li&gt;高并发： 支持数千个客户端同时读写&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Kafka-方案及其痛点&quot;&gt;&lt;a href=&quot;#Kafka-方案及其痛点&quot; class=&quot;headerlink&quot; title=&quot;Kafka 方案及其痛点&quot;&gt;&lt;/a&gt;Kafka 方案及其痛点&lt;/h2&gt;&lt;p&gt;之前，我们采用 Apache Kafka 作为消息平台， 为了让业务在高峰期（晚上八点到十点）不受影响，我们根据消息业务量的大小， 分别搭建了不同的集群。对于一些业务场景的需求， 比如需要重置 offset 来消费过去几天的消息，使用 Kafka 需要停掉消费者才可以进行， 这种方式对大量在线业务非常不利，只能采用重写消息或者一些不太灵活的方式来实现， 极大降低了使用体验。&lt;/p&gt;
&lt;p&gt;我们在使用 Kafka 集群过程中，主要遇到以下问题：  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Kafka 没有租户概念，需要手动维护多个集群，不方便运维。&lt;/li&gt;
&lt;li&gt;Kafka 集群扩容后需要做 Reassign Partitions，IO 消耗大。&lt;/li&gt;
&lt;li&gt;Kafka 监控体系不完善，排查问题较为繁琐。&lt;/li&gt;
&lt;li&gt;在线业务消息重置不方便，实现起来较为麻烦，需要停掉消费组。&lt;/li&gt;
&lt;li&gt;Kafka 不支持死信队列和延迟队列。&lt;/li&gt;
&lt;li&gt;Kafka 没有官方维护和支持的 Go 语言客户端。&lt;/li&gt;
&lt;li&gt;在 Kafka 中支持 schema，需要引入额外组件，不方便维护。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;为什么选择-Pulsar&quot;&gt;&lt;a href=&quot;#为什么选择-Pulsar&quot; class=&quot;headerlink&quot; title=&quot;为什么选择 Pulsar&quot;&gt;&lt;/a&gt;为什么选择 Pulsar&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Pulsar 采用云原生的架构，存储和计算分离。&lt;/li&gt;
&lt;li&gt;Pulsar 支持多租户，我们可以按照不同的业务线、业务小组和对应的服务级别来管理消息保存时间、持久化、堆积清除策略等，统一维护一套 Pulsar 集群。&lt;/li&gt;
&lt;li&gt;Pulsar 支持灵活的水平扩容。当存储不够时，直接增加 bookie 进行扩容，不会对用户产生任何影响。&lt;/li&gt;
&lt;li&gt;Pulsar 自带监控体系，broker，bookie 相关指标清晰，方便快速定位问题，给出解决方案。&lt;/li&gt;
&lt;li&gt;Pulsar cursor 方便重置消息，给业务带来很好的体验。&lt;/li&gt;
&lt;li&gt;Pulsar 支持死信队列和延迟队列。&lt;/li&gt;
&lt;li&gt;Pulsar schema 集成在 broker 中，不需要引入单独的组件。Golang client 支持 schema，减少了维护成本。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;1 什么是kafka&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Kafka是分布式发布-订阅消息系统，它最初是由LinkedIn公司开发的，之后成为Apache项目的一部分，Kafka是一个分布式，可划分的，冗余备份的持久性的&lt;a href=&quot;https://cloud.tencent.com/product/cls?from_column=20065&amp;from=20065&quot;&gt;日志服务&lt;/a&gt;，它主要用于处理流式数据。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;2 为什么要使用 kafka，为什么要使用&lt;a href=&quot;https://cloud.tencent.com/product/cmq?from_column=20065&amp;from=20065&quot;&gt;消息队列&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;缓冲和削峰：上游数据时有突发流量，下游可能扛不住，或者下游没有足够多的机器来保证冗余，kafka在中间可以起到一个缓冲的作用，把消息暂存在kafka中，下游服务就可以按照自己的节奏进行慢慢处理。 解耦和扩展性：项目开始的时候，并不能确定具体需求。消息队列可以作为一个接口层，解耦重要的业务流程。只需要遵守约定，针对数据编程即可获取扩展能力。 冗余：可以采用一对多的方式，一个生产者发布消息，可以被多个订阅topic的服务消费到，供多个毫无关联的业务使用。 健壮性：消息队列可以堆积请求，所以消费端业务即使短时间死掉，也不会影响主要业务的正常进行。 异步通信：很多时候，用户不想也不需要立即处理消息。消息队列提供了异步处理机制，允许用户把一个消息放入队列，但并不立即处理它。想向队列中放入多少消息就放多少，然后在需要的时候再去处理它们。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;3.Kafka中的ISR、AR又代表什么？ISR的伸缩又指什么&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;ISR:In-Sync Replicas 副本同步队列 AR:Assigned Replicas 所有副本&lt;br&gt;ISR是由leader维护，follower从leader同步数据有一些延迟（包括延迟时间replica.lag.time.max.ms和延迟条数replica.lag.max.messages两个维度, 当前最新的版本0.10.x中只支持replica.lag.time.max.ms这个维度），任意一个超过阈值都会把follower剔除出ISR, 存入OSR（Outof-Sync Replicas）列表，新加入的follower也会先存放在OSR中。AR&amp;#x3D;ISR+OSR。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;4.kafka中的broker 是干什么的&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;broker 是消息的代理，Producers往Brokers里面的指定Topic中写消息，Consumers从Brokers里面拉取指定Topic的消息，然后进行业务处理，broker在中间起到一个代理保存消息的中转站。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;5.kafka中的 zookeeper 起到什么作用，可以不用zookeeper么&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;zookeeper 是一个分布式的协调组件，早期版本的kafka用zk做meta信息存储，consumer的消费状态，group的管理以及 offset的值。考虑到zk本身的一些因素以及整个架构较大概率存在单点问题，新版本中逐渐弱化了zookeeper的作用。新的consumer使用了kafka内部的group coordination协议，也减少了对zookeeper的依赖， 但是broker依然依赖于ZK，zookeeper 在kafka中还用来选举controller 和 检测broker是否存活等等。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;6.kafka follower如何与leader同步数据&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Kafka的复制机制既不是完全的同步复制，也不是单纯的异步复制。完全同步复制要求All Alive Follower都复制完，这条消息才会被认为commit，这种复制方式极大的影响了吞吐率。而异步复制方式下，Follower异步的从Leader复制数据，数据只要被Leader写入log就被认为已经commit，这种情况下，如果leader挂掉，会丢失数据，kafka使用ISR的方式很好的均衡了确保数据不丢失以及吞吐率。Follower可以批量的从Leader复制数据，而且Leader充分利用磁盘顺序读以及send file(zero copy)机制，这样极大的提高复制性能，内部批量写磁盘，大幅减少了Follower与Leader的消息量差。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;7.什么情况下一个 broker 会从 isr中踢出去&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;leader会维护一个与其基本保持同步的Replica列表，该列表称为ISR(in-sync Replica)，每个Partition都会有一个ISR，而且是由leader动态维护 ，如果一个follower比一个leader落后太多，或者超过一定时间未发起数据复制请求，则leader将其重ISR中移除 。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;8.kafka 为什么那么快&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Cache Filesystem Cache PageCache缓存&lt;/li&gt;
&lt;li&gt;顺序写 由于现代的操作系统提供了预读和写技术，磁盘的顺序写大多数情况下比随机写内存还要快。&lt;/li&gt;
&lt;li&gt;Zero-copy 零拷技术减少拷贝次数&lt;/li&gt;
&lt;li&gt;Batching of Messages 批量量处理。合并小的请求，然后以流的方式进行交互，直顶网络上限。&lt;/li&gt;
&lt;li&gt;Pull 拉模式 使用拉模式进行消息的获取消费，与消费端处理能力相符。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;9.kafka producer如何优化打入速度&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;增加线程&lt;/li&gt;
&lt;li&gt;提高 batch.size&lt;/li&gt;
&lt;li&gt;增加更多 producer 实例&lt;/li&gt;
&lt;li&gt;增加 partition 数&lt;/li&gt;
&lt;li&gt;设置 acks&amp;#x3D;-1 时，如果延迟增大：可以增大 num.replica.fetchers（follower 同步数据的线程数）来调解；&lt;/li&gt;
&lt;li&gt;跨数据中心的传输：增加 socket 缓冲区设置以及 OS tcp 缓冲区设置。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;10.kafka producer 打数据，ack 为 0， 1， -1 的时候代表啥， 设置 -1 的时候，什么情况下，leader 会认为一条消息 commit了&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;1（默认） 数据发送到Kafka后，经过leader成功接收消息的的确认，就算是发送成功了。在这种情况下，如果leader宕机了，则会丢失数据。&lt;/li&gt;
&lt;li&gt;0 生产者将数据发送出去就不管了，不去等待任何返回。这种情况下数据传输效率最高，但是数据可靠性确是最低的。&lt;/li&gt;
&lt;li&gt;-1 producer需要等待ISR中的所有follower都确认接收到数据后才算一次发送完成，可靠性最高。当ISR中所有Replica都向Leader发送ACK时，leader才commit，这时候producer才能认为一个请求中的消息都commit了。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;11.kafka unclean 配置代表啥，会对 spark streaming 消费有什么影响&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;unclean.leader.election.enable 为true的话，意味着非ISR集合的broker 也可以参与选举，这样有可能就会丢数据，spark streaming在消费过程中拿到的 end offset 会突然变小，导致 spark streaming job挂掉。如果unclean.leader.election.enable参数设置为true，就有可能发生数据丢失和数据不一致的情况，Kafka的可靠性就会降低；而如果unclean.leader.election.enable参数设置为false，Kafka的可用性就会降低。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;12.如果leader crash时，ISR为空怎么办&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;kafka在Broker端提供了一个配置参数：unclean.leader.election,这个参数有两个值： true（默认）：允许不同步副本成为leader，由于不同步副本的消息较为滞后，此时成为leader，可能会出现消息不一致的情况。 false：不允许不同步副本成为leader，此时如果发生ISR列表为空，会一直等待旧leader恢复，降低了可用性。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;13.kafka的message格式是什么样的&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;一个Kafka的Message由一个固定长度的header和一个变长的消息体body组成 header部分由一个字节的magic(文件格式)和四个字节的CRC32(用于判断body消息体是否正常)构成。 当magic的值为1的时候，会在magic和crc32之间多一个字节的数据：attributes(保存一些相关属性， 比如是否压缩、压缩格式等等);如果magic的值为0，那么不存在attributes属性 body是由N个字节构成的一个消息体，包含了具体的key&amp;#x2F;value消息&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;14.kafka中consumer group 是什么概念&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;同样是逻辑上的概念，是Kafka实现单播和广播两种消息模型的手段。同一个topic的数据，会广播给不同的group；同一个group中的worker，只有一个worker能拿到这个数据。换句话说，对于同一个topic，每个group都可以拿到同样的所有数据，但是数据进入group后只能被其中的一个worker消费。group内的worker可以使用多线程或多进程来实现，也可以将进程分散在多台机器上，worker的数量通常不超过partition的数量，且二者最好保持整数倍关系，因为Kafka在设计时假定了一个partition只能被一个worker消费（同一group内）。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;15.Kafka中的消息是否会丢失和重复消费？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;要确定Kafka的消息是否丢失或重复，从两个方面分析入手：消息发送和消息消费。 1、消息发送 Kafka消息发送有两种方式：同步（sync）和异步（async），默认是同步方式，可通过producer.type属性进行配置。Kafka通过配置request.required.acks属性来确认消息的生产：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;&lt;em&gt;0—表示不进行消息接收是否成功的确认；&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;1—表示当Leader接收成功时确认；&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;-1—表示Leader和Follower都接收成功时确认；&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;综上所述，有6种消息生产的情况，下面分情况来分析消息丢失的场景： （1）acks&amp;#x3D;0，不和Kafka集群进行消息接收确认，则当网络异常、缓冲区满了等情况时，消息可能丢失； （2）acks&amp;#x3D;1、同步模式下，只有Leader确认接收成功后但挂掉了，副本没有同步，数据可能丢失； 2、消息消费 Kafka消息消费有两个consumer接口，Low-level API和High-level API：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Low-level API：消费者自己维护offset等值，可以实现对Kafka的完全控制；&lt;/li&gt;
&lt;li&gt;High-level API：封装了对parition和offset的管理，使用简单；&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;如果使用高级接口High-level API，可能存在一个问题就是当消息消费者从集群中把消息取出来、并提交了新的消息offset值后，还没来得及消费就挂掉了，那么下次再消费时之前没消费成功的消息就“_诡异_”的消失了； 解决办法： 针对消息丢失：同步模式下，确认机制设置为-1，即让消息写入Leader和Follower之后再确认消息发送成功；异步模式下，为防止缓冲区满，可以在配置文件设置不限制阻塞超时时间，当缓冲区满时让生产者一直处于阻塞状态； 针对消息重复：将消息的唯一标识保存到外部介质中，每次消费时判断是否处理过即可。 消息重复消费及解决参考：&lt;a href=&quot;https://www.javazhiyin.com/22910.html&quot;&gt;https://www.javazhiyin.com/22910.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;16.为什么Kafka不支持读写分离？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在 Kafka 中，生产者写入消息、消费者读取消息的操作都是与 leader 副本进行交互的，从 而实现的是一种主写主读的生产消费模型。 Kafka 并不支持主写从读，因为主写从读有 2 个很明 显的缺点:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;(1)数据一致性问题。数据从主节点转到从节点必然会有一个延时的时间窗口，这个时间 窗口会导致主从节点之间的数据不一致。某一时刻，在主节点和从节点中 A 数据的值都为 X， 之后将主节点中 A 的值修改为 Y，那么在这个变更通知到从节点之前，应用读取从节点中的 A 数据的值并不为最新的 Y，由此便产生了数据不一致的问题。&lt;/li&gt;
&lt;li&gt;(2)延时问题。类似 &lt;a href=&quot;https://cloud.tencent.com/product/crs?from_column=20065&amp;from=20065&quot;&gt;Redis&lt;/a&gt; 这种组件，数据从写入主节点到同步至从节点中的过程需要经 历网络→主节点内存→网络→从节点内存这几个阶段，整个过程会耗费一定的时间。而在 Kafka 中，主从同步会比 Redis 更加耗时，它需要经历网络→主节点内存→主节点磁盘→网络→从节 点内存→从节点磁盘这几个阶段。对延时敏感的应用而言，主写从读的功能并不太适用。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;17.Kafka中是怎么体现消息顺序性的？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;kafka每个partition中的消息在写入时都是有序的，消费时，每个partition只能被每一个group中的一个消费者消费，保证了消费时也是有序的。 整个topic不保证有序。如果为了保证topic整个有序，那么将partition调整为1.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;18.消费者提交消费位移时提交的是当前消费到的最新消息的offset还是offset+1?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;offset+1&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;19.kafka如何实现延迟队列？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Kafka并没有使用JDK自带的Timer或者DelayQueue来实现延迟的功能，而是基于时间轮自定义了一个用于实现延迟功能的定时器（SystemTimer）。JDK的Timer和DelayQueue插入和删除操作的平均时间复杂度为O(nlog(n))，并不能满足Kafka的高性能要求，而基于时间轮可以将插入和删除操作的时间复杂度都降为O(1)。时间轮的应用并非Kafka独有，其应用场景还有很多，在Netty、Akka、Quartz、Zookeeper等组件中都存在时间轮的踪影。 底层使用数组实现，数组中的每个元素可以存放一个TimerTaskList对象。TimerTaskList是一个环形双向链表，在其中的链表项TimerTaskEntry中封装了真正的定时任务TimerTask. Kafka中到底是怎么推进时间的呢？Kafka中的定时器借助了JDK中的DelayQueue来协助推进时间轮。具体做法是对于每个使用到的TimerTaskList都会加入到DelayQueue中。Kafka中的TimingWheel专门用来执行插入和删除TimerTaskEntry的操作，而DelayQueue专门负责时间推进的任务。再试想一下，DelayQueue中的第一个超时任务列表的expiration为200ms，第二个超时任务为840ms，这里获取DelayQueue的队头只需要O(1)的时间复杂度。如果采用每秒定时推进，那么获取到第一个超时的任务列表时执行的200次推进中有199次属于“空推进”，而获取到第二个超时任务时有需要执行639次“空推进”，这样会无故空耗机器的性能资源，这里采用DelayQueue来辅助以少量空间换时间，从而做到了“精准推进”。Kafka中的定时器真可谓是“知人善用”，用TimingWheel做最擅长的任务添加和删除操作，而用DelayQueue做最擅长的时间推进工作，相辅相成。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;Kafka集群leader选举&quot;&gt;&lt;a href=&quot;#Kafka集群leader选举&quot; class=&quot;headerlink&quot; title=&quot;Kafka集群leader选举&quot;&gt;&lt;/a&gt;Kafka集群leader选举&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;在kafka集群中，第一个启动的broker会在zk中创建一个临时节点&amp;#x2F;controller让自己成为控制器。其他broker启动时也会试着创建这个节点当然他们会失败，因为已经有人创建过了。那么这些节点会在控制器节点上创建zk watch对象，这样他们就可以收到这个节点变更的通知。任何时刻都确保集群中只有一个leader的存在。&lt;/li&gt;
&lt;li&gt;如果控制器被关闭或者与zk断开连接，zk上的KB是节点马上就会消失。那么其他订阅了leader节点的broker也会收到通知随后他们会尝试让自己成为新的leader，重复第一步的操作。&lt;/li&gt;
&lt;li&gt;如果leader完好但是别的broker离开了集群，那么leader会去确定离开的broker的分区并确认新的分区领导者(即分区副本列表里的下一个副本)。然后向所有包含该副本的follower或者observer发送请求。随后新的分区首领开始处理请求。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;Kafka创建副本的2种模式——同步复制和异步复制&quot;&gt;&lt;a href=&quot;#Kafka创建副本的2种模式——同步复制和异步复制&quot; class=&quot;headerlink&quot; title=&quot;Kafka创建副本的2种模式——同步复制和异步复制&quot;&gt;&lt;/a&gt;Kafka创建副本的2种模式——同步复制和异步复制&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Kafka动态维护了一个同步状态的副本的集合（a set of In-Sync Replicas），简称ISR，在这个集合中的节点都是和leader保持高度一致的，任何一条消息只有被这个集合中的每个节点读取并追加到日志中，才会向外部通知说“这个消息已经被提交”。&lt;/p&gt;
&lt;p&gt;只有当消息被所有的副本加入到日志中时，才算是“committed”，只有committed的消息才会发送给consumer，这样就不用担心一旦leader down掉了消息会丢失。消息从leader复制到follower,我们可以通过决定Producer是否等待消息被提交的通知(ack)来区分同步复制和异步复制。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;同步复制流程&quot;&gt;&lt;a href=&quot;#同步复制流程&quot; class=&quot;headerlink&quot; title=&quot;同步复制流程&quot;&gt;&lt;/a&gt;同步复制流程&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;同步复制流程：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;producer联系zk识别leader；&lt;/li&gt;
&lt;li&gt;向leader发送消息；&lt;/li&gt;
&lt;li&gt;leadr收到消息写入到本地log；&lt;/li&gt;
&lt;li&gt;follower从leader pull消息；&lt;/li&gt;
&lt;li&gt;follower向本地写入log；&lt;/li&gt;
&lt;li&gt;follower向leader发送ack消息；&lt;/li&gt;
&lt;li&gt;leader收到所有follower的ack消息；&lt;/li&gt;
&lt;li&gt;leader向producer回传ack。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;异步复制流程&quot;&gt;&lt;a href=&quot;#异步复制流程&quot; class=&quot;headerlink&quot; title=&quot;异步复制流程&quot;&gt;&lt;/a&gt;异步复制流程&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;异步复制流程： 和同步复制的区别在于，leader写入本地log之后，直接向client回传ack消息，不需要等待所有follower复制完成。 既然kafka支持副本模式，那么其中一个Broker里的挂掉，一个新的leader就能通过ISR机制推选出来，继续处理读写请求。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;Kafka判断一个broker节点是否存活&quot;&gt;&lt;a href=&quot;#Kafka判断一个broker节点是否存活&quot; class=&quot;headerlink&quot; title=&quot;Kafka判断一个broker节点是否存活&quot;&gt;&lt;/a&gt;Kafka判断一个broker节点是否存活&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;依据两个条件：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;节点必须可以维护和ZooKeeper的连接，Zookeeper通过心跳机制检查每个节点的连接;&lt;/li&gt;
&lt;li&gt;如果节点是个follower,他必须能及时的同步leader的写操作，延时不能太久。Leader会追踪所有“同步中”的节点，一旦一个down掉了，或是卡住了，或是延时太久，leader就会把它移除。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;5-消息&quot;&gt;&lt;a href=&quot;#5-消息&quot; class=&quot;headerlink&quot; title=&quot;5. 消息&quot;&gt;&lt;/a&gt;5. 消息&lt;/h3&gt;&lt;h5 id=&quot;5-1-请简述一下消息的顺序&quot;&gt;&lt;a href=&quot;#5-1-请简述一下消息的顺序&quot; class=&quot;headerlink&quot; title=&quot;5.1. 请简述一下消息的顺序&quot;&gt;&lt;/a&gt;5.1. 请简述一下消息的顺序&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;Kafka保证一个Partition内消息的有序性，但是并不保证多个Partition之间的数据有顺序。 每个Topic可以划分成多个分区( 每个Topic都至少有一个分区)，同一Topic下的不同分区包含的消息是不同的。每个消息在被添加到分区时，都会被分配一个offset，它是消息在此分区中的唯一编号，Kafka 通过offset保证消息在分区内的顺序， offset 的顺序性不跨分区，即Kafka只保证在同一个分区内的消息是有序的，同一Topic的多个分区内的消息，Kafka并不保证其顺序性&lt;/li&gt;
&lt;li&gt;kafka消息有序。单分区可以。也可以使用key+多分区。保证同一个 Key 的所有消息都进入到相同的分区里面&lt;/li&gt;
&lt;li&gt;防止乱序可以通过设置max.in.flight.requests.per.connection&amp;#x3D;1来保证&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&quot;5-2-如何保证消息的有序&quot;&gt;&lt;a href=&quot;#5-2-如何保证消息的有序&quot; class=&quot;headerlink&quot; title=&quot;5.2. 如何保证消息的有序&quot;&gt;&lt;/a&gt;5.2. 如何保证消息的有序&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;一个生产者，发两次消息，但是网络原因，消息到达的顺序和消息发送的顺序不一致&lt;ul&gt;
&lt;li&gt;设置max.in.flight.requests.per.connection&amp;#x3D;1来保证&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&quot;5-3-消息堆积可能原因&quot;&gt;&lt;a href=&quot;#5-3-消息堆积可能原因&quot; class=&quot;headerlink&quot; title=&quot;5.3. 消息堆积可能原因&quot;&gt;&lt;/a&gt;5.3. 消息堆积可能原因&lt;/h5&gt;&lt;ol&gt;
&lt;li&gt;生产速度大于消费速度&lt;ol&gt;
&lt;li&gt;可以适当增加分区，增加consumer数量，提升消费TPS；&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;consumer消费性能低&lt;ol&gt;
&lt;li&gt;查一下是否有很重的消费逻辑，看看是否可以优化consumer TPS；&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;确保consumer端没有因为异常而导致消费hang住;&lt;/li&gt;
&lt;li&gt;如果你使用的是消费者组，确保没有频繁地发生rebalance&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id=&quot;5-4-有哪些情况下会出现生产消息重复&quot;&gt;&lt;a href=&quot;#5-4-有哪些情况下会出现生产消息重复&quot; class=&quot;headerlink&quot; title=&quot;5.4. 有哪些情况下会出现生产消息重复&quot;&gt;&lt;/a&gt;5.4. 有哪些情况下会出现生产消息重复&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;一个consumer正在消费一个分区的一条消息，还没有消费完，发生了rebalance(加入了一个consumer)，从而导致这条消息没有消费成功，rebalance后，另一个consumer又把这条消息消费一遍&lt;/li&gt;
&lt;li&gt;生产者重复发送。比如说你的业务在发送消息的时候，收到了一个超时响应，这个时候你很难确定这个消息是否真的发送出去了，那么你就会考虑重试，重试就可能导致同一个消息发送了多次。&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&quot;5-5-那些情景下会造成消息漏消费&quot;&gt;&lt;a href=&quot;#5-5-那些情景下会造成消息漏消费&quot; class=&quot;headerlink&quot; title=&quot;5.5. 那些情景下会造成消息漏消费&quot;&gt;&lt;/a&gt;5.5. 那些情景下会造成消息漏消费&lt;/h5&gt;&lt;ol&gt;
&lt;li&gt;自动提交 设置offset为自动定时提交，当offset被自动定时提交时，数据还在内存中未处理，此时刚好把线程kill掉，那么offset已经提交，但是数据未处理，导致这部分内存中的数据丢失。&lt;/li&gt;
&lt;li&gt;生产者发送消息 发送消息设置的是fire-and-forget（发后即忘），它只管往 Kafka 中发送消息而并不关心消息是否正确到达。不过在某些时候（比如发生不可重试异常时）会造成消息的丢失。这种发送方式的性能最高，可靠性也最差。&lt;/li&gt;
&lt;li&gt;消费者端 先提交位移，但是消息还没消费完就宕机了，造成了消息没有被消费。自动位移提交同理&lt;/li&gt;
&lt;li&gt;acks没有设置为all 如果在broker还没把消息同步到其他broker的时候宕机了，那么消息将会丢失&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id=&quot;5-6-有哪些情形会造成重复消费？&quot;&gt;&lt;a href=&quot;#5-6-有哪些情形会造成重复消费？&quot; class=&quot;headerlink&quot; title=&quot;5.6. 有哪些情形会造成重复消费？&quot;&gt;&lt;/a&gt;5.6. 有哪些情形会造成重复消费？&lt;/h5&gt;&lt;ol&gt;
&lt;li&gt;Rebalance 一个consumer正在消费一个分区的一条消息，还没有消费完，发生了rebalance(加入了一个consumer)，从而导致这条消息没有消费成功，rebalance后，另一个consumer又把这条消息消费一遍。&lt;/li&gt;
&lt;li&gt;消费者端手动提交 如果先消费消息，再更新offset位置，导致消息重复消费。&lt;/li&gt;
&lt;li&gt;消费者端自动提交 设置offset为自动提交，关闭kafka时，如果在close之前，调用 consumer.unsubscribe() 则有可能部分offset没提交，下次重启会重复消费。&lt;/li&gt;
&lt;li&gt;生产者端 生产者因为业务问题导致的宕机，在重启之后可能数据会重发&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id=&quot;5-7-Kafka中是怎么体现消息顺序性的？&quot;&gt;&lt;a href=&quot;#5-7-Kafka中是怎么体现消息顺序性的？&quot; class=&quot;headerlink&quot; title=&quot;5.7. Kafka中是怎么体现消息顺序性的？&quot;&gt;&lt;/a&gt;5.7. Kafka中是怎么体现消息顺序性的？&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;可以通过分区策略体现消息顺序性。 分区策略有轮询策略、随机策略、按消息键保序策略。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;按消息键保序策略：一旦消息被定义了 Key，那么你就可以保证同一个 Key 的所有消息都进入到相同的分区里面，由于每个分区下的消息处理都是有顺序的，故这个策略被称为按消息键保序策略&lt;/p&gt;
&lt;h5 id=&quot;5-8-Kafka-中最基本的数据单元是消息-message-Kafka-中的消息理解成数据库里的一条行或者一条记录&quot;&gt;&lt;a href=&quot;#5-8-Kafka-中最基本的数据单元是消息-message-Kafka-中的消息理解成数据库里的一条行或者一条记录&quot; class=&quot;headerlink&quot; title=&quot;5.8. Kafka 中最基本的数据单元是消息 message(Kafka 中的消息理解成数据库里的一条行或者一条记录)&quot;&gt;&lt;/a&gt;5.8. Kafka 中最基本的数据单元是消息 message(Kafka 中的消息理解成数据库里的一条行或者一条记录)&lt;/h5&gt;&lt;h5 id=&quot;5-9-Kafka中的幂等是怎么实现的&quot;&gt;&lt;a href=&quot;#5-9-Kafka中的幂等是怎么实现的&quot; class=&quot;headerlink&quot; title=&quot;5.9. Kafka中的幂等是怎么实现的&quot;&gt;&lt;/a&gt;5.9. Kafka中的幂等是怎么实现的&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;在 Kafka 中，Producer 默认不是幂等性的，可以创建幂等性 Producer。它其实是 0.11.0.0 版本引入的新功能。在此之前，Kafka 向分区发送数据时，可能会出现同一条消息被发送了多次，导致消息重复的情况。在 0.11 之后，指定 Producer 幂等性的方法很简单，仅需要设置一个参数即可，即props.put(“enable.idempotence”, ture)，或 props.put(ProducerConfig.ENABLE_IDEMPOTENCE_CONFIG， true)。&lt;/li&gt;
&lt;li&gt;底层具体的原理，就是经典的用空间去换时间的优化思路，即在 Broker 端多保存一些字段。当 Producer 发送了具有相同字段值的消息后，Broker 能够自动知晓这些消息已经重复了&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&quot;5-10-幂等性-Producer-作用范围&quot;&gt;&lt;a href=&quot;#5-10-幂等性-Producer-作用范围&quot; class=&quot;headerlink&quot; title=&quot;5.10. 幂等性 Producer 作用范围&quot;&gt;&lt;/a&gt;5.10. 幂等性 Producer 作用范围&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;它只能保证单分区上的幂等性，即一个幂等性 Producer 能够保证某个主题的一个分区上不出现重复消息，它无法实现多个分区的幂等性。其次，它只能实现单会话上的幂等性，不能实现跨会话的幂等性。这里的会话，你可以理解为 Producer 进程的一次运行。当你重启了 Producer 进程之后，这种幂等性保证就丧失了。&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&quot;5-11-解释Kafka的用户如何消费信息&quot;&gt;&lt;a href=&quot;#5-11-解释Kafka的用户如何消费信息&quot; class=&quot;headerlink&quot; title=&quot;5.11. 解释Kafka的用户如何消费信息?&quot;&gt;&lt;/a&gt;5.11. 解释Kafka的用户如何消费信息?&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;在Kafka中传递消息是通过使用sendfile API完成的。它支持将字节从套接口转移到磁盘，通过内核空间保存副本，并在内核用户之间调用内核。&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&quot;5-12-Kafka中怎么做消息轨迹&quot;&gt;&lt;a href=&quot;#5-12-Kafka中怎么做消息轨迹&quot; class=&quot;headerlink&quot; title=&quot;5.12. Kafka中怎么做消息轨迹&quot;&gt;&lt;/a&gt;5.12. Kafka中怎么做消息轨迹&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;消息轨迹指的是一条消息从生产者发出，经由 broker 存储，再到消费者消费的整个过程中，各个相关节点的状态、时间、地点等数据汇聚而成的完整链路信息。生产者、broker、消费者这3个角色在处理消息的过程中都会在链路中增加相应的信息，将这些信息汇聚、处理之后就可以查询任意消息的状态，进而为生产环境中的故障排除提供强有力的数据支持。对消息轨迹而言，最常见的实现方式是封装客户端，在保证正常生产消费的同时添加相应的轨迹信息埋点逻辑。无论生产，还是消费，在执行之后都会有相应的轨迹信息，我们需要将这些信息保存起来。同样可以将轨迹信息保存到 Kafka 的某个主题中，比如下图中的主题 trace_topic。生产者在将消息正常发送到用户主题 real_topic 之后（或者消费者在拉取到消息消费之后）会将轨迹信息发送到主题 trace_topic 中。&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&quot;5-13-Kafka为什么这么快&quot;&gt;&lt;a href=&quot;#5-13-Kafka为什么这么快&quot; class=&quot;headerlink&quot; title=&quot;5.13. Kafka为什么这么快&quot;&gt;&lt;/a&gt;5.13. Kafka为什么这么快&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;Kafka重度依赖底层操作系统提供的PageCache功能。当上层有写操作时，操作系统只是将数据写入PageCache，同时标记Page属性为Dirty。当读操作发生时，先从PageCache中查找，如果发生缺页才进行磁盘调度，最终返回需要的数据。实际上PageCache是把尽可能多的空闲内存都当做了磁盘缓存来使用。同时如果有其他进程申请内存，回收PageCache的代价又很小，所以现代的OS都支持PageCache。 使用PageCache功能同时可以避免在JVM内部缓存数据，JVM为我们提供了强大的GC能力，同时也引入了一些问题不适用与Kafka的设计。&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&quot;5-14-kafka为什么不像MySQL那样允许追随者副本对外提供读服务&quot;&gt;&lt;a href=&quot;#5-14-kafka为什么不像MySQL那样允许追随者副本对外提供读服务&quot; class=&quot;headerlink&quot; title=&quot;5.14. kafka为什么不像MySQL那样允许追随者副本对外提供读服务&quot;&gt;&lt;/a&gt;5.14. kafka为什么不像MySQL那样允许追随者副本对外提供读服务&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;kafka的分区已经让读是从多个broker读从而&lt;a href=&quot;https://cloud.tencent.com/product/clb?from_column=20065&amp;from=20065&quot;&gt;负载均衡&lt;/a&gt;，不是MySQL的主从，压力都在主上&lt;/li&gt;
&lt;li&gt;kafka保存的数据和数据库的性质有实质的区别就是数据具有消费的概念，是流数据，kafka是消息队列，所以消费需要位移，而数据库是实体数据不存在这个概念，如果从kafka的follower读，消费端offset控制更复杂&lt;/li&gt;
&lt;li&gt;生产者来说，kafka可以通过配置来控制是否等待follower对消息确认的，如果从上面读，也需要所有的follower都确认了才可以回复生产者，造成性能下降，如果follower出问题了也不好处理&lt;/li&gt;
&lt;li&gt;首先会存在数据一致性的问题，消息从主节点同步到从节点需要时间，可能造成主从节点的数据不一致。主写从读无非就是为了减轻leader节点的压力，将读请求的负载均衡到follower节点，如果Kafka的分区相对均匀地分散到各个broker上，同样可以达到负载均衡的效果，没必要刻意实现主写从读增加代码实现的复杂程度&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&quot;5-15-Producer端，网络，数据格式等因素，会不会导致Kafka只有一个分区接收到数据顺序跟Producer发送数据顺序不一致&quot;&gt;&lt;a href=&quot;#5-15-Producer端，网络，数据格式等因素，会不会导致Kafka只有一个分区接收到数据顺序跟Producer发送数据顺序不一致&quot; class=&quot;headerlink&quot; title=&quot;5.15. Producer端，网络，数据格式等因素，会不会导致Kafka只有一个分区接收到数据顺序跟Producer发送数据顺序不一致&quot;&gt;&lt;/a&gt;5.15. Producer端，网络，数据格式等因素，会不会导致Kafka只有一个分区接收到数据顺序跟Producer发送数据顺序不一致&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;如果retries&amp;gt;0并且max.in.flight.requests.per.connection&amp;gt;1有可能出现消息乱序的情况&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&quot;5-16-replica的leader和follower之间如何复制数据保证消息的持久化的问题&quot;&gt;&lt;a href=&quot;#5-16-replica的leader和follower之间如何复制数据保证消息的持久化的问题&quot; class=&quot;headerlink&quot; title=&quot;5.16. replica的leader和follower之间如何复制数据保证消息的持久化的问题&quot;&gt;&lt;/a&gt;5.16. replica的leader和follower之间如何复制数据保证消息的持久化的问题&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;follower副本不断地从leader处拉取消息。&lt;/li&gt;
&lt;li&gt;生产者消息发过来以后，写leader成功后即告知生产者成功，然后异步的将消息同步给其他follower，这种方式效率最高，但可能丢数据；&lt;/li&gt;
&lt;li&gt;同步等待所有follower都复制成功后通知生产者消息发送成功，这样不会丢数据，但效率不高；&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&quot;5-17-在partition增加或减少消息路由重新hash的情况下，消息的顺序性不就没有办法保证了。特别是在相同key的情况下，有状态变更顺序要求的场景。不知道对于类似场景有什么好的解决方案&quot;&gt;&lt;a href=&quot;#5-17-在partition增加或减少消息路由重新hash的情况下，消息的顺序性不就没有办法保证了。特别是在相同key的情况下，有状态变更顺序要求的场景。不知道对于类似场景有什么好的解决方案&quot; class=&quot;headerlink&quot; title=&quot;5.17. 在partition增加或减少消息路由重新hash的情况下，消息的顺序性不就没有办法保证了。特别是在相同key的情况下，有状态变更顺序要求的场景。不知道对于类似场景有什么好的解决方案&quot;&gt;&lt;/a&gt;5.17. 在partition增加或减少消息路由重新hash的情况下，消息的顺序性不就没有办法保证了。特别是在相同key的情况下，有状态变更顺序要求的场景。不知道对于类似场景有什么好的解决方案&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;可以自己写个partitioner，让相同的key用于去到相同的分区&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&quot;5-18-如果长时间不消费，提交的位移会过期吗？或者提交的位移的数据被清理了，下次启动重新消费时从什么位移开始消费？&quot;&gt;&lt;a href=&quot;#5-18-如果长时间不消费，提交的位移会过期吗？或者提交的位移的数据被清理了，下次启动重新消费时从什么位移开始消费？&quot; class=&quot;headerlink&quot; title=&quot;5.18. 如果长时间不消费，提交的位移会过期吗？或者提交的位移的数据被清理了，下次启动重新消费时从什么位移开始消费？&quot;&gt;&lt;/a&gt;5.18. 如果长时间不消费，提交的位移会过期吗？或者提交的位移的数据被清理了，下次启动重新消费时从什么位移开始消费？&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;提交的位移会过期。一旦被清理，从哪里消费取决于auto.offset.reset参数值&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&quot;5-19-异步发送消息，如果retry，是否会造成消息乱序？&quot;&gt;&lt;a href=&quot;#5-19-异步发送消息，如果retry，是否会造成消息乱序？&quot; class=&quot;headerlink&quot; title=&quot;5.19. 异步发送消息，如果retry，是否会造成消息乱序？&quot;&gt;&lt;/a&gt;5.19. 异步发送消息，如果retry，是否会造成消息乱序？&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;是可能的，所以有max.in.flight.requests.per.connection这个参数&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&quot;5-20-消息经常堆积起来，不能消费了。大概会有一些什么情况。如何解决&quot;&gt;&lt;a href=&quot;#5-20-消息经常堆积起来，不能消费了。大概会有一些什么情况。如何解决&quot; class=&quot;headerlink&quot; title=&quot;5.20. 消息经常堆积起来，不能消费了。大概会有一些什么情况。如何解决&quot;&gt;&lt;/a&gt;5.20. 消息经常堆积起来，不能消费了。大概会有一些什么情况。如何解决&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;生产速度大于消费速度，这样可以适当增加分区，增加consumer数量，提升消费TPS&lt;/li&gt;
&lt;li&gt;consumer消费性能低，查一下是否有很重的消费逻辑（比如拿到消息后写HDFS或HBASE这种逻辑就挺重的），看看是否可以优化consumer TPS&lt;/li&gt;
&lt;li&gt;确保consumer端没有因为异常而导致消费hang住&lt;/li&gt;
&lt;li&gt;如果你使用的是消费者组，确保没有频繁地发生rebalance&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&quot;5-21-如何判定-生产者速度大于消费者&quot;&gt;&lt;a href=&quot;#5-21-如何判定-生产者速度大于消费者&quot; class=&quot;headerlink&quot; title=&quot;5.21. 如何判定 生产者速度大于消费者&quot;&gt;&lt;/a&gt;5.21. 如何判定 生产者速度大于消费者&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;用kafka自带的&lt;a href=&quot;https://cloud.tencent.com/product/cli?from_column=20065&amp;from=20065&quot;&gt;命令行工具&lt;/a&gt;kafka-consumer-groups.sh。可以查看指定消费者组对其消费的所有partition的位移落后情况(也就是业务上的堆积量)。在一段时间内多次使用这个工具查看消费位移落后的情况，如果越来越大，就说明消费慢于生产。&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&quot;5-22-在规划消息磁盘的时候会考虑什么&quot;&gt;&lt;a href=&quot;#5-22-在规划消息磁盘的时候会考虑什么&quot; class=&quot;headerlink&quot; title=&quot;5.22. 在规划消息磁盘的时候会考虑什么&quot;&gt;&lt;/a&gt;5.22. 在规划消息磁盘的时候会考虑什么&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;新增消息数&lt;/li&gt;
&lt;li&gt;消息留存时间&lt;/li&gt;
&lt;li&gt;平均消息大小&lt;/li&gt;
&lt;li&gt;备份数&lt;/li&gt;
&lt;li&gt;是否启用压缩&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&quot;5-23-Kafka-无消息丢失的配置&quot;&gt;&lt;a href=&quot;#5-23-Kafka-无消息丢失的配置&quot; class=&quot;headerlink&quot; title=&quot;5.23. Kafka 无消息丢失的配置&quot;&gt;&lt;/a&gt;5.23. Kafka 无消息丢失的配置&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;不要使用 producer.send(msg)，而要使用 producer.send(msg, callback)。&lt;/li&gt;
&lt;li&gt;设置 acks &amp;#x3D; all。acks 是 Producer 的一个参数，代表了你对“已提交”消息的定义。如果设置成 all，则表明所有副本 Broker 都要接收到消息，该消息才算是“已提交”。这是最高等级的“已提交”定义。&lt;/li&gt;
&lt;li&gt;设置 retries 为一个较大的值。这里的 retries 同样是 Producer 的参数，对应前面提到的 Producer 自动重试。当出现网络的瞬时抖动时，消息发送可能会失败，此时配置了 retries &amp;gt; 0 的 Producer 能够自动重试消息发送，避免消息丢失。&lt;/li&gt;
&lt;li&gt;设置 unclean.leader.election.enable &amp;#x3D; false。这是 Broker 端的参数，它控制的是哪些 Broker 有资格竞选分区的 Leader。如果一个 Broker 落后原先的 Leader 太多，那么它一旦成为新的 Leader，必然会造成消息的丢失。故一般都要将该参数设置成 false，即不允许这种情况的发生。&lt;/li&gt;
&lt;li&gt;设置 replication.factor &amp;gt;&amp;#x3D; 3。这也是 Broker 端的参数。其实这里想表述的是，最好将消息多保存几份，毕竟目前防止消息丢失的主要机制就是冗余。&lt;/li&gt;
&lt;li&gt;设置 min.insync.replicas &amp;gt; 1。这依然是 Broker 端参数，控制的是消息至少要被写入到多少个副本才算是“已提交”。设置成大于 1 可以提升消息持久性。在实际环境中千万不要使用默认值 1。&lt;/li&gt;
&lt;li&gt;确保 replication.factor &amp;gt; min.insync.replicas。如果两者相等，那么只要有一个副本挂机，整个分区就无法正常工作了。我们不仅要改善消息的持久性，防止数据丢失，还要在不降低可用性的基础上完成。推荐设置成 replication.factor &amp;#x3D; min.insync.replicas + 1。&lt;/li&gt;
&lt;li&gt;确保消息消费完成再提交。Consumer 端有个参数 enable.auto.commit，最好把它设置成 false，并采用手动提交位移的方式。就像前面说的，这对于单 Consumer 多线程处理的场景而言是至关重要的。&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&quot;5-24-如何保证消息的不丢&quot;&gt;&lt;a href=&quot;#5-24-如何保证消息的不丢&quot; class=&quot;headerlink&quot; title=&quot;5.24. 如何保证消息的不丢&quot;&gt;&lt;/a&gt;5.24. 如何保证消息的不丢&lt;/h5&gt;&lt;h3 id=&quot;6-消费组&quot;&gt;&lt;a href=&quot;#6-消费组&quot; class=&quot;headerlink&quot; title=&quot;6. 消费组&quot;&gt;&lt;/a&gt;6. 消费组&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;简述消费者与消费组之间的关系&lt;ol&gt;
&lt;li&gt;Consumer Group 下可以有一个或多个 Consumer 实例。这里的实例可以是一个单独的进程，也可以是同一进程下的线程。在实际场景中，使用进程更为常见一些&lt;/li&gt;
&lt;li&gt;Group ID 是一个字符串，在一个 Kafka 集群中，它标识唯一的一个 Consumer Group&lt;/li&gt;
&lt;li&gt;Consumer Group 下所有实例订阅的主题的单个分区，只能分配给组内的某个 Consumer 实例消费。这个分区当然也可以被其他的 Group 消费。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;7-位移&quot;&gt;&lt;a href=&quot;#7-位移&quot; class=&quot;headerlink&quot; title=&quot;7. 位移&quot;&gt;&lt;/a&gt;7. 位移&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;消费者提交消费位移时提交的是当前消费到的最新消息的offset还是offset+1?&lt;ul&gt;
&lt;li&gt;在旧消费者客户端中，消费位移是存储在 ZooKeeper 中的。而在新消费者客户端中，消费位移存储在 Kafka 内部的主题__consumer_offsets 中。 当前消费者需要提交的消费位移是offset+1&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;主题有4个分区，消费者组有2个实例，发布应用的时候，会先新启动一个服务节点，加入消费组，通过重平衡分配到到至少1个最多2个分区，消费者的偏移量是 0 还是啥&lt;ul&gt;
&lt;li&gt;假设C1消费P0,P1, C2消费P2,P3。如果C1从未提交，C1挂掉，C2开始消费P0,P1，发现没有对应提交位移，那么按照C2的auto.offset.reset值决定从那里消费，如果是earliest，从P0，P1的最小位移值（可能不是0）开始消费，如果是latest，从P0, P1的最新位移值（分区高水位值）开始消费。但如果C1之前提交了位移，那么C1挂掉之后C2从C1最新一次提交的位移值开始消费。 所谓的重复消费是指，C1消费了一部分数据，还没来得及提交这部分数据的位移就挂了。C2承接过来之后会重新消费这部分数据。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;为什么位移主题写入消息时，不直接替换掉原来的数据，像 HashMap 一样呢？而是要堆积起来，另起线程来维护位移主题&lt;ul&gt;
&lt;li&gt;位移主题也是主题，也要遵循Kafka底层的日志设计思路，即append-only log&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;位移主题用来记住位移，那么这个位移主题的位移由谁来记住呢?&lt;ul&gt;
&lt;li&gt;位移主题的位移由Kafka内部的Coordinator自行管理&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;消费者提交的位移消息，保存到位移主题分区是随机的吗？&lt;ul&gt;
&lt;li&gt;不是随机的。通常来说，同一个group下的所有消费者提交的位移数据保存在位移主题的同一个分区下&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;8-rebalance&quot;&gt;&lt;a href=&quot;#8-rebalance&quot; class=&quot;headerlink&quot; title=&quot;8. rebalance&quot;&gt;&lt;/a&gt;8. rebalance&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;如何缩短rebalance时间&lt;ul&gt;
&lt;li&gt;减少consumer个数&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;当消费者拉取消息或者提交时，便会发送心跳。如果消费者超过一定时间没有发送心跳，那么它的会话（Session）就会过期，组协调者会认为该消费者已经宕机，然后触发重平衡。&lt;/p&gt;
&lt;p&gt;另外更高版本的 Kafka 支持配置一个消费者多长时间不拉取消息但仍然保持存活，这个配置可以避免活锁（livelock）。活锁，是指应用没有故障但是由于某些原因不能进一步消费。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;缩短单条消息处理的时间：这个涉及业务流程的优化或者改造，得具体问题具体分析，在 bps 这个场景，暂时没有优化的空间 2. 增加消费者端允许下游系统消费一批消息的最大时长：当消费者组完成重平衡之后，每个消费者实例都会定期地向协调者发送心跳请求，表明它还存活着。如果某个消费者实例不能及时地发送这些心跳请求，协调者就会认为该消费者已经“死”了，从而将其从组中移除，然后开启新一轮重平衡。消费者端有个参数，叫 session.timeout.ms，就是被用来表征此事的。该参数的默认值是 10 秒，即如果协调者在 10 秒之内没有收到组内某个消费者实例的心跳，它就会认为这个消费者实例已经挂了。可以这么说，session.timeout.ms 决定了消费者存活性的时间间隔 3. 控制发送心跳请求频率：消费者还提供了一个允许你控制发送心跳请求频率的参数，就是 heartbeat.interval.ms。这个值设置得越小，消费者实例发送心跳请求的频率就越高。频繁地发送心跳请求会额外消耗带宽资源，但好处是能够更加快速地知晓当前是否开启重平衡 4. 减少下游系统一次性消费的消息总数：这取决于消费者端参数 max.poll.records 的值。当前该参数的默认值是 500 条，表明调用一次 KafkaConsumer.poll 方法，最多返回 500 条消息。可以说，该参数规定了单次 poll 方法能够返回的消息总数的上限。如果前两种方法对你都不适用的话，降低此参数值是避免 CommitFailedException 异常最简单的手段 5. 调整两次调用 poll 方法的最大时间间隔：消费者端还有一个参数，用于控制消费者实际消费能力对重平衡的影响，即 max.poll.interval.ms 参数。它限定了消费者端应用程序两次调用 poll 方法的最大时间间隔。它的默认值是 5 分钟，表示你的消费者程序如果在 5 分钟之内无法消费完 poll 方法返回的消息，那么消费者会主动发起“离开组”的请求，协调者也会开启新一轮重平衡 6. 下游系统使用多线程来加速消费：具体的思路就是，让下游系统手动创建多个消费线程处理 poll 方法返回的一批消息。之前你使用 Kafka 消费者消费数据更多是单线程的，所以当消费速度无法匹及 Kafka 消费者消息返回的速度时，它就会抛出 CommitFailedException 异常。如果是多线程，你就可以灵活地控制线程数量，随时调整消费承载能力，再配以目前多核的硬件条件，该方法可谓是防止 CommitFailedException 最高档的解决之道。事实上，很多主流的大数据流处理框架使用的都是这个方法，比如 Apache Flink 在集成 Kafka 时，就是创建了多个 KafkaConsumerThread 线程，自行处理多线程间的数据消费。不过，凡事有利就有弊，这个方法实现起来并不容易，特别是在多个线程间如何处理位移提交这个问题上，更是极容易出错。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;什么情况下会Rebalance&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;只有consumer成员数量、订阅topic分区数发生增减才会触发&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;9-Producer&quot;&gt;&lt;a href=&quot;#9-Producer&quot; class=&quot;headerlink&quot; title=&quot;9. Producer&quot;&gt;&lt;/a&gt;9. Producer&lt;/h3&gt;&lt;h5 id=&quot;9-1-谈一谈-Kafka-Producer-的-acks-参数的作用。（producer发个broker）&quot;&gt;&lt;a href=&quot;#9-1-谈一谈-Kafka-Producer-的-acks-参数的作用。（producer发个broker）&quot; class=&quot;headerlink&quot; title=&quot;9.1. 谈一谈 Kafka Producer 的 acks 参数的作用。（producer发个broker）&quot;&gt;&lt;/a&gt;9.1. 谈一谈 Kafka Producer 的 acks 参数的作用。（producer发个broker）&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;acks&amp;#x3D;0&lt;ul&gt;
&lt;li&gt;Producer不会等待Broker的确认反馈，不关心Broker是否正确的将发送来的数据持久化，所以在这种模式下，很有可能会丢失数据。因为如果Broker挂了，Producer不会被通知到，所以还会不停的发送数据导致数据丢失。在对数据完整性需求不强烈的场景下，这种模式可以提高性能。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;acks&amp;#x3D;1&lt;ul&gt;
&lt;li&gt;默认采用的模式，该模式下Producer会等待Leader Broker的确认反馈，当Broker确实将数据持久化到至少一个Partition中后，给予Producer确认反馈，Producer才会继续发送数据。该模式下有几点需要注意：&lt;ul&gt;
&lt;li&gt;不保证Replicas也持久化了数据。&lt;/li&gt;
&lt;li&gt;当Producer没有收到Broker的确认反馈时，Producer会尝试重新发送数据。&lt;/li&gt;
&lt;li&gt;当Leader Broker挂了，但是Replicas又没有持久化数据时，还是会丢失数据。&lt;/li&gt;
&lt;li&gt;该模式只能说是可以有效防止数据丢失。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;acks&amp;#x3D;all&lt;ul&gt;
&lt;li&gt;Producer同样需要等待Broker的确认，但是确认更为严格，需要所有的Partition（Leader + Replicas）都持久化数据后才返回确认信息。这种模式下，只要Replicas足够多，数据基本不会丢失。&lt;/li&gt;
&lt;li&gt;在该模式下，还有一个重要的参数min.insync.replicas需要配置。该参数的意思是当acks&amp;#x3D;all时，至少有多少个Replicas需要确认已成功持久化数据，这个Replicas数量也包括Leader。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&quot;9-2-对producer的retry理解&quot;&gt;&lt;a href=&quot;#9-2-对producer的retry理解&quot; class=&quot;headerlink&quot; title=&quot;9.2. 对producer的retry理解&quot;&gt;&lt;/a&gt;9.2. 对producer的retry理解&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;有时候Producer发送Message失败可能并不是因为Broker挂了，可能是因为网络问题，没有连接到Broker等。这种问题可能在很短暂的时间内就会自动修复，那么在这种情况下，我们希望Producer在发送失败后能重新尝试发送。这里就需要设置retries这个参数，意思就是重试的次数，默认是0次，可以根据实际业务情况设置。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;但是当设置了retries参数大于0后，有可能会带来新的问题。假如我们需要相同Key的Message进入特定的Partition，并且是要严格按照Producer生产Message的顺序排序。那么此时如果第一条Message发送失败，第二条Message发送成功了，第一条通过重试发送成功了，那Message的顺序就发生了变化。&lt;/p&gt;
&lt;p&gt;这里又会引出一个参数max.in.flight.requests.per.connection，这个参数默认是5，意思是在被Broker阻止前，未通过acks确认的发送请求最大数，也就是在Broker处排队等待acks确认的Message数量。所以刚才那个场景，第一条和第二条Message都在Broker那排队等待确认放行，这时第一条失败了，等重试的第一条Message再来排队时，第二条早都通过进去了，所以排序就乱了。&lt;/p&gt;
&lt;p&gt;如果想在设置了retries还要严格控制Message顺序，可以把max.in.flight.requests.per.connection设置为1。让Broker处永远只有一条Message在排队，就可以严格控制顺序了。但是这样做会严重影响性能（接收Message的吞吐量）。&lt;/p&gt;
&lt;p&gt;Kafka在0.11版本之后，就为我们提供了定义幂等Producer的能力&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;retries&amp;#x3D;Integer.MAX_VALUE&lt;/li&gt;
&lt;li&gt;max.in.flight.requests.per.connection&amp;#x3D;1 (Kafka &amp;gt;&amp;#x3D; v0.11 &amp;amp; &amp;lt; v1.1)&lt;/li&gt;
&lt;li&gt;max.in.flight.requests.per.connection&amp;#x3D;5 (Kafka &amp;gt;&amp;#x3D; v1.1)&lt;/li&gt;
&lt;li&gt;acks&amp;#x3D;all&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&quot;9-3-对Message-Batch的理解&quot;&gt;&lt;a href=&quot;#9-3-对Message-Batch的理解&quot; class=&quot;headerlink&quot; title=&quot;9.3. 对Message Batch的理解&quot;&gt;&lt;/a&gt;9.3. 对Message Batch的理解&lt;/h5&gt;&lt;p&gt;max.in.flight.requests.per.connection参数，默认会在Broker那排队5条Message，那么如果第六条来了怎么办呢？这时候Kafka会自动开启批量处理Message的模式，将这6条Message作为一个批次进行处理。这一个批次可以看作是一次Message处理请求。&lt;/p&gt;
&lt;p&gt;开启批量模式后，会引出两个参数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;linger.ms：每次批量处理的间隔时间。如果设为5，那么就是每5毫秒对Message进行一次批量处理。&lt;/li&gt;
&lt;li&gt;batch.size：每个批次的最大字节数，默认是16KB，可以设置为32KB或者64KB，可以提高性能。&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&quot;9-4-对-Producer-Buffer的理解&quot;&gt;&lt;a href=&quot;#9-4-对-Producer-Buffer的理解&quot; class=&quot;headerlink&quot; title=&quot;9.4. 对 Producer Buffer的理解&quot;&gt;&lt;/a&gt;9.4. 对 Producer Buffer的理解&lt;/h5&gt;&lt;p&gt;在大多数情况下，Consumer消费Message的速率是远不如Producer生产Message的速率的。所以Producer有一个缓存机制，将Broker还没来得及接收的Message缓存在内存中。缓存的大小可以通过buffer.memory配置，默认大小是32MB。默认存储时间为7天，这个时间可以通过设置Broker的offset.retention.minutes属性改变。&lt;/p&gt;
&lt;p&gt;如果Producer的缓存被打满后，Producer会被阻塞，阻塞的最大时间可以通过max.block.ms配置，默认大小是60秒。&lt;/p&gt;
&lt;p&gt;概括一下，就是当Producer生产Message的速率大于Broker接收Message（Consumer消费数据）的速率时，Producer会把Broker还没来得及接收的Message存在缓存里（内存），当存满设置的缓存大小后，Producer将不再发送Message给Broker，也就是进入阻塞状态，如果在设置的阻塞时间内，缓存还没有被释放出有用空间，那么Producer将抛出异常。&lt;/p&gt;
&lt;h5 id=&quot;9-5-幂等生产者&quot;&gt;&lt;a href=&quot;#9-5-幂等生产者&quot; class=&quot;headerlink&quot; title=&quot;9.5. 幂等生产者&quot;&gt;&lt;/a&gt;9.5. 幂等生产者&lt;/h5&gt;&lt;p&gt;消息交付可靠性保障 Kafka 对 Producer 和 Consumer 要处理的消息提供什么样的承诺。常见承诺有以下三种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;最多一次（at most once）：消息可能会丢失，但绝不会被重复发送。&lt;/li&gt;
&lt;li&gt;至少一次（at least once）：消息不会丢失，但有可能被重复发送。（kafka默认）&lt;/li&gt;
&lt;li&gt;精确一次（exactly once）：消息不会丢失，也不会被重复发送。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;指定 Producer 幂等性的方法很简单，仅需要设置一个参数即可，即 props.put(“enable.idempotence”, ture)，或 props.put(ProducerConfig.ENABLE_IDEMPOTENCE_CONFIG， true)。&lt;/p&gt;
&lt;p&gt;底层具体的原理很简单，就是经典的用空间去换时间的优化思路，即在 Broker 端多保存一些字段。当 Producer 发送了具有相同字段值的消息后，Broker 能够自动知晓这些消息已经重复了&lt;/p&gt;
&lt;p&gt;幂等性 Producer 作用范围&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;它只能保证单分区上的幂等性&lt;/strong&gt;，即一个幂等性 Producer 能够保证某个主题的一个分区上不出现重复消息，它无法实现多个分区的幂等性。其次，它只能实现单会话上的幂等性，不能实现跨会话的幂等性。这里的会话，你可以理解为 Producer 进程的一次运行。当你重启了 Producer 进程之后，这种幂等性保证就丧失了。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;事务&lt;/p&gt;
&lt;p&gt;事务型 Producer 能够保证将消息原子性地写入到多个分区中。这批消息要么全部写入成功，要么全部失败。另外，事务型 Producer 也不惧进程的重启。Producer 重启回来后，Kafka 依然保证它们发送消息的精确一次处理。&lt;/p&gt;
&lt;p&gt;设置事务型 Producer 的方法也很简单，满足两个要求即可：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;和幂等性 Producer 一样，开启 enable.idempotence &amp;#x3D; true。&lt;/li&gt;
&lt;li&gt;设置 Producer 端参数 transactional. id。最好为其设置一个有意义的名字。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;producer端可能发送重复消息，broker端有一套机制来去重（幂等性依赖seq number机制，事务依赖各种marker来标记）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Producer 发送消息到 Broker 时，会根据Paritition 机制选择将其存储到哪一个Partition。如果 Partition 机制设置合理，所有消息可以均匀分布到不同的 Partition里，这样就实现了负载均衡。指明 Partition 的情况下，直接将给定的 Value 作为 Partition 的值。没有指明 Partition 但有 Key 的情况下，将 Key 的 Hash 值与分区数取余得到 Partition 值。既没有 Partition 有没有 Key 的情况下，第一次调用时随机生成一个整数（后面每次调用都在这个整数上自增），将这个值与可用的分区数取余，得到 Partition 值，也就是常说的 Round-Robin 轮询算法。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;10-调优&quot;&gt;&lt;a href=&quot;#10-调优&quot; class=&quot;headerlink&quot; title=&quot;10. 调优&quot;&gt;&lt;/a&gt;10. 调优&lt;/h3&gt;&lt;h5 id=&quot;10-1-swap-的调优&quot;&gt;&lt;a href=&quot;#10-1-swap-的调优&quot; class=&quot;headerlink&quot; title=&quot;10.1. swap 的调优&quot;&gt;&lt;/a&gt;10.1. swap 的调优&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;swap 的调优。网上很多文章都提到设置其为 0，将 swap 完全禁掉以防止 Kafka 进程使用 swap 空间。我个人反倒觉得还是不要设置成 0 比较好，我们可以设置成一个较小的值。为什么？因为一旦设置成 0，当物理内存耗尽时，操作系统会触发 OOM killer 这个组件，它会随机挑选一个进程然后 kill 掉，即根本不给用户任何的预警。但如果设置成一个比较小的值，当开始使用 swap 空间时，你至少能够观测到 Broker 性能开始出现急剧下降，从而给你进一步调优和诊断问题的时间。基于这个考虑，建议将 swappniess 配置成一个接近 0 但不为 0 的值，比如 1。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;11-其他&quot;&gt;&lt;a href=&quot;#11-其他&quot; class=&quot;headerlink&quot; title=&quot;11. 其他&quot;&gt;&lt;/a&gt;11. 其他&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;kafka如何支持延迟消息队列&lt;ul&gt;
&lt;li&gt;利用定时任务调度利用定时任务来实现延迟消息是最好、最简单的办法。对于一个延迟消息来说，一个延迟到 30 分钟后才可以被消费的消息，也可以认为是 30 分钟后才可以发送。也就是说，你可以设定一个定时任务，这个任务会在 30 分钟后把消息发送到消息服务器上。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;每个分区独立一个文件存储，在分区数量较多时会退化成全局磁盘随机I&amp;#x2F;O，这也是Kafka在多Partition时吞吐量大幅下降的原因~&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;分区很多，并且都存在读写的场景才会触发。&lt;/li&gt;
&lt;li&gt;为什么Kafka分区过多会导致顺序读写变为随机读写&lt;ul&gt;
&lt;li&gt;因为数据是写入到硬盘的。 如果同时有很多个文件在同时往硬盘去读写的话。从硬盘的角度来看的话，就是同时在硬盘的不同位置去读写，此时硬盘就得去调度不同位置的读写。即使是SSD和NVME的盘，这种在频繁的在硬盘不同位置的读写就是会降低性能。从硬盘角度来看，就是在不同位置的随机读写。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当 Topic 的消息写入存在倾斜，某些分区消息堆积很多，此时选择哪种分区消费模式可以解决问题？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果数据可以丢弃，那么可以通过重置消费位点到最新来解决历史堆积，让消费者可以消费新的数据。不过，这个方案有缺点，重置位点之前的数据会丢失，如果消费性能还是跟不上的话，那么后续还是会堆积。&lt;/li&gt;
&lt;li&gt;如果数据不能丢弃，不用保证消费顺序，那么可以将消费模式切换到共享消费模式，则有多个消费者同时消费一个分区，可以极大地提升消费速度，还可以通过横向增加消费者，从根本上解决堆积问题。&lt;/li&gt;
&lt;li&gt;如果数据不能丢弃，且需要保证消费顺序，那么就只能从发送端入手，分析为何发送端写入倾斜，然后解决写入倾斜的问题。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Kafka 从生产到消费的全过程&lt;/p&gt;
&lt;p&gt;Kafka 的生产到消费总共经过生产者、Broker、消费者三个模块。大致的流程如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在生产端，客户端会先和 Broker 建立 TCP 连接，然后通过 Kafka 协议访问 Broker 的 Metadata 接口获取到集群的元数据信息。接着生产者会向 Topic 或分区发送数据，如果是发送到 Topic，那么在客户端会有消息分区分配的过程。因为 Kafka 协议具有批量发送语义，所以客户端会先在客户端缓存数据，然后根据一定的策略，通过异步线程将数据发送到 Broker。&lt;/li&gt;
&lt;li&gt;Broker 接收到数据后，会根据 Kafka 协议解析出请求内容，做好数据校验，然后重整数据结构，将数据按照分区的维度写入到底层不同的文件中。如果分区配置了副本，则消息数据会被同步到不同的 Broker 中进行保存。&lt;/li&gt;
&lt;li&gt;在消费端，Kafka 提供了消费分组消费和指定分区消费两种模式。消费端也会先经过寻址拿到完整的元数据信息，然后连接上不同的 Broker。如果是消费分组模式消费，则需要经过重平衡、消费分区分配流程，然后连接上对应的分区的 Leader，接着调用 Broker 的 Fetch 接口进行消费。最后一步也是需要提交消费进度来保存消费信息。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;哪些环节会存在性能瓶颈和数据可靠性风险？&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://developer.qcloudimg.com/http-save/7060564/02f5e70a5fe0d0e3460fec7af2dafcfb.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;影响消息队列性能和可靠性的因素很多&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;网络带宽与延迟：消息队列本质上还是一个I&amp;#x2F;O密集型系统，内部没有太多复杂的计算逻辑，因此网络无论对Producer、Broker还是Consumer来说都比较重要，网络一抖动，全链路的吞吐量可能就会受影响。&lt;/li&gt;
&lt;li&gt;Producer的发送模式：选择Oneway&amp;#x2F;Sync&amp;#x2F;Async不同的发送模式，会直接影响Producer的性能和可靠性。&lt;/li&gt;
&lt;li&gt;Broker的物理硬件：特别是磁盘和内存，会直接关系到Broker的存储和消费性能。&lt;/li&gt;
&lt;li&gt;Consumer的Rebalance：在Rebalance期间，整个消费会暂停，因此如何最大程度降低Rebalance的影响，对Consumer端来说比较重要。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Kafka 集群中修改配置 &amp;#x2F; 权限操作的流程？&lt;/p&gt;
&lt;p&gt;Kafka 修改配置 &amp;#x2F; 权限的实现，是每个 Broker 直接去监听 Broker 中的节点。Broker 会直接监听 ZooKeeper 上的节点，然后根据 Hook 到的信息，做对应的操作。比如修改集群和 Topic 配置，就是 Broker 通过直接监听 ZooKeeper 的不同子节点来实现的。这种方式的好处是，Broker 直接监听 ZooKeeper，避免 Controller 转发一道，从而避免让 Controller 成为瓶颈，整体链路更短，出问题的概率也更低。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;同一个Group中的不同Consumer实例可以订阅不同的Topic吗&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;可以的。虽然在实际使用中可能更多的还是同一个group的多个实例订阅相同的topic。&lt;/p&gt;
&lt;p&gt;可能无法消费到这个 consumer 没有订阅的主题, 导致某个 consumer 挂掉之后, 有些消息无法消费&lt;/p&gt;
&lt;p&gt;Kafka Broker 是如何持久化数据的。总的来说，Kafka 使用消息日志（Log）来保存数据，一个日志就是磁盘上一个只能追加写（Append-only）消息的物理文件。因为只能追加写入，故避免了缓慢的随机 I&amp;#x2F;O 操作，改为性能较好的顺序 I&amp;#x2F;O 写操作，这也是实现 Kafka 高吞吐量特性的一个重要手段。不过如果你不停地向一个日志写入消息，最终也会耗尽所有的磁盘空间，因此 Kafka 必然要定期地删除消息以回收磁盘。怎么删除呢？简单来说就是通过日志段（Log Segment）机制。在 Kafka 底层，一个日志又近一步细分成多个日志段，消息被追加写到当前最新的日志段中，当写满了一个日志段后，Kafka 会自动切分出一个新的日志段，并将老的日志段封存起来。Kafka 在后台还有定时任务会定期地检查老的日志段是否能够被删除，从而实现回收磁盘空间的目的。&lt;/p&gt;
&lt;p&gt;消费组相关&lt;/p&gt;
&lt;p&gt;开始分区1被消费者A消费，rebalance 后被消费者B消费，那么消费者B是对分区从头开始消费还是继承消费者A的位移继续消费？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果A提交了位移，那么rebalance过后B从A提交的位移处继续消费。如果A没有提交过位移，那么视consumer端参数auto.offset.reset值而定&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;每次重启一个服务，都会产生下线一次rebalance，上线一次rebalance？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;社区于2.4引入了静态成员变量，可以规避这个问题&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;rebalance时，全部实例都要参与重新分配。是否能参考 一致性哈希算法，尽量减少对全局的影响&lt;/p&gt;
&lt;p&gt;———————————-分割线&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;解释Kafka的Zookeeper是什么?我们可以在没有Zookeeper的情况下使用Kafka吗?&lt;ul&gt;
&lt;li&gt;Zookeeper是一个开放源码的、高性能的协调服务，它用于Kafka的分布式应用。不，不可能越过Zookeeper，直接联系Kafka broker。一旦Zookeeper停止工作，它就不能服务客户端请求。·Zookeeper主要用于在集群中不同节点之间进行通信&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Consumer的水平扩展是如何实现的呢？&lt;ul&gt;
&lt;li&gt;Kafka支持Consumer的水平扩展能力。可以让多个Consumer加入一个Consumer Group(消费组)，在一个Consumer Group中，每个分区只能分配给一个Consumer消费者，当Kafka服务端通过增加分区数量进行水平扩展后， 可以向Consumer Group中增加新的Consumer来提高整个Consumer Group的消费能力。当Consumer Group中的一个Consumer出现故障下线时，会通过Rebalance操作将下线Consumer，它负责处理的分区将分配给其他Consumer继续处理。当下线Consumer重新上线加人Consumer Group时，会再进行一次Rebalance操作，重新分配分区。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;为了避免磁盘被占满，Katka会周期性地删除陈旧的消息，删除策略是什么呢？&lt;ul&gt;
&lt;li&gt;Kafka中有两种“保留策略”：一种是根据消息保留的时间，当消息在Kafka中保存的时间超过了指定时间，就可以被删除; 另一种是根据Topic存储的数据大小，当Topic所占的日志文件大小大于一个阈值，则可以开始删除最旧的消息。Kafka会启动一个后台线程，定期检查是否存在可以删除的消息。“保留策略”的配置是非常灵活的，可以有全局的配置，也可以针对Topic进行配置覆盖全局配置。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;什么是broker？它的作用是什么？&lt;ul&gt;
&lt;li&gt;一个单独的Kafka Server就是一个Broker。Broker的主要工作就是接收生产者发过来的消息，分配offset，之后保存到磁盘中。同时，接收消费者、其他Broker的请求，根据请求类型进行相应处理并返回响应。在一般的生产环境中，一个Broker独占一台&lt;a href=&quot;https://cloud.tencent.com/product/cpm?from_column=20065&amp;from=20065&quot;&gt;物理服务器&lt;/a&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;同一分区的多个副本包括的消息是否是一致的？&lt;ul&gt;
&lt;li&gt;每个副本中包含的消息是一样的，但是在同一时刻，副本之间其实并不是完全一样的。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Consumer Group中消费者的数量是不是越多越好呢？&lt;ul&gt;
&lt;li&gt;Consumer Group中消费者的数量并不是越多越好，当其中消费者数量超过分区的数量时，会导致有消费者分配不到分区，从而造成消费者的浪费。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;详述一下消息在kafka中的生命周期？&lt;ul&gt;
&lt;li&gt;生产者会根据业务逻辑产生消息，之后根据路由规则将消息发送到指定分区的Leader副本所在的Broker上。在Kafka服务端接收到消息后，会将消息追加到Log中保存，之后Follower副本会与Leader副本进行同步，当ISR集合中所有副本都完成了此消息的同步后，则Leader副本的HW会增加，并向生产者返回响应。 消费者加人到Consumer Group时，会触发Rebalance操作将分区分配给不同的消费者消费。随后，消费者会恢复其消费位置，并向Kafka服务端发送拉取消息的请求，Leader副本会验证请求的offset以及其他相关信息，最后返回消息。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;某个分区的leader挂了，在切换选举到另外副本为leader时，这个副本还没同步之前的leader数据，这样数据就丢了 ？&lt;/p&gt;
&lt;p&gt;对于producer而言，如果在乎数据持久性，那么应该设置acks&amp;#x3D;all，这样当出现你说的这个情况时，producer会被显式通知消息发送失败，从而可以重试。&lt;/p&gt;
&lt;p&gt;Kafka中的ISR、AR又代表什么？ISR的伸缩又指什么&lt;/p&gt;
&lt;p&gt;Kafka中的HW、LEO、LSO、LW等分别代表什么？&lt;/p&gt;
&lt;p&gt;Kafka中的分区器、序列化器、拦截器是否了解？它们之间的处理顺序是什么？&lt;/p&gt;
&lt;p&gt;KafkaConsumer是非线程安全的，那么怎么样实现多线程消费？&lt;/p&gt;
&lt;p&gt;如果我指定了一个offset，Kafka怎么查找到对应的消息？&lt;/p&gt;
&lt;p&gt;聊一聊你对Kafka的Log Retention的理解&lt;/p&gt;
&lt;p&gt;聊一聊你对Kafka的Log Compaction的理解&lt;/p&gt;
&lt;p&gt;聊一聊你对Kafka底层存储的理解（页缓存、内核层、块层、设备层）&lt;/p&gt;
&lt;p&gt;聊一聊Kafka的延时操作的原理&lt;/p&gt;
&lt;p&gt;聊一聊Kafka控制器的作用&lt;/p&gt;
&lt;p&gt;消费再均衡的原理是什么？（提示：消费者协调器和消费组协调器）&lt;/p&gt;
&lt;p&gt;Kafka中的事务是怎么实现的（这题我去面试6加被问4次，照着答案念也要念十几分钟，面试官简直凑不要脸。实在记不住的话…只要简历上不写精通Kafka一般不会问到，我简历上写的是“熟悉Kafka，了解RabbitMQ….”）&lt;/p&gt;
&lt;p&gt;Kafka中有那些地方需要选举？这些地方的选举策略又有哪些？&lt;/p&gt;
&lt;p&gt;怎么计算Lag？(注意read_uncommitted和read_committed状态下的不同)&lt;/p&gt;
&lt;p&gt;Kafka的那些设计让它有如此高的性能？&lt;/p&gt;
&lt;p&gt;在使用Kafka的过程中遇到过什么困难？怎么解决的？&lt;/p&gt;
&lt;p&gt;怎么样才能确保Kafka极大程度上的可靠性？&lt;/p&gt;
&lt;p&gt;kafka认为写入成功是指写入页缓存成功还是数据刷到磁盘成功算成功呢？还是上次刷盘宕机失败的问题，页缓存的数据如果刷盘失败，是不是就丢了？这个异常会不会响应给生产者让其重发呢？&lt;/p&gt;
&lt;p&gt;写入到页缓存即认为成功。如果在flush之前机器就宕机了，的确这条数据在broker上就算丢失了。producer端表现如何取决于acks的设定。如果是acks&amp;#x3D;1而恰恰是leader broker在flush前宕机，那么的确有可能消息就丢失了，而且producer端不会重发——因为它认为是成功了。&lt;/p&gt;
&lt;p&gt;Producer 通过 metadata.max.age.ms定期更新元数据，在连接多个broker的情况下，producer是如何决定向哪个broker发起该请求？&lt;/p&gt;
&lt;p&gt;向它认为当前负载最少的节点发送请求，所谓负载最少就是指未完成请求数最少的broker&lt;/p&gt;
&lt;p&gt;开始分区1被消费者A消费，rebalance 后被消费者B消费，那么消费者B是对分区从头开始消费还是继承消费者A的位移继续消费？&lt;/p&gt;
&lt;p&gt;如果A提交了位移，那么rebalance过后B从A提交的位移处继续消费。如果A没有提交过位移，那么视consumer端参数auto.offset.reset值而定&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;为了提高效率,Kafka以批量的方式写入。一个batch就是一组消息的集合,这一组的数据都会进入同一个topic 和 partition(这个是根据 producer的配置来定的)。每一个消息都进行一次网络传输会很消耗性能,因此把消息收集到一起,再同时处理就高效的多了。当然,这样会引入更高的延迟以及吞吐量: batch 越大,同一时间处理的消息就越多。batch 通常都会进行压缩,这样在传输以及存储的时候效率都更高一些。&lt;/li&gt;
&lt;li&gt;消息都是以主题 Topic 的方式组织在一起,Topic 也可以理解成传统数据库里的表,或者文件系统里的一个目录。一个主题由 broker 上的一个或者多个 Partition 分区组成。在 Kafka 中数据是以 Log 的方式存储,一个 partition 就是一个单独的 Log。消息通过追加的方式写入日志文件,读取的时候则是从头开始 按照顺序读取。注意,一个主题通常都是由多个分区组成的,每个分区内部保证消息的顺序行,分区之间是不保证顺序的。如果你想要 kafka 中的数据按照时 间的先后顺序进行存储,那么可以设置分区数为 1。如下图所示,一个主题由 4 个分区组成,数据都以追加的方式写入这四个文件。分区的方式为 Kafka 提供 了良好的扩展性,每个分区都可以放在独立的服务器上,这样就相当于主题可以在多个机器间水平扩展,相对于单独的服务器,性能更好。&lt;/li&gt;
&lt;li&gt;Kafka 中主要有两种使用者:Producer 和 consumer&lt;ul&gt;
&lt;li&gt;Producer 用来创建消息。在发布订阅系统中,他们也被叫做 Publisher 发布者或 writer 写作者。通常情况下,消息都会进入特定的主题。默认情况下,生产者 不关系消息到底进入哪个分区,它会自动在多个分区间负载均衡。也有的时候,消息会进入特定的一个分区中。一般都是通过消息的 key 使用哈希的方式确定 它进入哪一个分区。这就意味着如果所有的消息都给定相同的 key,那么他们最终会进入同一个分区。生产者也可以使用自定义的分区器,这样消息可以进入 特定的分区。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Consumer 读取消息。在发布订阅系统中,也叫做 subscriber 订阅者或者 reader 阅读者。消费者订阅一个或者多个主题,然后按照顺序读取主题中的数据。消 费者需要记录已经读取到消息的位置,这个位置也被叫做 offset。每个消息在给定的分区中只有唯一固定的 offset。通过存储最后消费的 Offset,消费者应用 在重启或者停止之后,还可以继续从之前的位置读取。保存的机制可以是 zookeeper,或者 kafka 自己。&lt;/li&gt;
&lt;li&gt;消费者是以 consumer group 消费者组的方式工作,由一个或者多个消费者组成一个组,共同消费一个 topic。每个分区在同一时间只能由 group 中的一个消费 者读取,在下图中,有一个由三个消费者组成的 grouop,有一个消费者读取主题中的两个分区,另外两个分别读取一个分区。某个消费者读取某个分区,也 可以叫做某个消费者是某个分区的拥有者。&lt;/li&gt;
&lt;li&gt;在这种情况下,消费者可以通过水平扩展的方式同时读取大量的消息。另外,如果一个消费者失败了,那么其他的 group 成员会自动负载均衡读取之前失败的 消费者读取的分区。&lt;/li&gt;
&lt;li&gt;单独的 kafka 服务器也叫做 broker,Broker 从生产者那里获取消息,分配 offset,然后提交存储到磁盘年。他也会提供消费者,让消费者读取分区上的消息, 并把存储的消息传给消费者。依赖于一些精简资源,单独的 broker 也可以轻松的支持每秒数千个分区和百万级的消息。&lt;/li&gt;
&lt;li&gt;Kafka 的 broker 支持集群模式,在 Broker 组成的集群中,有一个节点也被叫做控制器(是在活跃的节点中自动选择的)。这个 controller 控制器负责管理整个 集群的操作,包括分区的分配、失败节点的检测等。一个 partition 只能出现在一个 broker 节点上,并且这个 Broker 也被叫做分区的 leader。一个分区可以分 配多个 Broker,这样可以做到多个机器之间备份的效果。这种多机备份在其中一个 broker 失败的时候,可以自动选举出其他的 broker 提供服务。然而, producer 和 consumer 都必须连接 leader 才能正常工作。&lt;/li&gt;
&lt;li&gt;Kafka 的一个重要特性就是支持数据的过期删除,数据可以在 Broker 上保留一段时间。Kafka 的 broker 支持针对 topic 设置保存的机制,可以按照大小配置也 可以按照时间配置。一旦达到其中的一个限制,可能是时间过期也可能是大小超过配置的数值,那么这部分的数据都会被清除掉。每个 topic 都可以配置它自 己的过期配置,因此消息可以按照业务的需要进行持久化保留。比如,一个数据追踪分析的 topic 可以保留几天时间,一些应用的指标信息则只需要保存几个 小时。topic 支持日志数据的压缩,这样 kafka 仅仅会保留最后一条日志生成的 key。这在修改日志类型的时候会非常有用。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;假设有个 Kafka 集群由 2 台 Broker 组成，有个主题有 5 个分区，当一个消费该主题的消费者程序启动时，你认为该程序会创建多少个 Socket 连接？为什么？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;整个生命周期里会建立4个连接，进入稳定的消费过程后，同时保持3个连接，以下是详细。 第一类连接：确定协调者和获取集群元数据。 一个，初期的时候建立，当第三类连接建立起来之后，这个连接会被关闭。 第二类连接：连接协调者，令其执行组成员管理操作。 一个 第三类连接：执行实际的消息获取。 两个分别会跟两台broker机器建立一个连接，总共两个TCP连接，同一个broker机器的不同分区可以复用一个socket。只有2个 Broker，5个分区的领导者副本，由zookeeper分配Leader，所以默认是均匀的，故有4个TCP连接。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;你是如何解决有序消息这个问题的？用的是哪种方案？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;只需要确保同一个业务的消息发送到同一个分区就可以保证同一个业务的消息是有序的。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;怎么保证同一个业务的消息必然发送到同一个分区呢？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;只需要生产者在发送消息的时候，根据业务特征，比如说业务 ID 计算出目标分区，在发送的时候显式地指定分区就可以了。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果你用的是单分区解决方案，那么有没有消息积压问题？如果有，你是怎么解决的？&lt;/p&gt;
&lt;p&gt;如果你用的是多分区解决方案，那么有没有分区负载不均衡的问题？如果有，你是怎么解决的？&lt;/p&gt;
&lt;p&gt;增加分区会引起消息失序&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;它还有另外一个缺点，就是如果中间有增加新的分区，那么就可能引起消息失序。比如说最开始 id 为 3 的订单消息 msg1 发到分区 0 上，但是这时候很不幸分区 0 上积攒了很多消息，所以 msg1 迟迟得不到消费。&lt;/li&gt;
&lt;li&gt;紧接着我们扩容，增加了一个新的分区。如果这时候来了一个消息 msg2，那么它会被转发到分区 3 上。分区 3 上面没有积攒什么数据，所以消费者 3 直接就消费了这个消息。&lt;/li&gt;
&lt;li&gt;这时候我们发现，本来 msg1 应该先于 msg2 被消费。而增加分区之后 msg2 反而被先消费了。这就是一个典型的消息失序场景。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;针对这个缺点我们也可以进一步提出解决方案。这个消息失序的场景解决起来倒也很简单，就是新增加了分区之后，这些新分区的消费者先等一段时间，比如说三分钟，确保同一个业务在其他分区上的消息已经被消费了。&lt;/p&gt;
&lt;p&gt;要解决这个问题也很容易。对于新加入的分区，可以暂停消费一段时间。比如说在前面的例子中，如果我们估算 msg1 会在一分钟内被消费，那么新加入的分区的消费者可以在三分钟后再开始消费。那么大概率 msg1 就会先于 msg2</summary>
        
      
    
    
    
    <category term="面试" scheme="https://bishoptylaor.github.io/categories/interview/"/>
    
    
    <category term="必看必会" scheme="https://bishoptylaor.github.io/tags/%E5%BF%85%E7%9C%8B%E5%BF%85%E4%BC%9A/"/>
    
    <category term="面试" scheme="https://bishoptylaor.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="kafka" scheme="https://bishoptylaor.github.io/tags/kafka/"/>
    
  </entry>
  
  <entry>
    <title>Golang语言面试题 - Grpc</title>
    <link href="https://bishoptylaor.github.io/interview/go/go-grpc/"/>
    <id>https://bishoptylaor.github.io/interview/go/go-grpc/</id>
    <published>2024-04-27T08:19:02.000Z</published>
    <updated>2024-05-22T06:32:41.074Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h3 id=&quot;grpc和http区别&quot;&gt;&lt;a href=&quot;#grpc和http区别&quot; class=&quot;headerlink&quot; title=&quot;grpc和http区别&quot;&gt;&lt;/a&gt;grpc和http区别&lt;/h3&gt;&lt;p&gt;gRPC和HTTP的主要区别在于它们的传输协议、序列化和反序列化方法、性能特性以及使用场景。具体如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;传输协议不同。gRPC使用基于二进制的HTTP&amp;#x2F;2作为传输协议，支持多路复用、头部压缩和服务器推送等功能，提高了性能和效率，而HTTP通常使用文本协议，基于HTTP&amp;#x2F;1.1或HTTP&amp;#x2F;2，HTTP&amp;#x2F;1.1是基于请求-响应模式的协议，每次请求都需要建立新的连接，HTTP&amp;#x2F;2引入了多路复用和头部压缩等功能。&lt;/li&gt;
&lt;li&gt;序列化和反序列化方法不同。gRPC使用Protocol Buffers（protobuf）作为默认的接口定义语言（IDL），用于描述数据结构和服务接口，protobuf是一种高效的二进制序列化格式，可以提供更小的数据包大小和更快的序列化&amp;#x2F;反序列化速度，而HTTP使用普通文本格式进行数据交换，通常使用JSON或XML作为数据的表示格式。&lt;/li&gt;
&lt;li&gt;性能特性不同。gRPC在性能方面优于HTTP，由于使用了二进制格式，因此传输速度更快、更稳定，而且gRPC通过使用连接池，实现客户端与服务端的长连接机制，使得延迟较低，在高网络带宽时表现更好，而HTTP设计目标是作为一种通用的、可扩展的协议，用于在客户端和服务器之间传输超文本数据，广泛用于Web应用程序和浏览器之间的通信。&lt;/li&gt;
&lt;li&gt;使用场景不同。gRPC通常用于服务之间的通信，特别是分布式系统中，例如微服务框架等，具有高性能、低延迟、易扩展等特点，是一个理想的分布式系统通信协议，而HTTP主要用于Web中浏览器和服务器之间的交互，在Web应用程序中非常常见。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;1.grpc底层用的什么协议?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;http2.0&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;2.http2.0和1.1的区别?&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;多路复用: 1.1每个请求必须是独立的TCP请求, 2.0采用多路复用, 一个TCP连接可以进行多次请求, 大大提升性能&lt;/li&gt;
&lt;li&gt;数据传输: 2.0引入数据流的概念, 允许不同请求在同一连接交错发送&lt;/li&gt;
&lt;li&gt;头部处理: 2.0 采用HPACK算法对头部数据进行压缩, 降低数据大小和网络开销&lt;/li&gt;
&lt;li&gt;二进制协议: http&amp;#x2F;1.1报文头信息必须是文本, 数据体可以是二进制,也可是文本。2.0 头信息和数据体都是二进制, 更加高效的处理数据&lt;/li&gt;
&lt;li&gt;错误处理: 1.1处理错误需要关闭连接, 2.0引入可以在不关闭连接的情况下处理错误&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;3.gRPC有几种请求模式?&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;简单模式: 客户端发起请求, 等待服务端响应. (例如普通的grpc定义message, 一次请求一次响应)&lt;/li&gt;
&lt;li&gt;服务端流式(长连接): 客户端发送请求, 服务端返回一个流, 客户端持续监听这个流, 反序列化其中的内容, 返回给用户,适用于客户端需要向服务端发送大量数据的情况, 如文件上传&lt;/li&gt;
&lt;li&gt;客户端流式(长连接): 客户端创建一个流, 将请求参数以流的方式给服务端, 服务端再返回单个响应, 适合服务端向客户端发送大量数据的情况, 例如实时数据传输&lt;/li&gt;
&lt;li&gt;双向流式: 允许客户端和服务端同时读写数据. 双方都可以随时开始和结束数据的发送. 适合双向数据传输模式&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;传统的http连接时短连接, 一次请求一次响应后, 连接就断开了, 然而, 客户端流式RPC和服务端流式RPC模式基于TCP长连接, 用于多次数据交换.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;4.protobuf了解过吗? 和有什么区别? 对比json有什么优势? 压缩率对比json来说能达到多少?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;和json的对比:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;protobuf使用二进制格式, json为文本格式, 所以protobuf的序列化和反序列化更加高效&lt;/li&gt;
&lt;li&gt;由于使用二进制传输, protobuf的体积通常更小&lt;/li&gt;
&lt;li&gt;protobuf是强类型的, 定义数据结构时必须指定每个字段的类型, 可以减少解析时的错误, json是弱类型的,</summary>
        
      
    
    
    
    <category term="面试" scheme="https://bishoptylaor.github.io/categories/interview/"/>
    
    <category term="go" scheme="https://bishoptylaor.github.io/categories/interview/go/"/>
    
    
  </entry>
  
  <entry>
    <title>Go语言 Slice 结构的底层实现</title>
    <link href="https://bishoptylaor.github.io/library/Golang/advanced-tutorial/go-slice/"/>
    <id>https://bishoptylaor.github.io/library/Golang/advanced-tutorial/go-slice/</id>
    <published>2024-04-27T01:10:08.000Z</published>
    <updated>2024-05-22T10:45:53.941Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h4 id=&quot;append-性能损耗&quot;&gt;&lt;a href=&quot;#append-性能损耗&quot; class=&quot;headerlink&quot; title=&quot;append 性能损耗&quot;&gt;&lt;/a&gt;append 性能损耗&lt;/h4&gt;&lt;p&gt;未指定长度或者长度不足时，双倍扩容（cap &amp;lt; 1024）; 1.25倍扩容(cap &amp;gt; 1024)。把元内存空间的数据拷贝过来，然后在新的内存空间继续append数据&lt;/p&gt;
&lt;p&gt;在 Go 1.18 以后，扩容使用threshold为临界点（源码中设置为256）&lt;br&gt;当slice容量 &amp;lt; 256时， 每次扩容为原来的两倍。当slice容量 &amp;gt; 256时， 每次增加(oldcap + 3*threshold) 3&amp;#x2F;4&lt;/p&gt;
&lt;h4 id=&quot;母子切片共享内存问题&quot;&gt;&lt;a href=&quot;#母子切片共享内存问题&quot; class=&quot;headerlink&quot; title=&quot;母子切片共享内存问题&quot;&gt;&lt;/a&gt;母子切片共享内存问题&lt;/h4&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;slicem := &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;([]&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;// len = 3, cap = 5 分配了5个空间，置入了3个数据&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;slices := slicem[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;] &lt;span class=&quot;comment&quot;&gt;// len = 2, cap = 4&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;最开始时，子切片和母切片共享母切片的内存空间，对子切片的修改会反映到母切片上，对子切片的 append 操作，会将数据添加到母切片预留的内存空间内。&lt;br&gt;如持续进行 append 操作，直到将母切片预留的内存空间完全消耗完毕后，二者就会发生内存分离，从此再无关系&lt;/p&gt;
&lt;h4 id=&quot;切片导致内存泄漏&quot;&gt;&lt;a href=&quot;#切片导致内存泄漏&quot; class=&quot;headerlink&quot; title=&quot;切片导致内存泄漏&quot;&gt;&lt;/a&gt;切片导致内存泄漏&lt;/h4&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Leak&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; []&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	parent := &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;([]&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	son := parent[&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; son&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;func 返回子切片，只要这个子切片没有被 GC 回收，子切片持有的母切片的内存空间就得不到释放，导致泄漏&lt;/p&gt;
&lt;h4 id=&quot;函数参数需要用切片指针么&quot;&gt;&lt;a href=&quot;#函数参数需要用切片指针么&quot; class=&quot;headerlink&quot; title=&quot;函数参数需要用切片指针么&quot;&gt;&lt;/a&gt;函数参数需要用切片指针么&lt;/h4&gt;&lt;p&gt;如果函数内部需要对切片的 len 和 cap 进行修改，且修改要反映在函数外部，那么需要传入切片的指针&lt;/p&gt;
&lt;h4 id=&quot;一边遍历一边修改切片&quot;&gt;&lt;a href=&quot;#一边遍历一边修改切片&quot; class=&quot;headerlink&quot; title=&quot;一边遍历一边修改切片&quot;&gt;&lt;/a&gt;一边遍历一边修改切片&lt;/h4&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;arr := []&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;&amp;#123;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// go 中 for-range 遍历的是原集合的拷贝&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i, m := &lt;span class=&quot;keyword&quot;&gt;range&lt;/span&gt; arr &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	m += &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 下方这种才能修改成功&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i, m := &lt;span class=&quot;keyword&quot;&gt;range&lt;/span&gt; arr &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	arr[i] = m + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span</summary>
        
      
    
    
    
    <category term="知识库" scheme="https://bishoptylaor.github.io/categories/library/"/>
    
    <category term="Golang" scheme="https://bishoptylaor.github.io/categories/library/Golang/"/>
    
    <category term="进阶教程笔记" scheme="https://bishoptylaor.github.io/categories/library/Golang/advanced-tutorial/"/>
    
    
    <category term="必看必会" scheme="https://bishoptylaor.github.io/tags/%E5%BF%85%E7%9C%8B%E5%BF%85%E4%BC%9A/"/>
    
    <category term="基础知识" scheme="https://bishoptylaor.github.io/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
    <category term="go" scheme="https://bishoptylaor.github.io/tags/go/"/>
    
    <category term="Slice" scheme="https://bishoptylaor.github.io/tags/Slice/"/>
    
  </entry>
  
  <entry>
    <title>Go设计模式23-中介模式</title>
    <link href="https://bishoptylaor.github.io/library/Golang/go-design-pattern/gdp-act/23-mediator/"/>
    <id>https://bishoptylaor.github.io/library/Golang/go-design-pattern/gdp-act/23-mediator/</id>
    <published>2024-04-26T13:35:46.000Z</published>
    <updated>2024-07-12T14:15:22.483Z</updated>
    
    
    
    
    <category term="知识库" scheme="https://bishoptylaor.github.io/categories/library/"/>
    
    <category term="Golang" scheme="https://bishoptylaor.github.io/categories/library/Golang/"/>
    
    <category term="设计模式之美" scheme="https://bishoptylaor.github.io/categories/library/Golang/go-design-pattern/"/>
    
    <category term="行为型模式" scheme="https://bishoptylaor.github.io/categories/library/Golang/go-design-pattern/gdp-act/"/>
    
    
    <category term="必看必会" scheme="https://bishoptylaor.github.io/tags/%E5%BF%85%E7%9C%8B%E5%BF%85%E4%BC%9A/"/>
    
    <category term="设计模式" scheme="https://bishoptylaor.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Go设计模式22-解释器模式</title>
    <link href="https://bishoptylaor.github.io/library/Golang/go-design-pattern/gdp-act/22-interpreter/"/>
    <id>https://bishoptylaor.github.io/library/Golang/go-design-pattern/gdp-act/22-interpreter/</id>
    <published>2024-04-26T12:35:46.000Z</published>
    <updated>2024-07-12T14:15:22.483Z</updated>
    
    
    
    
    <category term="知识库" scheme="https://bishoptylaor.github.io/categories/library/"/>
    
    <category term="Golang" scheme="https://bishoptylaor.github.io/categories/library/Golang/"/>
    
    <category term="设计模式之美" scheme="https://bishoptylaor.github.io/categories/library/Golang/go-design-pattern/"/>
    
    <category term="行为型模式" scheme="https://bishoptylaor.github.io/categories/library/Golang/go-design-pattern/gdp-act/"/>
    
    
    <category term="必看必会" scheme="https://bishoptylaor.github.io/tags/%E5%BF%85%E7%9C%8B%E5%BF%85%E4%BC%9A/"/>
    
    <category term="设计模式" scheme="https://bishoptylaor.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Go设计模式21-命令模式</title>
    <link href="https://bishoptylaor.github.io/library/Golang/go-design-pattern/gdp-act/21-command/"/>
    <id>https://bishoptylaor.github.io/library/Golang/go-design-pattern/gdp-act/21-command/</id>
    <published>2024-04-26T12:18:46.000Z</published>
    <updated>2024-07-12T14:15:22.483Z</updated>
    
    
    
    
    <category term="知识库" scheme="https://bishoptylaor.github.io/categories/library/"/>
    
    <category term="Golang" scheme="https://bishoptylaor.github.io/categories/library/Golang/"/>
    
    <category term="设计模式之美" scheme="https://bishoptylaor.github.io/categories/library/Golang/go-design-pattern/"/>
    
    <category term="行为型模式" scheme="https://bishoptylaor.github.io/categories/library/Golang/go-design-pattern/gdp-act/"/>
    
    
    <category term="必看必会" scheme="https://bishoptylaor.github.io/tags/%E5%BF%85%E7%9C%8B%E5%BF%85%E4%BC%9A/"/>
    
    <category term="设计模式" scheme="https://bishoptylaor.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Go设计模式20-备忘录模式</title>
    <link href="https://bishoptylaor.github.io/library/Golang/go-design-pattern/gdp-act/20-memento/"/>
    <id>https://bishoptylaor.github.io/library/Golang/go-design-pattern/gdp-act/20-memento/</id>
    <published>2024-04-26T11:35:46.000Z</published>
    <updated>2024-07-12T14:15:22.483Z</updated>
    
    
    
    
    <category term="知识库" scheme="https://bishoptylaor.github.io/categories/library/"/>
    
    <category term="Golang" scheme="https://bishoptylaor.github.io/categories/library/Golang/"/>
    
    <category term="设计模式之美" scheme="https://bishoptylaor.github.io/categories/library/Golang/go-design-pattern/"/>
    
    <category term="行为型模式" scheme="https://bishoptylaor.github.io/categories/library/Golang/go-design-pattern/gdp-act/"/>
    
    
    <category term="必看必会" scheme="https://bishoptylaor.github.io/tags/%E5%BF%85%E7%9C%8B%E5%BF%85%E4%BC%9A/"/>
    
    <category term="设计模式" scheme="https://bishoptylaor.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Go设计模式19-访问者模式</title>
    <link href="https://bishoptylaor.github.io/library/Golang/go-design-pattern/gdp-act/19-visitor/"/>
    <id>https://bishoptylaor.github.io/library/Golang/go-design-pattern/gdp-act/19-visitor/</id>
    <published>2024-04-26T11:09:46.000Z</published>
    <updated>2024-07-12T14:15:22.483Z</updated>
    
    
    
    
    <category term="知识库" scheme="https://bishoptylaor.github.io/categories/library/"/>
    
    <category term="Golang" scheme="https://bishoptylaor.github.io/categories/library/Golang/"/>
    
    <category term="设计模式之美" scheme="https://bishoptylaor.github.io/categories/library/Golang/go-design-pattern/"/>
    
    <category term="行为型模式" scheme="https://bishoptylaor.github.io/categories/library/Golang/go-design-pattern/gdp-act/"/>
    
    
    <category term="必看必会" scheme="https://bishoptylaor.github.io/tags/%E5%BF%85%E7%9C%8B%E5%BF%85%E4%BC%9A/"/>
    
    <category term="设计模式" scheme="https://bishoptylaor.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Go设计模式18-迭代器模式</title>
    <link href="https://bishoptylaor.github.io/library/Golang/go-design-pattern/gdp-act/18-iterator/"/>
    <id>https://bishoptylaor.github.io/library/Golang/go-design-pattern/gdp-act/18-iterator/</id>
    <published>2024-04-26T10:49:46.000Z</published>
    <updated>2024-07-12T14:15:22.460Z</updated>
    
    
    
    
    <category term="知识库" scheme="https://bishoptylaor.github.io/categories/library/"/>
    
    <category term="Golang" scheme="https://bishoptylaor.github.io/categories/library/Golang/"/>
    
    <category term="设计模式之美" scheme="https://bishoptylaor.github.io/categories/library/Golang/go-design-pattern/"/>
    
    <category term="行为型模式" scheme="https://bishoptylaor.github.io/categories/library/Golang/go-design-pattern/gdp-act/"/>
    
    
    <category term="必看必会" scheme="https://bishoptylaor.github.io/tags/%E5%BF%85%E7%9C%8B%E5%BF%85%E4%BC%9A/"/>
    
    <category term="设计模式" scheme="https://bishoptylaor.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Go设计模式17-状态模式</title>
    <link href="https://bishoptylaor.github.io/library/Golang/go-design-pattern/gdp-act/17-state/"/>
    <id>https://bishoptylaor.github.io/library/Golang/go-design-pattern/gdp-act/17-state/</id>
    <published>2024-04-26T10:25:46.000Z</published>
    <updated>2024-07-12T14:15:22.460Z</updated>
    
    
    
    
    <category term="知识库" scheme="https://bishoptylaor.github.io/categories/library/"/>
    
    <category term="Golang" scheme="https://bishoptylaor.github.io/categories/library/Golang/"/>
    
    <category term="设计模式之美" scheme="https://bishoptylaor.github.io/categories/library/Golang/go-design-pattern/"/>
    
    <category term="行为型模式" scheme="https://bishoptylaor.github.io/categories/library/Golang/go-design-pattern/gdp-act/"/>
    
    
    <category term="必看必会" scheme="https://bishoptylaor.github.io/tags/%E5%BF%85%E7%9C%8B%E5%BF%85%E4%BC%9A/"/>
    
    <category term="设计模式" scheme="https://bishoptylaor.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Go语言 Map 结构的底层实现</title>
    <link href="https://bishoptylaor.github.io/library/Golang/advanced-tutorial/go-map/"/>
    <id>https://bishoptylaor.github.io/library/Golang/advanced-tutorial/go-map/</id>
    <published>2024-04-26T10:21:40.000Z</published>
    <updated>2024-05-22T10:45:53.941Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h2 id=&quot;Golang-中的-map-详解&quot;&gt;&lt;a href=&quot;#Golang-中的-map-详解&quot; class=&quot;headerlink&quot; title=&quot;Golang 中的 map 详解&quot;&gt;&lt;/a&gt;Golang 中的 map 详解&lt;/h2&gt;&lt;h3 id=&quot;一、什么是-map？&quot;&gt;&lt;a href=&quot;#一、什么是-map？&quot; class=&quot;headerlink&quot; title=&quot;一、什么是 map？&quot;&gt;&lt;/a&gt;一、什么是 map？&lt;/h3&gt;&lt;h4 id=&quot;1、map-的定义&quot;&gt;&lt;a href=&quot;#1、map-的定义&quot; class=&quot;headerlink&quot; title=&quot;1、map 的定义&quot;&gt;&lt;/a&gt;1、map 的定义&lt;/h4&gt;&lt;p&gt;  在计算机科学里，被称为相关数组、map、符号表或者字典，是由一组 &amp;lt;key, value&amp;gt; 对组成的抽象数据结构，并且同一个 key 只会出现一次。&lt;br&gt;  两个关键点：map 是由 key-value 对组成的；key 只会出现一次。&lt;br&gt;  map 的设计也被称为 “The dictionary problem（字典问题）”，它的任务是设计一种数据结构用来维护一个集合的数据，并且可以同时对集合进行增删查改的操作。&lt;/p&gt;
&lt;h4 id=&quot;2、map-的数据结构&quot;&gt;&lt;a href=&quot;#2、map-的数据结构&quot; class=&quot;headerlink&quot; title=&quot;2、map 的数据结构&quot;&gt;&lt;/a&gt;2、map 的数据结构&lt;/h4&gt;&lt;p&gt;  最主要的数据结构有两种：哈希查找表（Hash table）、搜索树（Search tree）。&lt;/p&gt;
&lt;p&gt;哈希查找表（Hash table）&lt;br&gt;  哈希查找表使用哈希函数将 key 分配到不同的桶（bucket，也就是数组的不同 index），开销主要在哈希函数的计算以及数组的常数访问时间，在很多场景下，哈希查找表的性能很高。&lt;/p&gt;
&lt;p&gt;搜索树（Search tree）&lt;br&gt;  搜索树一般采用自平衡搜索树，包括：AVL 树，红黑树。&lt;br&gt;  哈希查找表的平均查找效率是 O(1)，最差是 O(N)，如果哈希函数设计的很好，最坏的情况基本不会出现。自平衡搜索树法的最差搜索效率是 O(logN)。遍历自平衡搜索树，返回的 key 序列，一般会按照从小到大的顺序；而哈希查找表则是乱序的。&lt;/p&gt;
&lt;h3 id=&quot;二、Golang-中-map-的类型&quot;&gt;&lt;a href=&quot;#二、Golang-中-map-的类型&quot; class=&quot;headerlink&quot; title=&quot;二、Golang 中 map 的类型&quot;&gt;&lt;/a&gt;二、Golang 中 map 的类型&lt;/h3&gt;&lt;p&gt;  Golang 中 map 是一个指针，占用 8 个字节。当使用 make 创建 map 时，底层调用的是 makemap() 函数，makemap() 函数返回的是一个指针，因为返回的是指针，所以 map 作为参数的时候，函数内部能修改map。&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;makemap&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(t *maptype, hint &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;, h *hmap)&lt;/span&gt;&lt;/span&gt; *hmap &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&quot;三、map-的底层实现&quot;&gt;&lt;a href=&quot;#三、map-的底层实现&quot; class=&quot;headerlink&quot; title=&quot;三、map 的底层实现&quot;&gt;&lt;/a&gt;三、map 的底层实现&lt;/h3&gt;&lt;p&gt;   源码位于 src&#92;runtime&#92;map.go 中。&lt;/p&gt;
&lt;p&gt;  golang 中 map 底层使用的是哈希查找表，用链表来解决哈希冲突。每个 map 的底层结构是 hmap，是由若干个结构为 bmap 的 bucket 组成的数组，每个 bucket 底层都采用链表结构。&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// A header for a Go map.  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; hmap &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// Note: the format of the hmap is also encoded in cmd/compile/internal/gc/reflect.go.   &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// Make sure this stays in sync with the compiler&amp;#x27;s definition.   &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	count     &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;    &lt;span class=&quot;comment&quot;&gt;// map中元素的数量，调用len()直接返回此值  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	flags     &lt;span class=&quot;type&quot;&gt;uint8&lt;/span&gt;  &lt;span class=&quot;comment&quot;&gt;// 状态标识符，key和value是否包指针、是否正在扩容、是否已经被迭代&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	B         &lt;span class=&quot;type&quot;&gt;uint8&lt;/span&gt;  &lt;span class=&quot;comment&quot;&gt;// map中桶数组的数量，桶数组的长度的对数，len(buckets) == 2^B，可以最多容纳 6.5 * 2 ^ B 个元素，6.5为装载因子  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	noverflow &lt;span class=&quot;type&quot;&gt;uint16&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;// 溢出桶的大概数量，当B小于16时是准确值，大于等于16时是大概的值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	hash0     &lt;span class=&quot;type&quot;&gt;uint32&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;// 哈希种子，用于计算哈希值，为哈希函数的结果引入一定的随机性&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	buckets    unsafe.Pointer &lt;span class=&quot;comment&quot;&gt;// 指向桶数组的指针，长度为 2^B ，如果元素个数为0，就为 nil  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	oldbuckets unsafe.Pointer &lt;span class=&quot;comment&quot;&gt;// 指向一个旧桶数组，用于扩容，它的长度是当前桶数组的一半, 扩容时非空  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	nevacuate  &lt;span class=&quot;type&quot;&gt;uintptr&lt;/span&gt;        &lt;span class=&quot;comment&quot;&gt;// 搬迁进度，小于此地址的桶数组迁移完成  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	extra *mapextra &lt;span class=&quot;comment&quot;&gt;// 可选字段，用于gc，指向所有的溢出桶，避免gc时扫描整个map，仅扫描所有溢出桶就足够了&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// mapextra holds fields that are not present on all maps.type &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mapextra &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;comment&quot;&gt;// If both key and elem do not contain pointers and are inline, then we mark bucket  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;comment&quot;&gt;// type as containing no pointers. This avoids scanning such maps.  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;comment&quot;&gt;// However, bmap.overflow is a pointer. In order to keep overflow buckets   &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;comment&quot;&gt;// alive, we store pointers to all overflow buckets in hmap.extra.overflow and hmap.extra.oldoverflow.   &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;comment&quot;&gt;// overflow and oldoverflow are only used if key and elem do not contain pointers.   &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;comment&quot;&gt;// overflow contains overflow buckets for hmap.buckets.  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;comment&quot;&gt;// oldoverflow contains overflow buckets for hmap.oldbuckets.  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;comment&quot;&gt;// The indirection allows to store a pointer to the slice in hiter.  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   overflow    *[]*bmap  &lt;span class=&quot;comment&quot;&gt;// 指针数组，指向所有溢出桶&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   oldoverflow *[]*bmap  &lt;span class=&quot;comment&quot;&gt;// 指针数组，发生扩容时，指向所有旧的溢出桶&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;comment&quot;&gt;// nextOverflow holds a pointer to a free overflow bucket.  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   nextOverflow *bmap  &lt;span class=&quot;comment&quot;&gt;// 指向所有溢出桶中下一个可以使用的溢出桶&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;


&lt;p&gt;bmap的结构：&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; bmap &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    tophash [bucketCnt]&lt;span class=&quot;type&quot;&gt;uint8&lt;/span&gt;    &lt;span class=&quot;comment&quot;&gt;// bucketCnt=8，// 存放key哈希值的高8位，用于决定kv键值对放在桶内的哪个位置&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//实际上编辑期间会动态生成一个新的结构体&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; bmap &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	topbits  [&lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;]&lt;span class=&quot;type&quot;&gt;uint8&lt;/span&gt;     &lt;span class=&quot;comment&quot;&gt;// 存放key哈希值的高8位，用于决定kv键值对放在桶内的哪个位置&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	keys     [&lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;]keytype   &lt;span class=&quot;comment&quot;&gt;// 存放key的数组&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	values   [&lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;]valuetype &lt;span class=&quot;comment&quot;&gt;// 存放value的数组&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	pad      &lt;span class=&quot;type&quot;&gt;uintptr&lt;/span&gt;      &lt;span class=&quot;comment&quot;&gt;// 用于对齐内存&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	overflow &lt;span class=&quot;type&quot;&gt;uintptr&lt;/span&gt;      &lt;span class=&quot;comment&quot;&gt;// 指向下一个桶，即溢出桶，拉链法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;


&lt;p&gt;buckets是一个bmap数组，数组的长度就是 2^B。每个bucket固定包含8个key和value，实现上面是一个固定的大小连续内存块，分成四部分：tophash 值，8个key值，8个value值，指向下个bucket的指针。&lt;/p&gt;
&lt;p&gt;tophash 值用于快速查找key是否在该bucket中，当插入和查询运行时都会使用哈希哈数对key做哈希运算，获取一个hashcode，取高8位存放在bmap tophash字段中。&lt;/p&gt;
&lt;p&gt;桶里面会最多装 8 个 key，这些 key 之所以会落入同一个桶，是因为它们经过哈希计算后，哈希结果是“一类”的。在桶内，又会根据 key 计算出来的 hash 值的高 8 位来决定 key 到底落入桶内的哪个位置（一个桶内最多有8个位置）。&lt;/p&gt;
&lt;p&gt;如图，B&amp;#x3D;5 表示hmap的有2^5&amp;#x3D;32个bmap，buckets是一个bmap数组，其长度为32，每个bmap有8个key。&lt;/p&gt;
&lt;p&gt;桶结构的很多字段得在编译时才会动态生成，比如 key 和 values 等&lt;/p&gt;
&lt;p&gt;桶结构中，之所以所有的 key 放一起，所有的 value 放一起，而不是 key&amp;#x2F;value 一对对的一起存放，目的便是在某些情况下可以省去pad字段，节省内存空间。由于内存对齐的原因，key0&amp;#x2F;value0&amp;#x2F;key1&amp;#x2F;value1… 这样的形式可能需要更多的补齐空间，比如 map[int64]int8 ，1字节的value后面需要补齐7个字节才能保证下一个key是 int64 对齐的。&lt;/p&gt;
&lt;p&gt;golang中的map使用的内存是不会收缩的，只会越用越多。&lt;/p&gt;
&lt;p&gt;每个 bucket 设计成最多只能放 8 个 key-value 对，如果有第 9 个 key-value 落入当前的 bucket，那就需要再构建一个溢出桶 bucket ，通过 overflow 指针连接起来。&lt;/p&gt;
&lt;h3 id=&quot;四、map-的扩容&quot;&gt;&lt;a href=&quot;#四、map-的扩容&quot; class=&quot;headerlink&quot; title=&quot;四、map 的扩容&quot;&gt;&lt;/a&gt;四、map 的扩容&lt;/h3&gt;&lt;h4 id=&quot;1、装载因子（平均每个桶存储的元素个数）&quot;&gt;&lt;a href=&quot;#1、装载因子（平均每个桶存储的元素个数）&quot; class=&quot;headerlink&quot; title=&quot;1、装载因子（平均每个桶存储的元素个数）&quot;&gt;&lt;/a&gt;1、装载因子（平均每个桶存储的元素个数）&lt;/h4&gt;&lt;p&gt;  Go的装载因子阈值常量：6.5，map 最多可容纳 6.5*2^B 个元素。&lt;/p&gt;
&lt;p&gt;  装载因子等于 map中元素的个数 &amp;#x2F; map的容量，即len(map) &amp;#x2F; 2^B。装载因子用来表示空闲位置的情况，装载因子越大，表明空闲位置越少，冲突也越多。随着装载因子的增大，哈希表线性探测的平均用时就会增加，这会影响哈希表的性能，当装载因子大于70%，哈希表的性能就会急剧下降，当装载因子达到100%，整个哈希表就会完全失效，这个时候，查找和插入任意元素的复杂度都是O(N),因为需要遍历所有元素。&lt;/p&gt;
&lt;p&gt;  另外装载因子与扩容、迁移等重新散列(rehash) 行为有直接关系：&lt;/p&gt;
&lt;p&gt;在程序运行时，会不断地进行插入、删除等，会导致 bucket 不均，内存利用率低，需要迁移。&lt;br&gt;在程序运行时，出现装载因子过大，需要做扩容，解决 bucket 过大的问题。&lt;br&gt;为什么装载因子是6.5？不是8？不是1？&lt;br&gt;  装载因子是哈希表中的一个重要指标，主要目的是为了平衡 buckets 的存储空间大小和查找元素时的性能高低。实际上这是 Go 官方的经过认真的测试得出的数字，一起来看看官方的这份测试报告。包含四个指标：&lt;/p&gt;
&lt;p&gt;loadFactor：负载因子，也叫装载因子；&lt;br&gt;%overflow：溢出率，有溢出 bukcet 的百分比；&lt;br&gt;bytes&amp;#x2F;entry：平均每对 key&amp;#x2F;alue 的开销字节数；&lt;br&gt;hitprobe：查找一个存在的 key 时，要查找的平均个数；&lt;br&gt;missprobe：查找一个不存在的 key 时，要查找的平均个数。&lt;/p&gt;
&lt;p&gt;  Go 官方发现：装载因子越大，填入的元素越多，空间利用率就越高，但发生冲突的几率就变大；反之，装数因子越小，填入的元素越少，冲突发生的几率减小，但空间利用率低，而且还会提高扩容操作的次数。&lt;/p&gt;
&lt;p&gt;  根据这份测试结果和讨论，Go 官方取了一个相对适中的值，把 Go 中的 map 的负数因子硬编码为 6.5，这就是 6.5 的选择缘由。这意味着在 Go 语言中，当 map存储的元素个数大于或等于 6.5*桶个数 时，就会发扩容行为。&lt;/p&gt;
&lt;h4 id=&quot;2、触发-map-扩容的时机（插入、删除key）&quot;&gt;&lt;a href=&quot;#2、触发-map-扩容的时机（插入、删除key）&quot; class=&quot;headerlink&quot; title=&quot;2、触发 map 扩容的时机（插入、删除key）&quot;&gt;&lt;/a&gt;2、触发 map 扩容的时机（插入、删除key）&lt;/h4&gt;&lt;p&gt;当装载因子超过6.5时，扩容一倍，属于增量扩容；&lt;br&gt;当使用的溢出桶过多时，重新分配一样大的内存空间，属于等量扩容；&lt;br&gt;（实际上没有扩容，主要是为了回收空闲的溢出桶，节省空间，提高 map 的查找和插入效率）&lt;br&gt;为什么会出现这种情况？&lt;br&gt;  这种情况可能是因为map删除的特性导致的。当我们不断向哈希表中插入数据，并且将他们又全部删除时，其内存占用并不会减少，因为删除只是将桶对应位置的tophash置nil而已。&lt;br&gt;  这种情况下，就会不断的积累溢出桶造成内存泄露，为了解决这种情况，采用了等量扩容的机制，一旦哈希表中出现了过多的溢出桶，会创建新桶保存数据，gc会清理掉老的溢出桶，从而避免内存泄露。&lt;/p&gt;
&lt;p&gt;如何定义溢出桶是否太多需要等量扩容呢？两种情况：&lt;/p&gt;
&lt;p&gt;当B小于15时，溢出桶的数量超过2^B，属于溢出桶数量太多，需要等量扩容；&lt;br&gt;当B大于等于15时，溢出桶数量超过2^15，属于溢出桶数量太多，需要等量扩容。&lt;/p&gt;
&lt;h4 id=&quot;3、扩容策略（怎么扩容？）&quot;&gt;&lt;a href=&quot;#3、扩容策略（怎么扩容？）&quot; class=&quot;headerlink&quot; title=&quot;3、扩容策略（怎么扩容？）&quot;&gt;&lt;/a&gt;3、扩容策略（怎么扩容？）&lt;/h4&gt;&lt;p&gt;  Go 会创建一个新的 buckets 数组，新的 buckets 数组的容量是旧buckets数组的两倍（或者和旧桶容量相同），将原始桶数组中的所有元素重新散列到新的桶数组中。这样做的目的是为了使每个桶中的元素数量尽可能平均分布，以提高查询效率。旧的buckets数组不会被直接删除，而是会把原来对旧数组的引用去掉，让GC来清除内存。&lt;/p&gt;
&lt;p&gt;  在map进行扩容迁移的期间，不会触发第二次扩容。只有在前一个扩容迁移工作完成后，map才能进行下一次扩容操作。&lt;/p&gt;
&lt;h4 id=&quot;4、搬迁策略&quot;&gt;&lt;a href=&quot;#4、搬迁策略&quot; class=&quot;headerlink&quot; title=&quot;4、搬迁策略&quot;&gt;&lt;/a&gt;4、搬迁策略&lt;/h4&gt;&lt;p&gt;  由于map扩容需要将原有的kv键值对搬迁到新的内存地址，如果一下子全部搬完，会非常的影响性能。go 中 map 的扩容采用渐进式的搬迁策略，原有的 key 并不会一次性搬迁完毕，一次性搬迁会造成比较大的延时，每次最多只会搬迁 2 个 bucket，将搬迁的O(N)开销均摊到O(1)的赋值和删除操作上。&lt;/p&gt;
&lt;p&gt;  上面说的 hashGrow() 函数实际上并没有真正地“搬迁”，它只是分配好了新的 buckets，并将老的 buckets 挂到了 oldbuckets 字段上。真正搬迁 buckets 的动作在 growWork() 函数中，而调用 growWork() 函数的动作是在 mapassign 和 mapdelete 函数中。也就是插入或修改、删除 key 的时候，都会尝试进行搬迁 buckets 的工作。先检查 oldbuckets 是否搬迁完毕，具体来说就是检查 oldbuckets 是否为 nil。&lt;/p&gt;
&lt;h3 id=&quot;五、解决哈希冲突&quot;&gt;&lt;a href=&quot;#五、解决哈希冲突&quot; class=&quot;headerlink&quot; title=&quot;五、解决哈希冲突&quot;&gt;&lt;/a&gt;五、解决哈希冲突&lt;/h3&gt;&lt;h4 id=&quot;1、开放寻址法&quot;&gt;&lt;a href=&quot;#1、开放寻址法&quot; class=&quot;headerlink&quot; title=&quot;1、开放寻址法&quot;&gt;&lt;/a&gt;1、开放寻址法&lt;/h4&gt;&lt;p&gt;  如果发生哈希冲突，从发生冲突的那个单元起，按一定的次序，不断重复，从哈希表中寻找一个空闲的单元，将该键值对存储在该单元中。具体的实现方式包括线性探测法、平方探测法、随机探测法和双重哈希法等。开放寻址法需要的表长度要大于等于所需要存放的元素数量。&lt;/p&gt;
&lt;h4 id=&quot;2、链地址法&quot;&gt;&lt;a href=&quot;#2、链地址法&quot; class=&quot;headerlink&quot; title=&quot;2、链地址法&quot;&gt;&lt;/a&gt;2、链地址法&lt;/h4&gt;&lt;p&gt;  基于数组 + 链表 实现哈希表，数组中每个元素都是一个链表，将每个桶都指向一个链表，当哈希冲突发生时，新的键值对会按顺序添加到该桶对应的链表的尾部。在查找特定键值对时，可以遍历该链表以查找与之匹配的键值对。&lt;/p&gt;
&lt;h4 id=&quot;3、两种方案的比较&quot;&gt;&lt;a href=&quot;#3、两种方案的比较&quot; class=&quot;headerlink&quot; title=&quot;3、两种方案的比较&quot;&gt;&lt;/a&gt;3、两种方案的比较&lt;/h4&gt;&lt;p&gt;内存利用率&lt;br&gt;  对于链地址法，基于 数组 + 链表</summary>
        
      
    
    
    
    <category term="知识库" scheme="https://bishoptylaor.github.io/categories/library/"/>
    
    <category term="Golang" scheme="https://bishoptylaor.github.io/categories/library/Golang/"/>
    
    <category term="进阶教程笔记" scheme="https://bishoptylaor.github.io/categories/library/Golang/advanced-tutorial/"/>
    
    
    <category term="必看必会" scheme="https://bishoptylaor.github.io/tags/%E5%BF%85%E7%9C%8B%E5%BF%85%E4%BC%9A/"/>
    
    <category term="基础知识" scheme="https://bishoptylaor.github.io/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
    <category term="go" scheme="https://bishoptylaor.github.io/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>Go设计模式16-职责链模式</title>
    <link href="https://bishoptylaor.github.io/library/Golang/go-design-pattern/gdp-act/16-chain/"/>
    <id>https://bishoptylaor.github.io/library/Golang/go-design-pattern/gdp-act/16-chain/</id>
    <published>2024-04-26T10:10:46.000Z</published>
    <updated>2024-07-12T14:15:22.460Z</updated>
    
    
    
    
    <category term="知识库" scheme="https://bishoptylaor.github.io/categories/library/"/>
    
    <category term="Golang" scheme="https://bishoptylaor.github.io/categories/library/Golang/"/>
    
    <category term="设计模式之美" scheme="https://bishoptylaor.github.io/categories/library/Golang/go-design-pattern/"/>
    
    <category term="行为型模式" scheme="https://bishoptylaor.github.io/categories/library/Golang/go-design-pattern/gdp-act/"/>
    
    
    <category term="必看必会" scheme="https://bishoptylaor.github.io/tags/%E5%BF%85%E7%9C%8B%E5%BF%85%E4%BC%9A/"/>
    
    <category term="设计模式" scheme="https://bishoptylaor.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Go设计模式15-策略模式</title>
    <link href="https://bishoptylaor.github.io/library/Golang/go-design-pattern/gdp-act/15-strategy/"/>
    <id>https://bishoptylaor.github.io/library/Golang/go-design-pattern/gdp-act/15-strategy/</id>
    <published>2024-04-26T09:59:46.000Z</published>
    <updated>2024-07-12T14:15:22.460Z</updated>
    
    
    
    
    <category term="知识库" scheme="https://bishoptylaor.github.io/categories/library/"/>
    
    <category term="Golang" scheme="https://bishoptylaor.github.io/categories/library/Golang/"/>
    
    <category term="设计模式之美" scheme="https://bishoptylaor.github.io/categories/library/Golang/go-design-pattern/"/>
    
    <category term="行为型模式" scheme="https://bishoptylaor.github.io/categories/library/Golang/go-design-pattern/gdp-act/"/>
    
    
    <category term="必看必会" scheme="https://bishoptylaor.github.io/tags/%E5%BF%85%E7%9C%8B%E5%BF%85%E4%BC%9A/"/>
    
    <category term="设计模式" scheme="https://bishoptylaor.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Go设计模式14-模板模式</title>
    <link href="https://bishoptylaor.github.io/library/Golang/go-design-pattern/gdp-act/14-template/"/>
    <id>https://bishoptylaor.github.io/library/Golang/go-design-pattern/gdp-act/14-template/</id>
    <published>2024-04-26T09:55:46.000Z</published>
    <updated>2024-07-12T14:15:22.460Z</updated>
    
    
    
    
    <category term="知识库" scheme="https://bishoptylaor.github.io/categories/library/"/>
    
    <category term="Golang" scheme="https://bishoptylaor.github.io/categories/library/Golang/"/>
    
    <category term="设计模式之美" scheme="https://bishoptylaor.github.io/categories/library/Golang/go-design-pattern/"/>
    
    <category term="行为型模式" scheme="https://bishoptylaor.github.io/categories/library/Golang/go-design-pattern/gdp-act/"/>
    
    
    <category term="必看必会" scheme="https://bishoptylaor.github.io/tags/%E5%BF%85%E7%9C%8B%E5%BF%85%E4%BC%9A/"/>
    
    <category term="设计模式" scheme="https://bishoptylaor.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Go设计模式13-观察者模式</title>
    <link href="https://bishoptylaor.github.io/library/Golang/go-design-pattern/gdp-act/13-observer/"/>
    <id>https://bishoptylaor.github.io/library/Golang/go-design-pattern/gdp-act/13-observer/</id>
    <published>2024-04-26T09:50:46.000Z</published>
    <updated>2024-07-12T14:15:22.460Z</updated>
    
    
    
    
    <category term="知识库" scheme="https://bishoptylaor.github.io/categories/library/"/>
    
    <category term="Golang" scheme="https://bishoptylaor.github.io/categories/library/Golang/"/>
    
    <category term="设计模式之美" scheme="https://bishoptylaor.github.io/categories/library/Golang/go-design-pattern/"/>
    
    <category term="行为型模式" scheme="https://bishoptylaor.github.io/categories/library/Golang/go-design-pattern/gdp-act/"/>
    
    
    <category term="必看必会" scheme="https://bishoptylaor.github.io/tags/%E5%BF%85%E7%9C%8B%E5%BF%85%E4%BC%9A/"/>
    
    <category term="设计模式" scheme="https://bishoptylaor.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Go设计模式12-享元模式</title>
    <link href="https://bishoptylaor.github.io/library/Golang/go-design-pattern/gdp-struct/12-flyweight/"/>
    <id>https://bishoptylaor.github.io/library/Golang/go-design-pattern/gdp-struct/12-flyweight/</id>
    <published>2024-04-26T09:30:46.000Z</published>
    <updated>2024-07-12T14:15:22.459Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;按照课程中的例子来理解，就是象棋棋子作为享元，可以被所有的对局共享，以达到减少内存的目的&lt;/p&gt;
</summary>
        
      
    
    
    
    <category term="知识库" scheme="https://bishoptylaor.github.io/categories/library/"/>
    
    <category term="Golang" scheme="https://bishoptylaor.github.io/categories/library/Golang/"/>
    
    <category term="设计模式之美" scheme="https://bishoptylaor.github.io/categories/library/Golang/go-design-pattern/"/>
    
    <category term="结构型模式" scheme="https://bishoptylaor.github.io/categories/library/Golang/go-design-pattern/gdp-struct/"/>
    
    
    <category term="必看必会" scheme="https://bishoptylaor.github.io/tags/%E5%BF%85%E7%9C%8B%E5%BF%85%E4%BC%9A/"/>
    
    <category term="设计模式" scheme="https://bishoptylaor.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Go设计模式11-组合模式</title>
    <link href="https://bishoptylaor.github.io/library/Golang/go-design-pattern/gdp-struct/11-composite/"/>
    <id>https://bishoptylaor.github.io/library/Golang/go-design-pattern/gdp-struct/11-composite/</id>
    <published>2024-04-26T09:24:46.000Z</published>
    <updated>2024-07-12T14:15:22.459Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;比较简单的例子是 人员架构中</summary>
        
      
    
    
    
    <category term="知识库" scheme="https://bishoptylaor.github.io/categories/library/"/>
    
    <category term="Golang" scheme="https://bishoptylaor.github.io/categories/library/Golang/"/>
    
    <category term="设计模式之美" scheme="https://bishoptylaor.github.io/categories/library/Golang/go-design-pattern/"/>
    
    <category term="结构型模式" scheme="https://bishoptylaor.github.io/categories/library/Golang/go-design-pattern/gdp-struct/"/>
    
    
    <category term="必看必会" scheme="https://bishoptylaor.github.io/tags/%E5%BF%85%E7%9C%8B%E5%BF%85%E4%BC%9A/"/>
    
    <category term="设计模式" scheme="https://bishoptylaor.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Go设计模式10-门面模式</title>
    <link href="https://bishoptylaor.github.io/library/Golang/go-design-pattern/gdp-struct/10-facade/"/>
    <id>https://bishoptylaor.github.io/library/Golang/go-design-pattern/gdp-struct/10-facade/</id>
    <published>2024-04-26T09:20:46.000Z</published>
    <updated>2024-07-12T14:15:22.485Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;简单来理解就是 有登录和注册两个基础功能，对外统一封装成</summary>
        
      
    
    
    
    <category term="知识库" scheme="https://bishoptylaor.github.io/categories/library/"/>
    
    <category term="Golang" scheme="https://bishoptylaor.github.io/categories/library/Golang/"/>
    
    <category term="设计模式之美" scheme="https://bishoptylaor.github.io/categories/library/Golang/go-design-pattern/"/>
    
    <category term="结构型模式" scheme="https://bishoptylaor.github.io/categories/library/Golang/go-design-pattern/gdp-struct/"/>
    
    
    <category term="必看必会" scheme="https://bishoptylaor.github.io/tags/%E5%BF%85%E7%9C%8B%E5%BF%85%E4%BC%9A/"/>
    
    <category term="设计模式" scheme="https://bishoptylaor.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Go设计模式09-适配器模式</title>
    <link href="https://bishoptylaor.github.io/library/Golang/go-design-pattern/gdp-struct/09-adapter/"/>
    <id>https://bishoptylaor.github.io/library/Golang/go-design-pattern/gdp-struct/09-adapter/</id>
    <published>2024-04-26T09:17:46.000Z</published>
    <updated>2024-07-12T14:15:22.459Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;简单理解是有两个不同的业务系统，需要同时完成同一种业务动作，可以封装后统一提供给上层调用&lt;/p&gt;
</summary>
        
      
    
    
    
    <category term="知识库" scheme="https://bishoptylaor.github.io/categories/library/"/>
    
    <category term="Golang" scheme="https://bishoptylaor.github.io/categories/library/Golang/"/>
    
    <category term="设计模式之美" scheme="https://bishoptylaor.github.io/categories/library/Golang/go-design-pattern/"/>
    
    <category term="结构型模式" scheme="https://bishoptylaor.github.io/categories/library/Golang/go-design-pattern/gdp-struct/"/>
    
    
    <category term="必看必会" scheme="https://bishoptylaor.github.io/tags/%E5%BF%85%E7%9C%8B%E5%BF%85%E4%BC%9A/"/>
    
    <category term="设计模式" scheme="https://bishoptylaor.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Go设计模式08-装饰器模式</title>
    <link href="https://bishoptylaor.github.io/library/Golang/go-design-pattern/gdp-struct/08-decorator/"/>
    <id>https://bishoptylaor.github.io/library/Golang/go-design-pattern/gdp-struct/08-decorator/</id>
    <published>2024-04-26T04:30:46.000Z</published>
    <updated>2024-07-12T14:15:22.483Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h2 id=&quot;代码实现&quot;&gt;&lt;a href=&quot;#代码实现&quot; class=&quot;headerlink&quot; title=&quot;代码实现&quot;&gt;&lt;/a&gt;代码实现&lt;/h2&gt;&lt;p&gt;下面是一个简单的画画的例子，默认的 &lt;code&gt;Line&lt;/code&gt;  只有基础的画画功能， &lt;code&gt;ColorLine&lt;/code&gt;  为他加上了颜色，本质上是对现有功能类进行包装，增加新功能点&lt;/p&gt;
&lt;h3 id=&quot;Code&quot;&gt;&lt;a href=&quot;#Code&quot; class=&quot;headerlink&quot; title=&quot;Code&quot;&gt;&lt;/a&gt;Code&lt;/h3&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; decorator  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// IDraw IDraw  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; IDraw &lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   Draw() &lt;span class=&quot;type&quot;&gt;string&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Line 划线  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; Line &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt;&amp;#123;&amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Draw Draw  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(l Line)&lt;/span&gt;&lt;/span&gt; Draw() &lt;span class=&quot;type&quot;&gt;string&lt;/span&gt; &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;quot;Drawing a line here&amp;quot;&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// ColorLine 有颜色的线  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; ColorLine &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   line IDraw  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   color  &lt;span class=&quot;type&quot;&gt;string&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// NewColorLine NewColorLine  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;NewColorLine&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(line IDraw, color &lt;span class=&quot;type&quot;&gt;string&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; ColorLine &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; ColorLine&amp;#123;color: color, line: line&amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Draw Draw  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(c ColorLine)&lt;/span&gt;&lt;/span&gt; Draw() &lt;span class=&quot;type&quot;&gt;string&lt;/span&gt; &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; c.line.Draw() + &lt;span class=&quot;string&quot;&gt;&amp;quot;, color is &amp;quot;&lt;/span&gt; + c.color  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&quot;单元测试&quot;&gt;&lt;a href=&quot;#单元测试&quot; class=&quot;headerlink&quot; title=&quot;单元测试&quot;&gt;&lt;/a&gt;单元测试&lt;/h3&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;TestColorLine_Draw&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(t *testing.T)&lt;/span&gt;&lt;/span&gt; &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   l := Line&amp;#123;&amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   ncl := NewColorLine(sq, &lt;span class=&quot;string&quot;&gt;&amp;quot;red&amp;quot;&lt;/span&gt;)  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   got := ncl.Draw()  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   assert.Equal(t, &lt;span class=&quot;string&quot;&gt;&amp;quot;Drawing a line here, color is red&amp;quot;&lt;/span&gt;, got)  &lt;/span&gt;&lt;br&gt;&lt;span</summary>
        
      
    
    
    
    <category term="知识库" scheme="https://bishoptylaor.github.io/categories/library/"/>
    
    <category term="Golang" scheme="https://bishoptylaor.github.io/categories/library/Golang/"/>
    
    <category term="设计模式之美" scheme="https://bishoptylaor.github.io/categories/library/Golang/go-design-pattern/"/>
    
    <category term="结构型模式" scheme="https://bishoptylaor.github.io/categories/library/Golang/go-design-pattern/gdp-struct/"/>
    
    
    <category term="必看必会" scheme="https://bishoptylaor.github.io/tags/%E5%BF%85%E7%9C%8B%E5%BF%85%E4%BC%9A/"/>
    
    <category term="设计模式" scheme="https://bishoptylaor.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Go设计模式07-桥接模式</title>
    <link href="https://bishoptylaor.github.io/library/Golang/go-design-pattern/gdp-struct/07-bridge/"/>
    <id>https://bishoptylaor.github.io/library/Golang/go-design-pattern/gdp-struct/07-bridge/</id>
    <published>2024-04-26T04:20:46.000Z</published>
    <updated>2024-07-12T14:15:22.483Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h2 id=&quot;代码实现&quot;&gt;&lt;a href=&quot;#代码实现&quot; class=&quot;headerlink&quot; title=&quot;代码实现&quot;&gt;&lt;/a&gt;代码实现&lt;/h2&gt;&lt;h3 id=&quot;Code&quot;&gt;&lt;a href=&quot;#Code&quot; class=&quot;headerlink&quot; title=&quot;Code&quot;&gt;&lt;/a&gt;Code&lt;/h3&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; bridge  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// IMsgSender IMsgSender  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; IMsgSender &lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   Send(msg &lt;span class=&quot;type&quot;&gt;string&lt;/span&gt;) &lt;span class=&quot;type&quot;&gt;error&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// EmailMsgSender 发送邮件  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 可能还有 电话、短信等各种实现  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; EmailMsgSender &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   emails []&lt;span class=&quot;type&quot;&gt;string&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// NewEmailMsgSender NewEmailMsgSender  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;NewEmailMsgSender&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(emails []&lt;span class=&quot;type&quot;&gt;string&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; *EmailMsgSender &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;amp;EmailMsgSender&amp;#123;emails: emails&amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Send Send  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(s *EmailMsgSender)&lt;/span&gt;&lt;/span&gt; Send(msg &lt;span class=&quot;type&quot;&gt;string&lt;/span&gt;) &lt;span class=&quot;type&quot;&gt;error&lt;/span&gt; &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;comment&quot;&gt;// 这里去发送消息  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// INotification 通知接口  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; INotification &lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   Notify(msg &lt;span class=&quot;type&quot;&gt;string&lt;/span&gt;) &lt;span class=&quot;type&quot;&gt;error&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// ErrorNotification 错误通知  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 后面可能还有 warning 各种级别  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; ErrorNotification &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   sender IMsgSender  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// NewErrorNotification NewErrorNotification  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;NewErrorNotification&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(sender IMsgSender)&lt;/span&gt;&lt;/span&gt; *ErrorNotification &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;amp;ErrorNotification&amp;#123;sender: sender&amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Notify 发送通知  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(n *ErrorNotification)&lt;/span&gt;&lt;/span&gt; Notify(msg &lt;span class=&quot;type&quot;&gt;string&lt;/span&gt;) &lt;span class=&quot;type&quot;&gt;error&lt;/span&gt; &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; n.sender.Send(msg)  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&quot;单元测试&quot;&gt;&lt;a href=&quot;#单元测试&quot; class=&quot;headerlink&quot; title=&quot;单元测试&quot;&gt;&lt;/a&gt;单元测试&lt;/h3&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;TestErrorNotification_Notify&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(t *testing.T)&lt;/span&gt;&lt;/span&gt; &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   sender := NewEmailMsgSender([]&lt;span class=&quot;type&quot;&gt;string&lt;/span&gt;&amp;#123;&lt;span class=&quot;string&quot;&gt;&amp;quot;test@test.com&amp;quot;&lt;/span&gt;&amp;#125;)  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   n := NewErrorNotification(sender)  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   err := n.Notify(&lt;span class=&quot;string&quot;&gt;&amp;quot;test msg&amp;quot;&lt;/span&gt;)  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   assert.Nil(t, err)  &lt;/span&gt;&lt;br&gt;&lt;span</summary>
        
      
    
    
    
    <category term="知识库" scheme="https://bishoptylaor.github.io/categories/library/"/>
    
    <category term="Golang" scheme="https://bishoptylaor.github.io/categories/library/Golang/"/>
    
    <category term="设计模式之美" scheme="https://bishoptylaor.github.io/categories/library/Golang/go-design-pattern/"/>
    
    <category term="结构型模式" scheme="https://bishoptylaor.github.io/categories/library/Golang/go-design-pattern/gdp-struct/"/>
    
    
    <category term="必看必会" scheme="https://bishoptylaor.github.io/tags/%E5%BF%85%E7%9C%8B%E5%BF%85%E4%BC%9A/"/>
    
    <category term="设计模式" scheme="https://bishoptylaor.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Go设计模式06-代理模式</title>
    <link href="https://bishoptylaor.github.io/library/Golang/go-design-pattern/gdp-struct/06-proxy/"/>
    <id>https://bishoptylaor.github.io/library/Golang/go-design-pattern/gdp-struct/06-proxy/</id>
    <published>2024-04-26T04:10:46.000Z</published>
    <updated>2024-07-12T14:15:22.458Z</updated>
    
    
    
    
    <category term="知识库" scheme="https://bishoptylaor.github.io/categories/library/"/>
    
    <category term="Golang" scheme="https://bishoptylaor.github.io/categories/library/Golang/"/>
    
    <category term="设计模式之美" scheme="https://bishoptylaor.github.io/categories/library/Golang/go-design-pattern/"/>
    
    <category term="结构型模式" scheme="https://bishoptylaor.github.io/categories/library/Golang/go-design-pattern/gdp-struct/"/>
    
    
    <category term="必看必会" scheme="https://bishoptylaor.github.io/tags/%E5%BF%85%E7%9C%8B%E5%BF%85%E4%BC%9A/"/>
    
    <category term="设计模式" scheme="https://bishoptylaor.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Go设计模式05-创造者模式总结</title>
    <link href="https://bishoptylaor.github.io/library/Golang/go-design-pattern/gdp-create/05-create-summarize/"/>
    <id>https://bishoptylaor.github.io/library/Golang/go-design-pattern/gdp-create/05-create-summarize/</id>
    <published>2024-04-26T03:58:46.000Z</published>
    <updated>2024-07-12T14:15:22.460Z</updated>
    
    
    
    
    <category term="知识库" scheme="https://bishoptylaor.github.io/categories/library/"/>
    
    <category term="Golang" scheme="https://bishoptylaor.github.io/categories/library/Golang/"/>
    
    <category term="设计模式之美" scheme="https://bishoptylaor.github.io/categories/library/Golang/go-design-pattern/"/>
    
    <category term="创建型模式" scheme="https://bishoptylaor.github.io/categories/library/Golang/go-design-pattern/gdp-create/"/>
    
    
  </entry>
  
  <entry>
    <title>Go设计模式04-原型模式</title>
    <link href="https://bishoptylaor.github.io/library/Golang/go-design-pattern/gdp-create/04-prototype/"/>
    <id>https://bishoptylaor.github.io/library/Golang/go-design-pattern/gdp-create/04-prototype/</id>
    <published>2024-04-26T03:57:19.000Z</published>
    <updated>2024-07-12T14:15:22.460Z</updated>
    
    
    
    
    <category term="知识库" scheme="https://bishoptylaor.github.io/categories/library/"/>
    
    <category term="Golang" scheme="https://bishoptylaor.github.io/categories/library/Golang/"/>
    
    <category term="设计模式之美" scheme="https://bishoptylaor.github.io/categories/library/Golang/go-design-pattern/"/>
    
    <category term="创建型模式" scheme="https://bishoptylaor.github.io/categories/library/Golang/go-design-pattern/gdp-create/"/>
    
    
    <category term="必看必会" scheme="https://bishoptylaor.github.io/tags/%E5%BF%85%E7%9C%8B%E5%BF%85%E4%BC%9A/"/>
    
    <category term="设计模式" scheme="https://bishoptylaor.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Go设计模式03-构造模式</title>
    <link href="https://bishoptylaor.github.io/library/Golang/go-design-pattern/gdp-create/03-builder/"/>
    <id>https://bishoptylaor.github.io/library/Golang/go-design-pattern/gdp-create/03-builder/</id>
    <published>2024-04-26T03:42:46.000Z</published>
    <updated>2024-07-12T14:15:22.459Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h2 id=&quot;代码实现&quot;&gt;&lt;a href=&quot;#代码实现&quot; class=&quot;headerlink&quot; title=&quot;代码实现&quot;&gt;&lt;/a&gt;代码实现&lt;/h2&gt;&lt;p&gt;其实在 Golang 中对于创建类参数比较多的对象的时候，我们常见的做法是必填参数直接传递，可选参数通过传递可变的方法进行创建。&lt;br&gt;本文会先实现课程中的建造者模式，然后再实现我们常用的方式。&lt;/p&gt;
&lt;h3 id=&quot;建造者模式&quot;&gt;&lt;a href=&quot;#建造者模式&quot; class=&quot;headerlink&quot; title=&quot;建造者模式&quot;&gt;&lt;/a&gt;建造者模式&lt;/h3&gt;&lt;h4 id=&quot;代码&quot;&gt;&lt;a href=&quot;#代码&quot; class=&quot;headerlink&quot; title=&quot;代码&quot;&gt;&lt;/a&gt;代码&lt;/h4&gt;&lt;p&gt;通过下面可以看到，使用 Go 编写建造者模式的代码其实会很长，这些是它的一个缺点，所以如果不是参数的校验逻辑很复杂的情况下一般我们在 Go 中不会采用这种方式，而会采用后面的另外一种方式&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;95&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; builder  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;quot;fmt&amp;quot;&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; (  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   defaultMaxTotal = &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   defaultMaxIdle  = &lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   defaultMinIdle  = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;)  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// ResourcePoolConfig resource pooltype ResourcePoolConfig struct &amp;#123;  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   name     &lt;span class=&quot;type&quot;&gt;string&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   maxTotal &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   maxIdle  &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   minIdle  &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// ResourcePoolConfigBuilder 用于构建 ResourcePoolConfig  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; ResourcePoolConfigBuilder &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   name     &lt;span class=&quot;type&quot;&gt;string&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   maxTotal &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   maxIdle  &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   minIdle  &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// SetName SetName  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(b *ResourcePoolConfigBuilder)&lt;/span&gt;&lt;/span&gt; SetName(name &lt;span class=&quot;type&quot;&gt;string&lt;/span&gt;) &lt;span class=&quot;type&quot;&gt;error&lt;/span&gt; &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; name == &lt;span class=&quot;string&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt; &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; fmt.Errorf(&lt;span class=&quot;string&quot;&gt;&amp;quot;name can not be empty&amp;quot;&lt;/span&gt;)  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   b.name = name  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// SetMinIdle SetMinIdle  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(b *ResourcePoolConfigBuilder)&lt;/span&gt;&lt;/span&gt; SetMinIdle(minIdle &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;) &lt;span class=&quot;type&quot;&gt;error&lt;/span&gt; &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; minIdle &amp;lt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; fmt.Errorf(&lt;span class=&quot;string&quot;&gt;&amp;quot;max tatal cannot &amp;lt; 0, input: %d&amp;quot;&lt;/span&gt;, minIdle)  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   b.minIdle = minIdle  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// SetMaxIdle SetMaxIdle  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(b *ResourcePoolConfigBuilder)&lt;/span&gt;&lt;/span&gt; SetMaxIdle(maxIdle &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;) &lt;span class=&quot;type&quot;&gt;error&lt;/span&gt; &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; maxIdle &amp;lt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; fmt.Errorf(&lt;span class=&quot;string&quot;&gt;&amp;quot;max tatal cannot &amp;lt; 0, input: %d&amp;quot;&lt;/span&gt;, maxIdle)  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   b.maxIdle = maxIdle  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// SetMaxTotal SetMaxTotal  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(b *ResourcePoolConfigBuilder)&lt;/span&gt;&lt;/span&gt; SetMaxTotal(maxTotal &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;) &lt;span class=&quot;type&quot;&gt;error&lt;/span&gt; &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; maxTotal &amp;lt;= &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; fmt.Errorf(&lt;span class=&quot;string&quot;&gt;&amp;quot;max tatal cannot &amp;lt;= 0, input: %d&amp;quot;&lt;/span&gt;, maxTotal)  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   b.maxTotal = maxTotal  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Build Build  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(b *ResourcePoolConfigBuilder)&lt;/span&gt;&lt;/span&gt; Build() (*ResourcePoolConfig, &lt;span class=&quot;type&quot;&gt;error&lt;/span&gt;) &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; b.name == &lt;span class=&quot;string&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt; &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;, fmt.Errorf(&lt;span class=&quot;string&quot;&gt;&amp;quot;name can not be empty&amp;quot;&lt;/span&gt;)  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;comment&quot;&gt;// 设置默认值  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; b.minIdle == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      b.minIdle = defaultMinIdle  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; b.maxIdle == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      b.maxIdle = defaultMaxIdle  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; b.maxTotal == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      b.maxTotal = defaultMaxTotal  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; b.maxTotal &amp;lt; b.maxIdle &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;, fmt.Errorf(&lt;span class=&quot;string&quot;&gt;&amp;quot;max total(%d) cannot &amp;lt; max idle(%d)&amp;quot;&lt;/span&gt;, b.maxTotal, b.maxIdle)  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; b.minIdle &amp;gt; b.maxIdle &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;, fmt.Errorf(&lt;span class=&quot;string&quot;&gt;&amp;quot;max idle(%d) cannot &amp;lt; min idle(%d)&amp;quot;&lt;/span&gt;, b.maxIdle, b.minIdle)  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;amp;ResourcePoolConfig&amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      name:     b.name,  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      maxTotal: b.maxTotal,  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      maxIdle:  b.maxIdle,  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      minIdle:  b.minIdle,  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;, &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;


&lt;h4 id=&quot;单元测试&quot;&gt;&lt;a href=&quot;#单元测试&quot; class=&quot;headerlink&quot; title=&quot;单元测试&quot;&gt;&lt;/a&gt;单元测试&lt;/h4&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; builder  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; (  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;string&quot;&gt;&amp;quot;testing&amp;quot;&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;string&quot;&gt;&amp;quot;github.com/stretchr/testify/assert&amp;quot;&lt;/span&gt;   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;string&quot;&gt;&amp;quot;github.com/stretchr/testify/require&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;)  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;TestResourcePoolConfigBuilder_Build&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(t *testing.T)&lt;/span&gt;&lt;/span&gt; &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   tests := []&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      name    &lt;span class=&quot;type&quot;&gt;string&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      builder *ResourcePoolConfigBuilder  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      want    *ResourcePoolConfig  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      wantErr &lt;span class=&quot;type&quot;&gt;bool&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         name: &lt;span class=&quot;string&quot;&gt;&amp;quot;name empty&amp;quot;&lt;/span&gt;,  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         builder: &amp;amp;ResourcePoolConfigBuilder&amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            name:     &lt;span class=&quot;string&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;,  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            maxTotal: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &amp;#125;,  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         want:    &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;,  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         wantErr: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;,  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;,  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         name: &lt;span class=&quot;string&quot;&gt;&amp;quot;maxIdle &amp;lt; minIdle&amp;quot;&lt;/span&gt;,  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         builder: &amp;amp;ResourcePoolConfigBuilder&amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            name:     &lt;span class=&quot;string&quot;&gt;&amp;quot;test&amp;quot;&lt;/span&gt;,  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            maxTotal: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            maxIdle:  &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;,  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            minIdle:  &lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;,  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &amp;#125;,  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         want:    &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;,  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         wantErr: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;,  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;,  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         name: &lt;span class=&quot;string&quot;&gt;&amp;quot;success&amp;quot;&lt;/span&gt;,  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         builder: &amp;amp;ResourcePoolConfigBuilder&amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            name: &lt;span class=&quot;string&quot;&gt;&amp;quot;test&amp;quot;&lt;/span&gt;,  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &amp;#125;,  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         want: &amp;amp;ResourcePoolConfig&amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            name:     &lt;span class=&quot;string&quot;&gt;&amp;quot;test&amp;quot;&lt;/span&gt;,  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            maxTotal: defaultMaxTotal,  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            maxIdle:  defaultMaxIdle,  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            minIdle:  defaultMinIdle,  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &amp;#125;,  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         wantErr: &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;,  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;,  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; _, tt := &lt;span class=&quot;keyword&quot;&gt;range&lt;/span&gt; tests &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      t.Run(tt.name, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(t *testing.T)&lt;/span&gt;&lt;/span&gt; &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         got, err := tt.builder.Build()  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         require.Equalf(t, tt.wantErr, err != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;Build() error = %v, wantErr %v&amp;quot;&lt;/span&gt;, err, tt.wantErr)  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         assert.Equal(t, tt.want, got)  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;)  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&quot;Go-常用的参数传递方法&quot;&gt;&lt;a href=&quot;#Go-常用的参数传递方法&quot; class=&quot;headerlink&quot; title=&quot;Go 常用的参数传递方法&quot;&gt;&lt;/a&gt;Go 常用的参数传递方法&lt;/h3&gt;&lt;h4 id=&quot;代码-1&quot;&gt;&lt;a href=&quot;#代码-1&quot; class=&quot;headerlink&quot; title=&quot;代码&quot;&gt;&lt;/a&gt;代码&lt;/h4&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; builder  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;quot;fmt&amp;quot;&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// ResourcePoolConfigOption option&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; ResourcePoolConfigOption &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   maxTotal &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   maxIdle  &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   minIdle  &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// ResourcePoolConfigOptFunc to set option&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; ResourcePoolConfigOptFunc &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(option *ResourcePoolConfigOption)&lt;/span&gt;&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// NewResourcePoolConfig NewResourcePoolConfig  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;NewResourcePoolConfig&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(name &lt;span class=&quot;type&quot;&gt;string&lt;/span&gt;, opts ...ResourcePoolConfigOptFunc)&lt;/span&gt;&lt;/span&gt; (*ResourcePoolConfig, &lt;span class=&quot;type&quot;&gt;error&lt;/span&gt;) &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; name == &lt;span class=&quot;string&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt; &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;, fmt.Errorf(&lt;span class=&quot;string&quot;&gt;&amp;quot;name can not be empty&amp;quot;&lt;/span&gt;)  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   option := &amp;amp;ResourcePoolConfigOption&amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      maxTotal: &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;,  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      maxIdle:  &lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;,  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      minIdle:  &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; _, opt := &lt;span class=&quot;keyword&quot;&gt;range&lt;/span&gt; opts &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      opt(option)  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; option.maxTotal &amp;lt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; || option.maxIdle &amp;lt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; || option.minIdle &amp;lt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;, fmt.Errorf(&lt;span class=&quot;string&quot;&gt;&amp;quot;args err, option: %v&amp;quot;&lt;/span&gt;, option)  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; option.maxTotal &amp;lt; option.maxIdle || option.minIdle &amp;gt; option.maxIdle &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;, fmt.Errorf(&lt;span class=&quot;string&quot;&gt;&amp;quot;args err, option: %v&amp;quot;&lt;/span&gt;, option)  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;amp;ResourcePoolConfig&amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      name:     name,  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      maxTotal: option.maxTotal,  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      maxIdle:  option.maxIdle,  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      minIdle:  option.minIdle,  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;, &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&quot;单元测试-1&quot;&gt;&lt;a href=&quot;#单元测试-1&quot; class=&quot;headerlink&quot; title=&quot;单元测试&quot;&gt;&lt;/a&gt;单元测试&lt;/h4&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; builder  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; (  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;string&quot;&gt;&amp;quot;testing&amp;quot;&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;string&quot;&gt;&amp;quot;github.com/stretchr/testify/assert&amp;quot;&lt;/span&gt;   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;string&quot;&gt;&amp;quot;github.com/stretchr/testify/require&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;)  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;TestNewResourcePoolConfig&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(t *testing.T)&lt;/span&gt;&lt;/span&gt; &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; args &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      name &lt;span class=&quot;type&quot;&gt;string&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      opts []ResourcePoolConfigOptFunc  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   tests := []&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      name    &lt;span class=&quot;type&quot;&gt;string&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      args    args  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      want    *ResourcePoolConfig  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      wantErr &lt;span class=&quot;type&quot;&gt;bool&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         name: &lt;span class=&quot;string&quot;&gt;&amp;quot;name empty&amp;quot;&lt;/span&gt;,  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         args: args&amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            name: &lt;span class=&quot;string&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;,  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &amp;#125;,  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         want:    &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;,  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         wantErr: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;,  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;,  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         name: &lt;span class=&quot;string&quot;&gt;&amp;quot;success&amp;quot;&lt;/span&gt;,  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         args: args&amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            name: &lt;span class=&quot;string&quot;&gt;&amp;quot;test&amp;quot;&lt;/span&gt;,  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            opts: []ResourcePoolConfigOptFunc&amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(option *ResourcePoolConfigOption)&lt;/span&gt;&lt;/span&gt; &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                  option.minIdle = &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               &amp;#125;,  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;,  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &amp;#125;,  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         want: &amp;amp;ResourcePoolConfig&amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            name:     &lt;span class=&quot;string&quot;&gt;&amp;quot;test&amp;quot;&lt;/span&gt;,  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            maxTotal: &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;,  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            maxIdle:  &lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;,  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            minIdle:  &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &amp;#125;,  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         wantErr: &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;,  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;,  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; _, tt := &lt;span class=&quot;keyword&quot;&gt;range&lt;/span&gt; tests &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      t.Run(tt.name, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(t *testing.T)&lt;/span&gt;&lt;/span&gt; &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         got, err := NewResourcePoolConfig(tt.args.name, tt.args.opts...)  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         require.Equalf(t, tt.wantErr, err != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;error = %v, wantErr %v&amp;quot;&lt;/span&gt;, err, tt.wantErr)  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         assert.Equal(t, tt.want, got)  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;)  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span</summary>
        
      
    
    
    
    <category term="知识库" scheme="https://bishoptylaor.github.io/categories/library/"/>
    
    <category term="Golang" scheme="https://bishoptylaor.github.io/categories/library/Golang/"/>
    
    <category term="设计模式之美" scheme="https://bishoptylaor.github.io/categories/library/Golang/go-design-pattern/"/>
    
    <category term="创建型模式" scheme="https://bishoptylaor.github.io/categories/library/Golang/go-design-pattern/gdp-create/"/>
    
    
    <category term="必看必会" scheme="https://bishoptylaor.github.io/tags/%E5%BF%85%E7%9C%8B%E5%BF%85%E4%BC%9A/"/>
    
    <category term="设计模式" scheme="https://bishoptylaor.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>面试官101</title>
    <link href="https://bishoptylaor.github.io/interview/interviewer/interviewer101/"/>
    <id>https://bishoptylaor.github.io/interview/interviewer/interviewer101/</id>
    <published>2023-02-26T09:19:05.000Z</published>
    <updated>2024-04-25T12:01:47.109Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h3 id=&quot;面试&quot;&gt;&lt;a href=&quot;#面试&quot; class=&quot;headerlink&quot; title=&quot;面试&quot;&gt;&lt;/a&gt;&lt;strong&gt;面试&lt;/strong&gt;&lt;/h3&gt;&lt;h4 id=&quot;算法能力-一题5-10min&quot;&gt;&lt;a href=&quot;#算法能力-一题5-10min&quot; class=&quot;headerlink&quot; title=&quot;算法能力 一题5-10min :&quot;&gt;&lt;/a&gt;算法能力 一题5-10min :&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;题目：仅出现一次的数&lt;/li&gt;
&lt;li&gt;题目：连续固定区间最大值&lt;br&gt;给你一个数组 nums 和一个大小为 k的区间。这个区间可以从数组的最左侧不断移动到数组的最右侧。每个移动区间固定有 k 个数字。这个区间每次只向右移动一位。&lt;br&gt;让你返回移动过程中，这些固定区间中的最大值。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;样例输入：&lt;/p&gt;
&lt;figure class=&quot;highlight text&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;nums = [1,3,-1,-3,5,3,6,7], k = 3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;样例输出：&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[3,3,5,5,6,7]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;样例解释：&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;移动情况 最大值&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[1 3 -1] -3 5 3 6 7 3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1 [3 -1 -3] 5 3 6 7 3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1 3 [-1 -3 5] 3 6 7 5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1 3 -1 [-3 5 3] 6 7 5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1 3 -1 -3 [5 3 6] 7 6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1 3 -1 -3 5 [3 6 7] 7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;拓展&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;样例输入：&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;nums = [1,3,-1,-3,5,3,6,7], t = 5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;k = 2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;k = 3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;k = 4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;k = 5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;k = 6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;样例输出:&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;3 3 -1 5 5 6 7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3 3 5 5 6 7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3 5 5 6 7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5 5 6 7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5 6 7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;



&lt;h4 id=&quot;基础能力&quot;&gt;&lt;a href=&quot;#基础能力&quot; class=&quot;headerlink&quot; title=&quot;基础能力&quot;&gt;&lt;/a&gt;基础能力&lt;/h4&gt;&lt;h6 id=&quot;Go八股&quot;&gt;&lt;a href=&quot;#Go八股&quot; class=&quot;headerlink&quot; title=&quot;Go八股&quot;&gt;&lt;/a&gt;Go八股&lt;/h6&gt;&lt;p&gt;&lt;a href=&quot;https://www.topgoer.cn/docs/gomianshiti/gomianshiti-1dd225t6esqld&quot;&gt;https://www.topgoer.cn/docs/gomianshiti/gomianshiti-1dd225t6esqld&lt;/a&gt;&lt;/p&gt;
&lt;h6 id=&quot;Redis&quot;&gt;&lt;a href=&quot;#Redis&quot; class=&quot;headerlink&quot; title=&quot;Redis&quot;&gt;&lt;/a&gt;Redis&lt;/h6&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Redis是单线程的，但Redis为什么这么快？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;完全基于内存，绝大部分请求是纯粹的内存操作，非常快速。数据存在内存中，类似于HashMap，HashMap的优势就是查找和操作的时间复杂度都是O(1)；&lt;/li&gt;
&lt;li&gt;数据结构简单，对数据操作也简单，Redis中的数据结构是专门进行设计的；&lt;/li&gt;
&lt;li&gt;采用单线程，避免了不必要的上下文切换和竞争条件，也不存在多进程或者多线程导致的切换而消耗 CPU，不用去考虑各种锁的问题，不存在加锁释放锁操作，没有因为可能出现死锁而导致的性能消耗；&lt;/li&gt;
&lt;li&gt;使用多路I&amp;#x2F;O复用模型，非阻塞IO；这里“多路”指的是多个网络连接，“复用”指的是复用同一个线程&lt;/li&gt;
&lt;li&gt;使用底层模型不同，它们之间底层实现方式以及与客户端之间通信的应用协议不一样，Redis直接自己构建了VM 机制 ，因为一般的系统调用系统函数的话，会浪费一定的时间去移动和请求&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;缓存穿透和雪崩的解决方案&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;请简述Reids的删除策略&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;定时删除：在设置键的过期时间的同时，创建一个定时任务，当键达到过期时间时，立即执行对键的删除操作&lt;/li&gt;
&lt;li&gt;惰性删除：放任键过期不管，但在每次从键空间获取键时，都检查取得的键是否过期，如果过期的话，就删除该键，如果没有过期，就返回该键&lt;/li&gt;
&lt;li&gt;定期删除：每隔一点时间，程序就对数据库进行一次检查，删除里面的过期键，至于要删除多少过期键，以及要检查多少个数据库，则由算法决定。&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;索引的构建流程？&lt;/li&gt;
&lt;li&gt;b树，b+树区别，MongoDB为什么选用b树&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h6 id=&quot;操作系统&quot;&gt;&lt;a href=&quot;#操作系统&quot; class=&quot;headerlink&quot; title=&quot;操作系统&quot;&gt;&lt;/a&gt;操作系统&lt;/h6&gt;&lt;ol&gt;
&lt;li&gt;CPU三级缓存&lt;/li&gt;
&lt;li&gt;进程与线程&lt;ul&gt;
&lt;li&gt;进程: 进程是具有一定独立功能的程序，进程是系统资源分配和调度的最小单位。每个进程都有自己的独立内存空间，不同进程通过进程间通信来通信。由于进程比较重量，占据独立的内存，所以上下文进程间的切换开销（栈、寄存器、虚拟内存、文件句柄等）比较大，但相对比较稳定安全。&lt;/li&gt;
&lt;li&gt;线程: 线程是进程的一个实体,线程是内核态,而且是CPU调度和分派的基本单位,它是比进程更小的能独立运行的基本单位。线程间通信主要通过共享内存，上下文切换很快，资源开销较少，但相比进程不够稳定容易丢失数据。&lt;/li&gt;
&lt;li&gt;协程: 协程是一种用户态的轻量级线程，协程的调度完全是由用户来控制的。协程拥有自己的寄存器上下文和栈。协程调度切换时，将寄存器上下文和栈保存到其他地方，在切回来的时候，恢复先前保存的寄存器上下文和栈，直接操作栈则基本没有内核切换的开销，可以不加锁的访问全局变量，所以上下文的切换非常快。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h6 id=&quot;Mysql&quot;&gt;&lt;a href=&quot;#Mysql&quot; class=&quot;headerlink&quot; title=&quot;Mysql&quot;&gt;&lt;/a&gt;Mysql&lt;/h6&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;创建索引的规则：最左匹配，区分度等&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;索引失效的情况&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;未遵循最佳左前缀规则导致索引失效&lt;/li&gt;
&lt;li&gt;计算、函数、类型转换(自动或手动)导致索引失效&lt;/li&gt;
&lt;li&gt;范围条件右边列索引失效&lt;/li&gt;
&lt;li&gt;不等于(!&amp;#x3D;)会导致索引失效&lt;/li&gt;
&lt;li&gt;is null可以用到索引，is not null不能用到索引&lt;/li&gt;
&lt;li&gt;like以通配符%开头索引失效&lt;/li&gt;
&lt;li&gt;or 前的列建立了索引 or后面的列没有建立索引 会导致索引失效&lt;/li&gt;
&lt;li&gt;不同字符集进行比较前需要进行转换，会导致索引失效&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;数据的存储方式： B+树&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;非叶子节点不存储数据，只存索引（冗余），这样可以保证存放更多的索引&lt;/li&gt;
&lt;li&gt;叶子节点存储所有索引字段&lt;/li&gt;
&lt;li&gt;叶子节点用指针连接，提高区间访问性能&lt;br&gt; ![[Pasted image 20221201183525.png]]&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;大数据量级的mysql，如何分库分表？解决方案？&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;网络这些可以挑一两个主题聊。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;自我介绍，告知规则与流程：两个部分：算法题 &amp;amp;</summary>
        
      
    
    
    
    <category term="面试" scheme="https://bishoptylaor.github.io/categories/interview/"/>
    
    <category term="面试官" scheme="https://bishoptylaor.github.io/categories/interview/interviewer/"/>
    
    
    <category term="面试官" scheme="https://bishoptylaor.github.io/tags/%E9%9D%A2%E8%AF%95%E5%AE%98/"/>
    
    <category term="初学者" scheme="https://bishoptylaor.github.io/tags/%E5%88%9D%E5%AD%A6%E8%80%85/"/>
    
  </entry>
  
  <entry>
    <title>面试题-连续固定区间最大值</title>
    <link href="https://bishoptylaor.github.io/interview/interviewer/maximum-of-segments/"/>
    <id>https://bishoptylaor.github.io/interview/interviewer/maximum-of-segments/</id>
    <published>2023-02-26T09:19:05.000Z</published>
    <updated>2024-04-25T12:07:43.451Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;连续固定区间最大值&quot;&gt;&lt;a href=&quot;#连续固定区间最大值&quot; class=&quot;headerlink&quot; title=&quot;连续固定区间最大值&quot;&gt;&lt;/a&gt;连续固定区间最大值&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;涉及知识点：堆，栈、双指针、滑动窗口，双向队列、线段树，树状数组, dp 等。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h2&gt;&lt;p&gt;给你一个数组 &lt;code&gt;nums&lt;/code&gt; 和一个大小为 &lt;code&gt;k&lt;/code&gt;的区间。这个区间可以从数组的最左侧不断移动到数组的最右侧。每个移动区间固定有 &lt;code&gt;k&lt;/code&gt; 个数字。这个区间每次只向右移动一位。&lt;/p&gt;
&lt;p&gt;让你返回移动过程中，这些固定区间中的最大值。&lt;/p&gt;
&lt;p&gt;样例输入：&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;nums = [1,3,-1,-3,5,3,6,7], k = 3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;样例输出：&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[3,3,5,5,6,7]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;样例解释：&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;          移动情况              最大值&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[1  3  -1] -3  5  3  6  7       3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 1 [3  -1  -3] 5  3  6  7       3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 1  3 [-1  -3  5] 3  6  7       5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 1  3  -1 [-3  5  3] 6  7       5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 1  3  -1  -3 [5  3  6] 7       6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 1  3  -1  -3  5 [3  6  7]      7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;如果候选人询问到数据范围，可提示：&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1 &amp;lt;= nums.size() &amp;lt;= 10^5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-10^4 &amp;lt;= nums[i] &amp;lt;= 10^4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1 &amp;lt;= k &amp;lt;= nums.size()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&quot;思路描述&quot;&gt;&lt;a href=&quot;#思路描述&quot; class=&quot;headerlink&quot; title=&quot;思路描述&quot;&gt;&lt;/a&gt;思路描述&lt;/h2&gt;&lt;h3 id=&quot;思路-1：暴力滑动-O-n-2&quot;&gt;&lt;a href=&quot;#思路-1：暴力滑动-O-n-2&quot; class=&quot;headerlink&quot; title=&quot;思路 1：暴力滑动 O(n^2)&quot;&gt;&lt;/a&gt;思路 1：暴力滑动 O(n^2)&lt;/h3&gt;&lt;p&gt;暴力进行滑动窗口， 每次遍历当前窗口内的元素取最大值。&lt;/p&gt;
&lt;p&gt;参考代码:&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;vector&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;algorithm&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;namespace&lt;/span&gt; std;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;vector&amp;lt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;&amp;gt; &lt;span class=&quot;title&quot;&gt;find_maximum_of_sgements&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(vector&amp;lt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;&amp;gt;&amp;amp;nums, &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; k)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  vector&amp;lt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;&amp;gt; res;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i + k &amp;lt;= nums.&lt;span class=&quot;built_in&quot;&gt;size&lt;/span&gt;(); i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      res.&lt;span class=&quot;built_in&quot;&gt;push_back&lt;/span&gt;(*&lt;span class=&quot;built_in&quot;&gt;max_element&lt;/span&gt;(nums.&lt;span class=&quot;built_in&quot;&gt;begin&lt;/span&gt;() + i, nums.&lt;span class=&quot;built_in&quot;&gt;begin&lt;/span&gt;() + i + k));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; res;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;该方案的时空复杂度分析如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;时间复杂度 &lt;code&gt;O(n * k)～O(n^2)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;空间复杂度 &lt;code&gt;O(n - k + 1)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;这个是暴力解，非正确解，只能给 2 分，可提示次优解和最优解&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;优化提示 1：可以优化到低于 O(n^2) 的吗？比如 O(nlogn)，O(nlogk), 甚至是线性 O(n) 的做法。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;优化提示 2：可以想到用一些可以维护极值的数据结构做吗？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;优化提示 3：那如果拆分成子问题，快速求连续区间的最大值，你怎么做才会有带 log 的时间复杂度？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;提示后，候选人还是不会。可换题。&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;思路-2：堆-O-nlogk&quot;&gt;&lt;a href=&quot;#思路-2：堆-O-nlogk&quot; class=&quot;headerlink&quot; title=&quot;思路 2：堆 O(nlogk)&quot;&gt;&lt;/a&gt;思路 2：堆 O(nlogk)&lt;/h3&gt;&lt;p&gt;维护一个大小为 &lt;code&gt;k&lt;/code&gt; 的堆，向堆中插入一个元素(单个操作时间复杂度 &lt;code&gt;O(logk)&lt;/code&gt;), 将数据不断 &lt;code&gt;push&lt;/code&gt; 进堆，每次取结果都将 &lt;code&gt;top&lt;/code&gt; 的数取出来就是序列答案。&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;queue&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;vector&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;utility&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;vector&amp;lt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;&amp;gt; &lt;span class=&quot;title&quot;&gt;find_maximum_of_segments&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(vector&amp;lt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;&amp;gt;&amp;amp; nums, &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; k)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  priority_queue&amp;lt; pair&amp;lt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;,&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;&amp;gt; &amp;gt; pq;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  vector&amp;lt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;&amp;gt; res;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;i &amp;lt; k;i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      pq.&lt;span class=&quot;built_in&quot;&gt;push&lt;/span&gt;(&amp;#123;nums[i],i&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  res.&lt;span class=&quot;built_in&quot;&gt;push_back&lt;/span&gt;(pq.&lt;span class=&quot;built_in&quot;&gt;top&lt;/span&gt;().first);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; i = k;i &amp;lt; nums.&lt;span class=&quot;built_in&quot;&gt;size&lt;/span&gt;(); i++) &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(!pq.&lt;span class=&quot;built_in&quot;&gt;empty&lt;/span&gt;() &amp;amp;&amp;amp; pq.&lt;span class=&quot;built_in&quot;&gt;top&lt;/span&gt;().second &amp;lt;= (i - k)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          pq.&lt;span class=&quot;built_in&quot;&gt;pop&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      pq.&lt;span class=&quot;built_in&quot;&gt;push&lt;/span&gt;(&amp;#123;nums[i],i&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      res.&lt;span class=&quot;built_in&quot;&gt;push_back&lt;/span&gt;(pq.&lt;span class=&quot;built_in&quot;&gt;top&lt;/span&gt;().first);   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; res; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;该方案的时空复杂度分析如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;时间复杂度：&lt;code&gt;O(nlogk)&lt;/code&gt;, 候选人有可能写成&lt;code&gt;O(nlogn)&lt;/code&gt;, 但问题不大。&lt;/li&gt;
&lt;li&gt;空间复杂度：&lt;code&gt;O(k)&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;这个是正确解，但非最优解，可给 3 分，通过。&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;思路-3：双向队列-O-n&quot;&gt;&lt;a href=&quot;#思路-3：双向队列-O-n&quot; class=&quot;headerlink&quot; title=&quot;思路 3：双向队列 O(n)&quot;&gt;&lt;/a&gt;思路 3：双向队列 O(n)&lt;/h3&gt;&lt;p&gt;可以维护一个双向队列，这个队列是递减的。队列用来保存可能是最大值的数字的 &lt;code&gt;index&lt;/code&gt;。&lt;br&gt;当前窗口最大值的 &lt;code&gt;index&lt;/code&gt; 在队首，当窗口滑动时，会进入一个新值，出去一个旧值，不断更新给出当前窗口的最大值即可。&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;vector&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;deque&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;vector&amp;lt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;&amp;gt;&lt;span class=&quot;built_in&quot;&gt;find_maximum_of_segments&lt;/span&gt;(vector&amp;lt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;&amp;gt;&amp;amp;nums, &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; k) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  deque&amp;lt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;&amp;gt; que;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  vector&amp;lt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;&amp;gt; res;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; n = nums.&lt;span class=&quot;built_in&quot;&gt;size&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; n; i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;// 新元素入队时, 比队尾元素大的话则替代队尾元素&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(!que.&lt;span class=&quot;built_in&quot;&gt;empty&lt;/span&gt;() &amp;amp;&amp;amp; nums[i] &amp;gt; nums[que.&lt;span class=&quot;built_in&quot;&gt;back&lt;/span&gt;()])&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          que.&lt;span class=&quot;built_in&quot;&gt;pop_back&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;// 检查队首的 index 是否在窗口内，不在则出队&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(!que.&lt;span class=&quot;built_in&quot;&gt;empty&lt;/span&gt;() &amp;amp;&amp;amp; que.&lt;span class=&quot;built_in&quot;&gt;front&lt;/span&gt;() &amp;lt; i - k + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          que.&lt;span class=&quot;built_in&quot;&gt;pop_front&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      que.&lt;span class=&quot;built_in&quot;&gt;push_back&lt;/span&gt;(i);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (i &amp;gt;= k &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        res.&lt;span class=&quot;built_in&quot;&gt;push_back&lt;/span&gt;(nums[que.&lt;span class=&quot;built_in&quot;&gt;front&lt;/span&gt;()]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; res;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;该方案的时空复杂度分析如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;时间复杂度：&lt;code&gt;O(n)&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;空间复杂度：&lt;code&gt;O(k)&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;这个是正确解，最优解，可给 4 分，通过。&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;思路-4：dynamic-programming&quot;&gt;&lt;a href=&quot;#思路-4：dynamic-programming&quot; class=&quot;headerlink&quot; title=&quot;思路 4：dynamic programming&quot;&gt;&lt;/a&gt;思路 4：dynamic programming&lt;/h3&gt;&lt;p&gt;先将数组分割成有 &lt;code&gt;k&lt;/code&gt; 个元素的块。&lt;br&gt;建立数组 &lt;code&gt;left&lt;/code&gt;,其中 &lt;code&gt;left[j]&lt;/code&gt; 是从块的开始到下标 &lt;code&gt;j&lt;/code&gt; 最大的元素，方向： &lt;code&gt;左-&amp;gt;右&lt;/code&gt;。&lt;br&gt;数组 &lt;code&gt;right&lt;/code&gt;，其中 &lt;code&gt;right[j]&lt;/code&gt; 是从块的结尾到下标 &lt;code&gt;j&lt;/code&gt; 最大的元素，方向： &lt;code&gt;右-&amp;gt;左&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;从左到右遍历数组，建立数组 &lt;code&gt;left&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;从右到左遍历数组，建立数组 &lt;code&gt;right&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;因为一个窗口 &lt;code&gt;[i, i + k - 1]&lt;/code&gt; 最多跨越两个块，所以求窗口中的最大值就是求这个窗口跨越的块中的最大值，&lt;br&gt;可以知道，无论是跨越 1 个块也好，2 个块也好，计算处于边界的 &lt;code&gt;i&lt;/code&gt; 和 &lt;code&gt;i + k - 1&lt;/code&gt; 对应的值即可。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;right[i]&lt;/code&gt; 表示从块的结尾到下标 &lt;code&gt;j&lt;/code&gt; 的最大的元素。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;left[i + k - 1]&lt;/code&gt; 表示从块的开始到下标 &lt;code&gt;i + k - 1&lt;/code&gt; 的最大的元素。&lt;/p&gt;
&lt;p&gt;这两个范围刚好是整个窗口。&lt;/p&gt;
&lt;p&gt;所以窗口的最大值是 &lt;code&gt;max(right[i], left[i + k - 1])&lt;/code&gt;。&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;vector&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;vector&amp;lt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;&amp;gt;&lt;span class=&quot;built_in&quot;&gt;find_maximum_of_segments&lt;/span&gt;(vector&amp;lt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;&amp;gt;&amp;amp;nums, &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; k) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  vector&amp;lt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;&amp;gt; res;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; n = nums.&lt;span class=&quot;built_in&quot;&gt;size&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;vector&amp;lt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;&amp;gt; &lt;span class=&quot;title&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(n, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;, &lt;span class=&quot;title&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(n, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; max_num;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; n; i ++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(i % k == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          max_num = nums[i];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      max_num = &lt;span class=&quot;built_in&quot;&gt;max&lt;/span&gt;(max_num, nums[i]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      left[i] = max_num;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  max_num = nums[n - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; i = n - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; i &amp;gt;= &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i --)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(i % k == k - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          max_num = nums[i];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      max_num = &lt;span class=&quot;built_in&quot;&gt;max&lt;/span&gt;(max_num, nums[i]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      right[i] = max_num;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt;= n - k; i ++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      res.&lt;span class=&quot;built_in&quot;&gt;push_back&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;max&lt;/span&gt;(right[i], left[i + k - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; res;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;这个是正确解，最优解，但比较难想到。可给 5 分，通过。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;该方案的时空复杂度分析如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;时间复杂度：&lt;code&gt;O(n)&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;空间复杂度：&lt;code&gt;O(n)&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;其他思路参考&quot;&gt;&lt;a href=&quot;#其他思路参考&quot; class=&quot;headerlink&quot; title=&quot;其他思路参考&quot;&gt;&lt;/a&gt;其他思路参考&lt;/h2&gt;&lt;p&gt;以下解法比较特殊，而且编码比较复杂，如果真的有候选人在面试中写了，可以考虑给 5 分。&lt;/p&gt;
&lt;h3 id=&quot;思路-4-线段树-segment-tree&quot;&gt;&lt;a href=&quot;#思路-4-线段树-segment-tree&quot; class=&quot;headerlink&quot; title=&quot;思路 4: 线段树 (segment tree)&quot;&gt;&lt;/a&gt;思路 4: 线段树 (segment tree)&lt;/h3&gt;&lt;p&gt;比较裸的线段树维护极值的做法。&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;vector&amp;lt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;&amp;gt;tree;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;pushUp&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; rt)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  tree[rt] = &lt;span class=&quot;built_in&quot;&gt;max&lt;/span&gt;(tree[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &amp;lt;&amp;lt; rt], tree[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &amp;lt;&amp;lt; rt | &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; rt, &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; l,&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; r, vector&amp;lt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;&amp;gt;&amp;amp;nums)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(l == r) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    tree[rt] = nums[l];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; mid = (l + r) &amp;gt;&amp;gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;build&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &amp;lt;&amp;lt; rt, l, mid, nums);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;build&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &amp;lt;&amp;lt; rt | &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, mid + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, r, nums);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;pushUp&lt;/span&gt;(rt);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; rt, &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; l, &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; r, &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; ql, &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; qr)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(l &amp;gt; r) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; INT_MIN;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(l &amp;gt; qr || r &amp;lt; ql) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; INT_MIN;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// [ql [l, r] qr]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(l &amp;gt;= ql &amp;amp;&amp;amp; r &amp;lt;= qr) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; tree[rt];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; mid = (l + r) &amp;gt;&amp;gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; left_val = &lt;span class=&quot;built_in&quot;&gt;query&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &amp;lt;&amp;lt; rt, l, mid, ql, qr);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; right_val = &lt;span class=&quot;built_in&quot;&gt;query&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &amp;lt;&amp;lt; rt | &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, mid + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, r, ql, qr);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;max&lt;/span&gt;(left_val, right_val);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;vector&amp;lt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;&amp;gt; &lt;span class=&quot;title&quot;&gt;find_maximum_of_segments&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(vector&amp;lt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;&amp;gt;&amp;amp; nums, &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; k)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; n = nums.&lt;span class=&quot;built_in&quot;&gt;size&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  vector&amp;lt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;&amp;gt; res;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(n == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; || n &amp;lt; k) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; res;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  tree.&lt;span class=&quot;built_in&quot;&gt;resize&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &amp;lt;&amp;lt; n);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;build&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, nums.&lt;span class=&quot;built_in&quot;&gt;size&lt;/span&gt;() - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, nums);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i + k - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &amp;lt; n; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; val = &lt;span class=&quot;built_in&quot;&gt;query&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, n - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, i, i + k - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      res.&lt;span class=&quot;built_in&quot;&gt;push_back&lt;/span&gt;(val);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; res;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;该方案的时空复杂度分析如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;时间复杂度：&lt;ul&gt;
&lt;li&gt;建树：&lt;code&gt;O(n)&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;查询：&lt;code&gt;O(logn)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;空间复杂度：&lt;code&gt;O(3 * n)&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;思路-5：树状数组-fenwick-tree&quot;&gt;&lt;a href=&quot;#思路-5：树状数组-fenwick-tree&quot; class=&quot;headerlink&quot; title=&quot;思路 5：树状数组 (fenwick tree)&quot;&gt;&lt;/a&gt;思路 5：树状数组 (fenwick tree)&lt;/h3&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; n;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;vector&amp;lt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;&amp;gt;val;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;vector&amp;lt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;&amp;gt;tmp;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; MAX_VAL = &lt;span class=&quot;number&quot;&gt;1e5&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;lowbit&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; x)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; x &amp;amp; -x;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; x, &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; v)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(x &amp;lt;= n) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    val[x] = v;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// cout &amp;lt;&amp;lt; &amp;quot;x = &amp;quot; &amp;lt;&amp;lt; x &amp;lt;&amp;lt; endl;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; lx = &lt;span class=&quot;built_in&quot;&gt;lowbit&lt;/span&gt;(x);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; i &amp;lt; lx; i &amp;lt;&amp;lt;= &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      val[x] = &lt;span class=&quot;built_in&quot;&gt;max&lt;/span&gt;(val[x], val[x - i]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    x += &lt;span class=&quot;built_in&quot;&gt;lowbit&lt;/span&gt;(x);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; l, &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; r)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; ans = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(r &amp;gt;= l) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// cout &amp;lt;&amp;lt; &amp;quot;r = &amp;quot; &amp;lt;&amp;lt; r &amp;lt;&amp;lt; endl;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ans = &lt;span class=&quot;built_in&quot;&gt;max&lt;/span&gt;(tmp[r - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;], ans);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    r--;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(r &amp;gt;= l + &lt;span class=&quot;built_in&quot;&gt;lowbit&lt;/span&gt;(r))&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ans = &lt;span class=&quot;built_in&quot;&gt;max&lt;/span&gt;(val[r], ans);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        r -= &lt;span class=&quot;built_in&quot;&gt;lowbit&lt;/span&gt;(r);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; ans;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;vector&amp;lt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;&amp;gt; &lt;span class=&quot;title&quot;&gt;find_maximum_of_segments&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(vector&amp;lt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;&amp;gt;&amp;amp; nums, &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; k)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  n = nums.&lt;span class=&quot;built_in&quot;&gt;size&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  vector&amp;lt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;&amp;gt; res;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(n == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; || n &amp;lt; k) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; res;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  val.&lt;span class=&quot;built_in&quot;&gt;resize&lt;/span&gt;(n + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; n; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; num = nums[i] + MAX_VAL;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    tmp.&lt;span class=&quot;built_in&quot;&gt;push_back&lt;/span&gt;(num);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;update&lt;/span&gt;(i + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, num);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i + k - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &amp;lt; n; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; max_val = &lt;span class=&quot;built_in&quot;&gt;query&lt;/span&gt;(i + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, i + k);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    res.&lt;span class=&quot;built_in&quot;&gt;push_back&lt;/span&gt;(max_val - MAX_VAL);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; res;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;该方案的时空复杂度分析如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;时间复杂度：&lt;ul&gt;
&lt;li&gt;建树：&lt;code&gt;O(n)&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;查询：&lt;code&gt;O(logn)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;空间复杂度：&lt;code&gt;O(3 * n)&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;拓展&quot;&gt;&lt;a href=&quot;#拓展&quot; class=&quot;headerlink&quot; title=&quot;拓展&quot;&gt;&lt;/a&gt;拓展&lt;/h2&gt;&lt;p&gt;如果遇到水平比较高的候选人，比如具有 OI 或者 ACM 经历且实力比较强的候选人。&lt;/p&gt;
&lt;p&gt;候选人只需要口述解法即可。&lt;/p&gt;
&lt;p&gt;可将上面题目改编成：&lt;/p&gt;
&lt;p&gt;题意不变，同样是给你一个数组 &lt;code&gt;nums = [1,3,-1,-3,5,3,6,7]&lt;/code&gt; 和 一个 &lt;code&gt;t&lt;/code&gt;, &lt;code&gt;t&lt;/code&gt; 代表查询次数。&lt;br&gt;即存在多组查询，每次查询给你不一样的 &lt;code&gt;k&lt;/code&gt;, 让你输出每个查询区间为 &lt;code&gt;k&lt;/code&gt; 的区间的答案序列。&lt;/p&gt;
&lt;p&gt;数据范围：&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1 &amp;lt;= nums.size() &amp;lt;= 10^5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-10^4 &amp;lt;= nums[i] &amp;lt;= 10^4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1 &amp;lt;= k &amp;lt;= nums.size()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1 &amp;lt;= t &amp;lt;= 10^3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;样例输入&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;nums = [1,3,-1,-3,5,3,6,7], t = 5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;k = 2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;k = 3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;k = 4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;k = 5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;k = 6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;样例输出&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;3 3 -1 5 5 6 7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3 3 5 5 6 7 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3 5 5 6 7 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5 5 6 7 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5 6 7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&quot;思路-1&quot;&gt;&lt;a href=&quot;#思路-1&quot; class=&quot;headerlink&quot; title=&quot;思路 1&quot;&gt;&lt;/a&gt;思路 1&lt;/h3&gt;&lt;p&gt;这种属于比较经典的 RMQ (Range Minimum&amp;#x2F;Maximum Query) 问题。&lt;/p&gt;
&lt;p&gt;可以使用一种数据结构 &lt;code&gt;Sparse Tables&lt;/code&gt; 来解决。&lt;/p&gt;
&lt;p&gt;该数据结构可在 &lt;code&gt;O(nlogn)&lt;/code&gt; 内完成数据预处理， 在 &lt;code&gt;O(1)&lt;/code&gt; 内完成查询。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;时间复杂度：&lt;ul&gt;
&lt;li&gt;预处理：&lt;code&gt;O(nlogn)&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;查询：&lt;code&gt;O(1)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;空间复杂度：&lt;code&gt;O(nlogn)&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;代码参考：&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; M;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;prepare&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(vector&amp;lt; vector&amp;lt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;&amp;gt; &amp;gt;&amp;amp;dp, vector&amp;lt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;&amp;gt;&amp;amp;nums)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; nums.&lt;span class=&quot;built_in&quot;&gt;size&lt;/span&gt;(); i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      dp[i][&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;] = nums[i];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; j = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; j &amp;lt; M; j++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i + (&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &amp;lt;&amp;lt; j) - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &amp;lt;= nums.&lt;span class=&quot;built_in&quot;&gt;size&lt;/span&gt;(); i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          dp[i][j] = &lt;span class=&quot;built_in&quot;&gt;max&lt;/span&gt;(dp[i][j&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;], dp[i + (&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &amp;lt;&amp;lt; (j - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;))][j&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(vector&amp;lt; vector&amp;lt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;&amp;gt; &amp;gt;&amp;amp;dp, &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; l, &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; r)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; k = (&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;) (&lt;span class=&quot;built_in&quot;&gt;log&lt;/span&gt;(r - l + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) / &lt;span class=&quot;built_in&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;max&lt;/span&gt;(dp[l][k], dp[r - (&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &amp;lt;&amp;lt; k) + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;][k]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;find_maximum_of_segments&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(vector&amp;lt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;&amp;gt;&amp;amp;nums, &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; t)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; n = nums.&lt;span class=&quot;built_in&quot;&gt;size&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  M = (&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;) (&lt;span class=&quot;built_in&quot;&gt;log&lt;/span&gt;(n) / &lt;span class=&quot;built_in&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)) + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  vector&amp;lt; vector&amp;lt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;&amp;gt; &amp;gt; &lt;span class=&quot;built_in&quot;&gt;dp&lt;/span&gt;(n + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;vector&lt;/span&gt;&amp;lt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;&amp;gt;(M + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;prepare&lt;/span&gt;(dp, nums);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; k;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(t--) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    vector&amp;lt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;&amp;gt; res;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    cin &amp;gt;&amp;gt; k;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i + k - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &amp;lt; nums.&lt;span class=&quot;built_in&quot;&gt;size&lt;/span&gt;(); i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      res.&lt;span class=&quot;built_in&quot;&gt;push_back&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;query&lt;/span&gt;(dp, i, i + k - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;auto&lt;/span&gt; x: res) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      cout &amp;lt;&amp;lt; x &amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&amp;quot; &amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    cout &amp;lt;&amp;lt; endl;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span</summary>
        
      
    
    
    
    <category term="面试" scheme="https://bishoptylaor.github.io/categories/interview/"/>
    
    <category term="面试官" scheme="https://bishoptylaor.github.io/categories/interview/interviewer/"/>
    
    
    <category term="面试题" scheme="https://bishoptylaor.github.io/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>面试题-移掉K位数字</title>
    <link href="https://bishoptylaor.github.io/interview/interviewer/remove-the-k-digit/"/>
    <id>https://bishoptylaor.github.io/interview/interviewer/remove-the-k-digit/</id>
    <published>2023-02-26T09:19:05.000Z</published>
    <updated>2024-04-25T12:07:43.451Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;移掉K位数字-leetcode-402&quot;&gt;&lt;a href=&quot;#移掉K位数字-leetcode-402&quot; class=&quot;headerlink&quot; title=&quot;移掉K位数字-leetcode-402&quot;&gt;&lt;/a&gt;移掉K位数字-leetcode-402&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;涉及知识点：贪心,栈&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h2&gt;&lt;p&gt;给定一个以字符串表示的非负整数 num，移除这个数中的 k 位数字，使得剩下的数字最小。  &lt;/p&gt;
&lt;p&gt;注意:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;num 的长度小于 10002 且 ≥ k。  &lt;/li&gt;
&lt;li&gt;num 不会包含任何前导零。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;输入&amp;#x2F;输出示例：  &lt;/p&gt;
&lt;p&gt;Example 1:  &lt;/p&gt;
&lt;p&gt;Input:   &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;num = &amp;quot;1432219&amp;quot;, k = 3  
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Output:   &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;quot;1219&amp;quot;  
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Explanation: 移除掉三个数字 4, 3, 和 2 形成一个新的最小的数字 1219。  &lt;/p&gt;
&lt;p&gt;Example 2:  &lt;/p&gt;
&lt;p&gt;Input:   &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;num = &amp;quot;10200&amp;quot;, k = 1  
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Output:   &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;quot;200&amp;quot;  
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Explanation: 移掉首位的 1 剩下的数字为 200. 注意输出不能有任何前导零。  &lt;/p&gt;
&lt;p&gt;Example 3:  &lt;/p&gt;
&lt;p&gt;Input:   &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;num = &amp;quot;10&amp;quot;, k = 2  
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Output:   &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;quot;0&amp;quot;  
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Explanation: 从原数字移除所有的数字，剩余为空就是0。  &lt;/p&gt;
&lt;h2 id=&quot;思路描述&quot;&gt;&lt;a href=&quot;#思路描述&quot; class=&quot;headerlink&quot; title=&quot;思路描述&quot;&gt;&lt;/a&gt;思路描述&lt;/h2&gt;&lt;h2 id=&quot;思路-0&quot;&gt;&lt;a href=&quot;#思路-0&quot; class=&quot;headerlink&quot; title=&quot;思路 0&quot;&gt;&lt;/a&gt;思路 0&lt;/h2&gt;&lt;p&gt;详细描述：思路，从左到右，找第一个比后面大的字符，删除，清零，k次扫描。  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;时间复杂度：o(n*k)  &lt;/li&gt;
&lt;li&gt;空间复杂度：o(1)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;代码：  &lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;class Solution &amp;#123;  
    public String removeKdigits(String num, int k) &amp;#123;        if (num.length() == k) return &amp;quot;0&amp;quot;;        StringBuilder s = new StringBuilder(num);        for (int i = 0; i &amp;lt; k; i++) &amp;#123;            int idx = 0;            for (int j = 1; j &amp;lt; s.length() &amp;amp;&amp;amp; s.charAt(j) &amp;gt;= s.charAt(j - 1); j++) idx = j;            s.delete(idx, idx + 1);            while (s.length() &amp;gt; 1 &amp;amp;&amp;amp; s.charAt(0) == &amp;#39;0&amp;#39;) s.delete(0, 1);        &amp;#125;        return s.toString();    &amp;#125;&amp;#125;  
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;思路-1&quot;&gt;&lt;a href=&quot;#思路-1&quot; class=&quot;headerlink&quot; title=&quot;思路 1&quot;&gt;&lt;/a&gt;思路 1&lt;/h3&gt;&lt;p&gt;详细描述：在一定的范围内逐步选取最小的数字。&lt;br&gt;  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在第一次循环中，num &amp;#x3D; 1432219, k&amp;#x3D;3，此时我们要删去k&amp;#x3D;3个数字，保留n-k&amp;#x3D;7-3&amp;#x3D;4个数字。  &lt;/li&gt;
&lt;li&gt;最终要挑选4个字符，那么我们先来挑选 千位 的字符，，由于挑选完千位后还需要挑选百位，十位，个位这三个位置的字符，所以千位能选择的范围只能在1432之间,因为要留出末尾的219这三个字符供百位、十位、个位 去挑选。  &lt;/li&gt;
&lt;li&gt;1432中最小的值是1，所以千位的值选好了，就是1，接下来就是从千位后面的432219中去挑选百位值，可以发现挑选每一位的值是一个递归的过程。  &lt;/li&gt;
&lt;li&gt;start &amp;#x3D; 0, end &amp;#x3D; k。也就是要在[start,end]中选取一个最小的进行保留，返回最小数字的下标minIndex。而在下次循环中，start &amp;#x3D; minIndex+1, end++ ，也就是在[start,end]中选择下一个最小的数字。以此类推，直至所有数字都选取完毕。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;注意：当返回的下标minIndex及后面的字符串的长度 &amp;#x3D; 还需要保留的字符串的长度的时候，直接返回  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;时间复杂度：o(n*k)  &lt;/li&gt;
&lt;li&gt;空间复杂度：o(1)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;代码：  &lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;go&quot;&gt;func removeKdigits(num string, k int) string &amp;#123;  
    if 0 == k &amp;#123;        return num    &amp;#125;    if k == len(num) &amp;#123;        return &amp;quot;0&amp;quot;    &amp;#125;    result := &amp;quot;&amp;quot;    i := len(num)-k    for &amp;#123;        if i == 0 &amp;#123;            break        &amp;#125;        minIndex := 0        for  j := 0; j &amp;lt; len(num)-(i-1); j++ &amp;#123;            if num[j] &amp;lt; num[minIndex] &amp;#123;                minIndex = j            &amp;#125;        &amp;#125;        // 优化        if len(num)- minIndex == i &amp;#123;            result = result + num[minIndex:]            break        &amp;#125;        result += num[minIndex:minIndex+1]        num = num[minIndex+1:]        i--    &amp;#125;    // 前导0    ans := strings.TrimLeft(result, &amp;quot;0&amp;quot;)    if ans == &amp;quot;&amp;quot; &amp;#123;        ans = &amp;quot;0&amp;quot;    &amp;#125;    return ans&amp;#125;  
  
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;思路2-贪心-单调栈（一般可用-栈、队列、双端队列、双指针-实现）&quot;&gt;&lt;a href=&quot;#思路2-贪心-单调栈（一般可用-栈、队列、双端队列、双指针-实现）&quot; class=&quot;headerlink&quot; title=&quot;思路2: 贪心 + 单调栈（一般可用 栈、队列、双端队列、双指针 实现）&quot;&gt;&lt;/a&gt;思路2: 贪心 + 单调栈（一般可用 栈、队列、双端队列、双指针 实现）&lt;/h3&gt;&lt;p&gt;详细描述：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;遍历字符串，逐个入栈,若新来的比栈顶小，则栈顶出栈 ,出栈相当于移除动作，需次数并与 k 比较，别删多了  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;移除头部零有 ‘0’,全空，return “0”,构建字符串，顺序返回整个单调栈元素.  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;时间复杂度：o(n+k)  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;空间复杂度：o(n)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;代码：  &lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;go&quot;&gt;func removeKdigits(num string, k int) string &amp;#123;  
    stack := []byte&amp;#123;&amp;#125;    
    for i := range num &amp;#123;
        digit := num[i]
        for k &amp;gt; 0 &amp;amp;&amp;amp; len(stack) &amp;gt; 0 &amp;amp;&amp;amp; digit &amp;lt; stack[len(stack)-1] &amp;#123;
            stack = stack[:len(stack)-1]
            k--        
        &amp;#125;
        stack = append(stack, digit) 
    &amp;#125;
    stack = stack[:len(stack)-k]
    ans := strings.TrimLeft(string(stack), &amp;quot;0&amp;quot;)
    if ans == &amp;quot;&amp;quot; &amp;#123;
        ans = &amp;quot;0&amp;quot;    
    &amp;#125;
    return ans
&amp;#125;  
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;评分&quot;&gt;&lt;a href=&quot;#评分&quot; class=&quot;headerlink&quot; title=&quot;评分&quot;&gt;&lt;/a&gt;评分&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;提出思路0，能正确分析时空复杂度(2分)  &lt;/li&gt;
&lt;li&gt;提出思路1，能正确分析时空复杂度(3分)  &lt;/li&gt;
&lt;li&gt;提出思路2，能正确分析时空复杂度(4分) </summary>
        
      
    
    
    
    <category term="面试" scheme="https://bishoptylaor.github.io/categories/interview/"/>
    
    <category term="面试官" scheme="https://bishoptylaor.github.io/categories/interview/interviewer/"/>
    
    
    <category term="面试题" scheme="https://bishoptylaor.github.io/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>面试题-仅出现一次的元素</title>
    <link href="https://bishoptylaor.github.io/interview/interviewer/single-numbers/"/>
    <id>https://bishoptylaor.github.io/interview/interviewer/single-numbers/</id>
    <published>2023-02-26T09:19:05.000Z</published>
    <updated>2024-04-25T12:07:43.451Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;仅出现一次的元素&quot;&gt;&lt;a href=&quot;#仅出现一次的元素&quot; class=&quot;headerlink&quot; title=&quot;仅出现一次的元素&quot;&gt;&lt;/a&gt;仅出现一次的元素&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;涉及知识点：散列表、位运算&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h2&gt;&lt;p&gt;（英文）&lt;br&gt;Given an array of numbers nums, in which exactly two elements appear only once and all the other elements appear exactly twice. Find the two elements that appear only once.  &lt;/p&gt;
&lt;p&gt;For example:  &lt;/p&gt;
&lt;p&gt;Given nums &amp;#x3D; [1, 2, 1, 3, 2, 5], return [3, 5].  &lt;/p&gt;
&lt;p&gt;Note:  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The order of the result is not important. So in the above example, [5, 3] is also correct.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;（中文）&lt;br&gt;给定一个整数数组，其中恰好有两个元素只出现一次，其余所有元素均出现两次。 找出仅出现一次的那两个元素。要求时间复杂度在O(N)内。  &lt;/p&gt;
&lt;p&gt;示例输入:  &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[1, 2, 1, 3, 2, 5]  
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;示例输出：  &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[3, 5]  
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;思路描述&quot;&gt;&lt;a href=&quot;#思路描述&quot; class=&quot;headerlink&quot; title=&quot;思路描述&quot;&gt;&lt;/a&gt;思路描述&lt;/h2&gt;&lt;h3 id=&quot;思路1：排序-遍历&quot;&gt;&lt;a href=&quot;#思路1：排序-遍历&quot; class=&quot;headerlink&quot; title=&quot;思路1：排序+遍历&quot;&gt;&lt;/a&gt;思路1：排序+遍历&lt;/h3&gt;&lt;p&gt;对序列排序，后遍历所有元素，通过相邻元素是否有相同值来判断是否满足条件，输出。  &lt;/p&gt;
&lt;p&gt;常规排序方案的时空复杂度如下：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;时间复杂度 &lt;code&gt;O(N*log(N))&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;空间复杂度 &lt;code&gt;O(1)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;此时解法不满足要求，可给到2分，若能给出计数排序（时间复杂度O(N)）法，可给到3分。  &lt;/p&gt;
&lt;h3 id=&quot;思路2：散列表-遍历&quot;&gt;&lt;a href=&quot;#思路2：散列表-遍历&quot; class=&quot;headerlink&quot; title=&quot;思路2：散列表+遍历&quot;&gt;&lt;/a&gt;思路2：散列表+遍历&lt;/h3&gt;&lt;p&gt;遍历每个元素，使用散列表存储元素值到数量的映射关系，再遍历散列表找出其中value为1的key，输出。  &lt;/p&gt;
&lt;p&gt;该方案的时空复杂度分析如下：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;时间复杂度 &lt;code&gt;O(N)&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;空间复杂度 &lt;code&gt;O(N)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;此时为次优解，可延伸提问对散列表的理解（如遍历结果是否有序，两个元素输出顺序是否确定），回答正确可给到4分  &lt;/p&gt;
&lt;h3 id=&quot;思路3：位运算&quot;&gt;&lt;a href=&quot;#思路3：位运算&quot; class=&quot;headerlink&quot; title=&quot;思路3：位运算&quot;&gt;&lt;/a&gt;思路3：位运算&lt;/h3&gt;&lt;p&gt;遍历元素，使用异或运算可消除相同的元素，得到所求两个元素的异或结果，从中找出二进制为1的最低位数字，再遍历一次，求出其中一个元素，再与前面结果异或得到另一个元素，输出。  &lt;/p&gt;
&lt;p&gt;该方案的时空复杂度分析如下：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;时间复杂度 &lt;code&gt;O(N)&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;空间复杂度 &lt;code&gt;O(1)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;此为最优解，可给到5分  &lt;/p&gt;
&lt;h2 id=&quot;解法示例&quot;&gt;&lt;a href=&quot;#解法示例&quot; class=&quot;headerlink&quot; title=&quot;解法示例&quot;&gt;&lt;/a&gt;解法示例&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;./single-numbers/sortSolution.go&quot;&gt;排序+遍历&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;./single-numbers/hashSolution.go&quot;&gt;hash+遍历&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;&lt;a</summary>
        
      
    
    
    
    <category term="面试" scheme="https://bishoptylaor.github.io/categories/interview/"/>
    
    <category term="面试官" scheme="https://bishoptylaor.github.io/categories/interview/interviewer/"/>
    
    
    <category term="面试题" scheme="https://bishoptylaor.github.io/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://bishoptylaor.github.io/%E8%BD%AF%E5%AE%9E%E5%8A%9B/1/"/>
    <id>https://bishoptylaor.github.io/%E8%BD%AF%E5%AE%9E%E5%8A%9B/1/</id>
    <published>2022-04-21T11:14:05.167Z</published>
    <updated>2023-03-07T12:11:27.767Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;软实力&quot;&gt;&lt;a href=&quot;#软实力&quot; class=&quot;headerlink&quot; title=&quot;软实力&quot;&gt;&lt;/a&gt;软实力&lt;/h1&gt;&lt;h2 id=&quot;主动性，责任心&quot;&gt;&lt;a href=&quot;#主动性，责任心&quot; class=&quot;headerlink&quot; title=&quot;主动性，责任心&quot;&gt;&lt;/a&gt;主动性，责任心&lt;/h2&gt;&lt;h3 id=&quot;项目&quot;&gt;&lt;a href=&quot;#项目&quot; class=&quot;headerlink&quot; title=&quot;项目&quot;&gt;&lt;/a&gt;项目&lt;/h3&gt;&lt;p&gt;主动推进自己参与的每一个项目，将自己看作是每一个项目的负责人，以项目负责人的角度去看待事情，一方面能够让自己更好的做事情，另一方面也能培养自己的项目推动能力&lt;/p&gt;
&lt;h3 id=&quot;个人事务&quot;&gt;&lt;a href=&quot;#个人事务&quot; class=&quot;headerlink&quot; title=&quot;个人事务&quot;&gt;&lt;/a&gt;个人事务&lt;/h3&gt;&lt;p&gt;转介绍相关链路很长，用户从看到第三方广告开始，到最终成为忠实用户&lt;/p&gt;
&lt;h2 id=&quot;抗压能力–》有所进步，还需加强&quot;&gt;&lt;a href=&quot;#抗压能力–》有所进步，还需加强&quot; class=&quot;headerlink&quot; title=&quot;抗压能力–》有所进步，还需加强&quot;&gt;&lt;/a&gt;抗压能力–》有所进步，还需加强&lt;/h2&gt;&lt;p&gt;这一点我最初做的不够好，现在相对而言已经做的不错，总体经验如下&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;学会区分事情的轻重缓急，不那么紧急的事情就先放着，不去理会，集中精神解决掉紧急的事情，然后以平和的心态去解决那些不紧急的&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;可能说起来简单，但是具体如何实施，还是要自己多经历&lt;/p&gt;
&lt;h2 id=&quot;沟通能力–》在沟通中的谦逊没有问题，一向是自己错了就是错了不找接口，但是有时候事情多了，语气会急躁，有所注意和改进，还需要继续努力&quot;&gt;&lt;a href=&quot;#沟通能力–》在沟通中的谦逊没有问题，一向是自己错了就是错了不找接口，但是有时候事情多了，语气会急躁，有所注意和改进，还需要继续努力&quot; class=&quot;headerlink&quot; title=&quot;沟通能力–》在沟通中的谦逊没有问题，一向是自己错了就是错了不找接口，但是有时候事情多了，语气会急躁，有所注意和改进，还需要继续努力&quot;&gt;&lt;/a&gt;沟通能力–》在沟通中的谦逊没有问题，一向是自己错了就是错了不找接口，但是有时候事情多了，语气会急躁，有所注意和改进，还需要继续努力&lt;/h2&gt;&lt;h3 id=&quot;保证沟通的高效性&quot;&gt;&lt;a href=&quot;#保证沟通的高效性&quot; class=&quot;headerlink&quot; title=&quot;保证沟通的高效性&quot;&gt;&lt;/a&gt;保证沟通的高效性&lt;/h3&gt;&lt;p&gt;低效的沟通不仅会让你烦，也会让沟通对象感到烦，当发现打字已经说不清楚事情的时候可以考虑直接语音，或者直接当面对接。&lt;/p&gt;
&lt;h3 id=&quot;沟通过程保持谦逊和平和&quot;&gt;&lt;a href=&quot;#沟通过程保持谦逊和平和&quot; class=&quot;headerlink&quot; title=&quot;沟通过程保持谦逊和平和&quot;&gt;&lt;/a&gt;沟通过程保持谦逊和平和&lt;/h3&gt;&lt;h4 id=&quot;方案沟通&quot;&gt;&lt;a href=&quot;#方案沟通&quot; class=&quot;headerlink&quot; title=&quot;方案沟通&quot;&gt;&lt;/a&gt;方案沟通&lt;/h4&gt;&lt;p&gt;与他人沟通过程中难免有所争执，要能明确的从对方的角度思考，对方说的一些解决方案你可能一开始不认可，但是别人既然这么说了就一定有他这么说的原因，可以先问清楚，是不是有什么历史遗留问题或者业务场景，导致他要采用你不认可的方案，如果发现确实是对方思考不周，然后可以提供自己的想法，互相沟通，总会达成一致。&lt;/p&gt;
&lt;h4 id=&quot;接受自己不足&quot;&gt;&lt;a href=&quot;#接受自己不足&quot; class=&quot;headerlink&quot; title=&quot;接受自己不足&quot;&gt;&lt;/a&gt;接受自己不足&lt;/h4&gt;&lt;p&gt;不要有自己绝对不能犯错的思想，有时候明明是你的问题或者就是你能力不足没有思考到一些东西，被同事当面指出，这时候要保持谦逊的心，不要硬抗，这没有任何意义，错了就是错了，没有想到就是没有想到，接受别人的指责，然后反省进步即可，硬抗对他人对自己都不是一个好的方式。&lt;/p&gt;
&lt;h1 id=&quot;一些好的工作习惯和建议&quot;&gt;&lt;a href=&quot;#一些好的工作习惯和建议&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    <category term="软实力" scheme="https://bishoptylaor.github.io/categories/%E8%BD%AF%E5%AE%9E%E5%8A%9B/"/>
    
    
  </entry>
  
  <entry>
    <title>序</title>
    <link href="https://bishoptylaor.github.io/library/Golang/go-design-pattern/startup/"/>
    <id>https://bishoptylaor.github.io/library/Golang/go-design-pattern/startup/</id>
    <published>2022-02-28T09:13:11.000Z</published>
    <updated>2024-05-22T10:45:53.940Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h2 id=&quot;序&quot;&gt;&lt;a href=&quot;#序&quot; class=&quot;headerlink&quot; title=&quot;序&quot;&gt;&lt;/a&gt;序&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Go 设计模式实现，包含 23 种常见的设计模式实现，同时这也是 &lt;a href=&quot;https://time.geekbang.org/column/intro/250&quot;&gt;极客时间-设计模式之美&lt;/a&gt; 的笔记&lt;/li&gt;
&lt;li&gt;一些基础原则和思想&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;“好”代码的几个标准&quot;&gt;&lt;a href=&quot;#“好”代码的几个标准&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    <category term="知识库" scheme="https://bishoptylaor.github.io/categories/library/"/>
    
    <category term="Golang" scheme="https://bishoptylaor.github.io/categories/library/Golang/"/>
    
    <category term="设计模式之美" scheme="https://bishoptylaor.github.io/categories/library/Golang/go-design-pattern/"/>
    
    
  </entry>
  
  <entry>
    <title>zookeeper 面试必备 100 题</title>
    <link href="https://bishoptylaor.github.io/interview/100prob/zookeeper-interview-100/"/>
    <id>https://bishoptylaor.github.io/interview/100prob/zookeeper-interview-100/</id>
    <published>2022-02-27T12:59:57.000Z</published>
    <updated>2024-06-22T11:15:03.793Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;1-ZooKeeper是什么？&quot;&gt;&lt;a href=&quot;#1-ZooKeeper是什么？&quot; class=&quot;headerlink&quot; title=&quot;1. ZooKeeper是什么？&quot;&gt;&lt;/a&gt;1. ZooKeeper是什么？&lt;/h1&gt;&lt;p&gt;ZooKeeper是一个开放源码的分布式协调服务，它是集群的管理者，监视着集群中各个节点的状态根据节点提交的反馈进行下一步合理操作。最终，将简单易用的接口和性能高效、功能稳定的系统提供给用户。&lt;/p&gt;
&lt;p&gt;分布式应用程序可以基于Zookeeper实现诸如数据发布&amp;#x2F;订阅、负载均衡、命名服务、分布式协调&amp;#x2F;通知、集群管理、Master选举、分布式锁和分布式队列等功能。&lt;/p&gt;
&lt;p&gt;Zookeeper保证了如下分布式一致性特性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;顺序一致性&lt;/li&gt;
&lt;li&gt;原子性&lt;/li&gt;
&lt;li&gt;单一视图&lt;/li&gt;
&lt;li&gt;可靠性&lt;/li&gt;
&lt;li&gt;实时性（最终一致性）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;客户端的读请求可以被集群中的任意一台机器处理，&lt;strong&gt;如果读请求在节点上注册了监听器，这个监听器也是由所连接的 zookeeper 机器来处理&lt;/strong&gt;。对于写请求，这些请求会同时发给其他 zookeeper 机器并且达成一致后，请求才会返回成功。因此，随着 zookeeper 的集群机器增多，读请求的吞吐会提高但是写请求的吞吐会下降。&lt;/p&gt;
&lt;p&gt;有序性是 zookeeper 中非常重要的一个特性，所有的更新都是全局有序的，每个更新都有一个唯一的时间戳，这个时间戳称为 zxid（Zookeeper Transaction Id）。而读请求只会相对于更新有序，也就是读请求的返回结果中会带有这个 zookeeper 最新的 zxid。&lt;/p&gt;
&lt;h1 id=&quot;2-ZooKeeper提供了什么？&quot;&gt;&lt;a href=&quot;#2-ZooKeeper提供了什么？&quot; class=&quot;headerlink&quot; title=&quot;2. ZooKeeper提供了什么？&quot;&gt;&lt;/a&gt;2. ZooKeeper提供了什么？&lt;/h1&gt;&lt;p&gt;1、文件系统 2、通知机制&lt;/p&gt;
&lt;h1 id=&quot;3-Zookeeper文件系统&quot;&gt;&lt;a href=&quot;#3-Zookeeper文件系统&quot; class=&quot;headerlink&quot; title=&quot;3. Zookeeper文件系统&quot;&gt;&lt;/a&gt;3. Zookeeper文件系统&lt;/h1&gt;&lt;p&gt;Zookeeper 提供一个多层级的节点命名空间（节点称为znode）。与文件系统不同的是，这些节点都可以设置关联的数据，而文件系统中只有文件节点可以存放数据而目录节点不行。 Zookeeper 为了保证高吞吐和低延迟，在内存中维护了这个树状的目录结构，&lt;strong&gt;这种特性使得 Zookeeper 不能用于存放大量的数据，每个节点的存放数据上限为1M&lt;/strong&gt;。&lt;/p&gt;
&lt;h1 id=&quot;4-ZAB协议？&quot;&gt;&lt;a href=&quot;#4-ZAB协议？&quot; class=&quot;headerlink&quot; title=&quot;4. ZAB协议？&quot;&gt;&lt;/a&gt;4. ZAB协议？&lt;/h1&gt;&lt;p&gt;ZAB 协议是为分布式协调服务 Zookeeper 专门设计的一种支持崩溃恢复的原子广播协议。&lt;/p&gt;
&lt;p&gt;ZAB 协议包括两种基本的模式：崩溃恢复和消息广播。&lt;/p&gt;
&lt;p&gt;当整个 zookeeper 集群刚刚启动或者 Leader 服务器宕机、重启或者网络故障导致不存在过半的服务器与 Leader 服务器保持正常通信时，所有进程（服务器）进入崩溃恢复模式，首先选举产生新的 Leader 服务器，然后集群中 Follower 服务器开始与新的 Leader 服务器进行数据同步，当集群中超过半数机器与该 Leader 服务器完成数据同步之后，退出恢复模式进入消息广播模式，Leader 服务器开始接收客户端的事务请求生成事物提案来进行事务请求处理。&lt;/p&gt;
&lt;h1 id=&quot;5-四种类型的数据节点-Znode&quot;&gt;&lt;a href=&quot;#5-四种类型的数据节点-Znode&quot; class=&quot;headerlink&quot; title=&quot;5. 四种类型的数据节点 Znode&quot;&gt;&lt;/a&gt;5. 四种类型的数据节点 Znode&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;PERSISTENT-持久节点 除非手动删除，否则节点一直存在于 Zookeeper 上&lt;/li&gt;
&lt;li&gt;EPHEMERAL-临时节点 临时节点的生命周期与客户端会话绑定，一旦客户端会话失效（客户端与 zookeeper 连接断开不一定会话失效），那么这个客户端创建的所有临时节点都会被移除。&lt;/li&gt;
&lt;li&gt;PERSISTENT_SEQUENTIAL-持久顺序节点 基本特性同持久节点，只是增加了顺序属性，节点名后边会追加一个由父节点维护的自增整型数字。&lt;/li&gt;
&lt;li&gt;EPHEMERAL_SEQUENTIAL-临时顺序节点 基本特性同临时节点，增加了顺序属性，节点名后边会追加一个由父节点维护的自增整型数字。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;6-Zookeeper-Watcher-机制-–-数据变更通知&quot;&gt;&lt;a href=&quot;#6-Zookeeper-Watcher-机制-–-数据变更通知&quot; class=&quot;headerlink&quot; title=&quot;6. Zookeeper Watcher 机制 – 数据变更通知&quot;&gt;&lt;/a&gt;6. Zookeeper Watcher 机制 – 数据变更通知&lt;/h1&gt;&lt;p&gt;Zookeeper 允许客户端向服务端的某个 Znode 注册一个 Watcher 监听，当服务端的一些指定事件触发了这个 Watcher，服务端会向指定客户端发送一个事件通知来实现分布式的通知功能，然后客户端根据 Watcher 通知状态和事件类型做出业务上的改变。&lt;/p&gt;
&lt;h3 id=&quot;工作机制：&quot;&gt;&lt;a href=&quot;#工作机制：&quot; class=&quot;headerlink&quot; title=&quot;工作机制：&quot;&gt;&lt;/a&gt;工作机制：&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;客户端注册 watcher&lt;/li&gt;
&lt;li&gt;服务端处理 watcher&lt;/li&gt;
&lt;li&gt;客户端回调 watcher&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Watcher-特性总结：&quot;&gt;&lt;a href=&quot;#Watcher-特性总结：&quot; class=&quot;headerlink&quot; title=&quot;Watcher 特性总结：&quot;&gt;&lt;/a&gt;Watcher 特性总结：&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;一次性 无论是服务端还是客户端，一旦一个 Watcher 被触发，Zookeeper 都会将其从相应的存储中移除。这样的设计有效的减轻了服务端的压力，不然对于更新非常频繁的节点，服务端会不断的向客户端发送事件通知，无论对于网络还是服务端的压力都非常大。&lt;/li&gt;
&lt;li&gt;客户端串行执行 客户端 Watcher 回调的过程是一个串行同步的过程。&lt;/li&gt;
&lt;li&gt;轻量&lt;ul&gt;
&lt;li&gt;Watcher 通知非常简单，只会告诉客户端发生了事件，而不会说明事件的具体内容。&lt;/li&gt;
&lt;li&gt;客户端向服务端注册 Watcher 的时候，并不会把客户端真实的 Watcher 对象实体传递到服务端，仅仅是在客户端请求中使用 boolean 类型属性进行了标记。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;watcher event 异步发送 watcher 的通知事件从 server 发送到 client 是异步的，这就存在一个问题，不同的客户端和服务器之间通过 socket 进行通信，由于网络延迟或其他因素导致客户端在不通的时刻监听到事件，由于 Zookeeper 本身提供了ordering guarantee，即客户端监听事件后，才会感知它所监视 znode 发生了变化。所以我们使用 Zookeeper 不能期望能够监控到节点每次的变化。Zookeeper 只能保证最终的一致性，而无法保证强一致性。&lt;/li&gt;
&lt;li&gt;注册 watcher getData、exists、getChildren&lt;/li&gt;
&lt;li&gt;触发 watcher create、delete、setData&lt;/li&gt;
&lt;li&gt;当一个客户端连接到一个新的服务器上时，watch 将会被以任意会话事件触发。当与一个服务器失去连接的时候，是无法接收到 watch 的。而当 client 重新连接时，如果需要的话，所有先前注册过的 watch，都会被重新注册。通常这是完全透明的。只有在一个特殊情况下，watch 可能会丢失：对于一个未创建的 znode 的 exist watch，如果在客户端断开连接期间被创建了，并且随后在客户端连接上之前又删除了，这种情况下，这个 watch 事件可能会被丢失。&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;7-客户端注册Watcher实现&quot;&gt;&lt;a href=&quot;#7-客户端注册Watcher实现&quot; class=&quot;headerlink&quot; title=&quot;7. 客户端注册Watcher实现&quot;&gt;&lt;/a&gt;7. 客户端注册Watcher实现&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;调用 getData() &amp;#x2F; getChildren() &amp;#x2F; exist() 三个 API ，传入 Watcher 对象&lt;/li&gt;
&lt;li&gt;标记请求 request，封装 Watcher 到 WatchRegistration&lt;/li&gt;
&lt;li&gt;封装成 Packet 对象，发服务端发送 request&lt;/li&gt;
&lt;li&gt;收到服务端响应后，将 Watcher 注册到 ZKWatcherManager 中进行管理&lt;/li&gt;
&lt;li&gt;请求返回，完成注册。&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;8-服务端处理Watcher实现&quot;&gt;&lt;a href=&quot;#8-服务端处理Watcher实现&quot; class=&quot;headerlink&quot; title=&quot;8. 服务端处理Watcher实现&quot;&gt;&lt;/a&gt;8. 服务端处理Watcher实现&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;服务端接收 Watcher 并存储 接收到客户端请求，处理请求判断是否需要注册 Watcher ，需要的话将数据节点的节点路径和 ServerCnxn（ServerCnxn 代表一个客户端和服务端的连接，实现了 Watcher 的 process 接口，此时可以看成一个 Watcher 对象）存储在 WatcherManager 的 WatchTable 和 watch2Paths 中去。&lt;/li&gt;
&lt;li&gt;Watcher 触发 以服务端接收到 setData() 事务请求触发 NodeDataChanged 事件为例：&lt;ul&gt;
&lt;li&gt;封装 WatchedEvent 将通知状态（SyncConnected）、事件类型（NodeDataChanged）以及节点路径封装成一个 WatchedEvent 对象&lt;/li&gt;
&lt;li&gt;查询 Watcher 从 WatchTable 中根据节点路径查找 Watcher&lt;/li&gt;
&lt;li&gt;没找到；说明没有客户端在该数据节点上注册过 Watcher&lt;/li&gt;
&lt;li&gt;找到；提取并从 WatchTable 和 Watch2Paths 中删除对应 Watcher（&lt;strong&gt;从这里可以看出Watcher在服务端是一次性的，触发一次就失效了&lt;/strong&gt;）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;调用 process 方法来触发 Watcher 这里 process 主要就是通过 ServerCnxn 对应的 TCP 连接发送 Watcher 事件通知。&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;9-客户端回调Watcher&quot;&gt;&lt;a href=&quot;#9-客户端回调Watcher&quot; class=&quot;headerlink&quot; title=&quot;9. 客户端回调Watcher&quot;&gt;&lt;/a&gt;9. 客户端回调Watcher&lt;/h1&gt;&lt;p&gt;客户端 SendThread 线程接收事件通知，交由 EventThread 线程回调 Watcher。客户端的 Watcher 机制同样是一次性的，一旦被触发后，该 Watcher 就失效了。&lt;/p&gt;
&lt;h1 id=&quot;10-ACL权限控制机制&quot;&gt;&lt;a href=&quot;#10-ACL权限控制机制&quot; class=&quot;headerlink&quot; title=&quot;10. ACL权限控制机制&quot;&gt;&lt;/a&gt;10. ACL权限控制机制&lt;/h1&gt;&lt;h3 id=&quot;UGO（User-x2F-Group-x2F-Others）&quot;&gt;&lt;a href=&quot;#UGO（User-x2F-Group-x2F-Others）&quot; class=&quot;headerlink&quot; title=&quot;UGO（User&amp;#x2F;Group&amp;#x2F;Others）&quot;&gt;&lt;/a&gt;UGO（User&amp;#x2F;Group&amp;#x2F;Others）&lt;/h3&gt;&lt;p&gt;目前在 Linux&amp;#x2F;Unix 文件系统中使用，也是使用最广泛的权限控制方式。是一种粗粒度的文件系统权限控制模式。&lt;/p&gt;
&lt;h3 id=&quot;ACL（Access-Control-List）访问控制列表&quot;&gt;&lt;a href=&quot;#ACL（Access-Control-List）访问控制列表&quot; class=&quot;headerlink&quot; title=&quot;ACL（Access Control List）访问控制列表&quot;&gt;&lt;/a&gt;ACL（Access Control List）访问控制列表&lt;/h3&gt;&lt;p&gt;包括三个方面：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;权限模式（Scheme）&lt;ul&gt;
&lt;li&gt;IP：从IP地址粒度进行权限控制&lt;/li&gt;
&lt;li&gt;Digest：最常用，用类似于 username:password 的权限标识来进行权限配置，便于区分不同应用来进行权限控制&lt;/li&gt;
&lt;li&gt;World：最开放的权限控制方式，是一种特殊的 digest 模式，只有一个权限标识 “world:anyone”&lt;/li&gt;
&lt;li&gt;Super：超级用户&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;授权对象 授权对象指的是权限赋予的用户或一个指定实体，例如IP地址或是机器灯。&lt;/li&gt;
&lt;li&gt;权限 Permission&lt;ul&gt;
&lt;li&gt;CREATE：数据节点创建权限，允许授权对象在该 Znode 下创建子节点&lt;/li&gt;
&lt;li&gt;DELETE：子节点删除权限，允许授权对象删除该数据节点的子节点&lt;/li&gt;
&lt;li&gt;READ：数据节点的读取权限，允许授权对象访问该数据节点并读取其数据内容或子节点列表等&lt;/li&gt;
&lt;li&gt;WRITE：数据节点更新权限，允许授权对象对该数据节点进行更新操作&lt;/li&gt;
&lt;li&gt;ADMIN：数据节点管理权限，允许授权对象对该数据节点进行 ACL 相关设置操作&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;11-Chroot特性&quot;&gt;&lt;a href=&quot;#11-Chroot特性&quot; class=&quot;headerlink&quot; title=&quot;11. Chroot特性&quot;&gt;&lt;/a&gt;11. Chroot特性&lt;/h1&gt;&lt;p&gt;3.2.0版本后，添加了 Chroot 特性，该特性允许每个客户端为自己设置一个命名空间。如果一个客户端设置了 Chroot，那么该客户端对服务器的任何操作，都将会被限制在其自己的命名空间下。&lt;/p&gt;
&lt;p&gt;通过设置 Chroot，能够将一个客户端应用于 Zookeeper 服务端的一颗子树相对应，在那些多个应用公用一个 Zookeeper 进群的场景下，对实现不同应用间的相互隔离非常有帮助。&lt;/p&gt;
&lt;h1 id=&quot;12-会话管理&quot;&gt;&lt;a href=&quot;#12-会话管理&quot; class=&quot;headerlink&quot; title=&quot;12. 会话管理&quot;&gt;&lt;/a&gt;12. 会话管理&lt;/h1&gt;&lt;p&gt;分桶策略：将类似的会话放在同一区块中进行管理，以便于 Zookeeper 对会话进行不同区块的隔离处理以及同一区块的统一处理。&lt;/p&gt;
&lt;p&gt;分配原则：每个会话的“下次超时时间点”（ExpirationTime）&lt;/p&gt;
&lt;p&gt;计算公式：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title class_&quot;&gt;ExpirationTime&lt;/span&gt;_ = currentTime + sessionTimeout&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title class_&quot;&gt;ExpirationTime&lt;/span&gt; = (&lt;span class=&quot;title class_&quot;&gt;ExpirationTime&lt;/span&gt;_ / &lt;span class=&quot;title class_&quot;&gt;ExpirationInrerval&lt;/span&gt; + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) * &lt;span class=&quot;title class_&quot;&gt;ExpirationInterval&lt;/span&gt; , &lt;span class=&quot;title class_&quot;&gt;ExpirationInterval&lt;/span&gt; 是指 &lt;span class=&quot;title class_&quot;&gt;Zookeeper&lt;/span&gt; 会话超时检查时间间隔，默认 tickTime&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h1 id=&quot;13-服务器角色&quot;&gt;&lt;a href=&quot;#13-服务器角色&quot; class=&quot;headerlink&quot; title=&quot;13. 服务器角色&quot;&gt;&lt;/a&gt;13. 服务器角色&lt;/h1&gt;&lt;h3 id=&quot;Leader&quot;&gt;&lt;a href=&quot;#Leader&quot; class=&quot;headerlink&quot; title=&quot;Leader&quot;&gt;&lt;/a&gt;Leader&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;事务请求的唯一调度和处理者，保证集群事务处理的顺序性&lt;/li&gt;
&lt;li&gt;集群内部各服务的调度者&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Follower&quot;&gt;&lt;a href=&quot;#Follower&quot; class=&quot;headerlink&quot; title=&quot;Follower&quot;&gt;&lt;/a&gt;Follower&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;处理客户端的非事务请求，转发事务请求给Leader服务器&lt;/li&gt;
&lt;li&gt;参与事务请求Proposal的投票&lt;/li&gt;
&lt;li&gt;参与Leader选举投票&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Observer&quot;&gt;&lt;a href=&quot;#Observer&quot; class=&quot;headerlink&quot; title=&quot;Observer&quot;&gt;&lt;/a&gt;Observer&lt;/h3&gt;&lt;p&gt;3.3.0版本以后引入的一个服务器角色，在不影响集群事务处理能力的基础上提升集群的非事务处理能力&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;处理客户端的非事务请求，转发事务请求给Leader服务器&lt;/li&gt;
&lt;li&gt;不参与任何形式的投票&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;14-Zookeeper-下-Server工作状态&quot;&gt;&lt;a href=&quot;#14-Zookeeper-下-Server工作状态&quot; class=&quot;headerlink&quot; title=&quot;14. Zookeeper 下 Server工作状态&quot;&gt;&lt;/a&gt;14. Zookeeper 下 Server工作状态&lt;/h1&gt;&lt;p&gt;服务器具有四种状态，分别是 LOOKING、FOLLOWING、LEADING、OBSERVING。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;LOOKING：寻找 Leader 状态。当服务器处于该状态时，它会认为当前集群中没有 Leader，因此需要进入 Leader 选举状态。&lt;/li&gt;
&lt;li&gt;FOLLOWING：跟随者状态。表明当前服务器角色是 Follower。&lt;/li&gt;
&lt;li&gt;LEADING：领导者状态。表明当前服务器角色是 Leader。&lt;/li&gt;
&lt;li&gt;OBSERVING：观察者状态。表明当前服务器角色是 Observer。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;15-Leader-选举&quot;&gt;&lt;a href=&quot;#15-Leader-选举&quot; class=&quot;headerlink&quot; title=&quot;15. Leader 选举&quot;&gt;&lt;/a&gt;15. Leader 选举&lt;/h1&gt;&lt;p&gt;Leader选举是保证分布式数据一致性的关键所在。当 Zookeeper 集群中的一台服务器出现以下两种情况之一时，需要进入 Leader 选举。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;服务器初始化启动。&lt;/li&gt;
&lt;li&gt;服务器运行期间无法和Leader保持连接。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;下面就两种情况进行分析讲解。&lt;/p&gt;
&lt;h3 id=&quot;服务器启动时期的Leader选举&quot;&gt;&lt;a href=&quot;#服务器启动时期的Leader选举&quot; class=&quot;headerlink&quot; title=&quot;服务器启动时期的Leader选举&quot;&gt;&lt;/a&gt;服务器启动时期的Leader选举&lt;/h3&gt;&lt;p&gt;若进行 Leader 选举，则至少需要两台机器，这里选取3台机器组成的服务器集群为例。在集群初始化阶段，当有一台服务器 Server1 启动时，其单独无法进行和完成 Leader 选举，当第二台服务器 Server2 启动时，此时两台机器可以相互通信，每台机器都试图找到 Leader ，于是进入 Leader 选举过程。选举过程如下&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;每个 Server 发出一个投票。由于是初始情况，Server1 和 Server2 都会将自己作为 Leader 服务器来进行投票，每次投票会包含所推举的服务器的 myid 和 ZXID ，使用 (myid, ZXID) 来表示，此时 Server1 的投票为 (1, 0)，Server2 的投票为 (2, 0)，然后各自将这个投票发给集群中其他机器。&lt;/li&gt;
&lt;li&gt;接受来自各个服务器的投票。集群的每个服务器收到投票后，首先判断该投票的有效性，如检查是否是本轮投票、是否来自 LOOKING 状态的服务器。&lt;/li&gt;
&lt;li&gt;处理投票。针对每一个投票，服务器都需要将别人的投票和自己的投票进行 PK ，PK 规则如下&lt;ul&gt;
&lt;li&gt;优先检查 ZXID 。ZXID 比较大的服务器优先作为 Leader。&lt;/li&gt;
&lt;li&gt;如果 ZXID 相同，那么就比较 myid。myid 较大的服务器作为 Leader 服务器。&lt;/li&gt;
&lt;li&gt;对于 Server1 而言，它的投票是 (1, 0)，接收 Server2 的投票为 (2, 0)，首先会比较两者的 ZXID，均为 0，再比较 myid，此时 Server2 的 myid 最大，于是更新自己的投票为 (2, 0)，然后重新投票，对于 Server2 而言，其无须更新自己的投票，只是再次向集群中所有机器发出上一次投票信息即可。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;统计投票。每次投票后，服务器都会统计投票信息，判断是否已经有过半机器接受到相同的投票信息，对于 Server1、Server2 而言，都统计出集群中已经有两台机器接受了 (2, 0) 的投票信息，此时便认为已经选出了 Leader。&lt;/li&gt;
&lt;li&gt;改变服务器状态。一旦确定了 Leader ，每个服务器就会更新自己的状态，如果是 Follower，那么就变更为 FOLLOWING，如果是 Leader，就变更为 LEADING。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;服务器运行时期的-Leader-选举&quot;&gt;&lt;a href=&quot;#服务器运行时期的-Leader-选举&quot; class=&quot;headerlink&quot; title=&quot;服务器运行时期的 Leader 选举&quot;&gt;&lt;/a&gt;服务器运行时期的 Leader 选举&lt;/h3&gt;&lt;p&gt;在 Zookeeper 运行期间，Leader 与非 Leader 服务器各司其职，即便当有非 Leader 服务器宕机或新加入，此时也不会影响 Leader ，但是一旦 Leader 服务器挂了，那么整个集群将暂停对外服务，进入新一轮 Leader 选举，其过程和启动时期的 Leader 选举过程基本一致。假设正在运行的有 Server1、Server2、Server3 三台服务器，当前 Leader 是 Server2，若某一时刻 Leader 挂了，此时便开始 Leader 选举。选举过程如下&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;变更状态。Leader 挂后，余下的非 Observer 服务器都会讲自己的服务器状态变更为 LOOKING，然后开始进入 Leader 选举过程。&lt;/li&gt;
&lt;li&gt;每个 Server 会发出一个投票。在运行期间，每个服务器上的 ZXID 可能不同，此时假定 Server1 的 ZXID 为 123，Server3 的 ZXID 为 122；在第一轮投票中，Server1 和 Server3 都会投自己，产生投票 (1, 123)，(3, 122)，然后各自将投票发送给集群中所有机器。&lt;/li&gt;
&lt;li&gt;接收来自各个服务器的投票。与启动时过程相同。&lt;/li&gt;
&lt;li&gt;处理投票。与启动时过程相同，此时，Server1 将会成为 Leader。&lt;/li&gt;
&lt;li&gt;统计投票。与启动时过程相同。&lt;/li&gt;
&lt;li&gt;改变服务器的状态。与启动时过程相同。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;Leader选举算法分析&quot;&gt;&lt;a href=&quot;#Leader选举算法分析&quot; class=&quot;headerlink&quot; title=&quot;Leader选举算法分析&quot;&gt;&lt;/a&gt;Leader选举算法分析&lt;/h3&gt;&lt;p&gt;在 3.4.0 后的 Zookeeper 的版本只保留了 TCP 版本的 FastLeaderElection 选举算法。当一台机器进入 Leader 选举时，当前集群可能会处于以下两种状态&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;集群中已经存在 Leader。&lt;/li&gt;
&lt;li&gt;集群中不存在 Leader。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对于集群中已经存在 Leader 而言，此种情况一般都是某台机器启动得较晚，在其启动之前，集群已经在正常工作，对这种情况，该机器试图去选举 Leader 时，会被告知当前服务器的 Leader 信息，对于该机器而言，仅仅需要和 Leader 机器建立起连接，并进行状态同步即可。而在集群中不存在 Leader 情况下则会相对复杂，其步骤如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;第一次投票。无论哪种导致进行 Leader 选举，集群的所有机器都处于试图选举出一个 Leader 的状态，即 LOOKING 状态，LOOKING 机器会向所有其他机器发送消息，该消息称为投票。投票中包含了 SID（服务器的唯一标识）和 ZXID（事务ID），(SID, ZXID) 形式来标识一次投票信息。假定 Zookeeper  由5台机器组成，SID 分别为 1、2、3、4、5，ZXID 分别为 9、9、9、8、8，并且此时 SID 为 2 的机器是 Leader 机器，某一时刻，1、2所在机器出现故障，因此集群开始进行 Leader 选举。在第一次投票时，每台机器都会将自己作为投票对象，于是 SID 为 3、4、5 的机器投票情况分别为 (3, 9)，(4, 8)， (5, 8)。&lt;/li&gt;
&lt;li&gt;变更投票。每台机器发出投票后，也会收到其他机器的投票，每台机器会根据一定规则来处理收到的其他机器的投票，并以此来决定是否需要变更自己的投票，这个规则也是整个 Leader 选举算法的核心所在，其中术语描述如下：&lt;ol&gt;
&lt;li&gt;vote_sid：接收到的投票中所推举 Leader 服务器的 SID。&lt;/li&gt;
&lt;li&gt;vote_zxid：接收到的投票中所推举 Leader 服务器的 ZXID。&lt;/li&gt;
&lt;li&gt;self_sid：当前服务器自己的 SID。&lt;/li&gt;
&lt;li&gt;self_zxid：当前服务器自己的 ZXID。&lt;br&gt;每次对收到的投票的处理，都是对（vote_sid, vote_zxid）和（self_sid, self_zxid）对比的过程。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;规则一：如果 vote_zxid 大于 self_zxid，就认可当前收到的投票，并再次将该投票发送出去。&lt;/li&gt;
&lt;li&gt;规则二：如果 vote_zxid 小于 self_zxid，那么坚持自己的投票，不做任何变更。&lt;/li&gt;
&lt;li&gt;规则三：如果 vote_zxid 等于 self_zxid，那么就对比两者的 SID，如果 vote_sid 大于 self_sid，那么就认可当前收到的投票，并再次将该投票发送出去。&lt;/li&gt;
&lt;li&gt;规则四：如果 vote_zxid 等于 self_zxid，并且 vote_sid 小于 self_sid，那么坚持自己的投票，不做任何变更。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;结合上面规则，给出下面的集群变更过程。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;确定 Leader。经过第二轮投票后，集群中的每台机器都会再次接收到其他机器的投票，然后开始统计投票，如果一台机器收到了超过半数的相同投票，那么这个投票对应的 SID 机器即为 Leader。此时 Server3 将成为 Leader。由上面规则可知，通常那台服务器上的数据越新（ZXID 会越大），其成为 Leader 的可能性越大，也就越能够保证数据的恢复。如果 ZXID 相同，则 SID 越大机会越大。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;Leader选举实现细节&quot;&gt;&lt;a href=&quot;#Leader选举实现细节&quot; class=&quot;headerlink&quot; title=&quot;Leader选举实现细节&quot;&gt;&lt;/a&gt;Leader选举实现细节&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;服务器状态&lt;ol&gt;
&lt;li&gt;LOOKING：寻找 Leader 状态。当服务器处于该状态时，它会认为当前集群中没有 Leader，因此需要进入 Leader 选举状态。&lt;/li&gt;
&lt;li&gt;FOLLOWING：跟随者状态。表明当前服务器角色是 Follower。&lt;/li&gt;
&lt;li&gt;LEADING：领导者状态。表明当前服务器角色是 Leader。&lt;/li&gt;
&lt;li&gt;OBSERVING：观察者状态。表明当前服务器角色是 Observer。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;投票数据结构&lt;ol&gt;
&lt;li&gt;id：被推举的 Leader 的 SID。&lt;/li&gt;
&lt;li&gt;zxid：被推举的 Leader 事务 ID。&lt;/li&gt;
&lt;li&gt;electionEpoch：逻辑时钟，用来判断多个投票是否在同一轮选举周期中，该值在服务端是一个自增序列，每次进入新一轮的投票后，都会对该值进行加1操作。&lt;/li&gt;
&lt;li&gt;peerEpoch：被推举的 Leader 的 epoch。&lt;/li&gt;
&lt;li&gt;state：当前服务器的状态。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;QuorumCnxManager：网络I&amp;#x2F;O&lt;ol&gt;
&lt;li&gt;每台服务器在启动的过程中，会启动一个 QuorumPeerManager，负责各台服务器之间的底层 Leader 选举过程中的网络通信。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;消息队列&lt;/strong&gt;。QuorumCnxManager 内部维护了一系列的队列，用来保存接收到的、待发送的消息以及消息的发送器，除接收队列以外，其他队列都按照 SID 分组形成队列集合，如一个集群中除了自身还有 3 台机器，那么就会为这3台机器分别创建一个发送队列，互不干扰。&lt;ol&gt;
&lt;li&gt;recvQueue：消息接收队列，用于存放那些从其他服务器接收到的消息。&lt;/li&gt;
&lt;li&gt;queueSendMap：消息发送队列，用于保存那些待发送的消息，按照 SID 进行分组。&lt;/li&gt;
&lt;li&gt;senderWorkerMap：发送器集合，每个 SenderWorker 消息发送器，都对应一台远程 Zookeeper 服务器，负责消息的发送，也按照SID进行分组。&lt;/li&gt;
&lt;li&gt;lastMessageSent：最近发送过的消息，为每个 SID 保留最近发送过的一个消息。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;建立连接&lt;/strong&gt;。为了能够相互投票，Zookeeper 集群中的所有机器都需要两两建立起网络连接。QuorumCnxManager 在启动时会创建一个 ServerSocket 来监听 Leader 选举的通信端口（默认为 3888 ）。开启监听后，Zookeeper 能够不断地接收到来自其他服务器的创建连接请求，在接收到其他服务器的 TCP 连接请求时，会进行处理。为了避免两台机器之间重复地创建 TCP 连接，Zookeeper 只允许 SID 大的服务器主动和其他机器建立连接，否则断开连接。在接收到创建连接请求后，服务器通过对比自己和远程服务器的 SID 值来判断是否接收连接请求，如果当前服务器发现自己的 SID 更大，那么会断开当前连接，然后自己主动和远程服务器建立连接。一旦连接建立，就会根据远程服务器的 SID 来创建相应的消息发送器 SendWorker 和消息接收器 RecvWorker，并启动。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;消息接收与发送&lt;/strong&gt;。消息接收：由消息接收器 RecvWorker 负责，由于 Zookeeper 为每个远程服务器都分配一个单独的 RecvWorker，因此，每个 RecvWorker 只需要不断地从这个 TCP 连接中读取消息，并将其保存到 recvQueue 队列中。消息发送：由于 Zookeeper 为每个远程服务器都分配一个单独的 SendWorker，因此，每个 SendWorker 只需要不断地从对应的消息发送队列中获取出一个消息发送即可，同时将这个消息放入 lastMessageSent中。在 SendWorker 中，一旦 Zookeeper 发现针对当前服务器的消息发送队列为空，那么此时需要从 lastMessageSent 中取出一个最近发送过的消息来进行再次发送，这是为了解决接收方在消息接收前或者接收到消息后服务器挂了，导致消息尚未被正确处理。同时，Zookeeper 能够保证接收方在处理消息时，会对重复消息进行正确的处理。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;FastLeaderElection：选举算法核心&lt;ul&gt;
&lt;li&gt;外部投票：特指其他服务器发来的投票。&lt;/li&gt;
&lt;li&gt;内部投票：服务器自身当前的投票。&lt;/li&gt;
&lt;li&gt;选举轮次：Zookeeper 服务器 Leader 选举的轮次，即 logicalclock。&lt;/li&gt;
&lt;li&gt;PK：对内部投票和外部投票进行对比来确定是否需要变更内部投票。&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;选票管理&lt;ol&gt;
&lt;li&gt;sendqueue：选票发送队列，用于保存待发送的选票。&lt;/li&gt;
&lt;li&gt;recvqueue：选票接收队列，用于保存接收到的外部投票。&lt;/li&gt;
&lt;li&gt;WorkerReceiver：选票接收器。其会不断地从 QuorumCnxManager 中获取其他服务器发来的选举消息，并将其转换成一个选票，然后保存到recvqueue中，在选票接收过程中，如果发现该外部选票的选举轮次小于当前服务器的，那么忽略该外部投票，同时立即发送自己的内部投票。&lt;/li&gt;
&lt;li&gt;WorkerSender：选票发送器，不断地从 sendqueue 中获取待发送的选票，并将其传递到底层 QuorumCnxManager 中。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;算法核心：Leader 选举的基本流程如下：&lt;ol&gt;
&lt;li&gt;自增选举轮次。Zookeeper 规定所有有效的投票都必须在同一轮次中，在开始新一轮投票时，会首先对 logicalclock 进行自增操作。&lt;/li&gt;
&lt;li&gt;初始化选票。在开始进行新一轮投票之前，每个服务器都会初始化自身的选票，并且在初始化阶段，每台服务器都会将自己推举为 Leader。&lt;/li&gt;
&lt;li&gt;发送初始化选票。完成选票的初始化后，服务器就会发起第一次投票。Zookeeper 会将刚刚初始化好的选票放入 sendqueue 中，由发送器 WorkerSender 负责发送出去。&lt;/li&gt;
&lt;li&gt;接收外部投票。每台服务器会不断地从 recvqueue 队列中获取外部选票。如果服务器发现无法获取到任何外部投票，那么就会立即确认自己是否和集群中其他服务器保持着有效的连接，如果没有连接，则马上建立连接，如果已经建立了连接，则再次发送自己当前的内部投票。&lt;/li&gt;
&lt;li&gt;判断选举轮次。在发送完初始化选票之后，接着开始处理外部投票。在处理外部投票时，会根据选举轮次来进行不同的处理。&lt;ol&gt;
&lt;li&gt;外部投票的选举轮次大于内部投票。若服务器自身的选举轮次落后于该外部投票对应服务器的选举轮次，那么就会立即更新自己的选举轮次（logicalclock），并且清空所有已经收到的投票，然后使用初始化的投票来进行PK以确定是否变更内部投票。最终再将内部投票发送出去。&lt;/li&gt;
&lt;li&gt;外部投票的选举轮次小于内部投票。若服务器接收的外选票的选举轮次落后于自身的选举轮次，那么 Zookeeper 就会直接忽略该外部投票，不做任何处理，并返回步骤 4。&lt;/li&gt;
&lt;li&gt;外部投票的选举轮次等于内部投票。此时可以开始进行选票PK。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;选票 PK。在进行选票 PK 时，符合任意一个条件就需要变更投票。&lt;ol&gt;
&lt;li&gt;若外部投票中推举的 Leader 服务器的选举轮次大于内部投票，那么需要变更投票。&lt;/li&gt;
&lt;li&gt;若选举轮次一致，那么就对比两者的 ZXID，若外部投票的 ZXID 大，那么需要变更投票。&lt;/li&gt;
&lt;li&gt;若两者的 ZXID 一致，那么就对比两者的 SID，若外部投票的 SID 大，那么就需要变更投票。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;变更投票。经过 PK 后，若确定了外部投票优于内部投票，那么就变更投票，即使用外部投票的选票信息来覆盖内部投票，变更完成后，再次将这个变更后的内部投票发送出去。&lt;/li&gt;
&lt;li&gt;选票归档。无论是否变更了投票，都会将刚刚收到的那份外部投票放入选票集合 recvset 中进行归档。recvset 用于记录当前服务器在本轮次的 Leader 选举中收到的所有外部投票（按照服务队的 SID 区别，如{(1, vote1), (2, vote2)…}）。&lt;/li&gt;
&lt;li&gt;统计投票。完成选票归档后，就可以开始统计投票，统计投票是为了统计集群中是否已经有过半的服务器认可了当前的内部投票，如果确定已经有过半服务器认可了该投票，则终止投票。否则返回步骤4。&lt;/li&gt;
&lt;li&gt;更新服务器状态。若已经确定可以终止投票，那么就开始更新服务器状态，服务器首选判断当前被过半服务器认可的投票所对应的 Leader 服务器是否是自己，若是自己，则将自己的服务器状态更新为 LEADING ，若不是，则根据具体情况来确定自己是 FOLLOWING 或是 OBSERVING。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;以上10个步骤就是 FastLeaderElection 的核心，其中步骤 4-9 会经过几轮循环，直到有 Leader 选举产生。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;16-数据同步&quot;&gt;&lt;a href=&quot;#16-数据同步&quot; class=&quot;headerlink&quot; title=&quot;16. 数据同步&quot;&gt;&lt;/a&gt;16. 数据同步&lt;/h1&gt;&lt;p&gt;整个集群完成 Leader 选举之后，Learner（Follower 和 Observer 的统称）会向 Leader 服务器进行注册。当 Learner 服务器向 Leader 服务器完成注册后，进入数据同步环节。&lt;br&gt;数据同步流程：（均以消息传递的方式进行） i. Learner 向 Learder 注册 ii. 数据同步 iii. 同步确认&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Zookeeper的数据同步通常分为四类：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;直接差异化同步（DIFF 同步）&lt;/li&gt;
&lt;li&gt;先回滚再差异化同步（TRUNC + DIFF 同步）&lt;/li&gt;
&lt;li&gt;仅回滚同步（TRUNC 同步）&lt;/li&gt;
&lt;li&gt;全量同步（SNAP 同步）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在进行数据同步前，Leader 服务器会完成数据同步初始化：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;peerLastZxid：从 learner 服务器注册时发送的 ACKEPOCH 消息中提取 lastZxid（该 Learner 服务器最后处理的 ZXID）&lt;/li&gt;
&lt;li&gt;minCommittedLog：Leader 服务器 Proposal 缓存队列 committedLog 中最小 ZXID&lt;/li&gt;
&lt;li&gt;maxCommittedLog：Leader 服务器 Proposal 缓存队列 committedLog 中最大 ZXID&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;直接差异化同步（DIFF同步）&quot;&gt;&lt;a href=&quot;#直接差异化同步（DIFF同步）&quot; class=&quot;headerlink&quot; title=&quot;直接差异化同步（DIFF同步）&quot;&gt;&lt;/a&gt;直接差异化同步（DIFF同步）&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;场景&lt;/strong&gt;：peerLastZxid 介于 minCommittedLog 和 maxCommittedLog 之间&lt;/p&gt;
&lt;h3 id=&quot;先回滚再差异化同步（TRUNC-DIFF同步）&quot;&gt;&lt;a href=&quot;#先回滚再差异化同步（TRUNC-DIFF同步）&quot; class=&quot;headerlink&quot; title=&quot;先回滚再差异化同步（TRUNC+DIFF同步）&quot;&gt;&lt;/a&gt;先回滚再差异化同步（TRUNC+DIFF同步）&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;场景&lt;/strong&gt;：当新的 Leader 服务器发现某个 Learner 服务器包含了一条自己没有的事务记录，那么就需要让该 Learner 服务器进行事务回滚–回滚到 Leader 服务器上存在的，同时也是最接近于 peerLastZxid 的 ZXID&lt;/p&gt;
&lt;h3 id=&quot;仅回滚同步（TRUNC同步）&quot;&gt;&lt;a href=&quot;#仅回滚同步（TRUNC同步）&quot; class=&quot;headerlink&quot; title=&quot;仅回滚同步（TRUNC同步）&quot;&gt;&lt;/a&gt;仅回滚同步（TRUNC同步）&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;场景&lt;/strong&gt;：peerLastZxid 大于 maxCommittedLog&lt;/p&gt;
&lt;h3 id=&quot;全量同步（SNAP同步）&quot;&gt;&lt;a href=&quot;#全量同步（SNAP同步）&quot; class=&quot;headerlink&quot; title=&quot;全量同步（SNAP同步）&quot;&gt;&lt;/a&gt;全量同步（SNAP同步）&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;场景一&lt;/strong&gt;：peerLastZxid 小于 minCommittedLog&lt;br&gt;&lt;strong&gt;场景二&lt;/strong&gt;：Leader 服务器上没有 Proposal 缓存队列且 peerLastZxid 不等于 lastProcessZxid&lt;/p&gt;
&lt;h1 id=&quot;17-zookeeper是如何保证事务的顺序一致性的？&quot;&gt;&lt;a href=&quot;#17-zookeeper是如何保证事务的顺序一致性的？&quot; class=&quot;headerlink&quot; title=&quot;17. zookeeper是如何保证事务的顺序一致性的？&quot;&gt;&lt;/a&gt;17. zookeeper是如何保证事务的顺序一致性的？&lt;/h1&gt;&lt;p&gt;zookeeper 采用了全局递增的事务 Id 来标识，所有的 proposal（提议）都在被提出的时候加上了 zxid，zxid 实际上是一个 64 位的数字，高 32 位是 epoch（时期; 纪元; 世; 新时代）用来标识 leader 周期，如果有新的 leader 产生出来，epoch 会自增，低 32 位用来递增计数。当新产生 proposal 的时候，会依据数据库的两阶段过程，首先会向其他的 server 发出事务执行请求，如果超过半数的机器都能执行并且能够成功，那么就会开始执行。&lt;/p&gt;
&lt;h1 id=&quot;18-分布式集群中为什么会有Master？&quot;&gt;&lt;a href=&quot;#18-分布式集群中为什么会有Master？&quot; class=&quot;headerlink&quot; title=&quot;18. 分布式集群中为什么会有Master？&quot;&gt;&lt;/a&gt;18. 分布式集群中为什么会有Master？&lt;/h1&gt;&lt;p&gt;在分布式环境中，有些业务逻辑只需要集群中的某一台机器进行执行，其他的机器可以共享这个结果，这样可以大大减少重复计算，提高性能，于是就需要进行 leader 选举。&lt;/p&gt;
&lt;h1 id=&quot;19-zk节点宕机如何处理？&quot;&gt;&lt;a href=&quot;#19-zk节点宕机如何处理？&quot; class=&quot;headerlink&quot; title=&quot;19. zk节点宕机如何处理？&quot;&gt;&lt;/a&gt;19. zk节点宕机如何处理？&lt;/h1&gt;&lt;p&gt;Zookeeper 本身也是集群，推荐配置不少于3个服务器。Zookeeper 自身也要保证当一个节点宕机时，其他节点会继续提供服务。 如果是一个 Follower 宕机，还有2台服务器提供访问，因为 Zookeeper 上的数据是有多个副本的，数据并不会丢失； 如果是一个 Leader 宕机，Zookeeper 会选举出新的 Leader。 ZK 集群的机制是只要超过半数的节点正常，集群就能正常提供服务。只有在 ZK 节点挂得太多，只剩一半或不到一半节点能工作，集群才失效。 所以 3 个节点的 cluster 可以挂掉 1 个节点（leader可以得到2票 &amp;gt; 1.5） 2 个节点的 cluster 就不能挂掉任何一个节点了（leader 可以得到 1 票 &amp;lt;&amp;#x3D; 1）&lt;/p&gt;
&lt;h1 id=&quot;20-zookeeper负载均衡和nginx负载均衡区别&quot;&gt;&lt;a href=&quot;#20-zookeeper负载均衡和nginx负载均衡区别&quot; class=&quot;headerlink&quot; title=&quot;20. zookeeper负载均衡和nginx负载均衡区别&quot;&gt;&lt;/a&gt;20. zookeeper负载均衡和nginx负载均衡区别&lt;/h1&gt;&lt;p&gt;zk 的负载均衡是可以调控，nginx 只是能调权重，其他需要可控的都需要自己写插件；但是 nginx 的吞吐量比zk大很多，应该说按业务选择用哪种方式。&lt;/p&gt;
&lt;h1 id=&quot;21-Zookeeper有哪几种几种部署模式？&quot;&gt;&lt;a href=&quot;#21-Zookeeper有哪几种几种部署模式？&quot; class=&quot;headerlink&quot; title=&quot;21. Zookeeper有哪几种几种部署模式？&quot;&gt;&lt;/a&gt;21. Zookeeper有哪几种几种部署模式？&lt;/h1&gt;&lt;p&gt;部署模式：单机模式、伪集群模式、集群模式。&lt;/p&gt;
&lt;h1 id=&quot;22-集群最少要几台机器，集群规则是怎样的&quot;&gt;&lt;a href=&quot;#22-集群最少要几台机器，集群规则是怎样的&quot; class=&quot;headerlink&quot; title=&quot;22. 集群最少要几台机器，集群规则是怎样的?&quot;&gt;&lt;/a&gt;22. 集群最少要几台机器，集群规则是怎样的?&lt;/h1&gt;&lt;p&gt;集群规则为 2N+1 台，N&amp;gt;0，即 3 台。&lt;/p&gt;
&lt;h1 id=&quot;23-集群支持动态添加机器吗？&quot;&gt;&lt;a href=&quot;#23-集群支持动态添加机器吗？&quot; class=&quot;headerlink&quot; title=&quot;23. 集群支持动态添加机器吗？&quot;&gt;&lt;/a&gt;23. 集群支持动态添加机器吗？&lt;/h1&gt;&lt;p&gt;其实就是水平扩容了，Zookeeper 在这方面不太好。两种方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;全部重启：关闭所有 Zookeeper 服务，修改配置之后启动。不影响之前客户端的会话。&lt;/li&gt;
&lt;li&gt;逐个重启：在过半存活即可用的原则下，一台机器重启不影响整个集群对外提供服务。这是比较常用的方式。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;3.5版本开始支持动态扩容。&lt;/p&gt;
&lt;h1 id=&quot;24-Zookeeper对节点的watch监听通知是永久的吗？为什么不是永久的&quot;&gt;&lt;a href=&quot;#24-Zookeeper对节点的watch监听通知是永久的吗？为什么不是永久的&quot; class=&quot;headerlink&quot; title=&quot;24. Zookeeper对节点的watch监听通知是永久的吗？为什么不是永久的?&quot;&gt;&lt;/a&gt;24. Zookeeper对节点的watch监听通知是永久的吗？为什么不是永久的?&lt;/h1&gt;&lt;p&gt;不是。官方声明：一个 Watch 事件是一个一次性的触发器，当被设置了 Watch 的数据发生了改变的时候，则服务器将这个改变发送给设置了 Watch 的客户端，以便通知它们。&lt;/p&gt;
&lt;p&gt;为什么不是永久的，举个例子，如果服务端变动频繁，而监听的客户端很多情况下，每次变动都要通知到所有的客户端，给网络和服务器造成很大压力。 一般是客户端执行 getData(“&amp;#x2F;节点A”,true)，如果节点 A 发生了变更或删除，客户端会得到它的 watch 事件，但是在之后节点 A 又发生了变更，而客户端又没有设置 watch 事件，就不再给客户端发送。 在实际应用中，很多情况下，我们的客户端不需要知道服务端的每一次变动，我只要最新的数据即可。&lt;/p&gt;
&lt;h1 id=&quot;25-chubby是什么，和zookeeper比你怎么看？&quot;&gt;&lt;a href=&quot;#25-chubby是什么，和zookeeper比你怎么看？&quot; class=&quot;headerlink&quot; title=&quot;25. chubby是什么，和zookeeper比你怎么看？&quot;&gt;&lt;/a&gt;25. chubby是什么，和zookeeper比你怎么看？&lt;/h1&gt;&lt;p&gt;chubby 是 google 的，完全实现 paxos 算法，不开源。zookeeper 是 chubby 的开源实现，使用zab协议，paxos 算法的变种。&lt;/p&gt;
&lt;h1 id=&quot;26-说几个zookeeper常用的命令。&quot;&gt;&lt;a href=&quot;#26-说几个zookeeper常用的命令。&quot; class=&quot;headerlink&quot; title=&quot;26. 说几个zookeeper常用的命令。&quot;&gt;&lt;/a&gt;26. 说几个zookeeper常用的命令。&lt;/h1&gt;&lt;p&gt;常用命令：ls get set create delete等。&lt;/p&gt;
&lt;h1 id=&quot;27-ZAB和Paxos算法的联系与区别？&quot;&gt;&lt;a href=&quot;#27-ZAB和Paxos算法的联系与区别？&quot; class=&quot;headerlink&quot; title=&quot;27. ZAB和Paxos算法的联系与区别？&quot;&gt;&lt;/a&gt;27. ZAB和Paxos算法的联系与区别？&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;相同点：&lt;ul&gt;
&lt;li&gt;两者都存在一个类似于 Leader 进程的角色，由其负责协调多个 Follower 进程的运行&lt;/li&gt;
&lt;li&gt;Leader 进程都会等待超过半数的 Follower 做出正确的反馈后，才会将一个提案进行提交&lt;/li&gt;
&lt;li&gt;ZAB 协议中，每个 Proposal 中都包含一个 epoch 值来代表当前的 Leader 周期，Paxos 中名字为 Ballot&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;不同点： ZAB 用来构建高可用的分布式数据主备系统（Zookeeper），Paxos 是用来构建分布式一致性状态机系统。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;28-Zookeeper的典型应用场景&quot;&gt;&lt;a href=&quot;#28-Zookeeper的典型应用场景&quot; class=&quot;headerlink&quot; title=&quot;28. Zookeeper的典型应用场景&quot;&gt;&lt;/a&gt;28. Zookeeper的典型应用场景&lt;/h1&gt;&lt;p&gt;Zookeeper 是一个典型的发布&amp;#x2F;订阅模式的分布式数据管理与协调框架，开发人员可以使用它来进行分布式数据的发布和订阅。&lt;/p&gt;
&lt;p&gt;通过对 Zookeeper 中丰富的数据节点进行交叉使用，配合 Watcher 事件通知机制，可以非常方便的构建一系列分布式应用中年都会涉及的核心功能，如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数据发布&amp;#x2F;订阅&lt;/li&gt;
&lt;li&gt;负载均衡&lt;/li&gt;
&lt;li&gt;命名服务&lt;/li&gt;
&lt;li&gt;分布式协调&amp;#x2F;通知&lt;/li&gt;
&lt;li&gt;集群管理&lt;/li&gt;
&lt;li&gt;Master选举&lt;/li&gt;
&lt;li&gt;分布式锁&lt;/li&gt;
&lt;li&gt;分布式队列&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;数据发布-x2F-订阅&quot;&gt;&lt;a href=&quot;#数据发布-x2F-订阅&quot; class=&quot;headerlink&quot; title=&quot;数据发布&amp;#x2F;订阅&quot;&gt;&lt;/a&gt;数据发布&amp;#x2F;订阅&lt;/h3&gt;&lt;h5 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;&lt;strong&gt;介绍&lt;/strong&gt;&lt;/h5&gt;&lt;p&gt;数据发布&amp;#x2F;订阅系统，即所谓的配置中心，顾名思义就是发布者发布数据供订阅者进行数据订阅。&lt;/p&gt;
&lt;h5 id=&quot;目的&quot;&gt;&lt;a href=&quot;#目的&quot; class=&quot;headerlink&quot; title=&quot;目的&quot;&gt;&lt;/a&gt;&lt;strong&gt;目的&lt;/strong&gt;&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;动态获取数据（配置信息）&lt;/li&gt;
&lt;li&gt;实现数据（配置信息）的集中式管理和数据的动态更新&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&quot;设计模式&quot;&gt;&lt;a href=&quot;#设计模式&quot; class=&quot;headerlink&quot; title=&quot;设计模式&quot;&gt;&lt;/a&gt;&lt;strong&gt;设计模式&lt;/strong&gt;&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;Push 模式&lt;/li&gt;
&lt;li&gt;Pull 模式&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&quot;数据（配置信息）特性：&quot;&gt;&lt;a href=&quot;#数据（配置信息）特性：&quot; class=&quot;headerlink&quot; title=&quot;数据（配置信息）特性：&quot;&gt;&lt;/a&gt;&lt;strong&gt;数据（配置信息）特性：&lt;/strong&gt;&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;数据量通常比较小&lt;/li&gt;
&lt;li&gt;数据内容在运行时会发生动态更新&lt;/li&gt;
&lt;li&gt;集群中各机器共享，配置一致&lt;/li&gt;
&lt;li&gt;机器列表信息、运行时开关配置、数据库配置信息等&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&quot;基于Zookeeper的实现方式&quot;&gt;&lt;a href=&quot;#基于Zookeeper的实现方式&quot; class=&quot;headerlink&quot; title=&quot;基于Zookeeper的实现方式&quot;&gt;&lt;/a&gt;&lt;strong&gt;基于Zookeeper的实现方式&lt;/strong&gt;&lt;/h5&gt;&lt;ol&gt;
&lt;li&gt;数据存储：将数据（配置信息）存储到 Zookeeper 上的一个数据节点&lt;/li&gt;
&lt;li&gt;数据获取：应用在启动初始化节点从 Zookeeper 数据节点读取数据，并在该节点上注册一个数据变更 Watcher&lt;/li&gt;
&lt;li&gt;数据变更：当变更数据时，更新 Zookeeper 对应节点数据，Zookeeper 会将数据变更通知发到各客户端，客户端接到通知后重新读取变更后的数据即可。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;负载均衡&quot;&gt;&lt;a href=&quot;#负载均衡&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    <category term="面试" scheme="https://bishoptylaor.github.io/categories/interview/"/>
    
    <category term="面试100题" scheme="https://bishoptylaor.github.io/categories/interview/100prob/"/>
    
    
    <category term="必看必会" scheme="https://bishoptylaor.github.io/tags/%E5%BF%85%E7%9C%8B%E5%BF%85%E4%BC%9A/"/>
    
    <category term="面试" scheme="https://bishoptylaor.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>GMP 原理与调度</title>
    <link href="https://bishoptylaor.github.io/library/Golang/concurrency/go-gmp/"/>
    <id>https://bishoptylaor.github.io/library/Golang/concurrency/go-gmp/</id>
    <published>2022-02-26T11:54:16.000Z</published>
    <updated>2024-05-22T10:45:53.940Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h3 id=&quot;基本概念&quot;&gt;&lt;a href=&quot;#基本概念&quot; class=&quot;headerlink&quot; title=&quot;基本概念&quot;&gt;&lt;/a&gt;基本概念&lt;/h3&gt;&lt;p&gt;M(machine): 代表着真正的执行计算资源，可以认为它就是os thread（系统线程）。&lt;br&gt;P(processor): 表示逻辑processor，是线程M的执行的上下文。&lt;br&gt;G(goroutine): 调度系统的最基本单位goroutine，存储了goroutine的执行stack信息、goroutine状态以及goroutine的任务函数等。&lt;/p&gt;
&lt;h1 id=&quot;1-GMP-原理与调度&quot;&gt;&lt;a href=&quot;#1-GMP-原理与调度&quot; class=&quot;headerlink&quot; title=&quot;1. GMP 原理与调度&quot;&gt;&lt;/a&gt;1. GMP 原理与调度&lt;/h1&gt;&lt;h3 id=&quot;1-1-1-一、Golang-“调度器”-的由来？&quot;&gt;&lt;a href=&quot;#1-1-1-一、Golang-“调度器”-的由来？&quot; class=&quot;headerlink&quot; title=&quot;1.1.1 一、Golang “调度器” 的由来？&quot;&gt;&lt;/a&gt;1.1.1 一、Golang “调度器” 的由来？&lt;/h3&gt;&lt;h4 id=&quot;1-单进程时代不需要调度器&quot;&gt;&lt;a href=&quot;#1-单进程时代不需要调度器&quot; class=&quot;headerlink&quot; title=&quot;(1) 单进程时代不需要调度器&quot;&gt;&lt;/a&gt;(1) 单进程时代不需要调度器&lt;/h4&gt;&lt;p&gt;我们知道，一切的软件都是跑在操作系统上，真正用来干活 (计算) 的是 CPU。早期的操作系统每个程序就是一个进程，知道一个程序运行完，才能进行下一个进程，就是 “单进程时代”&lt;br&gt;一切的程序只能串行发生。&lt;br&gt;早期的单进程操作系统，面临 2 个问题：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;单一的执行流程，计算机只能一个任务一个任务处理。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;进程阻塞所带来的 CPU 时间浪费。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;那么能不能有多个进程来宏观一起来执行多个任务呢？&lt;/p&gt;
&lt;p&gt;后来操作系统就具有了最早的并发能力：多进程并发，当一个进程阻塞的时候，切换到另外等待执行的进程，这样就能尽量把 CPU 利用起来，CPU 就不浪费了。&lt;/p&gt;
&lt;h4 id=&quot;2-多进程-x2F-线程时代有了调度器需求&quot;&gt;&lt;a href=&quot;#2-多进程-x2F-线程时代有了调度器需求&quot; class=&quot;headerlink&quot; title=&quot;(2) 多进程 &amp;#x2F; 线程时代有了调度器需求&quot;&gt;&lt;/a&gt;(2) 多进程 &amp;#x2F; 线程时代有了调度器需求&lt;/h4&gt;&lt;p&gt;&lt;img src=&quot;https://s3.bmp.ovh/imgs/2022/02/921c521bed752387.jpg&quot; alt=&quot;image&quot;&gt;&lt;br&gt;在多进程 &amp;#x2F; 多线程的操作系统中，就解决了阻塞的问题，因为一个进程阻塞 cpu 可以立刻切换到其他进程中去执行，而且调度 cpu 的算法可以保证在运行的进程都可以被分配到 cpu 的运行时间片。这样从宏观来看，似乎多个进程是在同时被运行。&lt;/p&gt;
&lt;p&gt;但新的问题就又出现了，进程拥有太多的资源，进程的创建、切换、销毁，都会占用很长的时间，CPU 虽然利用起来了，但如果进程过多，CPU 有很大的一部分都被用来进行进程调度了。&lt;/p&gt;
&lt;p&gt;怎么才能提高 CPU 的利用率呢？&lt;/p&gt;
&lt;p&gt;但是对于 Linux 操作系统来讲，cpu 对进程的态度和线程的态度是一样的。&lt;br&gt;&lt;img src=&quot;https://s3.bmp.ovh/imgs/2022/02/bad5998d362c5be9.jpg&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;所有应用程序都是运行在操作系统上，真正用来干活(计算)的是&lt;code&gt;CPU&lt;/code&gt;。所以谈到&lt;code&gt;Go&lt;/code&gt;语言调度器，我们也绕不开操作系统、进程与线程这些概念。线程是操作系统调度时的最基本单元，而 Linux 在调度器并不区分进程和线程的调度，它们在不同操作系统上也有不同的实现，但是在大多数的实现中线程都属于进程。&lt;/p&gt;
&lt;p&gt;多个线程可以属于同一个进程并共享内存空间。因为多线程不需要创建新的虚拟内存空间，所以它们也不需要内存管理单元处理上下文的切换，线程之间的通信也正是基于共享的内存进行的，与重量级的进程相比，线程显得比较轻量。&lt;/p&gt;
&lt;p&gt;虽然线程比较轻量，但是在调度时也有比较大的额外开销。每个线程会都占用 1 兆以上的内存空间，在对线程进行切换时不止会消耗较多的内存，恢复寄存器中的内容还需要向操作系统申请或者销毁对应的资源。&lt;/p&gt;
&lt;p&gt;大量的线程出现了新的问题&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;高内存占用&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;调度的CPU高消耗&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;然后工程师们就发现，其实一个线程分为”内核态”线程和”用户态”线程。&lt;/p&gt;
&lt;p&gt;一个&lt;code&gt;用户态线程&lt;/code&gt;必须要绑定一个&lt;code&gt;内核态线程&lt;/code&gt;，但是CPU并不知道有&lt;code&gt;用户态线程&lt;/code&gt;的存在，它只知道它运行的是一个&lt;code&gt;内核态线程&lt;/code&gt;(Linux的PCB进程控制块)。这样，我们再去细化分类，内核线程依然叫线程(thread)，用户线程叫协程(co-routine)。既然一个协程可以绑定一个线程，那么也可以通过实现协程调度器把多个协程与一个或者多个线程进行绑定。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Go&lt;/code&gt;语言的&lt;code&gt;goroutine&lt;/code&gt;来自协程的概念，让一组可复用的函数运行在一组线程之上，即使有协程阻塞，该线程的其他协程也可以被&lt;code&gt;runtime&lt;/code&gt;调度，转移到其他可运行的线程上。最关键的是，程序员看不到这些底层的细节，这就降低了编程的难度，提供了更容易的并发。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Go&lt;/code&gt;中，协程被称为&lt;code&gt;goroutine&lt;/code&gt;，它非常轻量，一个&lt;code&gt;goroutine&lt;/code&gt;只占几KB，并且这几KB就足够&lt;code&gt;goroutine&lt;/code&gt;运行完，这就能在有限的内存空间内支持大量&lt;code&gt;goroutine&lt;/code&gt;，支持了更多的并发。虽然一个&lt;code&gt;goroutine&lt;/code&gt;的栈只占几KB，但实际是可伸缩的，如果需要更多内存，&lt;code&gt;runtime&lt;/code&gt;会自动为&lt;code&gt;goroutine&lt;/code&gt;分配。&lt;/p&gt;
&lt;p&gt;既然我们知道了&lt;code&gt;goroutine&lt;/code&gt;和系统线程的关系，那么最关键的一点就是实现协程调度器了。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Go&lt;/code&gt;目前使用的调度器是2012年重新设计的，因为之前的调度器性能存在问题，所以使用4年就被废弃了。重新设计的调度器使用&lt;code&gt;G-M-P&lt;/code&gt;模型并一直沿用至今。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://mmbiz.qpic.cn/mmbiz_png/z4pQ0O5h0f68Yc2PzBpdRSf4iaE1bicpADBkw9ITic8G4yctoweOep4Yc0fQKlkHeWkUIsUatove0g7AFsIAw22tA/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1&quot; alt=&quot;图片&quot; title=&quot;调度器G-M-P模型&quot;&gt;&lt;/p&gt;
&lt;p&gt;调度器G-M-P模型&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;G — 表示 goroutine，它是一个待执行的任务；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;M — 表示操作系统的线程，它由操作系统的调度器调度和管理；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;P — 表示处理器，它可以被看做运行在线程上的本地调度器；&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;G&quot;&gt;&lt;a href=&quot;#G&quot; class=&quot;headerlink&quot; title=&quot;G&quot;&gt;&lt;/a&gt;G&lt;/h3&gt;&lt;p&gt;&lt;code&gt;gorotuine&lt;/code&gt; 就是&lt;code&gt;Go&lt;/code&gt;语言调度器中待执行的任务，它在运行时调度器中的地位与线程在操作系统中差不多，但是它占用了更小的内存空间，也降低了上下文切换的开销。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;goroutine&lt;/code&gt;只存在于&lt;code&gt;Go&lt;/code&gt;语言的运行时，它是&lt;code&gt;Go&lt;/code&gt;语言在用户态提供的线程，作为一种粒度更细的资源调度单元，如果使用得当能够在高并发的场景下更高效地利用机器的&lt;code&gt;CPU&lt;/code&gt;。&lt;/p&gt;
&lt;h3 id=&quot;M&quot;&gt;&lt;a href=&quot;#M&quot; class=&quot;headerlink&quot; title=&quot;M&quot;&gt;&lt;/a&gt;M&lt;/h3&gt;&lt;p&gt;&lt;code&gt;Go&lt;/code&gt;语言并发模型中的&lt;code&gt;M&lt;/code&gt;是操作系统线程。调度器最多可以创建 10000 个线程，但是其中大多数的线程都不会执行用户代码（可能陷入系统调用），最多只会有 &lt;code&gt;GOMAXPROCS&lt;/code&gt; 个活跃线程能够正常运行。&lt;/p&gt;
&lt;p&gt;在默认情况下，运行时会将 &lt;code&gt;GOMAXPROCS&lt;/code&gt; 设置成当前机器的核数，我们也可以使用 &lt;code&gt;runtime.GOMAXPROCS&lt;/code&gt; 来改变程序中最大的线程数。一个四核机器上会创建四个活跃的操作系统线程，每一个线程都对应一个运行时中的 &lt;code&gt;runtime.m&lt;/code&gt; 结构体。&lt;/p&gt;
&lt;p&gt;在大多数情况下，我们都会使用&lt;code&gt;Go&lt;/code&gt;的默认设置，也就是活跃线程数等于&lt;code&gt;CPU&lt;/code&gt;个数，在这种情况下不会触发操作系统的线程调度和上下文切换，所有的调度都会发生在用户态，由&lt;code&gt;Go&lt;/code&gt;语言调度器触发，能够减少非常多的额外开销。&lt;/p&gt;
&lt;p&gt;操作系统线程在&lt;code&gt;Go&lt;/code&gt;语言中会使用私有结构体 &lt;code&gt;runtime.m&lt;/code&gt; 来表示&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;type m struct &amp;#123;    g0   *g     curg *g    ...&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;其中&lt;code&gt;g0&lt;/code&gt;是持有调度栈的&lt;code&gt;goroutine&lt;/code&gt;，&lt;code&gt;curg&lt;/code&gt; 是在当前线程上运行的用户&lt;code&gt;goroutine&lt;/code&gt;，用户&lt;code&gt;goroutine&lt;/code&gt;执行完后，线程切换回&lt;code&gt;g0&lt;/code&gt;上，&lt;code&gt;g0&lt;/code&gt;会从线程&lt;code&gt;M&lt;/code&gt;绑定的&lt;code&gt;P&lt;/code&gt;上的等待队列中获取&lt;code&gt;goroutine&lt;/code&gt;交给线程。&lt;/p&gt;
&lt;h3 id=&quot;P&quot;&gt;&lt;a href=&quot;#P&quot; class=&quot;headerlink&quot; title=&quot;P&quot;&gt;&lt;/a&gt;P&lt;/h3&gt;&lt;p&gt;调度器中的处理器&lt;code&gt;P&lt;/code&gt;是线程和&lt;code&gt;goroutine&lt;/code&gt; 的中间层，它能提供线程需要的上下文环境，也会负责调度线程上的等待队列，通过处理器&lt;code&gt;P&lt;/code&gt;的调度，每一个内核线程都能够执行多个 &lt;code&gt;goroutine&lt;/code&gt;，它能在&lt;code&gt;goroutine&lt;/code&gt; 进行一些 &lt;code&gt;I/O&lt;/code&gt; 操作时及时切换，提高线程的利用率。因为调度器在启动时就会创建 &lt;code&gt;GOMAXPROCS&lt;/code&gt; 个处理器，所以&lt;code&gt;Go&lt;/code&gt;语言程序的处理器数量一定会等于 &lt;code&gt;GOMAXPROCS&lt;/code&gt;，这些处理器会绑定到不同的内核线程上并利用线程的计算资源运行&lt;code&gt;goroutine&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;此外在调度器里还有一个全局等待队列，当所有P本地的等待队列被占满后，新创建的&lt;code&gt;goroutine&lt;/code&gt;会进入全局等待队列。&lt;code&gt;P&lt;/code&gt;的本地队列为空后，&lt;code&gt;M&lt;/code&gt;也会从全局队列中拿一批待执行的&lt;code&gt;goroutine&lt;/code&gt;放到&lt;code&gt;P&lt;/code&gt;本地的等待队列中。&lt;/p&gt;
&lt;h3 id=&quot;GMP模型图示&quot;&gt;&lt;a href=&quot;#GMP模型图示&quot; class=&quot;headerlink&quot; title=&quot;GMP模型图示&quot;&gt;&lt;/a&gt;GMP模型图示&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://mmbiz.qpic.cn/mmbiz_png/z4pQ0O5h0f68Yc2PzBpdRSf4iaE1bicpADicd9ka0ILRcZEob1gRNjuXgu6ic2dBysv5VeibYUUTru76UmRiaFrOmdtg/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1&quot; alt=&quot;图片&quot; title=&quot;GMP模型图示&quot;&gt;&lt;/p&gt;
&lt;p&gt;GMP模型图示&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;全局队列：存放等待运行的G。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;P的本地队列：同全局队列类似，存放的也是等待运行的G，存的数量有限，不超过256个。新建G时，G优先加入到P的本地队列，如果队列已满，则会把本地队列中一半的G移动到全局队列。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;P列表：所有的P都在程序启动时创建，并保存在数组中，最多有GOMAXPROCS(可配置)个。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;M：线程想运行任务就得获取P，从P的本地队列获取G，P队列为空时，M也会尝试从全局队列拿一批G放到P的本地队列，或从其他P的本地队列偷一半放到自己P的本地队列。M运行G，G执行之后，M会从P获取下一个G，不断重复下去。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;goroutine&lt;/code&gt;调度器和OS调度器是通过M结合起来的，每个M都代表了1个内核线程，OS调度器负责把内核线程分配到CPU上执行。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;调度器的策略&quot;&gt;&lt;a href=&quot;#调度器的策略&quot; class=&quot;headerlink&quot; title=&quot;调度器的策略&quot;&gt;&lt;/a&gt;调度器的策略&lt;/h3&gt;&lt;p&gt;调度器的一个策略是尽可能的复用现有的活跃线程，通过以下两个机制提高线程的复用：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;work stealing机制，当本线程无可运行的G时，尝试从其他线程绑定的P偷取G，而不是销毁线程。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;hand off机制，当本线程因为G进行系统调用阻塞时，线程释放绑定的P，把P转移给其他空闲的线程执行。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;Go&lt;/code&gt;的运行时并不具备操作系统内核级的硬件中断能力，基于工作窃取的调度器实现，本质上属于先来先服务的协作式调度，为了解决响应时间可能较高的问题，目前运行时实现了协作式调度和抢占式调度两种不同的调度策略，保证在大部分情况下，不同的 G</summary>
        
      
    
    
    
    <category term="知识库" scheme="https://bishoptylaor.github.io/categories/library/"/>
    
    <category term="Golang" scheme="https://bishoptylaor.github.io/categories/library/Golang/"/>
    
    <category term="并发" scheme="https://bishoptylaor.github.io/categories/library/Golang/concurrency/"/>
    
    
    <category term="必看必会" scheme="https://bishoptylaor.github.io/tags/%E5%BF%85%E7%9C%8B%E5%BF%85%E4%BC%9A/"/>
    
    <category term="并发" scheme="https://bishoptylaor.github.io/tags/%E5%B9%B6%E5%8F%91/"/>
    
    <category term="go" scheme="https://bishoptylaor.github.io/tags/go/"/>
    
    <category term="GMP" scheme="https://bishoptylaor.github.io/tags/GMP/"/>
    
  </entry>
  
  <entry>
    <title>Golang Sync.Mutex 详解</title>
    <link href="https://bishoptylaor.github.io/library/Golang/concurrency/go-sync-mutex/"/>
    <id>https://bishoptylaor.github.io/library/Golang/concurrency/go-sync-mutex/</id>
    <published>2022-02-26T09:21:45.000Z</published>
    <updated>2024-05-22T10:45:53.940Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h3 id=&quot;lock逻辑：&quot;&gt;&lt;a href=&quot;#lock逻辑：&quot; class=&quot;headerlink&quot; title=&quot;lock逻辑：&quot;&gt;&lt;/a&gt;lock逻辑：&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;第一次上锁的时候，直接走第一步&lt;strong&gt;CAS&lt;/strong&gt;上锁，成功返回&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Mutex&lt;/strong&gt;已经被另一个&lt;strong&gt;g&lt;/strong&gt;上锁，那么&lt;strong&gt;state&lt;/strong&gt;的&lt;strong&gt;g&lt;/strong&gt;等待数+1，更新当前的锁状态，然后就进入队列，等待被唤醒，等到另个&lt;strong&gt;g&lt;/strong&gt;调用了&lt;strong&gt;Unlock&lt;/strong&gt;方法之后，当前&lt;strong&gt;g&lt;/strong&gt;被唤醒，然后设置&lt;strong&gt;awoken&amp;#x3D;true&lt;/strong&gt;，再执行一遍&lt;strong&gt;for&lt;/strong&gt;循环，此时&lt;strong&gt;locked&lt;/strong&gt;位就是未上锁状态（0），&lt;strong&gt;new&lt;/strong&gt;就是代表上锁，然后清除&lt;strong&gt;woken&lt;/strong&gt;位，然后再&lt;strong&gt;CAS&lt;/strong&gt;更新&lt;strong&gt;new&lt;/strong&gt;到&lt;strong&gt;state&lt;/strong&gt;上，因为之前的锁是未上锁状态，那么就代表抢锁成功，&lt;strong&gt;break&lt;/strong&gt;，返回&lt;/li&gt;
&lt;li&gt;和第二种一样，只不过，在&lt;strong&gt;CAS&lt;/strong&gt;更新&lt;strong&gt;new&lt;/strong&gt;到&lt;strong&gt;state&lt;/strong&gt;上时，有其他&lt;strong&gt;g&lt;/strong&gt;先改掉了&lt;strong&gt;state&lt;/strong&gt;的值，那么就继续for循环，然后重复到第二种情况。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;自旋锁：&quot;&gt;&lt;a href=&quot;#自旋锁：&quot; class=&quot;headerlink&quot; title=&quot;自旋锁：&quot;&gt;&lt;/a&gt;自旋锁：&lt;/h3&gt;&lt;p&gt;简单概括一下，就是为了解决锁粒度非常小的时候，给系统带来的不必要的调度开销&lt;br&gt;不过自旋要先满足几个条件&lt;br&gt;首先程序要跑在多核的机器上，然后GOMAXPROCS要大于1，并且此时有至少一个P的local runq是空的，才能进入到自旋的状态&lt;/p&gt;
&lt;p&gt;自旋是一种多线程同步机制，当前的进程在进入自旋的过程中会一直保持 CPU 的占用，持续检查某个条件是否为真。在多核的 CPU 上，自旋可以避免 Goroutine 的切换，使用恰当会对性能带来很大的增益，但是使用的不恰当就会拖慢整个程序，所以 Goroutine 进入自旋的条件非常苛刻&lt;/p&gt;
&lt;p&gt;当&lt;strong&gt;Mutex&lt;/strong&gt;已经上锁的时候，当前&lt;strong&gt;G&lt;/strong&gt;在满足自旋条件下，进入自旋状态，在自旋中，其他&lt;strong&gt;G&lt;/strong&gt;解锁了&lt;strong&gt;Mutex&lt;/strong&gt;，那么当前&lt;strong&gt;G&lt;/strong&gt;就设置了&lt;strong&gt;woken&lt;/strong&gt;标记位，这样其他&lt;strong&gt;G&lt;/strong&gt;在&lt;strong&gt;Unlock&lt;/strong&gt;的时候就不会去等待队列里面唤醒&lt;strong&gt;G&lt;/strong&gt;了，然后当前&lt;strong&gt;G&lt;/strong&gt;就顺理成章的抢到了锁&lt;/p&gt;
&lt;p&gt;这样自旋锁在锁粒度非常小的场景下的能对其性能带来一定的优化。&lt;/p&gt;
&lt;p&gt;引入自旋锁之后，又带来了一个问题。就是&lt;strong&gt;G&lt;/strong&gt;等待队列的&lt;strong&gt;长尾问题&lt;/strong&gt;。因为从等待队列里面被唤醒，然后再去抢锁，对本身就在执行的&lt;strong&gt;G&lt;/strong&gt;来说，被唤醒的&lt;strong&gt;G&lt;/strong&gt;其实是很难抢过当前执行的&lt;strong&gt;G&lt;/strong&gt;的，这样的话，等待队列里面的&lt;strong&gt;G&lt;/strong&gt;，就会被饿死(长时间获取不到锁)，这样对等待队列的&lt;strong&gt;G&lt;/strong&gt;来说其实是不公平的。&lt;/p&gt;
&lt;h3 id=&quot;饥饿模式&quot;&gt;&lt;a href=&quot;#饥饿模式&quot; class=&quot;headerlink&quot; title=&quot;饥饿模式&quot;&gt;&lt;/a&gt;饥饿模式&lt;/h3&gt;&lt;p&gt;简单概括一下，就是解决了等待G队列的长尾问题&lt;br&gt;饥饿模式下，直接由unlock把锁交给等待队列中排在第一位的G，同时，饥饿模式下，新进来的G不会参与抢锁也不会进入自旋状态，会直接进入等待队列的尾部。&lt;br&gt;饥饿模式的触发条件，当一个G等待锁时间超过1毫秒时，Mutex切换到饥饿模式&lt;br&gt;饥饿模式的取消条件，当一个G获取到锁且在等待队列的末尾，或者这个G获取锁的等待时间在1ms内，那么Mutex切换回正常模式&lt;/p&gt;
&lt;p&gt;带来的改变&lt;/p&gt;
&lt;p&gt;Mutex.state的倒数第三位，变成了mutexStarving标记位，0表示正常模式，1表示饥饿模式，与此同时，支持的最大等待G数量从230个</summary>
        
      
    
    
    
    <category term="知识库" scheme="https://bishoptylaor.github.io/categories/library/"/>
    
    <category term="Golang" scheme="https://bishoptylaor.github.io/categories/library/Golang/"/>
    
    <category term="并发" scheme="https://bishoptylaor.github.io/categories/library/Golang/concurrency/"/>
    
    
    <category term="必看必会" scheme="https://bishoptylaor.github.io/tags/%E5%BF%85%E7%9C%8B%E5%BF%85%E4%BC%9A/"/>
    
    <category term="并发" scheme="https://bishoptylaor.github.io/tags/%E5%B9%B6%E5%8F%91/"/>
    
    <category term="go" scheme="https://bishoptylaor.github.io/tags/go/"/>
    
    <category term="mutex" scheme="https://bishoptylaor.github.io/tags/mutex/"/>
    
  </entry>
  
  <entry>
    <title>golang模拟面试题01</title>
    <link href="https://bishoptylaor.github.io/interview/simulation/simulation01/"/>
    <id>https://bishoptylaor.github.io/interview/simulation/simulation01/</id>
    <published>2022-02-26T09:19:05.000Z</published>
    <updated>2024-04-28T14:20:01.030Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;ol&gt;
&lt;li&gt;&lt;p&gt;channel实现原理&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Mutex 是悲观还是乐观锁（什么是乐观锁）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Mutex 有几种模式（饥饿和互斥）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Mutex 自旋锁？&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;goroutine 模型 和抢占时机&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.bilibili.com/video/BV19r4y1w7Nx/?spm_id_from=333.788.recommend_more_video.6&quot;&gt;https://www.bilibili.com/video/BV19r4y1w7Nx/?spm_id_from&amp;#x3D;333.788.recommend_more_video.6&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;GC 原理&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;go内存分配，哪些对象分配在堆上，哪些分配在栈上（大对象小对象）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;OOM out of MEMERY 内存泄漏&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;signal信号（64种）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Go Micro&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;CPU三级缓存，加载固定长度到cache，连续的地址空间&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;多核CPU如何保持cache不冲突（MESI）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;rune 和 uint 超出位数后计算&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;小厂01&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;mutex有几种锁？&lt;ol&gt;
&lt;li&gt;互斥锁mutex&lt;/li&gt;
&lt;li&gt;读写互斥锁rwmutex&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;协程和线程？见golang101-1 .4&lt;/li&gt;
&lt;li&gt;channel的作用？用法？&lt;ol&gt;
&lt;li&gt;控制并发数，一般结合 waitgroup&lt;/li&gt;
&lt;li&gt;控制协程退出等&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;tidb基础&lt;/li&gt;
&lt;li&gt;gc流程 原理 golang101-2.4&lt;/li&gt;
&lt;li&gt;线程与进程&lt;/li&gt;
&lt;li&gt;slice 和 map 线程安全否&lt;/li&gt;
&lt;li&gt;使用go遇到的挑战？&lt;/li&gt;
&lt;li&gt;postgre？分布式缓存？&lt;/li&gt;
&lt;li&gt;框架grpc相关&lt;/li&gt;
&lt;li&gt;统计协程数量&lt;ol&gt;
&lt;li&gt;runtime.NumGoroutine()&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;为什么转go&lt;ol&gt;
&lt;li&gt;微服务，上云&lt;/li&gt;
&lt;li&gt;k8s&lt;/li&gt;
&lt;li&gt;大量，分布式&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;ihandy&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;项目&lt;/li&gt;
&lt;li&gt;gc&lt;/li&gt;
&lt;li&gt;redis 持久化&lt;/li&gt;
&lt;li&gt;channel，context&lt;/li&gt;
&lt;li&gt;mutex使用&lt;/li&gt;
&lt;li&gt;gmp&lt;/li&gt;
&lt;li&gt;进程线程协程&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;数獨科技：多业务或者多方数据不出库，怎样模型化使用这些数据 tob&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;项目&lt;ol&gt;
&lt;li&gt;最拿手的哪个？&lt;/li&gt;
&lt;li&gt;技术点不是特别突出&lt;/li&gt;
&lt;li&gt;任务系统要讲明白对用户和运营的两套接口模式，以及相关的缓存实现方案和刷新机制&lt;/li&gt;
&lt;li&gt;广告系统要讲明白具体提升了哪些效率&lt;/li&gt;
&lt;li&gt;什么维度的缓存key，等&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;管理&lt;ol&gt;
&lt;li&gt;时间分配&lt;/li&gt;
&lt;li&gt;需求评审大概流程和内容&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;字符串相加&lt;/li&gt;
&lt;li&gt;kafka ：topic， partition和consumer的关系， replica&lt;ol&gt;
&lt;li&gt;consumer的负载分配等&lt;/li&gt;
&lt;li&gt;组内每个消费者对应一个partition，partition多的话由consumer承接，其中一个或几个接受的量会多；消费者多的话，多出partition的会处于空闲状态&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;中物联讯&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;项目&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;字节国际支付&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;项目&lt;/li&gt;
&lt;li&gt;redis 持久化&lt;/li&gt;
&lt;li&gt;求根号2&lt;ol&gt;
&lt;li&gt;卡算法题了你敢信，菜逼&lt;/li&gt;
&lt;li&gt;去把课程中的题每个至少来两遍才够的！！！！！！&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;循环调度：银行 or 销售的提效工具，通话质量模型 tob&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;http + 协程，怎么调度的？是否涉及用户态和核心态的切换？&lt;/li&gt;
&lt;li&gt;索引的构建流程？&lt;/li&gt;
&lt;li&gt;b树，b+树区别，MongoDB为什么选用b树&lt;/li&gt;
&lt;li&gt;gmp调度流程&lt;/li&gt;
&lt;li&gt;redis 哪些命令? 时间复杂度是 o(n)&lt;/li&gt;
&lt;li&gt;kafka 持久化？&lt;/li&gt;
&lt;li&gt;kafka partition数量根据哪些信息确定的？&lt;ol&gt;
&lt;li&gt;回答：consumer的数量&lt;/li&gt;
&lt;li&gt;答案：？&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;umu&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;mysql 聚合索引和XX索引&lt;/li&gt;
&lt;li&gt;redis 各种数据类型的底层结构&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;自己总结：&lt;br&gt;并发，缓存，高可用，grpc，gc，gmp，mutex，channel，context等&lt;br&gt;http，redis，mysql，zookeeper，raft&lt;br&gt;乐观锁悲观锁？&lt;br&gt;cas？&lt;/p&gt;
&lt;p&gt;集度基础服务开发&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;grpc通信问题&lt;/li&gt;
&lt;li&gt;grpc限流，熔断相关&lt;/li&gt;
&lt;li&gt;golang 底层，写了就会问，channel实现方式，slice实现方式&lt;/li&gt;
&lt;li&gt;如何做限流，redis请求锁的过期时间为什么，如果有人一直持有锁怎么办？&lt;/li&gt;
&lt;li&gt;延时队列的实现方案&lt;/li&gt;
&lt;li&gt;golang的gc&lt;/li&gt;
&lt;li&gt;redis 锁的实现方案？&lt;/li&gt;
&lt;li&gt;算法：判断二叉树是否对称&lt;/li&gt;
&lt;li&gt;逃逸分析&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;刷题：&lt;br&gt;剑指offer&lt;br&gt;算法训练营&lt;br&gt;简单题*3&lt;br&gt;中等题*4&lt;/p&gt;
&lt;p&gt;Tik Tok二面&lt;br&gt;1.介绍数据库索引？&lt;br&gt;    数据库索引是一种数据结构，用于提高数据库查询效率。它通过创建特定的数据结构（如B树、B+树）来存储数据的有序副本，以便更快地定位和检索数据。&lt;br&gt;2.为什么把二叉查找树变成多路平衡查找树就能减少磁盘IO？为什么树的高度决定了磁盘的IO次数？如果查找某一个数据，用二叉查找树和用B+树的时间复杂度分别是多少?&lt;br&gt;3.B+树的叶子结点的默认大小是多少？如果把B树的非叶子结点只存放指针,那B树是不是就和B+树一样了呢？&lt;br&gt;4.除了二叉树，B+树，B树这些索引，还有什么常见的存储数据结构适合做索引呢？&lt;br&gt;    哈希索引和全文索引也常用于数据库索引。&lt;br&gt;5.为什么InnoDB不用哈希做索引，用哈希和用B+树有什么区别？&lt;br&gt;    哈希索引适用于等值查询，而B+树索引支持范围查询和排序。InnoDB使用B+树索引，因为它支持更多的查询类型。&lt;br&gt;6.Redis里面有序集合用的索引？介绍一下跳跃表，与哈希的区别？&lt;br&gt;    跳跃表是一种有序数据结构，用于实现有序集合。与哈希表相比，跳跃表支持有序性和范围查询。&lt;br&gt;7.MySQL事务隔离级别有哪些，会产生哪些问题，MySQL默认的隔离级别是什么&lt;br&gt;    MySQL的事务隔离级别包括读未提交、读已提交、可重复读和串行化。不同的隔离级别可能导致脏读、不可重复读和幻读等问题。MySQL默认的隔离级别是可重复读。&lt;br&gt;8.MySQL如何实现可重复读？MVCC的底层原理？&lt;br&gt;9.看你用过palsuar，也用过Kafka，那你说一下这两者不一样的地方？或者设计上有哪些不一样？&lt;br&gt;    Pulsar和Kafka都是消息中间件，但它们的架构和设计有所不同。例如，Pulsar支持多租户、多数据中心复制和动态消息路由等特性，而Kafka则更加专注于高吞吐量和低延迟。&lt;br&gt;14.说说两者底层存储消息方式的区别？&lt;br&gt;15.为什么这两者要这么设计？&lt;br&gt;17.Redis如何实现高可用和高可靠的？&lt;br&gt;    Redis实现高可用通常通过主从复制和哨兵或集群模式。哨兵负责监控节点健康，并在主节点失败时自动切换到从节点。集群模式支持数据分片和节点自动发现，提高了可用性和可扩展性。&lt;br&gt;18.Redis的主从复制是同步的还是异步的？异步和同步的优缺点？&lt;br&gt;    Redis的主从复制是异步的。异步复制提高了性能，但可能导致数据不一致性和数据丢失。&lt;br&gt;19.了解go吗，说说协程，为什么要用协程？&lt;br&gt;    协程是一种轻量级的线程，由Go语言原生支持。协程的优点包括低开销、高并发和简单易用，使得编写并发程序变得更加简单和高效。&lt;br&gt;20.为什么多线程访问共享资源需要加锁处理？&lt;br&gt;    多线程并发访问共享资源可能导致数据竞态和不一致性。加锁能够保证数据的原子性和一致性，从而确保线程安全。&lt;br&gt;21.说说可见性，为什么一个线程看不到另外一个线程的修改？&lt;br&gt;    线程的可见性指的是一个线程对共享变量的修改能够被其他线程立即看到。在多线程编程中，由于CPU的优化、缓存以及编译器的优化，可能导致线程之间的数据不一致。为了确保线程安全和正确性，我们需要解决这个问题。多线程对同一共享变量做修改时，某个线程修改后的新值可能不会立即更新到主内存，其他线程可能仍旧读到该变量旧值。&lt;br&gt;    使用锁保证同一时刻只有一个线程访问共享变量；&lt;br&gt;    对变量访问使用原子操作&lt;br&gt;23.让你设计一个任务调度器的类，add一个task，指定这个task的执行时间，可以add很多任务，但每个task执行的时间又各不相同，你如何实现，用什么数据结构？&lt;br&gt;    可以使用优先队列（如最小堆）来存储任务，并按照执行时间进行排序。每次调度器检查时，都会选择最早的任务执行。&lt;br&gt;24.优先队列的实现原理？&lt;/p&gt;
&lt;h2 id=&quot;定义与概念&quot;&gt;&lt;a href=&quot;#定义与概念&quot; class=&quot;headerlink&quot; title=&quot;定义与概念&quot;&gt;&lt;/a&gt;&lt;strong&gt;定义与概念&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;优先队列是一种数据结构，用于存储具有不同优先级的任务或元素&lt;/p&gt;
&lt;p&gt;包括FIFO（先进先出）和LIFO（后进先出）两种基本类型&lt;/p&gt;
&lt;h2 id=&quot;实现技术&quot;&gt;&lt;a href=&quot;#实现技术&quot; class=&quot;headerlink&quot; title=&quot;实现技术&quot;&gt;&lt;/a&gt;&lt;strong&gt;实现技术&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;数据结构&lt;/p&gt;
&lt;p&gt;堆式队列：高效的数据组织结构&lt;/p&gt;
&lt;p&gt;K叉树：基于K叉树的优先队列算法，运算效率高&lt;/p&gt;
&lt;p&gt;双输入通道优先网络：用于通信网络设计&lt;/p&gt;
&lt;p&gt;算法设计&lt;/p&gt;
&lt;p&gt;PQDSA算法：基于DAG任务集的入口节点数量确定优先队列数&lt;/p&gt;
&lt;p&gt;MP-SAQM算法：基于优先级区分的调度及主动队列管理&lt;/p&gt;
&lt;p&gt;硬件支持&lt;/p&gt;
&lt;p&gt;SP-PIFO: 使用严格优先级队列逼近PIFO行为&lt;/p&gt;
&lt;p&gt;光学优先队列：通过反馈系统实现，提高了缓冲容量的利用率&lt;/p&gt;
&lt;h2 id=&quot;应用场景&quot;&gt;&lt;a href=&quot;#应用场景&quot; class=&quot;headerlink&quot; title=&quot;应用场景&quot;&gt;&lt;/a&gt;&lt;strong&gt;应用场景&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;操作系统&lt;/p&gt;
&lt;p&gt;调度算法优化：提高处理器调度效率&lt;/p&gt;
&lt;p&gt;网络传输&lt;/p&gt;
&lt;p&gt;数据包调度：实现可编程的数据包调度&lt;/p&gt;
&lt;p&gt;人工智能&lt;/p&gt;
&lt;p&gt;异构计算环境下的任务调度问题解决&lt;/p&gt;
&lt;p&gt;中间件技术&lt;/p&gt;
&lt;p&gt;处理多个任务时按轻重顺序执行，缩短用户平均等待时间&lt;/p&gt;
&lt;h2 id=&quot;性能分析与优化&quot;&gt;&lt;a href=&quot;#性能分析与优化&quot; class=&quot;headerlink&quot; title=&quot;性能分析与优化&quot;&gt;&lt;/a&gt;&lt;strong&gt;性能分析与优化&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;并行操作性能&lt;/p&gt;
&lt;p&gt;并行插入和删除方法：保证并行度和串行存取算法的优先顺序一致&lt;/p&gt;
&lt;p&gt;高效合并优先队列的技术：减少存储开销，提高操作效率&lt;/p&gt;
&lt;p&gt;实验验证与比较&lt;/p&gt;
&lt;p&gt;实验结果验证了不同算法的有效性，如SP-PIFO、PQDSA等&lt;/p&gt;
&lt;p&gt;对比经典堆算法和新颖堆变体在不同输入下的表现&lt;/p&gt;
&lt;h2 id=&quot;挑战与未来方向&quot;&gt;&lt;a href=&quot;#挑战与未来方向&quot; class=&quot;headerlink&quot; title=&quot;挑战与未来方向&quot;&gt;&lt;/a&gt;&lt;strong&gt;挑战与未来方向&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;技术挑战&lt;/p&gt;
&lt;p&gt;实现大规模并行操作的存储空间自适应性&lt;/p&gt;
&lt;p&gt;提高硬件支持下的实时性和准确性&lt;/p&gt;
&lt;p&gt;发展趋势&lt;/p&gt;
&lt;p&gt;探索新的数据结构和算法以适应更复杂的应用场景&lt;/p&gt;
&lt;p&gt;加强对异构计算环境下的优化和支持能力&lt;/p&gt;
&lt;p&gt;25.算法题：二叉树的完全性检验？&lt;/p&gt;
&lt;h2 id=&quot;字节跳动&quot;&gt;&lt;a href=&quot;#字节跳动&quot; class=&quot;headerlink&quot; title=&quot;字节跳动&quot;&gt;&lt;/a&gt;字节跳动&lt;/h2&gt;&lt;p&gt;1.介绍一下业务表的字段&lt;/p&gt;
&lt;p&gt;2.定时任务刷新字段, 是怎么实现的?&lt;/p&gt;
&lt;p&gt;3.分布式锁? 分布式死锁如何解决? 看门狗机制? 如何避免当前线程加的锁, 被其它线程解锁?&lt;/p&gt;
&lt;p&gt;4.乐观锁和悲观锁的区别? 写多读少的情况, 应该使用乐观锁还是悲观锁?&lt;/p&gt;
&lt;p&gt;5.分布式场景下, 如何实现乐观锁?&lt;/p&gt;
&lt;p&gt;6.kafka的幂等性? 如何避免消息被重复消费?&lt;/p&gt;
&lt;p&gt;7.两个线程, 同时向mysql中插入一条数据?&lt;/p&gt;
&lt;p&gt;8.kafka如何保证消息不丢失&lt;/p&gt;
&lt;p&gt;9.sql优化场景:&lt;/p&gt;
&lt;p&gt;select id,name,balance from account where update_time &amp;gt; ‘2020-09-19’ limit 100000, 10&lt;/p&gt;
&lt;p&gt;该语句为什么查询慢? 有什么优化思路?&lt;/p&gt;
&lt;ol start=&quot;10&quot;&gt;
&lt;li&gt;算法题:</summary>
        
      
    
    
    
    <category term="面试" scheme="https://bishoptylaor.github.io/categories/interview/"/>
    
    <category term="实录" scheme="https://bishoptylaor.github.io/categories/interview/simulation/"/>
    
    
  </entry>
  
  <entry>
    <title>Go设计模式01-单例模式</title>
    <link href="https://bishoptylaor.github.io/library/Golang/go-design-pattern/gdp-create/01-singleton/"/>
    <id>https://bishoptylaor.github.io/library/Golang/go-design-pattern/gdp-create/01-singleton/</id>
    <published>2022-02-26T08:46:47.000Z</published>
    <updated>2024-07-12T14:15:22.459Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h2 id=&quot;序&quot;&gt;&lt;a href=&quot;#序&quot; class=&quot;headerlink&quot; title=&quot;序&quot;&gt;&lt;/a&gt;序&lt;/h2&gt;&lt;h2 id=&quot;代码实现&quot;&gt;&lt;a href=&quot;#代码实现&quot; class=&quot;headerlink&quot; title=&quot;代码实现&quot;&gt;&lt;/a&gt;代码实现&lt;/h2&gt;&lt;p&gt;单例模式采用了 饿汉式 和 懒汉式 两种实现，个人其实更倾向于饿汉式的实现，简单，并且可以将问题及早暴露，懒汉式虽然支持延迟加载，但是这只是把冷启动时间放到了第一次使用的时候，并没有本质上解决问题，并且为了实现懒汉式还不可避免的需要加锁。&lt;/p&gt;
&lt;h3 id=&quot;饿汉式&quot;&gt;&lt;a href=&quot;#饿汉式&quot; class=&quot;headerlink&quot; title=&quot;饿汉式&quot;&gt;&lt;/a&gt;饿汉式&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;代码实现:&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; singleton&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Singleton 饿汉式单例&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; Singleton &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt;&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; singleton *Singletonfunc init() &amp;#123;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	singleton = &amp;amp;Singleton&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// GetInstance 获取实例&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;GetInstance&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; *Singleton &amp;#123;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; singleton&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;单元测试:&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; singleton_test&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; (	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;string&quot;&gt;&amp;quot;testing&amp;quot;&lt;/span&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	singleton 	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;string&quot;&gt;&amp;quot;github.com/stretchr/testify/assert&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;TestGetInstance&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(t *testing.T)&lt;/span&gt;&lt;/span&gt; &amp;#123;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	assert.Equal(t, singleton.GetInstance(), singleton.GetInstance())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;BenchmarkGetInstanceParallel&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(b *testing.B)&lt;/span&gt;&lt;/span&gt; &amp;#123;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	b.RunParallel(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(pb *testing.PB)&lt;/span&gt;&lt;/span&gt; &amp;#123;		&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; pb.Next() &amp;#123;			&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; singleton.GetInstance() != singleton.GetInstance() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				b.Errorf(&lt;span class=&quot;string&quot;&gt;&amp;quot;test fail&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125;		&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&quot;懒汉式（双重检测）&quot;&gt;&lt;a href=&quot;#懒汉式（双重检测）&quot; class=&quot;headerlink&quot; title=&quot;懒汉式（双重检测）&quot;&gt;&lt;/a&gt;懒汉式（双重检测）&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;代码实现:&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; singleton&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;quot;sync&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; (	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	lazySingleton *Singleton	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	once          = &amp;amp;sync.Once&amp;#123;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// GetLazyInstance 懒汉式&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;GetLazyInstance&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; *Singleton &amp;#123;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; lazySingleton == &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123;		&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		once.Do(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;			&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			lazySingleton = &amp;amp;Singleton&amp;#123;&amp;#125;		&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;)	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; lazySingleton&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;单元测试:&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; singleton_test&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; (	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;string&quot;&gt;&amp;quot;testing&amp;quot;&lt;/span&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	singleton &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;string&quot;&gt;&amp;quot;github.com/stretchr/testify/assert&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;TestGetInstance&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(t *testing.T)&lt;/span&gt;&lt;/span&gt; &amp;#123;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	assert.Equal(t, singleton.GetInstance(), singleton.GetInstance())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;BenchmarkGetInstanceParallel&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(b *testing.B)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	b.RunParallel(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(pb *testing.PB)&lt;/span&gt;&lt;/span&gt; &amp;#123;		&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; pb.Next() &amp;#123;			&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; singleton.GetInstance() != singleton.GetInstance() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				b.Errorf(&lt;span class=&quot;string&quot;&gt;&amp;quot;test fail&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span</summary>
        
      
    
    
    
    <category term="知识库" scheme="https://bishoptylaor.github.io/categories/library/"/>
    
    <category term="Golang" scheme="https://bishoptylaor.github.io/categories/library/Golang/"/>
    
    <category term="设计模式之美" scheme="https://bishoptylaor.github.io/categories/library/Golang/go-design-pattern/"/>
    
    <category term="创建型模式" scheme="https://bishoptylaor.github.io/categories/library/Golang/go-design-pattern/gdp-create/"/>
    
    
    <category term="必看必会" scheme="https://bishoptylaor.github.io/tags/%E5%BF%85%E7%9C%8B%E5%BF%85%E4%BC%9A/"/>
    
    <category term="设计模式" scheme="https://bishoptylaor.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>golang201</title>
    <link href="https://bishoptylaor.github.io/library/Golang/advanced-tutorial/golang201/"/>
    <id>https://bishoptylaor.github.io/library/Golang/advanced-tutorial/golang201/</id>
    <published>2022-02-26T08:35:39.000Z</published>
    <updated>2024-05-22T10:45:53.941Z</updated>
    
    
    
    
    <category term="知识库" scheme="https://bishoptylaor.github.io/categories/library/"/>
    
    <category term="Golang" scheme="https://bishoptylaor.github.io/categories/library/Golang/"/>
    
    <category term="进阶教程笔记" scheme="https://bishoptylaor.github.io/categories/library/Golang/advanced-tutorial/"/>
    
    
  </entry>
  
  <entry>
    <title>Golang Channel 详解</title>
    <link href="https://bishoptylaor.github.io/library/Golang/concurrency/go-channel/"/>
    <id>https://bishoptylaor.github.io/library/Golang/concurrency/go-channel/</id>
    <published>2022-02-25T14:37:07.000Z</published>
    <updated>2024-05-22T10:45:53.940Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h2 id=&quot;channel-101&quot;&gt;&lt;a href=&quot;#channel-101&quot; class=&quot;headerlink&quot; title=&quot;channel 101&quot;&gt;&lt;/a&gt;channel 101&lt;/h2&gt;&lt;h3 id=&quot;1-引子&quot;&gt;&lt;a href=&quot;#1-引子&quot; class=&quot;headerlink&quot; title=&quot;1. 引子&quot;&gt;&lt;/a&gt;1. 引子&lt;/h3&gt;&lt;p&gt;单纯地将函数并发执行是没有意义的。函数与函数间需要交换数据才能体现并发执行函数的意义。&lt;/p&gt;
&lt;p&gt;虽然可以使用共享内存进行数据交换，但是共享内存在不同的goroutine中容易发生竞态问题。为了保证数据交换的正确性，必须使用互斥量对内存进行加锁，这种做法势必造成性能问题。&lt;/p&gt;
&lt;p&gt;Go语言的并发模型是CSP（Communicating Sequential Processes），提倡通过通信共享内存而不是通过共享内存而实现通信。&lt;/p&gt;
&lt;p&gt;如果说goroutine是Go程序并发的执行体，channel就是它们之间的连接。channel是可以让一个goroutine发送特定值到另一个goroutine的通信机制。&lt;/p&gt;
&lt;p&gt;Go 语言中的通道（channel）是一种特殊的类型。通道像一个传送带或者队列，总是遵循先入先出（First In First Out）的规则，保证收发数据的顺序。每一个通道都是一个具体类型的导管，也就是声明channel的时候需要为其指定元素类型。&lt;/p&gt;
&lt;h4 id=&quot;2-使用&quot;&gt;&lt;a href=&quot;#2-使用&quot; class=&quot;headerlink&quot; title=&quot;2. 使用&quot;&gt;&lt;/a&gt;2. 使用&lt;/h4&gt;&lt;h2 id=&quot;channel-底层原理&quot;&gt;&lt;a href=&quot;#channel-底层原理&quot; class=&quot;headerlink&quot; title=&quot;channel 底层原理&quot;&gt;&lt;/a&gt;channel 底层原理&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;buf&lt;/code&gt;是有缓冲的channel所特有的结构，用来存储缓存数据。是个循环链表 （为啥是循环链表？普通数组不行吗，普通数组地址和容量固定更适合指定的空间。需要pop 掉元素，普通数组需要全部都前移）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sendx&lt;/code&gt;和&lt;code&gt;recvx&lt;/code&gt;用于记录&lt;code&gt;buf&lt;/code&gt;这个循环链表中的&lt;del&gt;发送或者接收的&lt;/del&gt;index&lt;/li&gt;
&lt;li&gt;&lt;code&gt;lock&lt;/code&gt;是个互斥锁。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;recvq&lt;/code&gt;和&lt;code&gt;sendq&lt;/code&gt;分别是接收(&amp;lt;-channel)或者发送(channel &amp;lt;- xxx)的goroutine抽象出来的结构体(sudog)的队列。是个双向链表&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; hchan &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	qcount   &lt;span class=&quot;type&quot;&gt;uint&lt;/span&gt;  &lt;span class=&quot;comment&quot;&gt;// 队列中的总元素个数 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	dataqsiz &lt;span class=&quot;type&quot;&gt;uint&lt;/span&gt;  &lt;span class=&quot;comment&quot;&gt;// 环形队列大小，即可存放元素的个数 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	buf      unsafe.Pointer &lt;span class=&quot;comment&quot;&gt;// 环形队列指针 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	elemsize &lt;span class=&quot;type&quot;&gt;uint16&lt;/span&gt;  &lt;span class=&quot;comment&quot;&gt;//每个元素的大小 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	closed   &lt;span class=&quot;type&quot;&gt;uint32&lt;/span&gt;  &lt;span class=&quot;comment&quot;&gt;//标识关闭状态 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	elemtype *_type &lt;span class=&quot;comment&quot;&gt;// 元素类型 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	sendx    &lt;span class=&quot;type&quot;&gt;uint&lt;/span&gt;   &lt;span class=&quot;comment&quot;&gt;// 发送索引，元素写入时存放到队列中的位置&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	recvx    &lt;span class=&quot;type&quot;&gt;uint&lt;/span&gt;   &lt;span class=&quot;comment&quot;&gt;// 接收索引，元素从队列的该位置读出&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	recvq    waitq  &lt;span class=&quot;comment&quot;&gt;// 等待读消息的goroutine队列&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	sendq    waitq &lt;span class=&quot;comment&quot;&gt;// 等待写消息的goroutine队列&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// lock protects all fields in hchan, as well as several&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// fields in sudogs blocked on this channel.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Do not change another G&amp;#x27;s status while holding this lock&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// (in particular, do not ready a G), as this can deadlock&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// with stack shrinking.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    lock mutex &lt;span class=&quot;comment&quot;&gt;//互斥锁，chan不允许并发读写&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&quot;1-读写流程&quot;&gt;&lt;a href=&quot;#1-读写流程&quot; class=&quot;headerlink&quot; title=&quot;1. 读写流程&quot;&gt;&lt;/a&gt;1. 读写流程&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;向 channel 写数据:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;若等待接收队列 recvq 不为空，则缓冲区中无数据或无缓冲区，将直接从 recvq 取出 G ，并把数据写入，最后把该 G 唤醒，结束发送过程。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;若缓冲区中有空余位置，则将数据写入缓冲区，结束发送过程。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;若缓冲区中没有空余位置，则将发送数据写入 G，将当前 G 加入 sendq ，进入睡眠，等待被读 goroutine 唤醒。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;从 channel 读数据&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;若等待发送队列 sendq 不为空，且没有缓冲区，直接从 sendq 中取出 G ，把 G 中数据读出，最后把 G 唤醒，结束读取过程。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;如果等待发送队列 sendq 不为空，说明缓冲区已满，从缓冲区中首部读出数据，把 G 中数据写入缓冲区尾部，把 G 唤醒，结束读取过程。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;如果缓冲区中有数据，则从缓冲区取出数据，结束读取过程。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;将当前 goroutine 加入 recvq ，进入睡眠，等待被写 goroutine 唤醒。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;关闭 channel&lt;/p&gt;
&lt;p&gt;1.关闭 channel 时会将 recvq 中的 G 全部唤醒，本该写入 G 的数据位置为 nil。将 sendq 中的 G 全部唤醒，但是这些 G 会 panic。&lt;/p&gt;
&lt;p&gt;panic 出现的场景还有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;关闭值为 nil 的 channel&lt;/li&gt;
&lt;li&gt;关闭已经关闭的 channel&lt;/li&gt;
&lt;li&gt;向已经关闭的 channel 中写数据&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;2-创建channel&quot;&gt;&lt;a href=&quot;#2-创建channel&quot; class=&quot;headerlink&quot; title=&quot;2. 创建channel&quot;&gt;&lt;/a&gt;2. 创建channel&lt;/h4&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 无缓冲的channel由于没有缓冲发送和接收需要同步&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ch := &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;chan&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;)   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//有缓冲channel不要求发送和接收操作同步&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ch := &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;chan&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;实例化了 chan 的结构体，返回ch指针&lt;/p&gt;
&lt;h4 id=&quot;channel中发送send-ch-lt-xxx-和recv-lt-ch-接收&quot;&gt;&lt;a href=&quot;#channel中发送send-ch-lt-xxx-和recv-lt-ch-接收&quot; class=&quot;headerlink&quot; title=&quot;channel中发送send(ch &amp;lt;- xxx)和recv(&amp;lt;- ch)接收&quot;&gt;&lt;/a&gt;channel中发送send(ch &amp;lt;- xxx)和recv(&amp;lt;- ch)接收&lt;/h4&gt;&lt;p&gt;使用 mutex 加锁操作，新进先出的队列&lt;/p&gt;
&lt;h4 id=&quot;当channel缓存满后&quot;&gt;&lt;a href=&quot;#当channel缓存满后&quot; class=&quot;headerlink&quot; title=&quot;当channel缓存满后&quot;&gt;&lt;/a&gt;当channel缓存满后&lt;/h4&gt;&lt;h5 id=&quot;发送满的时候&quot;&gt;&lt;a href=&quot;#发送满的时候&quot; class=&quot;headerlink&quot; title=&quot;发送满的时候&quot;&gt;&lt;/a&gt;发送满的时候&lt;/h5&gt;&lt;p&gt;当队列已满的时候，G1正在运行，当再次send操作时，会主动调用GO的调度器，让G1等待，并让出M，同时G1也会被抽象成含有G1指针和send元素的sudog结构体保存到hchan的&lt;code&gt;sendq&lt;/code&gt;中等待被唤醒。&lt;/p&gt;
&lt;p&gt;当G2 recv操作的时候，G2从缓存队列中取出数据，channel会将等待队列中的G1推出，将G1当时send的数据推到缓存中，然后调用Go的scheduler，唤醒G1，并把G1放到可运行的Goroutine队列中。&lt;/p&gt;
&lt;h5 id=&quot;接收满的时候&quot;&gt;&lt;a href=&quot;#接收满的时候&quot; class=&quot;headerlink&quot; title=&quot;接收满的时候&quot;&gt;&lt;/a&gt;接收满的时候&lt;/h5&gt;&lt;p&gt;这个时候G2会主动调用Go的调度器,让G2等待，并从让出M，让其他G去使用。 G2还会被抽象成含有G2指针和recv空元素的&lt;code&gt;sudog&lt;/code&gt;结构体保存到hchan的&lt;code&gt;recvq&lt;/code&gt;中等待被唤醒。此时恰好有个goroutine G1开始向channel中推送数据 &lt;code&gt;ch &amp;lt;- 1&lt;/code&gt;。 此时，非常有意思的事情发生了：G1并没有锁住channel，然后将数据放到缓存中，而是直接把数据从G1直接copy到了G2的栈中。 这种方式非常的赞！在唤醒过程中，G2无需再获得channel的锁，然后从缓存中取数据。减少了内存的copy，提高了效率。&lt;/p&gt;
&lt;h4 id=&quot;4-channel-的状态和操作方式&quot;&gt;&lt;a href=&quot;#4-channel-的状态和操作方式&quot; class=&quot;headerlink&quot; title=&quot;4. channel 的状态和操作方式&quot;&gt;&lt;/a&gt;4. channel 的状态和操作方式&lt;/h4&gt;&lt;p&gt;如下：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;left&quot;&gt;操作&lt;/th&gt;
&lt;th align=&quot;left&quot;&gt;nil 的 channel&lt;/th&gt;
&lt;th align=&quot;left&quot;&gt;已关闭的 channel&lt;/th&gt;
&lt;th align=&quot;left&quot;&gt;正常 channel&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;close 关闭&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;panic&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;panic&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;成功&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;ch &amp;lt;- 写&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;死锁&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;panic&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;阻塞或成功&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;&amp;lt;-ch 读&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;死锁&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;零值&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;阻塞或成功&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;channel一个类型管道，通过它可以在goroutine之间发送和接收消息。它是Golang在语言层面提供的goroutine间的通信方式。&lt;/p&gt;
&lt;p&gt;众所周知，Go依赖于称为CSP（Communicating Sequential Processes）的并发模型，通过Channel实现这种同步模式。Go并发的核心哲学是不要通过共享内存进行通信; 相反，通过沟通分享记忆。&lt;/p&gt;
&lt;h2 id=&quot;channel-常见用法&quot;&gt;&lt;a href=&quot;#channel-常见用法&quot; class=&quot;headerlink&quot; title=&quot;channel 常见用法&quot;&gt;&lt;/a&gt;channel 常见用法&lt;/h2&gt;&lt;h4 id=&quot;循环读取&quot;&gt;&lt;a href=&quot;#循环读取&quot; class=&quot;headerlink&quot; title=&quot;循环读取&quot;&gt;&lt;/a&gt;循环读取&lt;/h4&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; x := &lt;span class=&quot;keyword&quot;&gt;range&lt;/span&gt; ch &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	fmt.Println(x)&lt;/span&gt;&lt;br&gt;&lt;span</summary>
        
      
    
    
    
    <category term="知识库" scheme="https://bishoptylaor.github.io/categories/library/"/>
    
    <category term="Golang" scheme="https://bishoptylaor.github.io/categories/library/Golang/"/>
    
    <category term="并发" scheme="https://bishoptylaor.github.io/categories/library/Golang/concurrency/"/>
    
    
    <category term="必看必会" scheme="https://bishoptylaor.github.io/tags/%E5%BF%85%E7%9C%8B%E5%BF%85%E4%BC%9A/"/>
    
    <category term="并发" scheme="https://bishoptylaor.github.io/tags/%E5%B9%B6%E5%8F%91/"/>
    
    <category term="go" scheme="https://bishoptylaor.github.io/tags/go/"/>
    
    <category term="channel" scheme="https://bishoptylaor.github.io/tags/channel/"/>
    
  </entry>
  
  <entry>
    <title>http 网络面试必备</title>
    <link href="https://bishoptylaor.github.io/interview/http-interview/"/>
    <id>https://bishoptylaor.github.io/interview/http-interview/</id>
    <published>2022-02-25T12:27:57.000Z</published>
    <updated>2024-06-03T08:35:01.388Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;△-46次-从输入-URL-到展现页面的全过程-困难&quot;&gt;&lt;a href=&quot;#△-46次-从输入-URL-到展现页面的全过程-困难&quot; class=&quot;headerlink&quot; title=&quot;△ 46次 从输入 URL 到展现页面的全过程  困难&quot;&gt;&lt;/a&gt;&lt;em&gt;△ 46次&lt;/em&gt; 从输入 URL 到展现页面的全过程  困难&lt;/h1&gt;&lt;p&gt;当你在浏览器中输入一个 URL 并按下回车键，直到页面展现，这个过程中涉及多个步骤，包括 DNS 解析、TCP 连接、HTTP 请求和响应、以及页面渲染等。以下是这个全过程的详细描述：&lt;/p&gt;
&lt;h3 id=&quot;1-输入-URL&quot;&gt;&lt;a href=&quot;#1-输入-URL&quot; class=&quot;headerlink&quot; title=&quot;1. 输入 URL&quot;&gt;&lt;/a&gt;1. 输入 URL&lt;/h3&gt;&lt;p&gt;用户在浏览器的地址栏输入一个 URL 并按下回车键。&lt;/p&gt;
&lt;h3 id=&quot;2-URL-解析&quot;&gt;&lt;a href=&quot;#2-URL-解析&quot; class=&quot;headerlink&quot; title=&quot;2. URL 解析&quot;&gt;&lt;/a&gt;2. URL 解析&lt;/h3&gt;&lt;p&gt;浏览器解析输入的 URL，提取协议（如 HTTP、HTTPS）、主机名（如 &#92;&lt;a href=&quot;http://www.example.com)、端口号(如果指定)、路径(如/&quot;&gt;www.example.com）、端口号（如果指定）、路径（如&lt;/a&gt; &amp;#x2F;index.html）和查询参数。&lt;/p&gt;
&lt;h3 id=&quot;3-检查缓存&quot;&gt;&lt;a href=&quot;#3-检查缓存&quot; class=&quot;headerlink&quot; title=&quot;3. 检查缓存&quot;&gt;&lt;/a&gt;3. 检查缓存&lt;/h3&gt;&lt;p&gt;浏览器会首先检查浏览器缓存、操作系统缓存、路由器缓存以及 ISP 缓存中是否有该 URL 对应的资源。如果缓存命中并且资源未过期，则直接从缓存中加载资源。&lt;/p&gt;
&lt;h3 id=&quot;4-DNS-解析&quot;&gt;&lt;a href=&quot;#4-DNS-解析&quot; class=&quot;headerlink&quot; title=&quot;4. DNS 解析&quot;&gt;&lt;/a&gt;4. DNS 解析&lt;/h3&gt;&lt;p&gt;如果缓存未命中，浏览器需要将主机名转换为 IP 地址。这个过程称为 DNS 解析。步骤如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;浏览器缓存&lt;/strong&gt;：检查浏览器的 DNS 缓存是否有该域名的 IP 地址。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;操作系统缓存&lt;/strong&gt;：如果浏览器缓存没有命中，检查操作系统的 DNS 缓存。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;本地 HOSTS 文件&lt;/strong&gt;：操作系统会查找本地的 HOSTS 文件，看是否有手动配置的域名-IP 映射。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;DNS 服务器查询&lt;/strong&gt;：如果以上步骤都没有命中，操作系统会向配置的 DNS 服务器（通常是 ISP 提供的或手动配置的 DNS 服务器）发起 DNS 查询。DNS 服务器会递归查询其他 DNS 服务器，直到找到对应的 IP 地址。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;5-建立-TCP-连接&quot;&gt;&lt;a href=&quot;#5-建立-TCP-连接&quot; class=&quot;headerlink&quot; title=&quot;5. 建立 TCP 连接&quot;&gt;&lt;/a&gt;5. 建立 TCP 连接&lt;/h3&gt;&lt;p&gt;DNS 解析得到 IP 地址后，浏览器与服务器建立 TCP 连接。具体步骤如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;三次握手&lt;/strong&gt;：TCP 使用三次握手来建立连接：&lt;ul&gt;
&lt;li&gt;客户端发送一个 SYN 数据包给服务器，表示请求建立连接。&lt;/li&gt;
&lt;li&gt;服务器收到后，发送一个 SYN-ACK 数据包给客户端，表示同意连接。&lt;/li&gt;
&lt;li&gt;客户端收到 SYN-ACK 数据包后，发送一个 ACK 数据包给服务器，连接建立成功。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;6-发送-HTTP-请求&quot;&gt;&lt;a href=&quot;#6-发送-HTTP-请求&quot; class=&quot;headerlink&quot; title=&quot;6. 发送 HTTP 请求&quot;&gt;&lt;/a&gt;6. 发送 HTTP 请求&lt;/h3&gt;&lt;p&gt;TCP 连接建立后，浏览器构建并发送 HTTP 请求。包括以下内容：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;请求行&lt;/strong&gt;：包括请求方法（如 GET、POST）、URL 和 HTTP 版本。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;请求头&lt;/strong&gt;：包括主机名、用户代理、接受的内容类型、接受的语言、Cookie 等信息。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;请求体&lt;/strong&gt;（可选）：主要用于 POST 请求，包含提交的数据。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;7-服务器处理请求&quot;&gt;&lt;a href=&quot;#7-服务器处理请求&quot; class=&quot;headerlink&quot; title=&quot;7. 服务器处理请求&quot;&gt;&lt;/a&gt;7. 服务器处理请求&lt;/h3&gt;&lt;p&gt;服务器收到请求后，处理请求并生成响应。服务器的处理过程包括：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;请求解析&lt;/strong&gt;：解析请求行和请求头，提取必要的信息。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;身份验证&lt;/strong&gt;（可选）：验证用户身份，如检查 Cookie 或 Token。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;路由处理&lt;/strong&gt;：根据请求的路径和方法，将请求路由到相应的处理程序。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;业务逻辑&lt;/strong&gt;：执行具体的业务逻辑，如查询数据库、调用外部 API、执行计算等。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;生成响应&lt;/strong&gt;：生成响应头和响应体。响应体可以是 HTML、JSON、XML、图像、文件等。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;8-发送-HTTP-响应&quot;&gt;&lt;a href=&quot;#8-发送-HTTP-响应&quot; class=&quot;headerlink&quot; title=&quot;8. 发送 HTTP 响应&quot;&gt;&lt;/a&gt;8. 发送 HTTP 响应&lt;/h3&gt;&lt;p&gt;服务器将生成的 HTTP 响应通过已建立的 TCP 连接发送给客户端。响应包括：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;状态行&lt;/strong&gt;：包括 HTTP 版本、状态码（如 200、404、500）和状态描述。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;响应头&lt;/strong&gt;：包括内容类型、内容长度、日期、服务器信息、Cookie 等。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;响应体&lt;/strong&gt;：包含实际的响应数据，如 HTML 内容、图像数据等。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;9-浏览器接收响应&quot;&gt;&lt;a href=&quot;#9-浏览器接收响应&quot; class=&quot;headerlink&quot; title=&quot;9. 浏览器接收响应&quot;&gt;&lt;/a&gt;9. 浏览器接收响应&lt;/h3&gt;&lt;p&gt;浏览器接收到服务器的响应后，开始处理响应数据：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;解析 HTML&lt;/strong&gt;：浏览器解析 HTML 文档，构建 DOM 树。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;加载资源&lt;/strong&gt;：解析 HTML 时，发现外部资源（如 CSS、JavaScript、图像等），会发起新的 HTTP 请求加载这些资源。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;解析 CSS&lt;/strong&gt;：浏览器解析 CSS，构建 CSSOM 树。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;执行 JavaScript&lt;/strong&gt;：浏览器解析并执行 JavaScript，可能会进一步修改 DOM 树和 CSSOM 树。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;构建渲染树&lt;/strong&gt;：根据 DOM 树和 CSSOM 树构建渲染树。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;10-页面渲染&quot;&gt;&lt;a href=&quot;#10-页面渲染&quot; class=&quot;headerlink&quot; title=&quot;10. 页面渲染&quot;&gt;&lt;/a&gt;10. 页面渲染&lt;/h3&gt;&lt;p&gt;浏览器根据渲染树，计算每个元素的位置和样式，进行页面布局（Layout）。接着，浏览器将渲染树绘制到屏幕上，展示完整的页面。&lt;/p&gt;
&lt;h3 id=&quot;11-持续加载和交互&quot;&gt;&lt;a href=&quot;#11-持续加载和交互&quot; class=&quot;headerlink&quot; title=&quot;11. 持续加载和交互&quot;&gt;&lt;/a&gt;11. 持续加载和交互&lt;/h3&gt;&lt;p&gt;页面加载完成后，用户可以与页面进行交互。JavaScript 可以继续执行，响应用户操作，发起异步请求（如 AJAX 或 Fetch），动态更新页面内容。&lt;/p&gt;
&lt;h3 id=&quot;过程中的优化&quot;&gt;&lt;a href=&quot;#过程中的优化&quot; class=&quot;headerlink&quot; title=&quot;过程中的优化&quot;&gt;&lt;/a&gt;过程中的优化&lt;/h3&gt;&lt;p&gt;在这个过程中，可以通过多种优化手段来提升页面加载速度和用户体验，例如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;DNS 预解析&lt;/strong&gt;：在 HTML 中使用 &lt;code&gt;&amp;lt;link rel=&amp;quot;dns-prefetch&amp;quot; href=&amp;quot;//example.com&amp;quot;&amp;gt;&lt;/code&gt; 提前解析 DNS。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;TCP 连接复用&lt;/strong&gt;：使用 HTTP&amp;#x2F;2 或保持 TCP 连接来复用连接，减少握手延迟。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;缓存优化&lt;/strong&gt;：合理使用缓存控制头（如 &lt;code&gt;Cache-Control&lt;/code&gt;、&lt;code&gt;Expires&lt;/code&gt;）和浏览器缓存。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;压缩和缩小资源&lt;/strong&gt;：使用 Gzip 或 Brotli 压缩传输内容，缩小 CSS、JavaScript 和图像资源的大小。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;异步加载资源&lt;/strong&gt;：使用 &lt;code&gt;async&lt;/code&gt; 或 &lt;code&gt;defer&lt;/code&gt; 属性异步加载 JavaScript，减少阻塞渲染。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;通过以上过程和优化手段，浏览器能够高效地将用户输入的 URL 展现为完整的网页。&lt;/p&gt;
&lt;h1 id=&quot;△-42次-TCP-怎么保证可靠传输？-中等&quot;&gt;&lt;a href=&quot;#△-42次-TCP-怎么保证可靠传输？-中等&quot; class=&quot;headerlink&quot; title=&quot;△ 42次 TCP 怎么保证可靠传输？  中等&quot;&gt;&lt;/a&gt;&lt;strong&gt;△ 42次&lt;/strong&gt; TCP 怎么保证可靠传输？  中等&lt;/h1&gt;&lt;p&gt;TCP（Transmission Control Protocol，传输控制协议）通过以下几个机制来保证数据的可靠传输：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;三次握手（Three-Way Handshake）&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;目的&lt;/strong&gt;：建立连接并同步双方的序列号和确认号，确保通信双方准备好进行数据传输。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;过程&lt;/strong&gt;：&lt;ol&gt;
&lt;li&gt;客户端发送一个带有 SYN 标志的数据包给服务器，表示请求建立连接。&lt;/li&gt;
&lt;li&gt;服务器收到后，回应一个带有 SYN 和 ACK 标志的数据包，表示同意连接并确认收到的序列号。&lt;/li&gt;
&lt;li&gt;客户端收到服务器的 SYN-ACK 包后，发送一个带有 ACK 标志的数据包给服务器，表示连接建立成功。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;四次挥手（Four-Way Handshake）&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;目的&lt;/strong&gt;：安全地终止连接，确保双方都已经完成数据传输。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;过程&lt;/strong&gt;：&lt;ol&gt;
&lt;li&gt;客户端发送一个带有 FIN 标志的数据包，表示请求终止连接。&lt;/li&gt;
&lt;li&gt;服务器收到后，回应一个带有 ACK 标志的数据包，确认收到请求。&lt;/li&gt;
&lt;li&gt;服务器发送一个带有 FIN 标志的数据包，表示同意终止连接。&lt;/li&gt;
&lt;li&gt;客户端收到后，回应一个带有 ACK 标志的数据包，确认连接终止。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;序列号和确认号（Sequence Number and Acknowledgment Number）&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;序列号&lt;/strong&gt;：每个字节的数据都有一个序列号，用于确保数据按照正确的顺序接收。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;确认号&lt;/strong&gt;：接收方会发回确认号，告知发送方已收到数据的序列号范围。这样可以确认数据的接收情况。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;流量控制（Flow Control）&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;滑动窗口机制&lt;/strong&gt;：TCP 使用滑动窗口机制来控制数据的发送速率，防止发送方发送的数据超出接收方的处理能力。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;窗口大小&lt;/strong&gt;：接收方会通知发送方当前可以接收的数据量（窗口大小），发送方根据这个值调整发送速率。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;拥塞控制（Congestion Control）&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;慢启动（Slow Start）&lt;/strong&gt;：初始阶段，发送方以较慢的速度发送数据，然后逐步增加发送速率。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;拥塞避免（Congestion Avoidance）&lt;/strong&gt;：当发送速率达到一定阈值后，逐步增加发送窗口，以避免拥塞。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;快速重传和快速恢复（Fast Retransmit and Fast Recovery）&lt;/strong&gt;：检测到数据丢失后，发送方会快速重传丢失的数据包，并采取措施快速恢复发送速率。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;重传机制（Retransmission Mechanism）&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;超时重传&lt;/strong&gt;：发送方在发送数据包后启动定时器，如果在规定时间内没有收到确认，重新发送数据包。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;快速重传&lt;/strong&gt;：当发送方连续收到三个重复的确认号（ACK）时，立即重传丢失的数据包，不必等待超时。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;校验和（Checksum）&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;数据完整性&lt;/strong&gt;：每个 TCP 数据包都包含一个校验和，用于检测数据在传输过程中是否发生错误。接收方计算数据的校验和，并与包中的校验和进行比较，如果不匹配，则丢弃该数据包。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;小结&quot;&gt;&lt;a href=&quot;#小结&quot; class=&quot;headerlink&quot; title=&quot;小结&quot;&gt;&lt;/a&gt;小结&lt;/h3&gt;&lt;p&gt;TCP 通过上述机制实现可靠的数据传输，确保数据在不可靠的网络环境中能够准确、有序地传输到目标端。具体而言，TCP 的三次握手和四次挥手确保了连接的建立和关闭，序列号和确认号确保了数据的有序传输，流量控制和拥塞控制机制避免了网络拥塞，重传机制确保了数据包丢失时的重传，而校验和则确保了数据的完整性。通过这些机制，TCP 提供了一个可靠的端到端的数据传输服务。&lt;/p&gt;
&lt;h1 id=&quot;△-42次-TCP-中常见的拥塞控制算法有哪些？-中等&quot;&gt;&lt;a href=&quot;#△-42次-TCP-中常见的拥塞控制算法有哪些？-中等&quot; class=&quot;headerlink&quot; title=&quot;△ 42次 TCP 中常见的拥塞控制算法有哪些？  中等&quot;&gt;&lt;/a&gt;&lt;strong&gt;△ 42次&lt;/strong&gt; TCP 中常见的拥塞控制算法有哪些？  中等&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;慢启动&lt;/li&gt;
&lt;li&gt;拥塞避免&lt;/li&gt;
&lt;li&gt;快重传&lt;/li&gt;
&lt;li&gt;快恢复&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;△-40次-HTTP-与-HTTPS-有哪些区别？-中等&quot;&gt;&lt;a href=&quot;#△-40次-HTTP-与-HTTPS-有哪些区别？-中等&quot; class=&quot;headerlink&quot; title=&quot;△ 40次 HTTP 与 HTTPS 有哪些区别？  中等&quot;&gt;&lt;/a&gt;&lt;em&gt;△ 40次&lt;/em&gt; HTTP 与 HTTPS 有哪些区别？  中等&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;HTTPS协议需要到CA申请证书，一般免费证书很少，需要交费。&lt;/li&gt;
&lt;li&gt;HTTP协议运行在TCP之上，所有传输的内容都是明文，HTTPS运行在SSL&amp;#x2F;TLS之上，SSL&amp;#x2F;TLS运行在TCP之上，所有传输的内容都经过加密的。    &lt;/li&gt;
&lt;li&gt;HTTP和HTTPS使用的是完全不同的连接方式，用的端口也不一样，前者是80，后者是443。&lt;/li&gt;
&lt;li&gt;HTTPS可以有效的防止运营商劫持，解决了防劫持的一个大问题。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;△-38次-简述常见的-HTTP-状态码的含义（301，304，401，403）-简单&quot;&gt;&lt;a href=&quot;#△-38次-简述常见的-HTTP-状态码的含义（301，304，401，403）-简单&quot; class=&quot;headerlink&quot; title=&quot;△ 38次 简述常见的 HTTP 状态码的含义（301，304，401，403）  简单&quot;&gt;&lt;/a&gt;&lt;em&gt;△ 38次&lt;/em&gt; 简述常见的 HTTP 状态码的含义（301，304，401，403）  简单&lt;/h1&gt;&lt;h4 id=&quot;200-ok&quot;&gt;&lt;a href=&quot;#200-ok&quot; class=&quot;headerlink&quot; title=&quot;200 ok&quot;&gt;&lt;/a&gt;200 ok&lt;/h4&gt;&lt;p&gt;请求成功。成功的含义取决于 HTTP 方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;GET&lt;/code&gt;: 资源已被提取并在消息正文中传输。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;HEAD&lt;/code&gt;: 实体标头位于消息正文中。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;PUT&lt;/code&gt; or &lt;code&gt;POST&lt;/code&gt;: 描述动作结果的资源在消息体中传输。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;TRACE&lt;/code&gt;: 消息正文包含服务器收到的请求消息。&lt;h4 id=&quot;301-Moved-Permanently&quot;&gt;&lt;a href=&quot;#301-Moved-Permanently&quot; class=&quot;headerlink&quot; title=&quot;301 Moved Permanently&quot;&gt;&lt;/a&gt;301 Moved Permanently&lt;/h4&gt;请求资源的 URL 已永久更改。在响应中给出了新的 URL。&lt;h4 id=&quot;302&quot;&gt;&lt;a href=&quot;#302&quot; class=&quot;headerlink&quot; title=&quot;302&quot;&gt;&lt;/a&gt;302&lt;/h4&gt;临时重定向&lt;h4 id=&quot;304-Not-Modified&quot;&gt;&lt;a href=&quot;#304-Not-Modified&quot; class=&quot;headerlink&quot; title=&quot;304 Not Modified&quot;&gt;&lt;/a&gt;304 Not Modified&lt;/h4&gt;这是用于缓存的目的。它告诉客户端响应还没有被修改，因此客户端可以继续使用相同的缓存版本的响应。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;400-Bad-Request&quot;&gt;&lt;a href=&quot;#400-Bad-Request&quot; class=&quot;headerlink&quot; title=&quot;400 Bad Request&quot;&gt;&lt;/a&gt;400 Bad Request&lt;/h4&gt;&lt;p&gt;由于被认为是客户端错误（例如，错误的请求语法、无效的请求消息帧或欺骗性的请求路由），服务器无法或不会处理请求。&lt;/p&gt;
&lt;h4 id=&quot;401-Unauthorized&quot;&gt;&lt;a href=&quot;#401-Unauthorized&quot; class=&quot;headerlink&quot; title=&quot;401 Unauthorized&quot;&gt;&lt;/a&gt;401 Unauthorized&lt;/h4&gt;&lt;p&gt;虽然 HTTP 标准指定了”unauthorized”，但从语义上来说，这个响应意味着”unauthenticated”。也就是说，客户端必须对自身进行身份验证才能获得请求的响应。&lt;/p&gt;
&lt;h4 id=&quot;403-Forbidden&quot;&gt;&lt;a href=&quot;#403-Forbidden&quot; class=&quot;headerlink&quot; title=&quot;403 Forbidden&quot;&gt;&lt;/a&gt;403 Forbidden&lt;/h4&gt;&lt;p&gt;客户端没有访问内容的权限；也就是说，它是未经授权的，因此服务器拒绝提供请求的资源。与 &lt;code&gt;401 Unauthorized&lt;/code&gt; 不同，服务器知道客户端的身份。&lt;/p&gt;
&lt;h4 id=&quot;404-Not-Found&quot;&gt;&lt;a href=&quot;#404-Not-Found&quot; class=&quot;headerlink&quot; title=&quot;404 Not Found&quot;&gt;&lt;/a&gt;404 Not Found&lt;/h4&gt;&lt;p&gt;服务器找不到请求的资源。在浏览器中，这意味着无法识别 URL。在 API 中，这也可能意味着端点有效，但资源本身不存在。服务器也可以发送此响应，而不是 &lt;code&gt;403 Forbidden&lt;/code&gt;，以向未经授权的客户端隐藏资源的存在。这个响应代码可能是最广为人知的，因为它经常出现在网络上。&lt;/p&gt;
&lt;h4 id=&quot;405-Method-Not-Allowed&quot;&gt;&lt;a href=&quot;#405-Method-Not-Allowed&quot; class=&quot;headerlink&quot; title=&quot;405 Method Not Allowed&quot;&gt;&lt;/a&gt;405 Method Not Allowed&lt;/h4&gt;&lt;p&gt;服务器知道请求方法，但目标资源不支持该方法。例如，API 可能不允许调用&lt;code&gt;DELETE&lt;/code&gt;来删除资源。&lt;/p&gt;
&lt;h4 id=&quot;500-Internal-Server-Error&quot;&gt;&lt;a href=&quot;#500-Internal-Server-Error&quot; class=&quot;headerlink&quot; title=&quot;500 Internal Server Error&quot;&gt;&lt;/a&gt;500 Internal Server Error&lt;/h4&gt;&lt;p&gt;服务器遇到了不知道如何处理的情况。&lt;/p&gt;
&lt;h4 id=&quot;502-Bad-Gateway&quot;&gt;&lt;a href=&quot;#502-Bad-Gateway&quot; class=&quot;headerlink&quot; title=&quot;502 Bad Gateway&quot;&gt;&lt;/a&gt;502 Bad Gateway&lt;/h4&gt;&lt;p&gt;此错误响应表明服务器作为网关需要得到一个处理这个请求的响应，但是得到一个错误的响应。&lt;/p&gt;
&lt;h4 id=&quot;503-Service-Unavailable&quot;&gt;&lt;a href=&quot;#503-Service-Unavailable&quot; class=&quot;headerlink&quot; title=&quot;503 Service Unavailable&quot;&gt;&lt;/a&gt;503 Service Unavailable&lt;/h4&gt;&lt;p&gt;服务器没有准备好处理请求。常见原因是服务器因维护或重载而停机。请注意，与此响应一起，应发送解释问题的用户友好页面。这个响应应该用于临时条件和如果可能的话，HTTP 标头 &lt;code&gt;Retry-After&lt;/code&gt; 字段应该包含恢复服务之前的估计时间。网站管理员还必须注意与此响应一起发送的与缓存相关的标头，因为这些临时条件响应通常不应被缓存。&lt;/p&gt;
&lt;h4 id=&quot;504-Gateway-Timeout&quot;&gt;&lt;a href=&quot;#504-Gateway-Timeout&quot; class=&quot;headerlink&quot; title=&quot;504 Gateway Timeout&quot;&gt;&lt;/a&gt;504 Gateway Timeout&lt;/h4&gt;&lt;p&gt;当服务器充当网关且无法及时获得响应时，会给出此错误响应。&lt;/p&gt;
&lt;h1 id=&quot;△-38次-简述-TCP-三次握手以及四次挥手的流程。为什么需要三次握手以及四次挥手？-中等&quot;&gt;&lt;a href=&quot;#△-38次-简述-TCP-三次握手以及四次挥手的流程。为什么需要三次握手以及四次挥手？-中等&quot; class=&quot;headerlink&quot; title=&quot;△ 38次 简述 TCP 三次握手以及四次挥手的流程。为什么需要三次握手以及四次挥手？  中等&quot;&gt;&lt;/a&gt;&lt;em&gt;△ 38次&lt;/em&gt; 简述 TCP 三次握手以及四次挥手的流程。为什么需要三次握手以及四次挥手？  中等&lt;/h1&gt;&lt;h3 id=&quot;TCP-的特性&quot;&gt;&lt;a href=&quot;#TCP-的特性&quot; class=&quot;headerlink&quot; title=&quot;TCP 的特性&quot;&gt;&lt;/a&gt;TCP 的特性&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;TCP 提供一种&lt;strong&gt;面向连接的、可靠的&lt;/strong&gt;字节流服务&lt;/li&gt;
&lt;li&gt;在一个 TCP 连接中，仅有两方进行彼此通信。广播和多播不能用于 TCP&lt;/li&gt;
&lt;li&gt;TCP 使用校验和，确认和重传机制来保证可靠传输&lt;/li&gt;
&lt;li&gt;TCP 给数据分节进行排序，并使用累积确认保证数据的顺序不变和非重复&lt;/li&gt;
&lt;li&gt;TCP 使用滑动窗口机制来实现流量控制，通过动态改变窗口的大小进行拥塞控制&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;：TCP 并不能保证数据一定会被对方接收到，因为这是不可能的。TCP 能够做到的是，如果有可能，就把数据递送到接收方，否则就（通过放弃重传并且中断连接这一手段）通知用户。因此准确说 TCP 也不是 100% 可靠的协议，它所能提供的是数据的可靠递送或故障的可靠通知。&lt;br&gt;TCP（Transmission Control Protocol，传输控制协议）使用三次握手（Three-Way Handshake）和四次挥手（Four-Way Handshake）来建立和终止连接。每个过程都有其特定的目的，以确保数据传输的可靠性和连接管理的正确性。&lt;/p&gt;
&lt;h3 id=&quot;三次握手&quot;&gt;&lt;a href=&quot;#三次握手&quot; class=&quot;headerlink&quot; title=&quot;三次握手&quot;&gt;&lt;/a&gt;三次握手&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;目的&lt;/strong&gt;：三次握手的主要目的是确保双方都准备好开始通信，并同步初始序列号。这为可靠的数据传输提供了基础。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;第一次握手（SYN）&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;客户端发送一个带有 SYN（同步）标志的数据包给服务器。这个数据包包含一个初始序列号 &lt;code&gt;seq=x&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;目的：客户端告诉服务器它想建立连接，并发送一个初始序列号。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;第二次握手（SYN-ACK）&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;服务器收到 SYN 数据包后，回应一个带有 SYN 和 ACK（确认）标志的数据包。这个数据包包含服务器的初始序列号 &lt;code&gt;seq=y&lt;/code&gt;，并对客户端的序列号进行确认 &lt;code&gt;ack=x+1&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;目的：服务器同意建立连接，并确认收到客户端的初始序列号。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;第三次握手（ACK）&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;客户端收到 SYN-ACK 数据包后，发送一个带有 ACK 标志的数据包给服务器，确认收到服务器的初始序列号 &lt;code&gt;ack=y+1&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;目的：客户端确认连接已经建立，并告知服务器自己也准备好了。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;为什么需要三次握手&quot;&gt;&lt;a href=&quot;#为什么需要三次握手&quot; class=&quot;headerlink&quot; title=&quot;为什么需要三次握手&quot;&gt;&lt;/a&gt;为什么需要三次握手&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;双向确认&lt;/strong&gt;：三次握手确保了客户端和服务器双方都知道对方准备好了，并且初始序列号已经同步。这避免了因为过期的 SYN 数据包导致的错误连接。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;防止重复连接&lt;/strong&gt;：在网络延迟或其他原因导致的重复数据包情况下，三次握手能够防止重复连接的产生。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;四次挥手&quot;&gt;&lt;a href=&quot;#四次挥手&quot; class=&quot;headerlink&quot; title=&quot;四次挥手&quot;&gt;&lt;/a&gt;四次挥手&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;目的&lt;/strong&gt;：四次挥手的主要目的是确保双方都安全地终止连接，并且所有的数据传输都已经完成。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;第一次挥手（FIN）&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;客户端发送一个带有 FIN（终止）标志的数据包，表示不再发送数据了。这个数据包包含一个序列号 &lt;code&gt;seq=u&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;目的：客户端告知服务器它已经发送完数据，请求终止连接。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;第二次挥手（ACK）&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;服务器收到 FIN 数据包后，回应一个带有 ACK 标志的数据包，确认收到客户端的终止请求 &lt;code&gt;ack=u+1&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;目的：服务器确认收到客户端的终止请求，但可能仍有数据要发送。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;第三次挥手（FIN）&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;服务器发送一个带有 FIN 标志的数据包，表示它也准备好终止连接。这个数据包包含一个序列号 &lt;code&gt;seq=v&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;目的：服务器告知客户端它也已经发送完数据，请求终止连接。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;第四次挥手（ACK）&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;客户端收到 FIN 数据包后，发送一个带有 ACK 标志的数据包，确认收到服务器的终止请求 &lt;code&gt;ack=v+1&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;目的：客户端确认连接已经终止。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;为什么需要四次挥手&quot;&gt;&lt;a href=&quot;#为什么需要四次挥手&quot; class=&quot;headerlink&quot; title=&quot;为什么需要四次挥手&quot;&gt;&lt;/a&gt;为什么需要四次挥手&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;双向独立关闭&lt;/strong&gt;：TCP 连接是全双工的，即双方都可以独立地关闭各自的发送和接收通道。四次挥手确保了每一方向的连接都能安全关闭。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;数据完整性&lt;/strong&gt;：通过四次挥手，确保所有未发送的数据都能被正确接收，防止数据丢失。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;三次握手&lt;/strong&gt;：用于建立连接，确保双方都准备好开始通信，并同步初始序列号。三次握手提供了双向确认，防止重复连接，确保连接的可靠性。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;四次挥手&lt;/strong&gt;：用于安全地终止连接，确保双方都完成数据传输，并独立地关闭各自的连接。四次挥手确保了数据的完整性和连接的正确关闭。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这两个过程共同确保了 TCP 连接的可靠性、数据的完整性和连接管理的正确性。&lt;/p&gt;
&lt;h1 id=&quot;△-34次-简述-HTTPS-的加密与认证过程-中等&quot;&gt;&lt;a href=&quot;#△-34次-简述-HTTPS-的加密与认证过程-中等&quot; class=&quot;headerlink&quot; title=&quot;△ 34次 简述 HTTPS 的加密与认证过程  中等&quot;&gt;&lt;/a&gt;&lt;em&gt;△ 34次&lt;/em&gt; 简述 HTTPS 的加密与认证过程  中等&lt;/h1&gt;&lt;h3 id=&quot;SSL-握手&quot;&gt;&lt;a href=&quot;#SSL-握手&quot; class=&quot;headerlink&quot; title=&quot;SSL 握手&quot;&gt;&lt;/a&gt;SSL 握手&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;客户端给出协议版本号、一个客户端生成的随机数（Client random），以及客户端支持的加密方法。&lt;/li&gt;
&lt;li&gt;服务端确认双方使用的加密方法，并给出数字证书、一个服务端生成的随机数（Server random）。&lt;/li&gt;
&lt;li&gt;客户端确认数字证书有效，然后生成一个新的随机数（Premaster secret），并使用证书中的公钥，对其进行加密后发给客户端。&lt;/li&gt;
&lt;li&gt;客户端使用自己的私钥，换算出服务端的新随机数（Premaster secret）。&lt;/li&gt;
&lt;li&gt;双方根据约定好的加密方法，使用前面三个随机数，生成“对话秘钥”（session key），用来加密接下来的整个对话过程。&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;△-34次-什么是跨域，什么情况下会发生跨域请求？-中等&quot;&gt;&lt;a href=&quot;#△-34次-什么是跨域，什么情况下会发生跨域请求？-中等&quot; class=&quot;headerlink&quot; title=&quot;△ 34次 什么是跨域，什么情况下会发生跨域请求？  中等&quot;&gt;&lt;/a&gt;&lt;strong&gt;△ 34次&lt;/strong&gt; 什么是跨域，什么情况下会发生跨域请求？  中等&lt;/h1&gt;&lt;p&gt;跨域（Cross-Origin）是指从一个域向另一个域发出请求的行为。浏览器的同源策略（Same-Origin Policy）限制了这种行为，以保护用户的安全和隐私。同源策略规定，只有当请求的源（协议、域名、端口）与当前页面的源相同时，才能共享资源。&lt;/p&gt;
&lt;h3 id=&quot;什么是同源策略&quot;&gt;&lt;a href=&quot;#什么是同源策略&quot; class=&quot;headerlink&quot; title=&quot;什么是同源策略&quot;&gt;&lt;/a&gt;什么是同源策略&lt;/h3&gt;&lt;p&gt;同源策略是一种安全机制，限制一个源的文档或脚本与来自另一个源的资源进行交互。具体来说，同源策略要求以下三者必须完全相同：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;协议（如 &lt;code&gt;http&lt;/code&gt;、&lt;code&gt;https&lt;/code&gt;）&lt;/li&gt;
&lt;li&gt;域名（如 &lt;code&gt;example.com&lt;/code&gt;）&lt;/li&gt;
&lt;li&gt;端口（如 &lt;code&gt;80&lt;/code&gt;、&lt;code&gt;443&lt;/code&gt;）&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;什么是跨域请求&quot;&gt;&lt;a href=&quot;#什么是跨域请求&quot; class=&quot;headerlink&quot; title=&quot;什么是跨域请求&quot;&gt;&lt;/a&gt;什么是跨域请求&lt;/h3&gt;&lt;p&gt;跨域请求是指当前页面向不同源的服务器发出 HTTP 请求。以下情况都会触发跨域请求：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;不同的协议&lt;/strong&gt;（例如，从 &lt;code&gt;https://example.com&lt;/code&gt; 请求 &lt;code&gt;http://example.com&lt;/code&gt; 的资源）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;不同的域名&lt;/strong&gt;（例如，从 &lt;code&gt;example.com&lt;/code&gt; 请求 &lt;code&gt;api.example.com&lt;/code&gt; 的资源）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;不同的端口&lt;/strong&gt;（例如，从 &lt;code&gt;example.com:80&lt;/code&gt; 请求 &lt;code&gt;example.com:8080&lt;/code&gt; 的资源）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;常见的跨域请求场景&quot;&gt;&lt;a href=&quot;#常见的跨域请求场景&quot; class=&quot;headerlink&quot; title=&quot;常见的跨域请求场景&quot;&gt;&lt;/a&gt;常见的跨域请求场景&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Ajax 请求&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通过 JavaScript 发出的 &lt;code&gt;XMLHttpRequest&lt;/code&gt; 或 &lt;code&gt;Fetch&lt;/code&gt; 请求，目标服务器与当前页面的源不同。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;图片、脚本、样式&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在 HTML 中引入的 &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt;、&lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt;、&lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt; 等标签的 &lt;code&gt;src&lt;/code&gt; 或 &lt;code&gt;href&lt;/code&gt; 属性指向不同源。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Web 字体&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用 &lt;code&gt;@font-face&lt;/code&gt; 在 CSS 中加载不同源的字体文件。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;嵌入框架&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用 &lt;code&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt; 加载不同源的页面内容。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;表单提交&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;HTML 表单的 &lt;code&gt;action&lt;/code&gt; 属性指向不同源。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;WebSockets&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用 WebSocket 连接到不同源的服务器。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;解决跨域问题的方法&quot;&gt;&lt;a href=&quot;#解决跨域问题的方法&quot; class=&quot;headerlink&quot; title=&quot;解决跨域问题的方法&quot;&gt;&lt;/a&gt;解决跨域问题的方法&lt;/h3&gt;&lt;p&gt;浏览器默认会阻止不符合同源策略的跨域请求，但可以通过以下几种方式来解决跨域问题：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;JSONP（JSON with Padding）&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;利用 &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; 标签不受同源策略限制的特点，通过动态插入 &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; 标签来实现跨域请求。JSONP 只能用于 GET 请求。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;CORS（跨域资源共享）&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;服务器在响应头中设置适当的 CORS 头信息，例如 &lt;code&gt;Access-Control-Allow-Origin&lt;/code&gt;，来指示浏览器允许跨域请求。CORS 是最常用、最灵活的跨域解决方案。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;代理服务器&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用服务器端的代理，将跨域请求发送到自己的服务器，然后由服务器向目标服务器发出请求，并将结果返回给客户端。这种方式可以完全绕过浏览器的同源策略。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;跨域资源嵌入&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;某些标签（如 &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt;、&lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt;、&lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt;、&lt;code&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt; 等）可以直接嵌入跨域资源。这种方式虽然简单，但不适用于需要进行复杂数据交互的情况。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;CORS-详细说明&quot;&gt;&lt;a href=&quot;#CORS-详细说明&quot; class=&quot;headerlink&quot; title=&quot;CORS 详细说明&quot;&gt;&lt;/a&gt;CORS 详细说明&lt;/h3&gt;&lt;p&gt;CORS（Cross-Origin Resource Sharing）是目前最常用的跨域解决方案，通过在 HTTP 头中设置适当的 CORS 头信息来实现。以下是一些常见的 CORS 头信息及其含义：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;**&lt;code&gt;Access-Control-Allow-Origin&lt;/code&gt;**：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;指定允许哪些域可以访问资源。可以是具体的域名或通配符 &lt;code&gt;*&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;**&lt;code&gt;Access-Control-Allow-Methods&lt;/code&gt;**：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;指定允许的 HTTP 方法（如 GET、POST、PUT、DELETE）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;**&lt;code&gt;Access-Control-Allow-Headers&lt;/code&gt;**：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;指定允许的请求头字段。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;**&lt;code&gt;Access-Control-Allow-Credentials&lt;/code&gt;**：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;是否允许发送凭据（如 Cookie）。如果设置为 &lt;code&gt;true&lt;/code&gt;，&lt;code&gt;Access-Control-Allow-Origin&lt;/code&gt; 不能为 &lt;code&gt;*&lt;/code&gt;，必须指定具体的域名。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;**&lt;code&gt;Access-Control-Expose-Headers&lt;/code&gt;**：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;指定哪些响应头可以被客户端 JavaScript 访问。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;**&lt;code&gt;Access-Control-Max-Age&lt;/code&gt;**：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;指定预检请求的结果可以缓存多长时间。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;示例：使用-CORS-允许跨域请求&quot;&gt;&lt;a href=&quot;#示例：使用-CORS-允许跨域请求&quot; class=&quot;headerlink&quot; title=&quot;示例：使用 CORS 允许跨域请求&quot;&gt;&lt;/a&gt;示例：使用 CORS 允许跨域请求&lt;/h3&gt;&lt;p&gt;假设有一个服务器的域名为 &lt;code&gt;api.example.com&lt;/code&gt;，我们希望允许 &lt;code&gt;www.example.com&lt;/code&gt; 访问其资源，可以在 &lt;code&gt;api.example.com&lt;/code&gt; 的响应头中设置：&lt;/p&gt;
&lt;figure class=&quot;highlight http&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;Access-Control-Allow-Origin&lt;/span&gt;&lt;span class=&quot;punctuation&quot;&gt;: &lt;/span&gt;http://www.example.com&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;Access-Control-Allow-Methods&lt;/span&gt;&lt;span class=&quot;punctuation&quot;&gt;: &lt;/span&gt;GET, POST&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;Access-Control-Allow-Headers&lt;/span&gt;&lt;span class=&quot;punctuation&quot;&gt;: &lt;/span&gt;Content-Type&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;Access-Control-Allow-Credentials&lt;/span&gt;&lt;span class=&quot;punctuation&quot;&gt;: &lt;/span&gt;true&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;这样，当 &lt;code&gt;www.example.com&lt;/code&gt; 发起跨域请求时，浏览器会检查这些 CORS 头信息，确定是否允许跨域请求。如果头信息匹配，则请求成功，否则浏览器会阻止请求。&lt;/p&gt;
&lt;p&gt;通过这些方法，可以在确保安全的前提下，实现跨域请求和数据共享。&lt;/p&gt;
&lt;h1 id=&quot;△-28次-DNS-查询服务器的基本流程是什么？DNS-劫持是什么？-中等-参考1-参考2&quot;&gt;&lt;a href=&quot;#△-28次-DNS-查询服务器的基本流程是什么？DNS-劫持是什么？-中等-参考1-参考2&quot; class=&quot;headerlink&quot; title=&quot;△ 28次 DNS 查询服务器的基本流程是什么？DNS 劫持是什么？  中等 参考1 参考2&quot;&gt;&lt;/a&gt;&lt;strong&gt;△ 28次&lt;/strong&gt; DNS 查询服务器的基本流程是什么？DNS 劫持是什么？  中等 &lt;a href=&quot;https://www.cloudflare.com/learning/dns/what-is-dns/&quot;&gt;参考1&lt;/a&gt; &lt;a href=&quot;https://www.ruanyifeng.com/blog/2016/06/dns.html&quot;&gt;参考2&lt;/a&gt;&lt;/h1&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;主机名.次级域名.顶级域名.根域名&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 即&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;host.sld.tld.root&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&quot;DNS-查找的-8-个步骤：&quot;&gt;&lt;a href=&quot;#DNS-查找的-8-个步骤：&quot; class=&quot;headerlink&quot; title=&quot;DNS 查找的 8 个步骤：&quot;&gt;&lt;/a&gt;DNS 查找的 8 个步骤：&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;用户在 Web 浏览器中键入 “example.com”，查询传输到 Internet 中，并被 DNS 递归解析器接收。&lt;/li&gt;
&lt;li&gt;接着，解析器查询 DNS 根域名服务器（.）。&lt;/li&gt;
&lt;li&gt;然后，根服务器使用存储其域信息的顶级域（TLD）DNS 服务器（例如 .com 或 .net）的地址响应该解析器。在搜索 example.com 时，我们的请求指向 .com TLD。&lt;/li&gt;
&lt;li&gt;然后，解析器向 .com TLD 发出请求。&lt;/li&gt;
&lt;li&gt;TLD 服务器随后使用该域的域名服务器 example.com 的 IP 地址进行响应。&lt;/li&gt;
&lt;li&gt;最后，递归解析器将查询发送到域的域名服务器。&lt;/li&gt;
&lt;li&gt;example.com 的 IP 地址而后从域名服务器返回解析器。&lt;/li&gt;
&lt;li&gt;然后 DNS 解析器使用最初请求的域的 IP 地址响应 Web 浏览器。&lt;h4 id=&quot;DNS-查找的这-8-个步骤返回-example-com-的-IP-地址后，浏览器便能发出对该网页的请求：&quot;&gt;&lt;a href=&quot;#DNS-查找的这-8-个步骤返回-example-com-的-IP-地址后，浏览器便能发出对该网页的请求：&quot; class=&quot;headerlink&quot; title=&quot;DNS 查找的这 8 个步骤返回 example.com 的 IP 地址后，浏览器便能发出对该网页的请求：&quot;&gt;&lt;/a&gt;DNS 查找的这 8 个步骤返回 example.com 的 IP 地址后，浏览器便能发出对该网页的请求：&lt;/h4&gt;&lt;/li&gt;
&lt;li&gt;浏览器向该 IP 地址发出 &lt;a href=&quot;https://www.cloudflare-cn.com/learning/ddos/glossary/hypertext-transfer-protocol-http/&quot;&gt;HTTP&lt;/a&gt; 请求。&lt;/li&gt;
&lt;li&gt;位于该 IP 的服务器返回将在浏览器中呈现的网页（第 10 步）。&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;△-26次-TCP的拥塞控制具体是怎么实现的？UDP有拥塞控制吗？-中等&quot;&gt;&lt;a href=&quot;#△-26次-TCP的拥塞控制具体是怎么实现的？UDP有拥塞控制吗？-中等&quot; class=&quot;headerlink&quot; title=&quot;△ 26次 TCP的拥塞控制具体是怎么实现的？UDP有拥塞控制吗？  中等&quot;&gt;&lt;/a&gt;&lt;strong&gt;△ 26次&lt;/strong&gt; TCP的拥塞控制具体是怎么实现的？UDP有拥塞控制吗？  中等&lt;/h1&gt;&lt;h3 id=&quot;慢启动-Slow-start&quot;&gt;&lt;a href=&quot;#慢启动-Slow-start&quot; class=&quot;headerlink&quot; title=&quot;慢启动(Slow start)&quot;&gt;&lt;/a&gt;慢启动(Slow start)&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;拥塞窗口的初始值为1 &lt;/li&gt;
&lt;li&gt;每收到一个对发出的数据段的ACK确认，便将拥塞窗口的值增加1,cwnd++ (呈线性上升) &lt;/li&gt;
&lt;li&gt;每当过了一个RTT(Round Trip Time)，cwnd &amp;#x3D; cwnd*2; 呈指数让升 &lt;/li&gt;
&lt;li&gt;阈值ssthresh（slow start threshold），是一个上限，当cwnd &amp;gt;&amp;#x3D; ssthresh时，就会进入“拥塞避免算法”&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;拥塞避免-Congestion-avoidance&quot;&gt;&lt;a href=&quot;#拥塞避免-Congestion-avoidance&quot; class=&quot;headerlink&quot; title=&quot;拥塞避免(Congestion avoidance)&quot;&gt;&lt;/a&gt;拥塞避免(Congestion avoidance)&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;达到阈值（一般是16）开始加法递增&lt;/li&gt;
&lt;li&gt;TCP连接进行初始化的时候，cwnd&amp;#x3D;1,ssthresh&amp;#x3D;16 &lt;/li&gt;
&lt;li&gt;在慢启动算法开始时，cwnd的初始值是1，每次发送方收到一个ACK拥塞窗口就增加1，当ssthresh &amp;#x3D;cwnd时，就启动拥塞控制算法，拥塞窗口按照规律增长 &lt;/li&gt;
&lt;li&gt;当cwnd&amp;#x3D;24时，网络出现超时，发送方收不到确认ACK，此时设置ssthresh&amp;#x3D;12（二分之一cwnd），设置cwnd&amp;#x3D;1，然后重新开始慢启动算法，当cwnd&amp;#x3D;ssthresh&amp;#x3D;12，慢启动算法变为拥塞控制算法，cwnd按照线性的速度进行增长&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;快速重传-Fast-retransmit&quot;&gt;&lt;a href=&quot;#快速重传-Fast-retransmit&quot; class=&quot;headerlink&quot; title=&quot;快速重传(Fast retransmit)&quot;&gt;&lt;/a&gt;快速重传(Fast retransmit)&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;3次受到重复 ack 报文，立刻重传该报文&lt;/li&gt;
&lt;li&gt;把ssthresh设置为cwnd的一半 &lt;/li&gt;
&lt;li&gt;把cwnd再设置为ssthresh的值(具体实现有些为ssthresh+3*MSS) &lt;/li&gt;
&lt;li&gt;重新进入拥塞避免阶段（加法递增）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;快速恢复-Fast-Recovery&quot;&gt;&lt;a href=&quot;#快速恢复-Fast-Recovery&quot; class=&quot;headerlink&quot; title=&quot;快速恢复(Fast Recovery)&quot;&gt;&lt;/a&gt;快速恢复(Fast Recovery)&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;当收到3个重复ACK时，把ssthresh设置为cwnd的一半，把cwnd设置为ssthresh的值加3，然后重传丢失的报文段，加3的原因是因为收到3个重复的ACK，表明有3个“老”的数据包离开了网络，(cwnd &amp;#x3D; sshthresh + 3 * MSS (3的意思是确认有3个数据包被收到了)) &lt;/li&gt;
&lt;li&gt;重传Duplicated ACKs指定的数据包 &lt;/li&gt;
&lt;li&gt;如果再收到重复的ACK时，拥塞窗口增加1。 &lt;/li&gt;
&lt;li&gt;当收到新的数据包的ACK时，把cwnd设置为第一步中的ssthresh的值。原因是因为该ACK确认了新的数据，说明从重复ACK时的数据都已收到，该恢复过程已经结束，可以回到恢复之前的状态了，也即再次进入拥塞避免状态。&lt;/li&gt;
&lt;li&gt;乘法减半 + 加法递增&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;选择性应答-selective-acknowledgement-SACK-算法&quot;&gt;&lt;a href=&quot;#选择性应答-selective-acknowledgement-SACK-算法&quot; class=&quot;headerlink&quot; title=&quot;选择性应答( selective acknowledgement,SACK)算法&quot;&gt;&lt;/a&gt;选择性应答( selective acknowledgement,SACK)算法&lt;/h3&gt;&lt;h1 id=&quot;△-26次-TCP-与-UDP-在网络协议中的哪一层，他们之间有什么区别？&quot;&gt;&lt;a href=&quot;#△-26次-TCP-与-UDP-在网络协议中的哪一层，他们之间有什么区别？&quot; class=&quot;headerlink&quot; title=&quot;△ 26次 TCP 与 UDP 在网络协议中的哪一层，他们之间有什么区别？&quot;&gt;&lt;/a&gt;&lt;em&gt;△ 26次&lt;/em&gt; TCP 与 UDP 在网络协议中的哪一层，他们之间有什么区别？&lt;/h1&gt;&lt;p&gt;传输层协议&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;TCP 面向连接（如打电话要先拨号建立连接）提供可靠的服务，UDP 是无连接的，即发送数据之前不需要建立连接，UDP 尽最大努力交付，即不保证可靠交付。&lt;/li&gt;
&lt;li&gt;UDP 具有较好的实时性，工作效率比 TCP 高，适用于对高速传输和实时性有较高的通信或广播通信。&lt;/li&gt;
&lt;li&gt;每一条 TCP 连接只能是一对一的，UDP 支持一对一，一对多，多对一和多对多的交互通信。&lt;/li&gt;
&lt;li&gt;UDP 分组首部开销小，TCP 首部开销 20 字节，UDP 的首部开销小，只有 8 个字节。&lt;/li&gt;
&lt;li&gt;TCP 面向字节流，实际上是 TCP 把数据看成一连串无结构的字节流，UDP 是面向报文的一次交付一个完整的报文，报文不可分割，报文是 UDP 数据报处理的最小单位。&lt;/li&gt;
&lt;li&gt;UDP 适合一次性传输较小数据的网络应用，如 DNS，SNMP 等。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;△ 24次&lt;/p&gt;
&lt;p&gt;什么是 TCP 粘包和拆包？  简单&lt;/p&gt;
&lt;h1 id=&quot;△-24次-简述-HTTP-1-0，1-1，2-0-的主要区别-简单&quot;&gt;&lt;a href=&quot;#△-24次-简述-HTTP-1-0，1-1，2-0-的主要区别-简单&quot; class=&quot;headerlink&quot; title=&quot;△ 24次 简述 HTTP 1.0，1.1，2.0 的主要区别  简单&quot;&gt;&lt;/a&gt;&lt;strong&gt;△ 24次&lt;/strong&gt; 简述 HTTP 1.0，1.1，2.0 的主要区别  简单&lt;/h1&gt;&lt;p&gt;HTTP（HyperText Transfer Protocol）是用于在客户端和服务器之间传输超文本的协议。HTTP 协议从 1.0 发展到 2.0，经历了多次改进，主要体现在连接管理、性能和安全性等方面。&lt;/p&gt;
&lt;h3 id=&quot;HTTP-x2F-1-0&quot;&gt;&lt;a href=&quot;#HTTP-x2F-1-0&quot; class=&quot;headerlink&quot; title=&quot;HTTP&amp;#x2F;1.0&quot;&gt;&lt;/a&gt;HTTP&amp;#x2F;1.0&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;发布时间&lt;/strong&gt;：1996年&lt;/p&gt;
&lt;h4 id=&quot;特点：&quot;&gt;&lt;a href=&quot;#特点：&quot; class=&quot;headerlink&quot; title=&quot;特点：&quot;&gt;&lt;/a&gt;特点：&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;无连接&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每个请求&amp;#x2F;响应对使用单独的 TCP 连接。这意味着每次请求都需要建立和关闭 TCP 连接，导致额外的开销。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;请求&amp;#x2F;响应模型&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;客户端发送请求，服务器处理后返回响应。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;缺少持久连接&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每次请求完成后连接就关闭，不能复用连接。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;有限的缓存控制&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用 &lt;code&gt;Expires&lt;/code&gt; 头部来控制缓存，功能有限。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;HTTP-x2F-1-1&quot;&gt;&lt;a href=&quot;#HTTP-x2F-1-1&quot; class=&quot;headerlink&quot; title=&quot;HTTP&amp;#x2F;1.1&quot;&gt;&lt;/a&gt;HTTP&amp;#x2F;1.1&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;发布时间&lt;/strong&gt;：1997年&lt;/p&gt;
&lt;h4 id=&quot;主要改进：&quot;&gt;&lt;a href=&quot;#主要改进：&quot; class=&quot;headerlink&quot; title=&quot;主要改进：&quot;&gt;&lt;/a&gt;主要改进：&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;持久连接&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;默认使用持久连接（连接复用），通过 &lt;code&gt;Connection: keep-alive&lt;/code&gt; 头部保持连接，使得多个请求可以复用同一个 TCP 连接，减少连接建立和关闭的开销。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;管道化&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;支持请求管道化，即在收到前一个请求的响应之前，客户端可以继续发送后续请求，虽然服务器仍然是按顺序处理请求。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;分块传输编码&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用 &lt;code&gt;Transfer-Encoding: chunked&lt;/code&gt;，允许服务器逐步发送响应数据，而无需事先知道内容的总长度。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;缓存控制&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;增加了更复杂的缓存机制，使用 &lt;code&gt;Cache-Control&lt;/code&gt; 头部提供更精确的缓存指令（如 &lt;code&gt;max-age&lt;/code&gt;、&lt;code&gt;no-cache&lt;/code&gt;、&lt;code&gt;no-store&lt;/code&gt; 等）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;范围请求&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;支持部分内容请求，通过 &lt;code&gt;Range&lt;/code&gt; 头部，客户端可以请求资源的特定部分（用于断点续传、视频流等）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;更多的请求&amp;#x2F;响应头&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;增加了许多新的请求和响应头（如 &lt;code&gt;Host&lt;/code&gt; 头部），使得请求可以包含更多的信息。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;HTTP-x2F-2-0&quot;&gt;&lt;a href=&quot;#HTTP-x2F-2-0&quot; class=&quot;headerlink&quot; title=&quot;HTTP&amp;#x2F;2.0&quot;&gt;&lt;/a&gt;HTTP&amp;#x2F;2.0&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;发布时间&lt;/strong&gt;：2015年&lt;/p&gt;
&lt;h4 id=&quot;主要改进：-1&quot;&gt;&lt;a href=&quot;#主要改进：-1&quot; class=&quot;headerlink&quot; title=&quot;主要改进：&quot;&gt;&lt;/a&gt;主要改进：&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;二进制分帧&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;HTTP&amp;#x2F;2 引入了二进制分帧层，所有数据在传输时都被分成更小的二进制帧。这种方式更高效且易于解析，取代了 HTTP&amp;#x2F;1.1 的纯文本格式。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;多路复用&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在一个 TCP 连接中允许同时发送多个请求和响应，不再按顺序排队。这解决了 HTTP&amp;#x2F;1.x 中存在的队头阻塞（Head-of-Line Blocking）问题，大大提升了性能。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;头部压缩&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用 HPACK 算法对 HTTP 头部进行压缩，减少传输的数据量，提升性能。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;服务器推送&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;服务器可以主动向客户端推送资源，而无需客户端明确请求。这对于提升页面加载速度非常有利，例如预加载样式表和脚本。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;优先级和依赖性&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;客户端可以指定请求的优先级和依赖关系，服务器可以根据优先级来决定响应的顺序和速度。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;对比总结&quot;&gt;&lt;a href=&quot;#对比总结&quot; class=&quot;headerlink&quot; title=&quot;对比总结&quot;&gt;&lt;/a&gt;对比总结&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;HTTP&amp;#x2F;1.0 vs HTTP&amp;#x2F;1.1&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;HTTP&amp;#x2F;1.0 使用无连接的请求&amp;#x2F;响应模型，每个请求都需要新的连接，缺少持久连接和先进的缓存机制。&lt;/li&gt;
&lt;li&gt;HTTP&amp;#x2F;1.1 引入了持久连接、管道化、分块传输编码、更复杂的缓存控制、范围请求等，提升了效率和灵活性。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;HTTP&amp;#x2F;1.1 vs HTTP&amp;#x2F;2.0&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;HTTP&amp;#x2F;1.1 使用纯文本格式，尽管支持持久连接和管道化，但仍存在队头阻塞的问题，性能受限。&lt;/li&gt;
&lt;li&gt;HTTP&amp;#x2F;2.0 引入二进制分帧、多路复用、头部压缩、服务器推送等，显著提升了传输效率和性能，解决了 HTTP&amp;#x2F;1.x 的一些固有问题。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;总体来说，HTTP 从 1.0 到 2.0 的发展，主要是为了提高传输效率、降低延迟、减少开销以及提升安全性。HTTP&amp;#x2F;2.0 尤其通过多路复用和头部压缩，显著提高了网络性能，改善了用户体验。&lt;/p&gt;
&lt;h1 id=&quot;△-22次-简述对称与非对称加密的概念-简单&quot;&gt;&lt;a href=&quot;#△-22次-简述对称与非对称加密的概念-简单&quot; class=&quot;headerlink&quot; title=&quot;△ 22次 简述对称与非对称加密的概念  简单&quot;&gt;&lt;/a&gt;&lt;strong&gt;△ 22次&lt;/strong&gt; 简述对称与非对称加密的概念  简单&lt;/h1&gt;&lt;p&gt;对称加密和非对称加密是两种主要的加密技术，分别用于保护数据的安全性。它们在密钥管理和使用上存在显著差异。&lt;/p&gt;
&lt;h3 id=&quot;对称加密&quot;&gt;&lt;a href=&quot;#对称加密&quot; class=&quot;headerlink&quot; title=&quot;对称加密&quot;&gt;&lt;/a&gt;对称加密&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;概念&lt;/strong&gt;：&lt;br&gt;对称加密（Symmetric Encryption）使用相同的密钥进行数据的加密和解密。也就是说，加密和解密使用的是同一个密钥。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;特点&lt;/strong&gt;：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;单一密钥&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;加密和解密使用同一个密钥，必须确保密钥的保密性。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;速度快&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对称加密算法相对简单，处理速度快，适合对大量数据进行加密。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;密钥分发问题&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;密钥需要在通信双方之间安全传输，确保不被第三方截获。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;常见算法&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;DES（Data Encryption Standard）&lt;/li&gt;
&lt;li&gt;3DES（Triple DES）&lt;/li&gt;
&lt;li&gt;AES（Advanced Encryption Standard）&lt;/li&gt;
&lt;li&gt;RC4&lt;/li&gt;
&lt;li&gt;Blowfish&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;应用场景&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数据库加密&lt;/li&gt;
&lt;li&gt;文件加密&lt;/li&gt;
&lt;li&gt;网络通信中的数据加密（如 TLS 会话中的对称加密部分）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;非对称加密&quot;&gt;&lt;a href=&quot;#非对称加密&quot; class=&quot;headerlink&quot; title=&quot;非对称加密&quot;&gt;&lt;/a&gt;非对称加密&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;概念&lt;/strong&gt;：&lt;br&gt;非对称加密（Asymmetric Encryption）使用一对密钥进行加密和解密：公钥（public key）和私钥（private key）。公钥用于加密数据，私钥用于解密数据。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;特点&lt;/strong&gt;：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;密钥对&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;由一对密钥组成，公钥公开分发，私钥保密。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;加密解密过程&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;公钥加密的数据只能由对应的私钥解密，私钥加密的数据只能由对应的公钥解密。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;速度较慢&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;非对称加密算法相对复杂，处理速度较慢，不适合对大量数据进行加密。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;无需共享私钥&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;公钥可以公开分发，无需安全传输私钥，解决了对称加密中的密钥分发问题。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;常见算法&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;RSA&lt;/li&gt;
&lt;li&gt;ECC（Elliptic Curve Cryptography）&lt;/li&gt;
&lt;li&gt;DSA（Digital Signature Algorithm）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;应用场景&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数字签名&lt;/li&gt;
&lt;li&gt;数字证书&lt;/li&gt;
&lt;li&gt;安全电子邮件（如 PGP）&lt;/li&gt;
&lt;li&gt;密钥交换（如 TLS 中的密钥协商）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;对比总结-1&quot;&gt;&lt;a href=&quot;#对比总结-1&quot; class=&quot;headerlink&quot; title=&quot;对比总结&quot;&gt;&lt;/a&gt;对比总结&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;密钥管理&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对称加密使用单一密钥，需要安全传输和存储。&lt;/li&gt;
&lt;li&gt;非对称加密使用公钥和私钥对，公钥公开，私钥保密，简化了密钥分发。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;速度&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对称加密速度快，适合加密大数据量。&lt;/li&gt;
&lt;li&gt;非对称加密速度慢，适合加密小数据量和密钥交换。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;安全性&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对称加密的安全性依赖于密钥的保密性。&lt;/li&gt;
&lt;li&gt;非对称加密通过私钥的保密和数学难题（如大整数分解）确保安全。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;结合使用&quot;&gt;&lt;a href=&quot;#结合使用&quot; class=&quot;headerlink&quot; title=&quot;结合使用&quot;&gt;&lt;/a&gt;结合使用&lt;/h3&gt;&lt;p&gt;在实际应用中，对称加密和非对称加密常常结合使用。非对称加密用于安全地交换对称加密密钥，而对称加密用于加密实际的数据内容。这样既能确保密钥的安全传输，又能利用对称加密的高效性。一个典型的例子是 HTTPS 协议，其中使用非对称加密进行密钥交换，然后使用对称加密保护数据传输。&lt;/p&gt;
&lt;p&gt;△ 22次&lt;/p&gt;
&lt;p&gt;简述 OSI 七层模型，TCP，IP 属于哪一层？  简单 &lt;a href=&quot;https://www.ruanyifeng.com/blog/2012/05/internet_protocol_suite_part_i.html&quot;&gt;参考1&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;△-20次-HTTP-的方法有哪些？-简单&quot;&gt;&lt;a href=&quot;#△-20次-HTTP-的方法有哪些？-简单&quot; class=&quot;headerlink&quot; title=&quot;△ 20次 HTTP 的方法有哪些？  简单&quot;&gt;&lt;/a&gt;&lt;strong&gt;△ 20次&lt;/strong&gt; HTTP 的方法有哪些？  简单&lt;/h1&gt;&lt;p&gt;Get&lt;br&gt;Post&lt;br&gt;Head&lt;br&gt;Delete&lt;br&gt;Patch等&lt;/p&gt;
&lt;p&gt;△ 18次&lt;/p&gt;
&lt;p&gt;简述 TCP 滑动窗口以及重传机制  简单 &lt;a href=&quot;https://snailclimb.gitee.io/javaguide/#/docs/network/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C?id=%e5%9b%9b-tcp-%e5%8d%8f%e8%ae%ae%e5%a6%82%e4%bd%95%e4%bf%9d%e8%af%81%e5%8f%af%e9%9d%a0%e4%bc%a0%e8%be%93&quot;&gt;参考1&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;△ 16次&lt;/p&gt;
&lt;p&gt;简述 JWT 的原理和校验机制  中等&lt;/p&gt;
&lt;p&gt;△ 16次&lt;/p&gt;
&lt;p&gt;Cookie 和 Session 的关系和区别是什么？  简单&lt;/p&gt;
&lt;h1 id=&quot;△-16次-简述-RPC-的调用过程-简单&quot;&gt;&lt;a href=&quot;#△-16次-简述-RPC-的调用过程-简单&quot; class=&quot;headerlink&quot; title=&quot;△ 16次 简述 RPC 的调用过程  简单&quot;&gt;&lt;/a&gt;&lt;strong&gt;△ 16次&lt;/strong&gt; 简述 RPC 的调用过程  简单&lt;/h1&gt;&lt;p&gt;客户端调用&lt;br&gt;序列化&lt;br&gt;发送请求&lt;br&gt;服务端接收请求&lt;br&gt;反序列化&lt;br&gt;执行调用逻辑&lt;br&gt;序列化响应&lt;br&gt;客户端接收响应&lt;br&gt;反序列化响应&lt;br&gt;返回结果&lt;/p&gt;
&lt;p&gt;△ 15次&lt;/p&gt;
&lt;p&gt;TCP 挥手时出现大量 CLOSE_WAIT 或 TIME_WAIT 怎么解决？  简单 &lt;a href=&quot;https://superuser.com/questions/173535/what-are-close-wait-and-time-wait-states&quot;&gt;参考1&lt;/a&gt; &lt;a href=&quot;https://zhuanlan.zhihu.com/p/60382685&quot;&gt;参考2&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;△ 14次&lt;/p&gt;
&lt;p&gt;为什么需要序列化？有什么序列化的方式？  中等&lt;/p&gt;
&lt;h1 id=&quot;△-12次-HTTP-中-GET-和-POST-区别-简单&quot;&gt;&lt;a href=&quot;#△-12次-HTTP-中-GET-和-POST-区别-简单&quot; class=&quot;headerlink&quot; title=&quot;△ 12次 HTTP 中 GET 和 POST 区别  简单&quot;&gt;&lt;/a&gt;&lt;strong&gt;△ 12次&lt;/strong&gt; HTTP 中 GET 和 POST 区别  简单&lt;/h1&gt;&lt;p&gt;HTTP 协议中的 GET 和 POST 是最常见的两种请求方法，它们在使用场景、参数传递、安全性等方面有显著区别。&lt;/p&gt;
&lt;h3 id=&quot;对比总结-2&quot;&gt;&lt;a href=&quot;#对比总结-2&quot; class=&quot;headerlink&quot; title=&quot;对比总结&quot;&gt;&lt;/a&gt;对比总结&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;传递方式&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;GET&lt;/strong&gt;：参数在 URL 中传递，适合少量数据。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;POST&lt;/strong&gt;：参数在请求体中传递，适合大量数据和文件上传。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;安全性&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;GET&lt;/strong&gt;：参数暴露在 URL 中，不适合传递敏感信息。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;POST&lt;/strong&gt;：参数在请求体中，稍微安全，但仍需 HTTPS。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;幂等性&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;GET&lt;/strong&gt;：幂等，多次请求不会改变服务器状态。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;POST&lt;/strong&gt;：非幂等，多次请求可能会改变服务器状态。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;缓存&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;GET&lt;/strong&gt;：响应可以被缓存。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;POST&lt;/strong&gt;：响应通常不被缓存。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;长度限制&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;GET&lt;/strong&gt;：受 URL 长度限制，适合少量参数。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;POST&lt;/strong&gt;：无明显长度限制，适合大量参数和数据。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;选择使用&quot;&gt;&lt;a href=&quot;#选择使用&quot; class=&quot;headerlink&quot; title=&quot;选择使用&quot;&gt;&lt;/a&gt;选择使用&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;GET&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用于获取资源或数据，不会改变服务器状态的请求。&lt;/li&gt;
&lt;li&gt;数据量小，参数无需隐藏。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;POST&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用于提交数据、上传文件或任何会改变服务器状态的请求。&lt;/li&gt;
&lt;li&gt;数据量大，参数包含敏感信息或需要隐藏。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;△ 12次&lt;/p&gt;
&lt;p&gt;什么是中间人攻击？如何防止攻击？  中等&lt;/p&gt;
&lt;p&gt;△ 2次&lt;/p&gt;
&lt;p&gt;简述 iPv4 和 iPv6</summary>
        
      
    
    
    
    <category term="面试" scheme="https://bishoptylaor.github.io/categories/interview/"/>
    
    
    <category term="必看必会" scheme="https://bishoptylaor.github.io/tags/%E5%BF%85%E7%9C%8B%E5%BF%85%E4%BC%9A/"/>
    
    <category term="面试" scheme="https://bishoptylaor.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="http" scheme="https://bishoptylaor.github.io/tags/http/"/>
    
    <category term="https" scheme="https://bishoptylaor.github.io/tags/https/"/>
    
  </entry>
  
  <entry>
    <title>并发编程</title>
    <link href="https://bishoptylaor.github.io/library/Golang/concurrency/concurrent%20programming/"/>
    <id>https://bishoptylaor.github.io/library/Golang/concurrency/concurrent%20programming/</id>
    <published>2022-02-25T12:21:20.000Z</published>
    <updated>2024-05-22T10:45:53.940Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h3 id=&quot;goroutine超时处理&quot;&gt;&lt;a href=&quot;#goroutine超时处理&quot; class=&quot;headerlink&quot; title=&quot;goroutine超时处理&quot;&gt;&lt;/a&gt;goroutine超时处理&lt;/h3&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; main&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&amp;quot;fmt&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&amp;quot;time&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    c1 := &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;chan&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;string&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        time.Sleep(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; * time.Second)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        c1 &amp;lt;- &lt;span class=&quot;string&quot;&gt;&amp;quot;result 1&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;select&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; res := &amp;lt;-c1:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        fmt.Println(res)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &amp;lt;-time.After(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; * time.Second):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        fmt.Println(&lt;span class=&quot;string&quot;&gt;&amp;quot;timeout 1&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    c2 := &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;chan&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;string&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        time.Sleep(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; * time.Second)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        c2 &amp;lt;- &lt;span class=&quot;string&quot;&gt;&amp;quot;result 2&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;select&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; res := &amp;lt;-c2:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        fmt.Println(res)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &amp;lt;-time.After(&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; * time.Second):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        fmt.Println(&lt;span class=&quot;string&quot;&gt;&amp;quot;timeout 2&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&quot;无阻塞&quot;&gt;&lt;a href=&quot;#无阻塞&quot; class=&quot;headerlink&quot; title=&quot;无阻塞&quot;&gt;&lt;/a&gt;无阻塞&lt;/h3&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;select&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; res := &amp;lt;-c2:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    	fmt.Println(res)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &amp;lt;-time.After(&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; * time.Second):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    	fmt.Println(&lt;span class=&quot;string&quot;&gt;&amp;quot;timeout 2&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    	fmt.Println(&lt;span class=&quot;string&quot;&gt;&amp;quot;abc&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&quot;通道关闭&quot;&gt;&lt;a href=&quot;#通道关闭&quot; class=&quot;headerlink&quot; title=&quot;通道关闭&quot;&gt;&lt;/a&gt;通道关闭&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;close(channel) 关闭通道&lt;/li&gt;
&lt;li&gt;j，more :&amp;#x3D; &amp;lt;- channel 如果已关闭，则more为 false&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; main&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;quot;fmt&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    jobs := &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;chan&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    done := &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;chan&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;bool&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            j, more := &amp;lt;-jobs&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; more &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                fmt.Println(&lt;span class=&quot;string&quot;&gt;&amp;quot;received job&amp;quot;&lt;/span&gt;, j)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                fmt.Println(&lt;span class=&quot;string&quot;&gt;&amp;quot;received all jobs&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                done &amp;lt;- &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; j := &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; j &amp;lt;= &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;; j++ &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        jobs &amp;lt;- j&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        fmt.Println(&lt;span class=&quot;string&quot;&gt;&amp;quot;sent job&amp;quot;&lt;/span&gt;, j)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;close&lt;/span&gt;(jobs)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    fmt.Println(&lt;span class=&quot;string&quot;&gt;&amp;quot;sent all jobs&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;-done&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&quot;管道遍历&quot;&gt;&lt;a href=&quot;#管道遍历&quot; class=&quot;headerlink&quot; title=&quot;管道遍历&quot;&gt;&lt;/a&gt;管道遍历&lt;/h3&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; main&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;quot;fmt&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    queue := &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;chan&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;string&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    queue &amp;lt;- &lt;span class=&quot;string&quot;&gt;&amp;quot;one&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    queue &amp;lt;- &lt;span class=&quot;string&quot;&gt;&amp;quot;two&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;close&lt;/span&gt;(queue)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; elem := &lt;span class=&quot;keyword&quot;&gt;range&lt;/span&gt; queue &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        fmt.Println(elem)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&quot;只读和只写管道&quot;&gt;&lt;a href=&quot;#只读和只写管道&quot; class=&quot;headerlink&quot; title=&quot;只读和只写管道&quot;&gt;&lt;/a&gt;只读和只写管道&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;-chan string&lt;/code&gt; 只读&lt;/li&gt;
&lt;li&gt;&lt;code&gt;chan&amp;lt;- string&lt;/code&gt; 只写&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; main&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;quot;fmt&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(jobs &lt;span class=&quot;keyword&quot;&gt;chan&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;, done &lt;span class=&quot;keyword&quot;&gt;chan&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;bool&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		j, more := &amp;lt;-jobs&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; more &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			fmt.Println(&lt;span class=&quot;string&quot;&gt;&amp;quot;received job&amp;quot;&lt;/span&gt;, j)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			fmt.Println(&lt;span class=&quot;string&quot;&gt;&amp;quot;received all jobs&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			done &amp;lt;- &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;sendMsg&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(jobs &lt;span class=&quot;keyword&quot;&gt;chan&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; j := &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; j &amp;lt;= &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;; j++ &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		jobs &amp;lt;- j&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		fmt.Println(&lt;span class=&quot;string&quot;&gt;&amp;quot;sent job&amp;quot;&lt;/span&gt;, j)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;close&lt;/span&gt;(jobs)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	fmt.Println(&lt;span class=&quot;string&quot;&gt;&amp;quot;sent all jobs&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	jobs := &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;chan&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	done := &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;chan&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;bool&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;go&lt;/span&gt; test(jobs, done)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;go&lt;/span&gt; sendMsg(jobs)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;lt;-done&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&quot;控制并发数&quot;&gt;&lt;a href=&quot;#控制并发数&quot; class=&quot;headerlink&quot; title=&quot;控制并发数&quot;&gt;&lt;/a&gt;控制并发数&lt;/h3&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; main&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;string&quot;&gt;&amp;quot;fmt&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;string&quot;&gt;&amp;quot;sync&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;string&quot;&gt;&amp;quot;time&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; wg = sync.WaitGroup&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	choice1()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	choice2()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;choice1&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	ch := &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;chan&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; ,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i := &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;; i ++ &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		wg.Add(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		ch &amp;lt;- &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(ch &lt;span class=&quot;keyword&quot;&gt;chan&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;defer&lt;/span&gt; wg.Done()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			time.Sleep( time.Second)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			fmt.Println(i)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;lt;- ch&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;(ch)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	wg.Wait()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;choice2&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	ch := &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;chan&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; ,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i := &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;; i ++ &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(ch &lt;span class=&quot;keyword&quot;&gt;chan&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;defer&lt;/span&gt; wg.Done()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			wg.Add(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			ch &amp;lt;- &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			time.Sleep( time.Second)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			fmt.Println(i)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;lt;- ch&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;(ch)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	wg.Wait()&lt;/span&gt;&lt;br&gt;&lt;span</summary>
        
      
    
    
    
    <category term="知识库" scheme="https://bishoptylaor.github.io/categories/library/"/>
    
    <category term="Golang" scheme="https://bishoptylaor.github.io/categories/library/Golang/"/>
    
    <category term="并发" scheme="https://bishoptylaor.github.io/categories/library/Golang/concurrency/"/>
    
    
    <category term="必看必会" scheme="https://bishoptylaor.github.io/tags/%E5%BF%85%E7%9C%8B%E5%BF%85%E4%BC%9A/"/>
    
    <category term="并发" scheme="https://bishoptylaor.github.io/tags/%E5%B9%B6%E5%8F%91/"/>
    
    <category term="go" scheme="https://bishoptylaor.github.io/tags/go/"/>
    
    <category term="channel" scheme="https://bishoptylaor.github.io/tags/channel/"/>
    
    <category term="goroutine" scheme="https://bishoptylaor.github.io/tags/goroutine/"/>
    
  </entry>
  
  <entry>
    <title>go 反射</title>
    <link href="https://bishoptylaor.github.io/library/Golang/reflect/"/>
    <id>https://bishoptylaor.github.io/library/Golang/reflect/</id>
    <published>2022-02-25T12:17:49.000Z</published>
    <updated>2024-05-22T10:45:53.986Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h3 id=&quot;Name-and-Kind&quot;&gt;&lt;a href=&quot;#Name-and-Kind&quot; class=&quot;headerlink&quot; title=&quot;Name and Kind&quot;&gt;&lt;/a&gt;Name and Kind&lt;/h3&gt;&lt;p&gt;可调用函数和含义，以及结果一览&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;typeOfCat := reflect.TypeOf(cat&amp;#123;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;typeOfCat.Name() &lt;span class=&quot;comment&quot;&gt;// cat&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;typeOfCat.Kind()  &lt;span class=&quot;comment&quot;&gt;// struct&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;typeOfCat.NumField() &lt;span class=&quot;comment&quot;&gt;// 2 几个字段&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;typeOfCat.Field(i) &lt;span class=&quot;comment&quot;&gt;//第几个字段&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;typeOfCat.FieldByName(&lt;span class=&quot;string&quot;&gt;&amp;quot;Type&amp;quot;&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;// 找名为Type的字段&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;typeOfCat.MethodByName(&lt;span class=&quot;string&quot;&gt;&amp;quot;Start&amp;quot;&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;// 找名为Start的方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; typeofCat.Kind() == &lt;span class=&quot;string&quot;&gt;&amp;quot;ptr&amp;quot;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  res := typeOfCat.Elem()  &lt;span class=&quot;comment&quot;&gt;// 等价于*ptr&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  res.Name()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  res.Kind()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&quot;reflect-ValueOf-和reflect-Value&quot;&gt;&lt;a href=&quot;#reflect-ValueOf-和reflect-Value&quot; class=&quot;headerlink&quot; title=&quot;reflect.ValueOf()和reflect.Value&quot;&gt;&lt;/a&gt;reflect.ValueOf()和reflect.Value&lt;/h3&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;valueOfA := reflect.ValueOf(a)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; getA &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; = valueOfA.Interface().(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; getA2 &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; = &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;(valueOfA.Int())&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&quot;通过反射获取值信息&quot;&gt;&lt;a href=&quot;#通过反射获取值信息&quot; class=&quot;headerlink&quot; title=&quot;通过反射获取值信息&quot;&gt;&lt;/a&gt;通过反射获取值信息&lt;/h3&gt;&lt;h4 id=&quot;使用反射值对象包装任意值&quot;&gt;&lt;a href=&quot;#使用反射值对象包装任意值&quot; class=&quot;headerlink&quot; title=&quot;使用反射值对象包装任意值&quot;&gt;&lt;/a&gt;使用反射值对象包装任意值&lt;/h4&gt;&lt;p&gt;Go语言中，使用 reflect.ValueOf() 函数获得值的反射值对象（reflect.Value）。书写格式如下：&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;value := reflect.ValueOf(rawValue)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;reflect.ValueOf 返回 reflect.Value 类型，包含有 rawValue 的值信息。reflect.Value 与原值间可以通过值包装和值获取互相转化。reflect.Value 是一些反射操作的重要类型，如反射调用函数。&lt;/p&gt;
&lt;h4 id=&quot;从反射值对象获取被包装的值&quot;&gt;&lt;a href=&quot;#从反射值对象获取被包装的值&quot; class=&quot;headerlink&quot; title=&quot;从反射值对象获取被包装的值&quot;&gt;&lt;/a&gt;从反射值对象获取被包装的值&lt;/h4&gt;&lt;p&gt;Go语言中可以通过 reflect.Value 重新获得原始值。&lt;/p&gt;
&lt;h5 id=&quot;1-从反射值对象（reflect-Value）中获取值的方法&quot;&gt;&lt;a href=&quot;#1-从反射值对象（reflect-Value）中获取值的方法&quot; class=&quot;headerlink&quot; title=&quot;1) 从反射值对象（reflect.Value）中获取值的方法&quot;&gt;&lt;/a&gt;1) 从反射值对象（reflect.Value）中获取值的方法&lt;/h5&gt;&lt;p&gt;可以通过下面几种方法从反射值对象 reflect.Value 中获取原值，如下表所示。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;left&quot;&gt;方法名&lt;/th&gt;
&lt;th align=&quot;left&quot;&gt;说 明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;Interface() interface {}&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;将值以 interface{} 类型返回，可以通过类型断言转换为指定类型&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;Int() int64&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;将值以 int 类型返回，所有有符号整型均可以此方式返回&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;Uint() uint64&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;将值以 uint 类型返回，所有无符号整型均可以此方式返回&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;Float() float64&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;将值以双精度（float64）类型返回，所有浮点数（float32、float64）均可以此方式返回&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;Bool() bool&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;将值以 bool 类型返回&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;Bytes() []bytes&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;将值以字节数组 []bytes 类型返回&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;String() string&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;将值以字符串类型返回&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h5 id=&quot;2-从反射值对象（reflect-Value）中获取值的例子&quot;&gt;&lt;a href=&quot;#2-从反射值对象（reflect-Value）中获取值的例子&quot; class=&quot;headerlink&quot; title=&quot;2) 从反射值对象（reflect.Value）中获取值的例子&quot;&gt;&lt;/a&gt;2) 从反射值对象（reflect.Value）中获取值的例子&lt;/h5&gt;&lt;p&gt;下面代码中，将整型变量中的值使用 reflect.Value 获取反射值对象（reflect.Value）。再通过 reflect.Value 的 Interface() 方法获得 interface{} 类型的原值，通过 int 类型对应的 reflect.Value 的 Int() 方法获得整型值。&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; main&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&amp;quot;fmt&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&amp;quot;reflect&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 声明整型变量a并赋初值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; a &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;1024&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 获取变量a的反射值对象&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    valueOfA := reflect.ValueOf(a)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 获取interface&amp;#123;&amp;#125;类型的值, 通过类型断言转换&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; getA &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; = valueOfA.Interface().(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 获取64位的值, 强制类型转换为int类型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; getA2 &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; = &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;(valueOfA.Int())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    fmt.Println(getA, getA2)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 代码输出如下：&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 1024 1024&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;


&lt;h3 id=&quot;通过reflect反射修改值&quot;&gt;&lt;a href=&quot;#通过reflect反射修改值&quot; class=&quot;headerlink&quot; title=&quot;通过reflect反射修改值&quot;&gt;&lt;/a&gt;通过reflect反射修改值&lt;/h3&gt;&lt;p&gt;判断反射值是否可以修改？CanSet()，是否能被取址CanAddr()&lt;/p&gt;
&lt;p&gt;结构体成员中，如果字段没有被导出，即便不使用反射也可以被访问，但不能通过反射修改&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;指针指向的具体元素&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;x := &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;v := reflect.ValueOf(&amp;amp;x)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;v = v.Elem()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;slice的元素&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;s := []&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;&amp;#123;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;v := reflect.ValueOf(s)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;e := v.Index(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;可寻址的结构体的字段(指向结构体的指针)&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; Orange &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Size &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;a := Orange&amp;#123;&lt;span class=&quot;number&quot;&gt;99&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;v := reflect.ValueOf(&amp;amp;a)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;v = v.Elem()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;field = v.FieldByName(&lt;span class=&quot;string&quot;&gt;&amp;quot;field&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;可寻址的数组的元素(指向数组的指针)&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;a := [&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;]&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;&amp;#123;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;v := reflect.ValueOf(&amp;amp;a)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;v = v.Elem()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;vIndex = v.Index(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;vIndex.SetInt(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;vIndex.SetInt(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;left&quot;&gt;-&lt;/th&gt;
&lt;th align=&quot;left&quot;&gt;-&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;Set(x Value)&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;将值设置为传入的反射值对象的值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;Setlnt(x int64)&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;使用 int64 设置值。当值的类型不是 int、int8、int16、 int32、int64 时会发生宕机&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;SetUint(x uint64)&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;使用 uint64 设置值。当值的类型不是 uint、uint8、uint16、uint32、uint64 时会发生宕机&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;SetFloat(x float64)&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;使用 float64 设置值。当值的类型不是 float32、float64 时会发生宕机&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;SetBool(x bool)&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;使用 bool 设置值。当值的类型不是 bod 时会发生宕机&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;SetBytes(x []byte)&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;设置字节数组 []bytes值。当值的类型不是 []byte 时会发生宕机&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;SetString(x string)&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;设置字符串值。当值的类型不是 string 时会发生宕机&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h3 id=&quot;通过类型信息创建实例&quot;&gt;&lt;a href=&quot;#通过类型信息创建实例&quot; class=&quot;headerlink&quot; title=&quot;通过类型信息创建实例&quot;&gt;&lt;/a&gt;通过类型信息创建实例&lt;/h3&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; a &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;typeOfA := reflect.TypeOf(a)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;aIns := reflect.New(typeOfA) &lt;span class=&quot;comment&quot;&gt;// 等价于 new(int)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;fmt.Println(aIns.Type(), aIns.Kind())&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&quot;Go语言结构体标签（Struct-Tag）&quot;&gt;&lt;a href=&quot;#Go语言结构体标签（Struct-Tag）&quot; class=&quot;headerlink&quot; title=&quot;Go语言结构体标签（Struct Tag）&quot;&gt;&lt;/a&gt;Go语言结构体标签（Struct Tag）&lt;/h3&gt;&lt;h4 id=&quot;结构体标签的格式&quot;&gt;&lt;a href=&quot;#结构体标签的格式&quot; class=&quot;headerlink&quot; title=&quot;结构体标签的格式&quot;&gt;&lt;/a&gt;结构体标签的格式&lt;/h4&gt;&lt;p&gt;tag 格式：&lt;code&gt;json:&amp;quot;type&amp;quot; id:&amp;quot;100&amp;quot;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;注意：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;key:“value” 冒号后没有空格&lt;/li&gt;
&lt;li&gt;两个key之间，一个空格，多一个都不行&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; cat &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Name &lt;span class=&quot;type&quot;&gt;string&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Type &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;`json:&amp;quot;type&amp;quot; id:&amp;quot;100&amp;quot;`&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&quot;从结构体标签中获取值&quot;&gt;&lt;a href=&quot;#从结构体标签中获取值&quot; class=&quot;headerlink&quot; title=&quot;从结构体标签中获取值&quot;&gt;&lt;/a&gt;从结构体标签中获取值&lt;/h4&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;typeOfCat := reflect.TypeOf(cat&amp;#123;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;catType = typeOfCat.FieldByName(&lt;span class=&quot;string&quot;&gt;&amp;quot;Type&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;catType.Tag.Get(&lt;span class=&quot;string&quot;&gt;&amp;quot;json&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h1 id=&quot;常见用法&quot;&gt;&lt;a href=&quot;#常见用法&quot; class=&quot;headerlink&quot; title=&quot;常见用法&quot;&gt;&lt;/a&gt;常见用法&lt;/h1&gt;&lt;h4 id=&quot;动态调用函数（无参数）&quot;&gt;&lt;a href=&quot;#动态调用函数（无参数）&quot; class=&quot;headerlink&quot; title=&quot;动态调用函数（无参数）&quot;&gt;&lt;/a&gt;动态调用函数（无参数）&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;直接&lt;code&gt;reflect.Valueof&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MethodByName&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;调用&lt;code&gt;Call&lt;/code&gt;方法&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; T &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    name := &lt;span class=&quot;string&quot;&gt;&amp;quot;Do&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    t := &amp;amp;T&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    reflect.ValueOf(t).MethodByName(name).Call(&lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(t *T)&lt;/span&gt;&lt;/span&gt; Do() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    fmt.Println(&lt;span class=&quot;string&quot;&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&quot;动态调用函数（有参数）&quot;&gt;&lt;a href=&quot;#动态调用函数（有参数）&quot; class=&quot;headerlink&quot; title=&quot;动态调用函数（有参数）&quot;&gt;&lt;/a&gt;动态调用函数（有参数）&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;创建&lt;code&gt;reflect.Value&lt;/code&gt;切片&lt;/li&gt;
&lt;li&gt;&lt;code&gt;reflect.Valueof(t).MethodByName(string)&lt;/code&gt; 调用Call方法传入参数&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; T &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt;&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    name := &lt;span class=&quot;string&quot;&gt;&amp;quot;Do&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    t := &amp;amp;T&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    a := reflect.ValueOf(&lt;span class=&quot;number&quot;&gt;1111&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    b := reflect.ValueOf(&lt;span class=&quot;string&quot;&gt;&amp;quot;world&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    in := []reflect.Value&amp;#123;a, b&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    reflect.ValueOf(t).MethodByName(name).Call(in)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(t *T)&lt;/span&gt;&lt;/span&gt; Do(a &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;, b &lt;span class=&quot;type&quot;&gt;string&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    fmt.Println(&lt;span class=&quot;string&quot;&gt;&amp;quot;hello&amp;quot;&lt;/span&gt; + b, a)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&quot;接收返回值&quot;&gt;&lt;a href=&quot;#接收返回值&quot; class=&quot;headerlink&quot; title=&quot;接收返回值&quot;&gt;&lt;/a&gt;接收返回值&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;返回&lt;code&gt;[]reflect.Value&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;调用&lt;code&gt;Interface()&lt;/code&gt;方法，转为&lt;code&gt;interface&amp;#123;&amp;#125;&lt;/code&gt;类型&lt;/li&gt;
&lt;li&gt;断言类型&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; T &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt;&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    name := &lt;span class=&quot;string&quot;&gt;&amp;quot;Do&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    t := &amp;amp;T&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ret := reflect.ValueOf(t).MethodByName(name).Call(&lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    fmt.Printf(&lt;span class=&quot;string&quot;&gt;&amp;quot;strValue: %[1]v&#92;nerrValue: %[2]v&#92;nstrType: %[1]T&#92;nerrType: %[2]T&amp;quot;&lt;/span&gt;, ret[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;], ret[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;].Interface().(&lt;span class=&quot;type&quot;&gt;error&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(t *T)&lt;/span&gt;&lt;/span&gt; Do() (&lt;span class=&quot;type&quot;&gt;string&lt;/span&gt;, &lt;span class=&quot;type&quot;&gt;error&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;, errors.New(&lt;span class=&quot;string&quot;&gt;&amp;quot;new error&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&quot;Tag解析&quot;&gt;&lt;a href=&quot;#Tag解析&quot; class=&quot;headerlink&quot; title=&quot;Tag解析&quot;&gt;&lt;/a&gt;Tag解析&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;&lt;code&gt;reflect.Typeof&lt;/code&gt;有&lt;code&gt;NumField&lt;/code&gt;，Field根据序号索取，取其中的tag&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; T &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	Name &lt;span class=&quot;type&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;`json:&amp;quot;name&amp;quot;`&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	Age &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;`json:&amp;quot;age&amp;quot;`&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	a := T&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	tt := reflect.TypeOf(a)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i:=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;i&amp;lt;tt.NumField();i++&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		fmt.Println(tt.Field(i).Name)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		fmt.Println(tt.Field(i).Tag.Get(&lt;span class=&quot;string&quot;&gt;&amp;quot;json&amp;quot;&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		fmt.Println(tt.Field(i).Tag.Lookup(&lt;span class=&quot;string&quot;&gt;&amp;quot;json&amp;quot;&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		fmt.Println(tt.Field(i).Type)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&quot;通过kind（）处理不同分支&quot;&gt;&lt;a href=&quot;#通过kind（）处理不同分支&quot; class=&quot;headerlink&quot; title=&quot;通过kind（）处理不同分支&quot;&gt;&lt;/a&gt;通过kind（）处理不同分支&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;&lt;code&gt;reflect.Typeof().Kind()&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	t := &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	a := reflect.TypeOf(t)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;switch&lt;/span&gt; a.Kind() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; reflect.String:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		fmt.Println(&lt;span class=&quot;string&quot;&gt;&amp;quot;string&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; reflect.Int:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		fmt.Println(&lt;span class=&quot;string&quot;&gt;&amp;quot;int&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		fmt.Println(&lt;span class=&quot;string&quot;&gt;&amp;quot;default&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&quot;判断结构体是否实现接口&quot;&gt;&lt;a href=&quot;#判断结构体是否实现接口&quot; class=&quot;headerlink&quot; title=&quot;判断结构体是否实现接口&quot;&gt;&lt;/a&gt;判断结构体是否实现接口&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;将&lt;code&gt;nil&lt;/code&gt;强转为接口指针类型，通过&lt;code&gt;reflect.Typeof().Elem&lt;/code&gt;获取其接口类型&lt;/li&gt;
&lt;li&gt;&lt;code&gt;reflect.Typeof&lt;/code&gt;调用方法&lt;code&gt;Implements&lt;/code&gt;来判断&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; IT &lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	test1()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; T &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	A &lt;span class=&quot;type&quot;&gt;string&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(t *T)&lt;/span&gt;&lt;/span&gt; test1() &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	t := &amp;amp;T&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	elem := reflect.TypeOf((*IT)(&lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;)).Elem()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; reflect.TypeOf(t).Implements(elem) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		fmt.Println(&lt;span class=&quot;string&quot;&gt;&amp;quot;OK&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;直接通过接口强转判断&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;将类型转换为 &lt;code&gt;reflect.Value&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;将&lt;code&gt;reflect.Value&lt;/code&gt;调用Interface()方法转为接口类型&lt;/li&gt;
&lt;li&gt;类型断言&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; ITester &lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	test1()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; User &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	A &lt;span class=&quot;type&quot;&gt;string&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	u := &amp;amp;User&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	v := reflect.ValueOf(u)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	val, ok := v.Interface().(ITester)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ok &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		fmt.Println(&lt;span class=&quot;string&quot;&gt;&amp;quot;Support Interface&amp;quot;&lt;/span&gt;, val)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span</summary>
        
      
    
    
    
    <category term="知识库" scheme="https://bishoptylaor.github.io/categories/library/"/>
    
    <category term="Golang" scheme="https://bishoptylaor.github.io/categories/library/Golang/"/>
    
    
    <category term="go" scheme="https://bishoptylaor.github.io/tags/go/"/>
    
    <category term="reflect" scheme="https://bishoptylaor.github.io/tags/reflect/"/>
    
  </entry>
  
  <entry>
    <title>计算机基础 面试必备</title>
    <link href="https://bishoptylaor.github.io/interview/elementary-interview/"/>
    <id>https://bishoptylaor.github.io/interview/elementary-interview/</id>
    <published>2022-02-25T11:55:20.000Z</published>
    <updated>2024-05-28T18:30:24.810Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;△ 70次&lt;/p&gt;
&lt;p&gt;进程间有哪些通信方式？  困难 &lt;a href=&quot;https://www.guru99.com/inter-process-communication-ipc.html&quot;&gt;参考1&lt;/a&gt; &lt;a href=&quot;https://www.coursera.org/lecture/os-pku/jin-cheng-jian-tong-xin-ipc-wbxs5&quot;&gt;参考2&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;△ 44次&lt;/p&gt;
&lt;p&gt;进程和线程之间有什么区别？  简单 &lt;a href=&quot;https://www.guru99.com/difference-between-process-and-thread.html&quot;&gt;参考1&lt;/a&gt; &lt;a href=&quot;https://smartkeyerror.oss-cn-shenzhen.aliyuncs.com/Phyduck/c%2B%2B/concurrent/1.%20Linux%20%E8%BF%9B%E7%A8%8B%E3%80%81%E7%BA%BF%E7%A8%8B%E4%B8%8E%E8%B0%83%E5%BA%A6.pdf&quot;&gt;参考2&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;△ 40次&lt;/p&gt;
&lt;p&gt;简述操作系统如何进行内存管理  中等 &lt;a href=&quot;https://www.guru99.com/os-memory-management.html&quot;&gt;参考1&lt;/a&gt; &lt;a href=&quot;https://zhuanlan.zhihu.com/p/143273007&quot;&gt;参考2&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;△ 40次&lt;/p&gt;
&lt;p&gt;操作系统中，虚拟地址与物理地址之间如何映射？  中等&lt;/p&gt;
&lt;p&gt;△ 26次&lt;/p&gt;
&lt;p&gt;简述操作系统中的缺页中断  中等 &lt;a href=&quot;https://www.oreilly.com/library/view/understanding-the-linux/0596005652/ch04s02.html&quot;&gt;参考1&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;△ 24次&lt;/p&gt;
&lt;p&gt;什么时候会由用户态陷入内核态？  简单&lt;/p&gt;
&lt;p&gt;△ 22次&lt;/p&gt;
&lt;p&gt;简述自旋锁与互斥锁的使用场景  中等&lt;/p&gt;
&lt;p&gt;△ 20次&lt;/p&gt;
&lt;p&gt;简述 mmap 的使用场景以及原理  中等&lt;/p&gt;
&lt;p&gt;△ 20次&lt;/p&gt;
&lt;p&gt;线程间有哪些通信方式？  中等&lt;/p&gt;
&lt;p&gt;△ 20次&lt;/p&gt;
&lt;p&gt;Linux 下如何查看端口被哪个进程占用？  简单&lt;/p&gt;
&lt;p&gt;△ 18次&lt;/p&gt;
&lt;p&gt;两个线程交替打印一个共享变量  中等&lt;/p&gt;
&lt;p&gt;△ 16次&lt;/p&gt;
&lt;p&gt;简述 Linux 进程调度的算法  困难 &lt;a href=&quot;https://smartkeyerror.oss-cn-shenzhen.aliyuncs.com/Phyduck/c%2B%2B/concurrent/1.%20Linux%20%E8%BF%9B%E7%A8%8B%E3%80%81%E7%BA%BF%E7%A8%8B%E4%B8%8E%E8%B0%83%E5%BA%A6.pdf&quot;&gt;参考1&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;△ 12次&lt;/p&gt;
&lt;p&gt;简述 Linux 零拷贝的原理  中等&lt;/p&gt;
&lt;p&gt;△ 12次&lt;/p&gt;
&lt;p&gt;什么情况下，进程会进行切换？  简单&lt;/p&gt;
&lt;p&gt;△ 12次&lt;/p&gt;
&lt;p&gt;Linux 中虚拟内存和物理内存有什么区别？有什么优点？  中等&lt;/p&gt;
&lt;p&gt;△ 10次&lt;/p&gt;
&lt;p&gt;简述 traceroute 命令的原理  简单&lt;/p&gt;
&lt;p&gt;△ 40次&lt;/p&gt;
&lt;p&gt;简述 CAP 理论  简单&lt;/p&gt;
&lt;p&gt;△ 22次&lt;/p&gt;
&lt;p&gt;简述常见的负载均衡算法  简单 &lt;a href=&quot;https://docs.nginx.com/nginx/admin-guide/load-balancer/http-load-balancer/&quot;&gt;参考1&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;△ 18次&lt;/p&gt;
&lt;p&gt;设计一个阻塞队列  中等&lt;/p&gt;
&lt;p&gt;△ 16次&lt;/p&gt;
&lt;p&gt;简述生产者消费者模型  简单&lt;/p&gt;
&lt;p&gt;△ 12次&lt;/p&gt;
&lt;p&gt;简述 MapReduce 的原理  中等&lt;/p&gt;
&lt;p&gt;△ 12次&lt;/p&gt;
&lt;p&gt;kafka 如何保证消息一致性？  中等&lt;/p&gt;
&lt;p&gt;△ 12次&lt;/p&gt;
&lt;p&gt;设计 Tiny URL 系统  中等&lt;/p&gt;
&lt;p&gt;△</summary>
        
      
    
    
    
    <category term="面试" scheme="https://bishoptylaor.github.io/categories/interview/"/>
    
    
    <category term="基础知识" scheme="https://bishoptylaor.github.io/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>面试算法题总结</title>
    <link href="https://bishoptylaor.github.io/interview/juan/inter-alg101/"/>
    <id>https://bishoptylaor.github.io/interview/juan/inter-alg101/</id>
    <published>2022-02-25T11:40:08.000Z</published>
    <updated>2024-06-23T09:21:37.422Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://neetcode.io/roadmap&quot;&gt;NeetCode.RoadMap&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;负载均衡算法&quot;&gt;&lt;a href=&quot;#负载均衡算法&quot; class=&quot;headerlink&quot; title=&quot;负载均衡算法&quot;&gt;&lt;/a&gt;负载均衡算法&lt;/h3&gt;&lt;p&gt;更多加分点： 加权等&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; main&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;string&quot;&gt;&amp;quot;math/rand&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&amp;quot;time&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&amp;quot;fmt&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; LoadBalancer &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    client []*Client&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    size &lt;span class=&quot;type&quot;&gt;int32&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;NewLB&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(size &lt;span class=&quot;type&quot;&gt;int32&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; *LoadBalalcer &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    lb := &amp;amp;LoadBalancer&amp;#123;client: &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;([]*Client, size), size: size&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    lb.client = &lt;span class=&quot;built_in&quot;&gt;append&lt;/span&gt;(lb.client, &amp;amp;Client&amp;#123;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; lb&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(l *LoadBalancer)&lt;/span&gt;&lt;/span&gt; getClient() *Client &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    rand.Seed(time.Now().Unix())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    x := rand.Int31n(&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; m.client[x &amp;amp; m.size]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; Client &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Name &lt;span class=&quot;type&quot;&gt;string&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(m *Client)&lt;/span&gt;&lt;/span&gt; Do &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    fmt.Println(&lt;span class=&quot;string&quot;&gt;&amp;quot;Do&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    lb := NewLB(&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    lb.getClient().Do()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;


&lt;h3 id=&quot;利用反射调用函数&quot;&gt;&lt;a href=&quot;#利用反射调用函数&quot; class=&quot;headerlink&quot; title=&quot;利用反射调用函数&quot;&gt;&lt;/a&gt;利用反射调用函数&lt;/h3&gt;&lt;p&gt;实例：&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; main&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&amp;quot;reflect&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&amp;quot;fmt&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; Car &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(c *Car)&lt;/span&gt;&lt;/span&gt; Drive &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    fmt.Println(&lt;span class=&quot;string&quot;&gt;&amp;quot;Driving&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    car := Car&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    val := reflect.ValueOf(&amp;amp;car)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    f := value.MethodByName(&lt;span class=&quot;string&quot;&gt;&amp;quot;Drive&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    f.Call([]reflect.Value&amp;#123;&amp;#125;)  &lt;span class=&quot;comment&quot;&gt;// Drive&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;


&lt;h3 id=&quot;给定三个函数-cat-dog-fish-，每个函数启动一个-goroutine-，要求按照顺序打印100次&quot;&gt;&lt;a href=&quot;#给定三个函数-cat-dog-fish-，每个函数启动一个-goroutine-，要求按照顺序打印100次&quot; class=&quot;headerlink&quot; title=&quot;给定三个函数 cat dog fish ，每个函数启动一个 goroutine ，要求按照顺序打印100次&quot;&gt;&lt;/a&gt;给定三个函数 cat dog fish ，每个函数启动一个 goroutine ，要求按照顺序打印100次&lt;/h3&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; main&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;string&quot;&gt;&amp;quot;fmt&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;string&quot;&gt;&amp;quot;sync&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;PrintCat&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(fishCH,catCH &lt;span class=&quot;keyword&quot;&gt;chan&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;bool&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;defer&lt;/span&gt; waitgroup.Done()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;defer&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;close&lt;/span&gt;(catCH)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i:= &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt;&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;;i++&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;lt;-fishCH&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		fmt.Println(&lt;span class=&quot;string&quot;&gt;&amp;quot;cat ...&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		catCH &amp;lt;- &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;PrintDog&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(catCH,dogCH &lt;span class=&quot;keyword&quot;&gt;chan&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;bool&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;defer&lt;/span&gt; waitgroup.Done()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;defer&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;close&lt;/span&gt;(dogCH)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i:= &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt;&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;;i++&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;lt;-catCH&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		fmt.Println(&lt;span class=&quot;string&quot;&gt;&amp;quot;dog ...&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		dogCH&amp;lt;-&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;PrintFish&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(dogCH,fishCH &lt;span class=&quot;keyword&quot;&gt;chan&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;bool&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;defer&lt;/span&gt; waitgroup.Done()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;defer&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;close&lt;/span&gt;(fishCH)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i:= &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt;&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;;i++&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;lt;-dogCH&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		fmt.Println(&lt;span class=&quot;string&quot;&gt;&amp;quot;fish ...&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		fishCH&amp;lt;-&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; waitgroup sync.WaitGroup&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	catCH := &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;chan&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;bool&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	dogCH := &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;chan&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;bool&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	fishCH := &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;chan&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;bool&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	fishCH &amp;lt;- &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;go&lt;/span&gt; PrintFish(dogCH,fishCH)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;go&lt;/span&gt; PrintDog(catCH,dogCH)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;go&lt;/span&gt; PrintCat(fishCH,catCH)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	waitgroup.Add(&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	waitgroup.Wait()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&quot;抽奖问题&quot;&gt;&lt;a href=&quot;#抽奖问题&quot; class=&quot;headerlink&quot; title=&quot;抽奖问题&quot;&gt;&lt;/a&gt;抽奖问题&lt;/h3&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 给定如下结构&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// map中，key代表名称，value代表成交单数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; users &lt;span class=&quot;keyword&quot;&gt;map&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;string&lt;/span&gt;]&lt;span class=&quot;type&quot;&gt;int64&lt;/span&gt; = &lt;span class=&quot;keyword&quot;&gt;map&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;string&lt;/span&gt;]&lt;span class=&quot;type&quot;&gt;int64&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&amp;quot;a&amp;quot;&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&amp;quot;b&amp;quot;&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&amp;quot;c&amp;quot;&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&amp;quot;d&amp;quot;&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;12&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&amp;quot;f&amp;quot;&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&quot;1-随机抽奖&quot;&gt;&lt;a href=&quot;#1-随机抽奖&quot; class=&quot;headerlink&quot; title=&quot;1. 随机抽奖&quot;&gt;&lt;/a&gt;1. 随机抽奖&lt;/h5&gt;&lt;p&gt;从 map 中随机选取用户中奖&lt;br&gt;思路：将用户理解为一个个格子，从中选取一个格子中奖&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; main&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&amp;quot;fmt&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&amp;quot;math/rand&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&amp;quot;time&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;GetAwardUserName&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(users &lt;span class=&quot;keyword&quot;&gt;map&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;string&lt;/span&gt;]&lt;span class=&quot;type&quot;&gt;int64&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; (name &lt;span class=&quot;type&quot;&gt;string&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  sizeOfUsers := &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(users)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  award_index := rand.Intn(sizeOfUsers)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; index &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; u_name, _ := &lt;span class=&quot;keyword&quot;&gt;range&lt;/span&gt; users &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; index == award_index &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      name = u_name&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    index += &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; users &lt;span class=&quot;keyword&quot;&gt;map&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;string&lt;/span&gt;]&lt;span class=&quot;type&quot;&gt;int64&lt;/span&gt; = &lt;span class=&quot;keyword&quot;&gt;map&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;string&lt;/span&gt;]&lt;span class=&quot;type&quot;&gt;int64&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&amp;quot;a&amp;quot;&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&amp;quot;b&amp;quot;&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&amp;quot;c&amp;quot;&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&amp;quot;d&amp;quot;&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;12&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&amp;quot;e&amp;quot;&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&amp;quot;f&amp;quot;&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  rand.Seed(time.Now().Unix())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 抽奖1次&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  name := GetAwardUserName(users)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  fmt.Printf(&lt;span class=&quot;string&quot;&gt;&amp;quot;user: %s jack point&amp;quot;&lt;/span&gt;, name)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 抽奖1000次&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  award_stat := &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;map&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;string&lt;/span&gt;]&lt;span class=&quot;type&quot;&gt;int64&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i := &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;; i += &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    name := GetAwardUserName(users)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; count, ok := award_stat[name]; ok &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      award_stat[name] = count + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      award_stat[name] = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; name, count := &lt;span class=&quot;keyword&quot;&gt;range&lt;/span&gt; award_stat &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    fmt.Printf(&lt;span class=&quot;string&quot;&gt;&amp;quot;user: %s, award count: %d&#92;n&amp;quot;&lt;/span&gt;, name, count)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上方抽奖代码复杂度为 O(n) ，可以结合二分查找优化为 O(logN)&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;GetAwardGenerator&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(users &lt;span class=&quot;keyword&quot;&gt;map&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;string&lt;/span&gt;]&lt;span class=&quot;type&quot;&gt;int64&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; (generator &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;string&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; sum_num &lt;span class=&quot;type&quot;&gt;int64&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  name_arr := &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;([]&lt;span class=&quot;type&quot;&gt;string&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(users))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  offset_arr := &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;([]&lt;span class=&quot;type&quot;&gt;int64&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(users))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; index &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; u_name, num := &lt;span class=&quot;keyword&quot;&gt;range&lt;/span&gt; users &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    name_arr[index] = u_name&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    offset_arr[index] = sum_num&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    sum_num += num&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    index += &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  generator = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;string&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    award_num := rand.Int63n(sum_num)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; name_arr[binary_search(offset_arr, award_num)]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;binary_search&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(nums []&lt;span class=&quot;type&quot;&gt;int64&lt;/span&gt;, target &lt;span class=&quot;type&quot;&gt;int64&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  start, end := &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(nums)&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; start &amp;lt;= end &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    mid := start + (end-start)/&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; nums[mid] &amp;gt; target &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      end = mid - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; nums[mid] &amp;lt; target &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; mid+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; == &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(nums) &amp;#123; &lt;span class=&quot;comment&quot;&gt;// 最后一名中奖&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; mid&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; nums[mid+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;] &amp;gt; target &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; mid&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      start = mid + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; mid&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&quot;2-加权抽奖&quot;&gt;&lt;a href=&quot;#2-加权抽奖&quot; class=&quot;headerlink&quot; title=&quot;2. 加权抽奖&quot;&gt;&lt;/a&gt;2. 加权抽奖&lt;/h5&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 这个也是我们常规概率抽奖的实现方案&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 前置逻辑需要做好并发相关的处理，包括异常状态处理&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;GetAwardGenerator&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(users &lt;span class=&quot;keyword&quot;&gt;map&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;string&lt;/span&gt;]&lt;span class=&quot;type&quot;&gt;int64&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;string&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; sum_num &lt;span class=&quot;type&quot;&gt;int64&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  name_arr := &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;([]&lt;span class=&quot;type&quot;&gt;string&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(users))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; u_name, num := &lt;span class=&quot;keyword&quot;&gt;range&lt;/span&gt; users &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    sum_num += num&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    name_arr = &lt;span class=&quot;built_in&quot;&gt;append&lt;/span&gt;(name_arr, u_name)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; generator &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;string&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  generator = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;string&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    award_num := rand.Int63n(sum_num)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; offset_num &lt;span class=&quot;type&quot;&gt;int64&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; _, u_name := &lt;span class=&quot;keyword&quot;&gt;range&lt;/span&gt; name_arr &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      offset_num += users[u_name]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; award_num &amp;lt; offset_num &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; u_name&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 缺省返回，正常情况下，不会运行到此处&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; name_arr[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;


&lt;h3 id=&quot;实现一个消息队列&quot;&gt;&lt;a href=&quot;#实现一个消息队列&quot; class=&quot;headerlink&quot; title=&quot;实现一个消息队列&quot;&gt;&lt;/a&gt;实现一个消息队列&lt;/h3&gt;&lt;p&gt;核心：切片 + 锁&lt;/p&gt;
&lt;h3 id=&quot;字符串相加-https-leetcode-cn-com-problems-add-s&quot;&gt;&lt;a href=&quot;#字符串相加-https-leetcode-cn-com-problems-add-s&quot; class=&quot;headerlink&quot; title=&quot;[字符串相加](https://leetcode-cn.com/problems/add-s&quot;&gt;&lt;/a&gt;[字符串相加](&lt;a href=&quot;https://leetcode-cn.com/problems/add-s&quot;&gt;https://leetcode-cn.com/problems/add-s&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;trings&amp;#x2F;)&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;addStrings&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(num1 &lt;span class=&quot;type&quot;&gt;string&lt;/span&gt;, num2 &lt;span class=&quot;type&quot;&gt;string&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;string&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	add := &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	ans := &lt;span class=&quot;string&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i, j := &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(num1) - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(num2) - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; i &amp;gt;= &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; || j &amp;gt;= &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; || add != &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i, j = i - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, j - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; x, y &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; i &amp;gt;= &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			x = &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;(num1[i] - &lt;span class=&quot;string&quot;&gt;&amp;#x27;0&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; j &amp;gt;= &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			y = &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;(num2[j] - &lt;span class=&quot;string&quot;&gt;&amp;#x27;0&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		result := x + y + add&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		ans = strconv.Itoa(result%&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;) + ans&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		add = result / &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; ans&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;


&lt;h3 id=&quot;求根号2的值&quot;&gt;&lt;a href=&quot;#求根号2的值&quot; class=&quot;headerlink&quot; title=&quot;求根号2的值&quot;&gt;&lt;/a&gt;求根号2的值&lt;/h3&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 二分查找法求近似值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;mySqrt&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(x &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;float64&lt;/span&gt; &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    l, r := &lt;span class=&quot;type&quot;&gt;float64&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;), &lt;span class=&quot;type&quot;&gt;float64&lt;/span&gt;(x)  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; r-l &amp;gt; &lt;span class=&quot;number&quot;&gt;1e-7&lt;/span&gt; &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        mid := l + (r - l) / &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; mid * mid &amp;lt;= &lt;span class=&quot;type&quot;&gt;float64&lt;/span&gt;(x) &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            l = mid  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            r = mid  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; r  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 牛顿迭代&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;mySqrt&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(x &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;float64&lt;/span&gt; &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; x == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    C, x0 := &lt;span class=&quot;type&quot;&gt;float64&lt;/span&gt;(x), &lt;span class=&quot;type&quot;&gt;float64&lt;/span&gt;(x)  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        xi := &lt;span class=&quot;number&quot;&gt;0.5&lt;/span&gt; * (x0 + C/x0)  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; math.Abs(x0 - xi) &amp;lt; &lt;span class=&quot;number&quot;&gt;1e-7&lt;/span&gt; &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        x0 = xi  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; x0  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span</summary>
        
      
    
    
    
    <category term="面试" scheme="https://bishoptylaor.github.io/categories/interview/"/>
    
    <category term="刷题" scheme="https://bishoptylaor.github.io/categories/interview/juan/"/>
    
    
    <category term="面试" scheme="https://bishoptylaor.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="go" scheme="https://bishoptylaor.github.io/tags/go/"/>
    
    <category term="算法" scheme="https://bishoptylaor.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>paxos 论文翻译</title>
    <link href="https://bishoptylaor.github.io/research/paxos-original/"/>
    <id>https://bishoptylaor.github.io/research/paxos-original/</id>
    <published>2022-02-25T08:57:23.000Z</published>
    <updated>2024-05-22T10:45:53.940Z</updated>
    
    
    
    
    <category term="研究所" scheme="https://bishoptylaor.github.io/categories/research/"/>
    
    
  </entry>
  
  <entry>
    <title>mongodb 面试必备</title>
    <link href="https://bishoptylaor.github.io/interview/mongodb-interview/"/>
    <id>https://bishoptylaor.github.io/interview/mongodb-interview/</id>
    <published>2022-02-25T08:54:50.000Z</published>
    <updated>2024-05-23T16:48:00.065Z</updated>
    
    
    
    
    <category term="面试" scheme="https://bishoptylaor.github.io/categories/interview/"/>
    
    
    <category term="必看必会" scheme="https://bishoptylaor.github.io/tags/%E5%BF%85%E7%9C%8B%E5%BF%85%E4%BC%9A/"/>
    
    <category term="面试" scheme="https://bishoptylaor.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="mongo" scheme="https://bishoptylaor.github.io/tags/mongo/"/>
    
    <category term="nosql" scheme="https://bishoptylaor.github.io/tags/nosql/"/>
    
  </entry>
  
  <entry>
    <title>redis 面试必备 100 题</title>
    <link href="https://bishoptylaor.github.io/interview/100prob/redis-interview-100/"/>
    <id>https://bishoptylaor.github.io/interview/100prob/redis-interview-100/</id>
    <published>2022-02-25T08:54:39.000Z</published>
    <updated>2024-05-30T07:29:33.264Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;Redis-数据库经典面试题解析&quot;&gt;&lt;a href=&quot;#Redis-数据库经典面试题解析&quot; class=&quot;headerlink&quot; title=&quot;Redis 数据库经典面试题解析&quot;&gt;&lt;/a&gt;Redis 数据库经典面试题解析&lt;/h1&gt;&lt;h3 id=&quot;1-Redis-是一个基于内存的高性能key-value数据库。&quot;&gt;&lt;a href=&quot;#1-Redis-是一个基于内存的高性能key-value数据库。&quot; class=&quot;headerlink&quot; title=&quot;1.Redis 是一个基于内存的高性能key-value数据库。&quot;&gt;&lt;/a&gt;1.Redis 是一个基于内存的高性能key-value数据库。&lt;/h3&gt;&lt;h3 id=&quot;2-Redis相比memcached有哪些优势：&quot;&gt;&lt;a href=&quot;#2-Redis相比memcached有哪些优势：&quot; class=&quot;headerlink&quot; title=&quot;2.Redis相比memcached有哪些优势：&quot;&gt;&lt;/a&gt;2.Redis相比memcached有哪些优势：&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;memcached所有的值均是简单的字符串，redis作为其替代者，支持更为丰富的数据类型&lt;/li&gt;
&lt;li&gt;redis的速度比memcached快很多&lt;/li&gt;
&lt;li&gt;redis可以持久化其数据&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;3-Redis是单线程&quot;&gt;&lt;a href=&quot;#3-Redis是单线程&quot; class=&quot;headerlink&quot; title=&quot;3.Redis是单线程&quot;&gt;&lt;/a&gt;3.Redis是单线程&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;redis利用队列技术将并发访问变为串行访问，消除了传统数据库串行控制的开销&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;4-Reids常用5种数据类型&quot;&gt;&lt;a href=&quot;#4-Reids常用5种数据类型&quot; class=&quot;headerlink&quot; title=&quot;4.Reids常用5种数据类型&quot;&gt;&lt;/a&gt;4.Reids常用5种数据类型&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;string，list，set，sorted set，hash&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;6-Reids6种淘汰策略：&quot;&gt;&lt;a href=&quot;#6-Reids6种淘汰策略：&quot; class=&quot;headerlink&quot; title=&quot;6.Reids6种淘汰策略：&quot;&gt;&lt;/a&gt;6.Reids6种淘汰策略：&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;noeviction: 不删除策略, 达到最大内存限制时, 如果需要更多内存, 直接返回错误信息。大多数写命令都会导致占用更多的内存(有极少数会例外。&lt;/li&gt;
&lt;li&gt;**allkeys-lru:**所有key通用; 优先删除最近最少使用(less recently used ,LRU) 的 key。&lt;/li&gt;
&lt;li&gt;**volatile-lru:**只限于设置了 expire 的部分; 优先删除最近最少使用(less recently used ,LRU) 的 key。&lt;/li&gt;
&lt;li&gt;**allkeys-random:**所有key通用; 随机删除一部分 key。&lt;/li&gt;
&lt;li&gt;volatile-random: 只限于设置了 expire 的部分; 随机删除一部分 key。&lt;/li&gt;
&lt;li&gt;volatile-ttl: 只限于设置了 expire 的部分; 优先删除剩余时间(time to live,TTL) 短的key。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;7-Redis的并发竞争问题如何解决&quot;&gt;&lt;a href=&quot;#7-Redis的并发竞争问题如何解决&quot; class=&quot;headerlink&quot; title=&quot;7.Redis的并发竞争问题如何解决?&quot;&gt;&lt;/a&gt;7.Redis的并发竞争问题如何解决?&lt;/h3&gt;&lt;p&gt;单进程单线程模式，采用队列模式将并发访问变为串行访问。Redis本身没有锁的概念，Redis对于多个客户端连接并不存在竞争，利用setnx实现锁。&lt;/p&gt;
&lt;h3 id=&quot;8-Redis是使用c语言开发的。&quot;&gt;&lt;a href=&quot;#8-Redis是使用c语言开发的。&quot; class=&quot;headerlink&quot; title=&quot;8.Redis是使用c语言开发的。&quot;&gt;&lt;/a&gt;8.Redis是使用c语言开发的。&lt;/h3&gt;&lt;h3 id=&quot;9-Redis前端启动命令&quot;&gt;&lt;a href=&quot;#9-Redis前端启动命令&quot; class=&quot;headerlink&quot; title=&quot;9.Redis前端启动命令&quot;&gt;&lt;/a&gt;9.Redis前端启动命令&lt;/h3&gt;&lt;p&gt;.&amp;#x2F;redis-server&lt;/p&gt;
&lt;h3 id=&quot;10-Reids支持的语言：&quot;&gt;&lt;a href=&quot;#10-Reids支持的语言：&quot; class=&quot;headerlink&quot; title=&quot;10.Reids支持的语言：&quot;&gt;&lt;/a&gt;10.Reids支持的语言：&lt;/h3&gt;&lt;p&gt;java、C、C#、C++、php、Node.js、Go等。&lt;/p&gt;
&lt;h3 id=&quot;11-Redis-持久化方案：&quot;&gt;&lt;a href=&quot;#11-Redis-持久化方案：&quot; class=&quot;headerlink&quot; title=&quot;11.Redis 持久化方案：&quot;&gt;&lt;/a&gt;11.Redis 持久化方案：&lt;/h3&gt;&lt;p&gt;Rdb 和 Aof&lt;/p&gt;
&lt;h3 id=&quot;12-Redis-的主从复制&quot;&gt;&lt;a href=&quot;#12-Redis-的主从复制&quot; class=&quot;headerlink&quot; title=&quot;12.Redis 的主从复制&quot;&gt;&lt;/a&gt;12.Redis 的主从复制&lt;/h3&gt;&lt;p&gt;持久化保证了即使redis服务重启也不会丢失数据，因为redis服务重启后会将硬盘上持久化的数据恢复到内存中，但是当redis服务器的硬盘损坏了可能会导致数据丢失，如果通过redis的主从复制机制就可以避免这种单点故障，&lt;/p&gt;
&lt;h3 id=&quot;13-Redis是单线程的，但Redis为什么这么快？&quot;&gt;&lt;a href=&quot;#13-Redis是单线程的，但Redis为什么这么快？&quot; class=&quot;headerlink&quot; title=&quot;13.Redis是单线程的，但Redis为什么这么快？&quot;&gt;&lt;/a&gt;13.Redis是单线程的，但Redis为什么这么快？&lt;/h3&gt;&lt;p&gt;1、完全基于内存，绝大部分请求是纯粹的内存操作，非常快速。数据存在内存中，类似于HashMap，HashMap的优势就是查找和操作的时间复杂度都是O(1)；&lt;/p&gt;
&lt;p&gt;2、数据结构简单，对数据操作也简单，Redis中的数据结构是专门进行设计的；&lt;/p&gt;
&lt;p&gt;3、采用单线程，避免了不必要的上下文切换和竞争条件，也不存在多进程或者多线程导致的切换而消耗 CPU，不用去考虑各种锁的问题，不存在加锁释放锁操作，没有因为可能出现死锁而导致的性能消耗；&lt;/p&gt;
&lt;p&gt;4、使用多路I&amp;#x2F;O复用模型，非阻塞IO；这里“多路”指的是多个网络连接，“复用”指的是复用同一个线程&lt;/p&gt;
&lt;p&gt;5、使用底层模型不同，它们之间底层实现方式以及与客户端之间通信的应用协议不一样，Redis直接自己构建了VM 机制 ，因为一般的系统调用系统函数的话，会浪费一定的时间去移动和请求；&lt;/p&gt;
&lt;h3 id=&quot;14-为什么Redis是单线程的？&quot;&gt;&lt;a href=&quot;#14-为什么Redis是单线程的？&quot; class=&quot;headerlink&quot; title=&quot;14.为什么Redis是单线程的？&quot;&gt;&lt;/a&gt;14.为什么Redis是单线程的？&lt;/h3&gt;&lt;p&gt;Redis是基于内存的操作，CPU不是Redis的瓶颈，Redis的瓶颈最有可能是机器内存的大小或者网络带宽。既然单线程容易实现，而且CPU不会成为瓶颈，那就顺理成章地采用单线程的方案了（毕竟采用多线程会有很多麻烦！）。&lt;/p&gt;
&lt;h3 id=&quot;15-Redis-info查看命令：info-memory&quot;&gt;&lt;a href=&quot;#15-Redis-info查看命令：info-memory&quot; class=&quot;headerlink&quot; title=&quot;15.Redis info查看命令：info memory&quot;&gt;&lt;/a&gt;15.Redis info查看命令：info memory&lt;/h3&gt;&lt;h3 id=&quot;16-Redis内存模型&quot;&gt;&lt;a href=&quot;#16-Redis内存模型&quot; class=&quot;headerlink&quot; title=&quot;16.Redis内存模型&quot;&gt;&lt;/a&gt;16.Redis内存模型&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;used_memory：Redis分配器分配的内存总量（单位是字节），包括使用的虚拟内存（即swap）；Redis分配器后面会介绍。used_memory_human只是显示更友好。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;used_memory_rss&lt;strong&gt;：&lt;/strong&gt;Redis进程占据操作系统的内存（单位是字节），与top及ps命令看到的值是一致的；除了分配器分配的内存之外，used_memory_rss还包括进程运行本身需要的内存、内存碎片等，但是不包括虚拟内存。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;mem_fragmentation_ratio&lt;strong&gt;：&lt;/strong&gt;内存碎片比率，该值是used_memory_rss &amp;#x2F; used_memory的比值。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;mem_allocator&lt;strong&gt;：&lt;/strong&gt;Redis使用的内存分配器，在编译时指定；可以是 libc 、jemalloc或者tcmalloc，默认是jemalloc；截图中使用的便是默认的jemalloc。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;17-Redis内存划分&quot;&gt;&lt;a href=&quot;#17-Redis内存划分&quot; class=&quot;headerlink&quot; title=&quot;17.Redis内存划分&quot;&gt;&lt;/a&gt;17.Redis内存划分&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;数据&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;作为数据库，数据是最主要的部分；这部分占用的内存会统计在used_memory中。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;进程本身运行需要的内存&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Redis主进程本身运行肯定需要占用内存，如代码、常量池等等；这部分内存大约几兆，在大多数生产环境中与Redis数据占用的内存相比可以忽略。这部分内存不是由jemalloc分配，因此不会统计在used_memory中。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;缓冲内存&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;缓冲内存包括客户端缓冲区、复制积压缓冲区、AOF缓冲区等；其中，客户端缓冲存储客户端连接的输入输出缓冲；复制积压缓冲用于部分复制功能；AOF缓冲区用于在进行AOF重写时，保存最近的写入命令。在了解相应功能之前，不需要知道这些缓冲的细节；这部分内存由jemalloc分配，因此会统计在used_memory中。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;内存碎片&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;内存碎片是Redis在分配、回收物理内存过程中产生的。例如，如果对数据的更改频繁，而且数据之间的大小相差很大，可能导致redis释放的空间在物理内存中并没有释放，但redis又无法有效利用，这就形成了内存碎片。内存碎片不会统计在used_memory中。&lt;/p&gt;
&lt;h3 id=&quot;18-Redis对象有5种类型&quot;&gt;&lt;a href=&quot;#18-Redis对象有5种类型&quot; class=&quot;headerlink&quot; title=&quot;18.Redis对象有5种类型&quot;&gt;&lt;/a&gt;18.Redis对象有5种类型&lt;/h3&gt;&lt;p&gt;无论是哪种类型，Redis都不会直接存储，而是通过redisObject对象进行存储。&lt;/p&gt;
&lt;h3 id=&quot;19-Redis没有直接使用C字符串&quot;&gt;&lt;a href=&quot;#19-Redis没有直接使用C字符串&quot; class=&quot;headerlink&quot; title=&quot;19.Redis没有直接使用C字符串&quot;&gt;&lt;/a&gt;19.Redis没有直接使用C字符串&lt;/h3&gt;&lt;p&gt;(即以空字符’&#92;0’结尾的字符数组)作为默认的字符串表示，而是使用了SDS。SDS是简单动态字符串(Simple Dynamic String)的缩写。&lt;/p&gt;
&lt;h3 id=&quot;20-Reidis的SDS在C字符串的基础上加入了free和len字段&quot;&gt;&lt;a href=&quot;#20-Reidis的SDS在C字符串的基础上加入了free和len字段&quot; class=&quot;headerlink&quot; title=&quot;20.Reidis的SDS在C字符串的基础上加入了free和len字段&quot;&gt;&lt;/a&gt;20.Reidis的SDS在C字符串的基础上加入了free和len字段&lt;/h3&gt;&lt;h3 id=&quot;21-Reids主从复制&quot;&gt;&lt;a href=&quot;#21-Reids主从复制&quot; class=&quot;headerlink&quot; title=&quot;21.Reids主从复制&quot;&gt;&lt;/a&gt;21.Reids主从复制&lt;/h3&gt;&lt;p&gt;复制是高可用Redis的基础，哨兵和集群都是在复制基础上实现高可用的。复制主要实现了数据的多机备份，以及对于读操作的负载均衡和简单的故障恢复。缺陷：故障恢复无法自动化；写操作无法负载均衡；存储能力受到单机的限制。&lt;/p&gt;
&lt;h3 id=&quot;22-Redis哨兵&quot;&gt;&lt;a href=&quot;#22-Redis哨兵&quot; class=&quot;headerlink&quot; title=&quot;22.Redis哨兵&quot;&gt;&lt;/a&gt;22.Redis哨兵&lt;/h3&gt;&lt;p&gt;在复制的基础上，哨兵实现了自动化的故障恢复。缺陷：写操作无法负载均衡；存储能力受到单机的限制。&lt;/p&gt;
&lt;h3 id=&quot;23-Reids持久化触发条件&quot;&gt;&lt;a href=&quot;#23-Reids持久化触发条件&quot; class=&quot;headerlink&quot; title=&quot;23.Reids持久化触发条件&quot;&gt;&lt;/a&gt;23.Reids持久化触发条件&lt;/h3&gt;&lt;p&gt;RDB持久化的触发分为手动触发和自动触发两种。&lt;/p&gt;
&lt;h3 id=&quot;24-Redis-开启AOF&quot;&gt;&lt;a href=&quot;#24-Redis-开启AOF&quot; class=&quot;headerlink&quot; title=&quot;24.Redis 开启AOF&quot;&gt;&lt;/a&gt;24.Redis 开启AOF&lt;/h3&gt;&lt;p&gt;Redis服务器默认开启RDB，关闭AOF；要开启AOF，需要在配置文件中配置：&lt;/p&gt;
&lt;p&gt;appendonly yes&lt;/p&gt;
&lt;h3 id=&quot;25-AOF常用配置总结&quot;&gt;&lt;a href=&quot;#25-AOF常用配置总结&quot; class=&quot;headerlink&quot; title=&quot;25.AOF常用配置总结&quot;&gt;&lt;/a&gt;25.AOF常用配置总结&lt;/h3&gt;&lt;p&gt;下面是AOF常用的配置项，以及默认值；前面介绍过的这里不再详细介绍。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;appendonly no：是否开启AOF&lt;/li&gt;
&lt;li&gt;appendfilename “appendonly.aof”：AOF文件名&lt;/li&gt;
&lt;li&gt;dir .&amp;#x2F;：RDB文件和AOF文件所在目录&lt;/li&gt;
&lt;li&gt;appendfsync everysec：fsync持久化策略&lt;/li&gt;
&lt;li&gt;no-appendfsync-on-rewrite no：AOF重写期间是否禁止fsync；如果开启该选项，可以减轻文件重写时CPU和硬盘的负载（尤其是硬盘），但是可能会丢失AOF重写期间的数据；需要在负载和安全性之间进行平衡&lt;/li&gt;
&lt;li&gt;auto-aof-rewrite-percentage 100：文件重写触发条件之一&lt;/li&gt;
&lt;li&gt;auto-aof-rewrite-min-size 64mb：文件重写触发提交之一&lt;/li&gt;
&lt;li&gt;aof-load-truncated yes：如果AOF文件结尾损坏，Redis启动时是否仍载入AOF文件&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;26-RDB和AOF的优缺点&quot;&gt;&lt;a href=&quot;#26-RDB和AOF的优缺点&quot; class=&quot;headerlink&quot; title=&quot;26.RDB和AOF的优缺点&quot;&gt;&lt;/a&gt;26.RDB和AOF的优缺点&lt;/h3&gt;&lt;p&gt;RDB持久化&lt;/p&gt;
&lt;p&gt;优点：RDB文件紧凑，体积小，网络传输快，适合全量复制；恢复速度比AOF快很多。当然，与AOF相比，RDB最重要的优点之一是对性能的影响相对较小。&lt;/p&gt;
&lt;p&gt;缺点：RDB文件的致命缺点在于其数据快照的持久化方式决定了必然做不到实时持久化，而在数据越来越重要的今天，数据的大量丢失很多时候是无法接受的，因此AOF持久化成为主流。此外，RDB文件需要满足特定格式，兼容性差（如老版本的Redis不兼容新版本的RDB文件）。&lt;/p&gt;
&lt;p&gt;AOF持久化&lt;/p&gt;
&lt;p&gt;与RDB持久化相对应，AOF的优点在于支持秒级持久化、兼容性好，缺点是文件大、恢复速度慢、对性能影响大。&lt;/p&gt;
&lt;h3 id=&quot;27-持久化策略选择&quot;&gt;&lt;a href=&quot;#27-持久化策略选择&quot; class=&quot;headerlink&quot; title=&quot;27.持久化策略选择&quot;&gt;&lt;/a&gt;27.持久化策略选择&lt;/h3&gt;&lt;p&gt;（1）如果Redis中的数据完全丢弃也没有关系（如Redis完全用作DB层数据的cache），那么无论是单机，还是主从架构，都可以不进行任何持久化。&lt;/p&gt;
&lt;p&gt;（2）在单机环境下（对于个人开发者，这种情况可能比较常见），如果可以接受十几分钟或更多的数据丢失，选择RDB对Redis的性能更加有利；如果只能接受秒级别的数据丢失，应该选择AOF。&lt;/p&gt;
&lt;p&gt;（3）但在多数情况下，我们都会配置主从环境，slave的存在既可以实现数据的热备，也可以进行读写分离分担Redis读请求，以及在master宕掉后继续提供服务。&lt;/p&gt;
&lt;h3 id=&quot;28-redis缓存被击穿处理机制&quot;&gt;&lt;a href=&quot;#28-redis缓存被击穿处理机制&quot; class=&quot;headerlink&quot; title=&quot;28.redis缓存被击穿处理机制&quot;&gt;&lt;/a&gt;28.redis缓存被击穿处理机制&lt;/h3&gt;&lt;p&gt;使用mutex。简单地来说，就是在缓存失效的时候（判断拿出来的值为空），不是立即去load db，而是先使用缓存工具的某些带成功操作返回值的操作（比如Redis的SETNX或者Memcache的ADD）去set一个mutex key，当操作返回成功时，再进行load db的操作并回设缓存；否则，就重试整个get缓存的方法&lt;/p&gt;
&lt;h3 id=&quot;29-Redis还提供的高级工具&quot;&gt;&lt;a href=&quot;#29-Redis还提供的高级工具&quot; class=&quot;headerlink&quot; title=&quot;29.Redis还提供的高级工具&quot;&gt;&lt;/a&gt;29.Redis还提供的高级工具&lt;/h3&gt;&lt;p&gt;像慢查询分析、性能测试、Pipeline、事务、Lua自定义命令、Bitmaps、HyperLogLog、发布&amp;#x2F;订阅、Geo等个性化功能。&lt;/p&gt;
&lt;h3 id=&quot;30-Redis常用管理命令&quot;&gt;&lt;a href=&quot;#30-Redis常用管理命令&quot; class=&quot;headerlink&quot; title=&quot;30.Redis常用管理命令&quot;&gt;&lt;/a&gt;30.Redis常用管理命令&lt;/h3&gt;&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# dbsize 返回当前数据库 key 的数量。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# info 返回当前 redis 服务器状态和一些统计信息。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# monitor 实时监听并返回redis服务器接收到的所有请求信息。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# shutdown 把数据同步保存到磁盘上，并关闭redis服务。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# config get parameter 获取一个 redis 配置参数信息。（个别参数可能无法获取）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# config set parameter value 设置一个 redis 配置参数信息。（个别参数可能无法获取）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# config resetstat 重置 info 命令的统计信息。（重置包括：keyspace 命中数、&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# keyspace 错误数、 处理命令数，接收连接数、过期 key 数）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# debug object key 获取一个 key 的调试信息。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# debug segfault 制造一次服务器当机。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# flushdb 删除当前数据库中所有 key,此方法不会失败。小心慎用&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# flushall 删除全部数据库中所有 key，此方法不会失败。小心慎用&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&quot;31-Reids工具命令&quot;&gt;&lt;a href=&quot;#31-Reids工具命令&quot; class=&quot;headerlink&quot; title=&quot;31.Reids工具命令&quot;&gt;&lt;/a&gt;31.Reids工具命令&lt;/h3&gt;&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;#redis-server：Redis 服务器的 daemon 启动程序&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#redis-cli：Redis 命令行操作工具。当然，你也可以用 telnet 根据其纯文本协议来操作&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#redis-benchmark：Redis 性能测试工具，测试 Redis 在你的系统及你的配置下的读写性能&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$redis-benchmark -n 100000 –c 50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#模拟同时由 50 个客户端发送 100000 个 SETs/GETs 查询&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#redis-check-aof：更新日志检查&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#redis-check-dump：本地数据库检查&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&quot;32-为什么需要持久化？&quot;&gt;&lt;a href=&quot;#32-为什么需要持久化？&quot; class=&quot;headerlink&quot; title=&quot;32.为什么需要持久化？&quot;&gt;&lt;/a&gt;32.为什么需要持久化？&lt;/h3&gt;&lt;p&gt;由于Redis是一种内存型数据库，即服务器在运行时，系统为其分配了一部分内存存储数据，一旦服务器挂了，或者突然宕机了，那么数据库里面的数据将会丢失，为了使服务器即使突然关机也能保存数据，必须通过持久化的方式将数据从内存保存到磁盘中。&lt;/p&gt;
&lt;h3 id=&quot;33-判断key是否存在&quot;&gt;&lt;a href=&quot;#33-判断key是否存在&quot; class=&quot;headerlink&quot; title=&quot;33.判断key是否存在&quot;&gt;&lt;/a&gt;33.判断key是否存在&lt;/h3&gt;&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;exists key +key名字&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&quot;34-删除key&quot;&gt;&lt;a href=&quot;#34-删除key&quot; class=&quot;headerlink&quot; title=&quot;34.删除key&quot;&gt;&lt;/a&gt;34.删除key&lt;/h3&gt;&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;del key1 key2 ...&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&quot;35-缓存和数据库间数据一致性问题&quot;&gt;&lt;a href=&quot;#35-缓存和数据库间数据一致性问题&quot; class=&quot;headerlink&quot; title=&quot;35.缓存和数据库间数据一致性问题&quot;&gt;&lt;/a&gt;35.缓存和数据库间数据一致性问题&lt;/h3&gt;&lt;p&gt;分布式环境下（单机就不用说了）非常容易出现缓存和数据库间的数据一致性问题，针对这一点的话，只能说，如果你的项目对缓存的要求是强一致性的，那么请不要使用缓存。我们只能采取合适的策略来降低缓存和数据库间数据不一致的概率，而无法保证两者间的强一致性。合适的策略包括 合适的缓存更新策略，更新数据库后要及时更新缓存、缓存失败时增加重试机制，例如MQ模式的消息队列。&lt;/p&gt;
&lt;h3 id=&quot;36-布隆过滤器&quot;&gt;&lt;a href=&quot;#36-布隆过滤器&quot; class=&quot;headerlink&quot; title=&quot;36.布隆过滤器&quot;&gt;&lt;/a&gt;36.布隆过滤器&lt;/h3&gt;&lt;p&gt;bloomfilter就类似于一个hash set，用于快速判某个元素是否存在于集合中，其典型的应用场景就是快速判断一个key是否存在于某容器，不存在就直接返回。布隆过滤器的关键就在于hash算法和容器大小&lt;/p&gt;
&lt;h3 id=&quot;37-缓存雪崩问题&quot;&gt;&lt;a href=&quot;#37-缓存雪崩问题&quot; class=&quot;headerlink&quot; title=&quot;37.缓存雪崩问题&quot;&gt;&lt;/a&gt;37.缓存雪崩问题&lt;/h3&gt;&lt;p&gt;存在同一时间内大量键过期（失效），接着来的一大波请求瞬间都落在了数据库中导致连接异常。&lt;/p&gt;
&lt;p&gt;解决方案：&lt;/p&gt;
&lt;p&gt;1、也是像解决缓存穿透一样加锁排队。&lt;/p&gt;
&lt;p&gt;2、建立备份缓存，缓存A和缓存B，A设置超时时间，B不设值超时时间，先从A读缓存，A没有读B，并且更新A缓存和B缓存;&lt;/p&gt;
&lt;h3 id=&quot;38-缓存并发问题&quot;&gt;&lt;a href=&quot;#38-缓存并发问题&quot; class=&quot;headerlink&quot; title=&quot;38.缓存并发问题&quot;&gt;&lt;/a&gt;38.缓存并发问题&lt;/h3&gt;&lt;p&gt;这里的并发指的是多个redis的client同时set key引起的并发问题。比较有效的解决方案就是把redis.set操作放在队列中使其串行化，必须的一个一个执行，具体的代码就不上了，当然加锁也是可以的，至于为什么不用redis中的事务，留给各位看官自己思考探究。&lt;/p&gt;
&lt;h3 id=&quot;39-Redis分布式&quot;&gt;&lt;a href=&quot;#39-Redis分布式&quot; class=&quot;headerlink&quot; title=&quot;39.Redis分布式&quot;&gt;&lt;/a&gt;39.Redis分布式&lt;/h3&gt;&lt;p&gt;redis支持主从的模式。原则：Master会将数据同步到slave，而slave不会将数据同步到master。Slave启动时会连接master来同步数据。&lt;/p&gt;
&lt;p&gt;这是一个典型的分布式读写分离模型。我们可以利用master来插入数据，slave提供检索服务。这样可以有效减少单个机器的并发访问数量&lt;/p&gt;
&lt;h3 id=&quot;40-读写分离模型&quot;&gt;&lt;a href=&quot;#40-读写分离模型&quot; class=&quot;headerlink&quot; title=&quot;40.读写分离模型&quot;&gt;&lt;/a&gt;40.读写分离模型&lt;/h3&gt;&lt;p&gt;通过增加Slave DB的数量，读的性能可以线性增长。为了避免Master DB的单点故障，集群一般都会采用两台Master DB做双机热备，所以整个集群的读和写的可用性都非常高。读写分离架构的缺陷在于，不管是Master还是Slave，每个节点都必须保存完整的数据，如果在数据量很大的情况下，集群的扩展能力还是受限于单个节点的存储能力，而且对于Write-intensive类型的应用，读写分离架构并不适合。&lt;/p&gt;
&lt;h3 id=&quot;41-数据分片模型&quot;&gt;&lt;a href=&quot;#41-数据分片模型&quot; class=&quot;headerlink&quot; title=&quot;41.数据分片模型&quot;&gt;&lt;/a&gt;41.数据分片模型&lt;/h3&gt;&lt;p&gt;为了解决读写分离模型的缺陷，可以将数据分片模型应用进来。&lt;/p&gt;
&lt;p&gt;可以将每个节点看成都是独立的master，然后通过业务实现数据分片。&lt;/p&gt;
&lt;p&gt;结合上面两种模型，可以将每个master设计成由一个master和多个slave组成的模型。&lt;/p&gt;
&lt;h3 id=&quot;42-redis常见性能问题和解决方案：&quot;&gt;&lt;a href=&quot;#42-redis常见性能问题和解决方案：&quot; class=&quot;headerlink&quot; title=&quot;42. redis常见性能问题和解决方案：&quot;&gt;&lt;/a&gt;42. redis常见性能问题和解决方案：&lt;/h3&gt;&lt;p&gt;Master最好不要做任何持久化工作，如RDB内存快照和AOF日志文件&lt;/p&gt;
&lt;p&gt;如果数据比较重要，某个Slave开启AOF备份数据，策略设置为每秒同步一次&lt;/p&gt;
&lt;p&gt;为了主从复制的速度和连接的稳定性，Master和Slave最好在同一个局域网内&lt;/p&gt;
&lt;p&gt;尽量避免在压力很大的主库上增加从库&lt;/p&gt;
&lt;h3 id=&quot;43-redis通讯协议&quot;&gt;&lt;a href=&quot;#43-redis通讯协议&quot; class=&quot;headerlink&quot; title=&quot;43.redis通讯协议&quot;&gt;&lt;/a&gt;43.redis通讯协议&lt;/h3&gt;&lt;p&gt;RESP 是redis客户端和服务端之前使用的一种通讯协议；RESP 的特点：实现简单、快速解析、可读性好&lt;/p&gt;
&lt;h3 id=&quot;44-Redis分布式锁实现&quot;&gt;&lt;a href=&quot;#44-Redis分布式锁实现&quot; class=&quot;headerlink&quot; title=&quot;44.Redis分布式锁实现&quot;&gt;&lt;/a&gt;44.Redis分布式锁实现&lt;/h3&gt;&lt;p&gt;先拿setnx来争抢锁，抢到之后，再用expire给锁加一个过期时间防止锁忘记了释放。&lt;strong&gt;如果在setnx之后执行expire之前进程意外crash或者要重启维护了，那会怎么样？&lt;/strong&gt;set指令有非常复杂的参数，这个应该是可以同时把setnx和expire合成一条指令来用的！&lt;/p&gt;
&lt;h3 id=&quot;45-Redis做异步队列&quot;&gt;&lt;a href=&quot;#45-Redis做异步队列&quot; class=&quot;headerlink&quot; title=&quot;45.Redis做异步队列&quot;&gt;&lt;/a&gt;45.Redis做异步队列&lt;/h3&gt;&lt;p&gt;一般使用list结构作为队列，rpush生产消息，lpop消费消息。当lpop没有消息的时候，要适当sleep一会再重试。缺点：在消费者下线的情况下，生产的消息会丢失，得使用专业的消息队列如rabbitmq等。&lt;strong&gt;能不能生产一次消费多次呢？&lt;/strong&gt;使用pub&amp;#x2F;sub主题订阅者模式，可以实现1:N的消息队列。&lt;/p&gt;
&lt;h3 id=&quot;46-Redis中海量数据的正确操作方式&quot;&gt;&lt;a href=&quot;#46-Redis中海量数据的正确操作方式&quot; class=&quot;headerlink&quot; title=&quot;46.Redis中海量数据的正确操作方式&quot;&gt;&lt;/a&gt;46.Redis中海量数据的正确操作方式&lt;/h3&gt;&lt;p&gt;利用SCAN系列命令（SCAN、SSCAN、HSCAN、ZSCAN）完成数据迭代。&lt;/p&gt;
&lt;h3 id=&quot;47-SCAN系列命令注意事项&quot;&gt;&lt;a href=&quot;#47-SCAN系列命令注意事项&quot; class=&quot;headerlink&quot; title=&quot;47.SCAN系列命令注意事项&quot;&gt;&lt;/a&gt;47.SCAN系列命令注意事项&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;SCAN的参数没有key，因为其迭代对象是DB内数据；&lt;/li&gt;
&lt;li&gt;返回值都是数组，第一个值都是下一次迭代游标；&lt;/li&gt;
&lt;li&gt;时间复杂度：每次请求都是O(1)，完成所有迭代需要O(N)，N是元素数量；&lt;/li&gt;
&lt;li&gt;可用版本：version &amp;gt;&amp;#x3D; 2.8.0；&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;48-Redis-管道-Pipeline&quot;&gt;&lt;a href=&quot;#48-Redis-管道-Pipeline&quot; class=&quot;headerlink&quot; title=&quot;48.Redis 管道 Pipeline&quot;&gt;&lt;/a&gt;48.Redis 管道 Pipeline&lt;/h3&gt;&lt;p&gt;在某些场景下我们在一次操作中可能需要执行多个命令，而如果我们只是一个命令一个命令去执行则会浪费很多网络消耗时间，如果将命令一次性传输到 Redis中去再执行，则会减少很多开销时间。但是需要注意的是 pipeline中的命令并不是原子性执行的，也就是说管道中的命令到达 Redis服务器的时候可能会被其他的命令穿插&lt;/p&gt;
&lt;h3 id=&quot;49-事务不支持回滚&quot;&gt;&lt;a href=&quot;#49-事务不支持回滚&quot; class=&quot;headerlink&quot; title=&quot;49.事务不支持回滚&quot;&gt;&lt;/a&gt;49.事务不支持回滚&lt;/h3&gt;&lt;h3 id=&quot;50-手写一个-LRU-算法&quot;&gt;&lt;a href=&quot;#50-手写一个-LRU-算法&quot; class=&quot;headerlink&quot; title=&quot;50.手写一个 LRU 算法&quot;&gt;&lt;/a&gt;50.手写一个 LRU 算法&lt;/h3&gt;&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;class LRUCache&amp;lt;K, V&amp;gt; extends LinkedHashMap&amp;lt;K, V&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    private final int CACHE_SIZE;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    /**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * 传递进来最多能缓存多少数据&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     *&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * @param cacheSize 缓存大小&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public LRUCache(int cacheSize) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // true 表示让 linkedHashMap 按照访问顺序来进行排序，最近访问的放在头部，最老访问的放在尾部。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        super((int) Math.ceil(cacheSize / 0.75) + 1, 0.75f, true);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        CACHE_SIZE = cacheSize;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    protected boolean removeEldestEntry(Map.Entry&amp;lt;K, V&amp;gt; eldest) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // 当 map中的数据量大于指定的缓存个数的时候，就自动删除最老的数据。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        return size() &amp;gt; CACHE_SIZE;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&quot;51-多节点-Redis-分布式锁：Redlock-算法&quot;&gt;&lt;a href=&quot;#51-多节点-Redis-分布式锁：Redlock-算法&quot; class=&quot;headerlink&quot; title=&quot;51.多节点 Redis 分布式锁：Redlock 算法&quot;&gt;&lt;/a&gt;51.多节点 Redis 分布式锁：Redlock 算法&lt;/h3&gt;&lt;p&gt;获取当前时间（start）。&lt;/p&gt;
&lt;p&gt;依次向 N 个 Redis节点请求锁。请求锁的方式与从单节点 Redis获取锁的方式一致。为了保证在某个 Redis节点不可用时该算法能够继续运行，获取锁的操作都需要设置超时时间，需要保证该超时时间远小于锁的有效时间。这样才能保证客户端在向某个 Redis节点获取锁失败之后，可以立刻尝试下一个节点。&lt;/p&gt;
&lt;p&gt;计算获取锁的过程总共消耗多长时间（consumeTime &amp;#x3D; end - start）。如果客户端从大多数 Redis节点（&amp;gt;&amp;#x3D; N&amp;#x2F;2 + 1) 成功获取锁，并且获取锁总时长没有超过锁的有效时间，这种情况下，客户端会认为获取锁成功，否则，获取锁失败。&lt;/p&gt;
&lt;p&gt;如果最终获取锁成功，锁的有效时间应该重新设置为锁最初的有效时间减去 consumeTime。&lt;/p&gt;
&lt;p&gt;如果最终获取锁失败，客户端应该立刻向所有 Redis节点发起释放锁的请求。&lt;/p&gt;
&lt;h3 id=&quot;52-Redis-中设置过期时间主要通过以下四种方式&quot;&gt;&lt;a href=&quot;#52-Redis-中设置过期时间主要通过以下四种方式&quot; class=&quot;headerlink&quot; title=&quot;52.Redis 中设置过期时间主要通过以下四种方式&quot;&gt;&lt;/a&gt;52.Redis 中设置过期时间主要通过以下四种方式&lt;/h3&gt;&lt;p&gt;expire key seconds：设置 key 在 n 秒后过期；&lt;br&gt;pexpire key milliseconds：设置 key 在 n 毫秒后过期；&lt;br&gt;expireat key timestamp：设置 key 在某个时间戳（精确到秒）之后过期；&lt;br&gt;pexpireat key millisecondsTimestamp：设置 key 在某个时间戳（精确到毫秒）之后过期；&lt;/p&gt;
&lt;h3 id=&quot;53-Reids三种不同删除策略&quot;&gt;&lt;a href=&quot;#53-Reids三种不同删除策略&quot; class=&quot;headerlink&quot; title=&quot;53.Reids三种不同删除策略&quot;&gt;&lt;/a&gt;53.Reids三种不同删除策略&lt;/h3&gt;&lt;p&gt;定时删除：在设置键的过期时间的同时，创建一个定时任务，当键达到过期时间时，立即执行对键的删除操作&lt;/p&gt;
&lt;p&gt;惰性删除：放任键过期不管，但在每次从键空间获取键时，都检查取得的键是否过期，如果过期的话，就删除该键，如果没有过期，就返回该键&lt;/p&gt;
&lt;p&gt;定期删除：每隔一点时间，程序就对数据库进行一次检查，删除里面的过期键，至于要删除多少过期键，以及要检查多少个数据库，则由算法决定。&lt;/p&gt;
&lt;h3 id=&quot;54-定时删除&quot;&gt;&lt;a href=&quot;#54-定时删除&quot; class=&quot;headerlink&quot; title=&quot;54.定时删除&quot;&gt;&lt;/a&gt;54.定时删除&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;优点：&lt;/strong&gt;对内存友好，定时删除策略可以保证过期键会尽可能快地被删除，并释放国期间所占用的内存&lt;br&gt;&lt;strong&gt;缺点：&lt;/strong&gt;对cpu时间不友好，在过期键比较多时，删除任务会占用很大一部分cpu时间，在内存不紧张但cpu时间紧张的情况下，将cpu时间用在删除和当前任务无关的过期键上，影响服务器的响应时间和吞吐量&lt;/p&gt;
&lt;h3 id=&quot;55-定期删除&quot;&gt;&lt;a href=&quot;#55-定期删除&quot; class=&quot;headerlink&quot; title=&quot;55.定期删除&quot;&gt;&lt;/a&gt;55.定期删除&lt;/h3&gt;&lt;p&gt;由于定时删除会占用太多cpu时间，影响服务器的响应时间和吞吐量以及惰性删除浪费太多内存，有内存泄露的危险，所以出现一种整合和折中这两种策略的定期删除策略。&lt;/p&gt;
&lt;p&gt;定期删除策略每隔一段时间执行一次删除过期键操作，并通过限制删除操作执行的时长和频率来减少删除操作对CPU时间的影响。&lt;br&gt;定时删除策略有效地减少了因为过期键带来的内存浪费。&lt;/p&gt;
&lt;h3 id=&quot;56-惰性删除&quot;&gt;&lt;a href=&quot;#56-惰性删除&quot; class=&quot;headerlink&quot; title=&quot;56.惰性删除&quot;&gt;&lt;/a&gt;56.惰性删除&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;优点：&lt;/strong&gt;对cpu时间友好，在每次从键空间获取键时进行过期键检查并是否删除，删除目标也仅限当前处理的键，这个策略不会在其他无关的删除任务上花费任何cpu时间。&lt;br&gt;&lt;strong&gt;缺点：&lt;/strong&gt;对内存不友好，过期键过期也可能不会被删除，导致所占的内存也不会释放。甚至可能会出现内存泄露的现象，当存在很多过期键，而这些过期键又没有被访问到，这会可能导致它们会一直保存在内存中，造成内存泄露。&lt;/p&gt;
&lt;h3 id=&quot;57-Reids-管理工具：Redis-Manager-2-0&quot;&gt;&lt;a href=&quot;#57-Reids-管理工具：Redis-Manager-2-0&quot; class=&quot;headerlink&quot; title=&quot;57.Reids 管理工具：Redis Manager 2.0&quot;&gt;&lt;/a&gt;57.Reids 管理工具：Redis Manager 2.0&lt;/h3&gt;&lt;p&gt;github地址&lt;/p&gt;
&lt;h3 id=&quot;58-Redis常见的几种缓存策略&quot;&gt;&lt;a href=&quot;#58-Redis常见的几种缓存策略&quot; class=&quot;headerlink&quot; title=&quot;58.Redis常见的几种缓存策略&quot;&gt;&lt;/a&gt;58.Redis常见的几种缓存策略&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Cache-Aside&lt;/li&gt;
&lt;li&gt;Read-Through&lt;/li&gt;
&lt;li&gt;Write-Through&lt;/li&gt;
&lt;li&gt;Write-Behind&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;59-Redis-Module-实现布隆过滤器&quot;&gt;&lt;a href=&quot;#59-Redis-Module-实现布隆过滤器&quot; class=&quot;headerlink&quot; title=&quot;59.Redis Module 实现布隆过滤器&quot;&gt;&lt;/a&gt;59.Redis Module 实现布隆过滤器&lt;/h3&gt;&lt;p&gt;Redis module 是Redis 4.0 以后支持的新的特性，这里很多国外牛逼的大学和机构提供了很多牛逼的Module 只要编译引入到Redis 中就能轻松的实现我们某些需求的功能。在Redis 官方Module 中有一些我们常见的一些模块，我们在这里就做一个简单的使用。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;neural-redis 主要是神经网络的机器学，集成到redis 可以做一些机器训练感兴趣的可以尝试&lt;/li&gt;
&lt;li&gt;RedisSearch 主要支持一些富文本的的搜索&lt;/li&gt;
&lt;li&gt;RedisBloom 支持分布式环境下的Bloom 过滤器&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;60-Redis-到底是怎么实现“附近的人”&quot;&gt;&lt;a href=&quot;#60-Redis-到底是怎么实现“附近的人”&quot; class=&quot;headerlink&quot; title=&quot;60.Redis 到底是怎么实现“附近的人”&quot;&gt;&lt;/a&gt;60.Redis 到底是怎么实现“附近的人”&lt;/h3&gt;&lt;p&gt;使用方式&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;GEOADD key longitude latitude member [longitude latitude member ...]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;将给定的位置对象（纬度、经度、名字）添加到指定的key。其中，key为集合名称，member为该经纬度所对应的对象。在实际运用中，当所需存储的对象数量过多时，可通过设置多key(如一个省一个key)的方式对对象集合变相做sharding，避免单集合数量过多。&lt;/p&gt;
&lt;p&gt;成功插入后的返回值：&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(integer)</summary>
        
      
    
    
    
    <category term="面试" scheme="https://bishoptylaor.github.io/categories/interview/"/>
    
    <category term="面试100题" scheme="https://bishoptylaor.github.io/categories/interview/100prob/"/>
    
    
    <category term="必看必会" scheme="https://bishoptylaor.github.io/tags/%E5%BF%85%E7%9C%8B%E5%BF%85%E4%BC%9A/"/>
    
    <category term="面试" scheme="https://bishoptylaor.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="redis" scheme="https://bishoptylaor.github.io/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>mysql 面试必备 100 题</title>
    <link href="https://bishoptylaor.github.io/interview/100prob/mysql-interview-100/"/>
    <id>https://bishoptylaor.github.io/interview/100prob/mysql-interview-100/</id>
    <published>2022-02-25T08:54:39.000Z</published>
    <updated>2024-05-30T17:01:22.069Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;MySQL数据库经典面试题解析&quot;&gt;&lt;a href=&quot;#MySQL数据库经典面试题解析&quot; class=&quot;headerlink&quot; title=&quot;MySQL数据库经典面试题解析&quot;&gt;&lt;/a&gt;MySQL数据库经典面试题解析&lt;/h1&gt;&lt;h2 id=&quot;1-MySQL-索引使用有哪些注意事项呢？&quot;&gt;&lt;a href=&quot;#1-MySQL-索引使用有哪些注意事项呢？&quot; class=&quot;headerlink&quot; title=&quot;1. MySQL 索引使用有哪些注意事项呢？&quot;&gt;&lt;/a&gt;1. MySQL 索引使用有哪些注意事项呢？&lt;/h2&gt;&lt;p&gt;可以从三个维度回答这个问题：索引哪些情况会失效，索引不适合哪些场景，索引规则&lt;/p&gt;
&lt;h3 id=&quot;索引哪些情况会失效&quot;&gt;&lt;a href=&quot;#索引哪些情况会失效&quot; class=&quot;headerlink&quot; title=&quot;索引哪些情况会失效&quot;&gt;&lt;/a&gt;索引哪些情况会失效&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;查询条件包含or，可能导致索引失效&lt;/li&gt;
&lt;li&gt;如何字段类型是字符串，where时一定用引号括起来，否则索引失效&lt;/li&gt;
&lt;li&gt;like通配符可能导致索引失效。&lt;/li&gt;
&lt;li&gt;联合索引，查询时的条件列不是联合索引中的第一个列，索引失效。&lt;/li&gt;
&lt;li&gt;在索引列上使用mysql的内置函数，索引失效。&lt;/li&gt;
&lt;li&gt;对索引列运算（如，+、-、*、&amp;#x2F;），索引失效。&lt;/li&gt;
&lt;li&gt;索引字段上使用（！&amp;#x3D; 或者 &amp;lt; &amp;gt;，not in）时，可能会导致索引失效。&lt;/li&gt;
&lt;li&gt;索引字段上使用is null， is not null，可能导致索引失效。&lt;/li&gt;
&lt;li&gt;左连接查询或者右连接查询查询关联的字段编码格式不一样，可能导致索引失效。&lt;/li&gt;
&lt;li&gt;mysql估计使用全表扫描要比使用索引快,则不使用索引。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;索引不适合哪些场景&quot;&gt;&lt;a href=&quot;#索引不适合哪些场景&quot; class=&quot;headerlink&quot; title=&quot;索引不适合哪些场景&quot;&gt;&lt;/a&gt;索引不适合哪些场景&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;数据量少的不适合加索引&lt;/li&gt;
&lt;li&gt;更新比较频繁的也不适合加索引&lt;/li&gt;
&lt;li&gt;区分度低的字段不适合加索引（如性别）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;索引的一些潜规则&quot;&gt;&lt;a href=&quot;#索引的一些潜规则&quot; class=&quot;headerlink&quot; title=&quot;索引的一些潜规则&quot;&gt;&lt;/a&gt;索引的一些潜规则&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;覆盖索引&lt;/li&gt;
&lt;li&gt;回表&lt;/li&gt;
&lt;li&gt;索引数据结构（B+树）&lt;/li&gt;
&lt;li&gt;最左前缀原则&lt;/li&gt;
&lt;li&gt;索引下推&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;2-MySQL-遇到过死锁问题吗，你是如何解决的？&quot;&gt;&lt;a href=&quot;#2-MySQL-遇到过死锁问题吗，你是如何解决的？&quot; class=&quot;headerlink&quot; title=&quot;2. MySQL 遇到过死锁问题吗，你是如何解决的？&quot;&gt;&lt;/a&gt;2. MySQL 遇到过死锁问题吗，你是如何解决的？&lt;/h2&gt;&lt;p&gt;我排查死锁的一般步骤是酱紫的：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;查看死锁日志show engine innodb status;&lt;/li&gt;
&lt;li&gt;找出死锁Sql&lt;/li&gt;
&lt;li&gt;分析sql加锁情况&lt;/li&gt;
&lt;li&gt;模拟死锁案发&lt;/li&gt;
&lt;li&gt;分析死锁日志&lt;/li&gt;
&lt;li&gt;分析死锁结果&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;3-日常工作中你是怎么优化SQL的？&quot;&gt;&lt;a href=&quot;#3-日常工作中你是怎么优化SQL的？&quot; class=&quot;headerlink&quot; title=&quot;3. 日常工作中你是怎么优化SQL的？&quot;&gt;&lt;/a&gt;3. 日常工作中你是怎么优化SQL的？&lt;/h2&gt;&lt;p&gt;可以从这几个维度回答这个问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;加索引&lt;/li&gt;
&lt;li&gt;避免返回不必要的数据&lt;/li&gt;
&lt;li&gt;适当分批量进行&lt;/li&gt;
&lt;li&gt;优化sql结构&lt;/li&gt;
&lt;li&gt;分库分表&lt;/li&gt;
&lt;li&gt;读写分离&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;4-说说分库与分表的设计&quot;&gt;&lt;a href=&quot;#4-说说分库与分表的设计&quot; class=&quot;headerlink&quot; title=&quot;4. 说说分库与分表的设计&quot;&gt;&lt;/a&gt;4. 说说分库与分表的设计&lt;/h2&gt;&lt;p&gt;分库分表方案，分库分表中间件，分库分表可能遇到的问题&lt;/p&gt;
&lt;h3 id=&quot;分库分表方案&quot;&gt;&lt;a href=&quot;#分库分表方案&quot; class=&quot;headerlink&quot; title=&quot;分库分表方案:&quot;&gt;&lt;/a&gt;分库分表方案:&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;水平分库：以字段为依据，按照一定策略（hash、range等），将一个库中的数据拆分到多个库中。&lt;/li&gt;
&lt;li&gt;水平分表：以字段为依据，按照一定策略（hash、range等），将一个表中的数据拆分到多个表中。&lt;/li&gt;
&lt;li&gt;垂直分库：以表为依据，按照业务归属不同，将不同的表拆分到不同的库中。&lt;/li&gt;
&lt;li&gt;垂直分表：以字段为依据，按照字段的活跃性，将表中字段拆到不同的表（主表和扩展表）中。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;常用的分库分表中间件：&quot;&gt;&lt;a href=&quot;#常用的分库分表中间件：&quot; class=&quot;headerlink&quot; title=&quot;常用的分库分表中间件：&quot;&gt;&lt;/a&gt;常用的分库分表中间件：&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;sharding-jdbc（当当）&lt;/li&gt;
&lt;li&gt;Mycat&lt;/li&gt;
&lt;li&gt;TDDL（淘宝）&lt;/li&gt;
&lt;li&gt;Oceanus(58同城数据库中间件)&lt;/li&gt;
&lt;li&gt;vitess（谷歌开发的数据库中间件）&lt;/li&gt;
&lt;li&gt;Atlas(Qihoo 360)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;分库分表可能遇到的问题&quot;&gt;&lt;a href=&quot;#分库分表可能遇到的问题&quot; class=&quot;headerlink&quot; title=&quot;分库分表可能遇到的问题&quot;&gt;&lt;/a&gt;分库分表可能遇到的问题&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;事务问题：需要用分布式事务啦&lt;/li&gt;
&lt;li&gt;跨节点Join的问题：解决这一问题可以分两次查询实现&lt;/li&gt;
&lt;li&gt;跨节点的count,order by,group by以及聚合函数问题：分别在各个节点上得到结果后在应用程序端进行合并。&lt;/li&gt;
&lt;li&gt;数据迁移，容量规划，扩容等问题&lt;/li&gt;
&lt;li&gt;ID问题：数据库被切分后，不能再依赖数据库自身的主键生成机制啦，最简单可以考虑UUID&lt;/li&gt;
&lt;li&gt;跨分片的排序分页问题（后台加大pagesize处理？）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;5-InnoDB与MyISAM的区别&quot;&gt;&lt;a href=&quot;#5-InnoDB与MyISAM的区别&quot; class=&quot;headerlink&quot; title=&quot;5. InnoDB与MyISAM的区别&quot;&gt;&lt;/a&gt;5. InnoDB与MyISAM的区别&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;InnoDB支持事务，MyISAM不支持事务&lt;/li&gt;
&lt;li&gt;InnoDB支持外键，MyISAM不支持外键&lt;/li&gt;
&lt;li&gt;InnoDB 支持 MVCC(多版本并发控制)，MyISAM 不支持&lt;/li&gt;
&lt;li&gt;&lt;code&gt;select count(*) from table&lt;/code&gt;时，MyISAM更快，因为它有一个变量保存了整个表的总行数，可以直接读取，InnoDB就需要全表扫描。&lt;/li&gt;
&lt;li&gt;Innodb不支持全文索引，而MyISAM支持全文索引（5.7以后的InnoDB也支持全文索引）&lt;/li&gt;
&lt;li&gt;InnoDB支持表、行级锁，而MyISAM支持表级锁。&lt;/li&gt;
&lt;li&gt;InnoDB表必须有主键，而MyISAM可以没有主键&lt;/li&gt;
&lt;li&gt;Innodb表需要更多的内存和存储，而MyISAM可被压缩，存储空间较小，。&lt;/li&gt;
&lt;li&gt;Innodb按主键大小有序插入，MyISAM记录插入顺序是，按记录插入顺序保存。&lt;/li&gt;
&lt;li&gt;InnoDB 存储引擎提供了具有提交、回滚、崩溃恢复能力的事务安全，与 MyISAM 比 InnoDB 写的效率差一些，并且会占用更多的磁盘空间以保留数据和索引&lt;/li&gt;
&lt;li&gt;InnoDB 属于索引组织表，使用共享表空间和多表空间储存数据。MyISAM用&lt;code&gt;.frm&lt;/code&gt;、&lt;code&gt;.MYD&lt;/code&gt;、&lt;code&gt;.MTI&lt;/code&gt;来储存表定义，数据和索引。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;6-数据库索引的原理，为什么要用-B-树，为什么不用二叉树？&quot;&gt;&lt;a href=&quot;#6-数据库索引的原理，为什么要用-B-树，为什么不用二叉树？&quot; class=&quot;headerlink&quot; title=&quot;6. 数据库索引的原理，为什么要用 B+树，为什么不用二叉树？&quot;&gt;&lt;/a&gt;6. 数据库索引的原理，为什么要用 B+树，为什么不用二叉树？&lt;/h2&gt;&lt;p&gt;可以从几个维度去看这个问题，查询是否够快，效率是否稳定，存储数据多少，以及查找磁盘次数，为什么不是二叉树，为什么不是平衡二叉树，为什么不是B树，而偏偏是B+树呢？&lt;/p&gt;
&lt;h3 id=&quot;为什么不是一般二叉树？&quot;&gt;&lt;a href=&quot;#为什么不是一般二叉树？&quot; class=&quot;headerlink&quot; title=&quot;为什么不是一般二叉树？&quot;&gt;&lt;/a&gt;为什么不是一般二叉树？&lt;/h3&gt;&lt;p&gt;如果二叉树特殊化为一个链表，相当于全表扫描。平衡二叉树相比于二叉查找树来说，查找效率更稳定，总体的查找速度也更快。&lt;/p&gt;
&lt;h3 id=&quot;为什么不是平衡二叉树呢？&quot;&gt;&lt;a href=&quot;#为什么不是平衡二叉树呢？&quot; class=&quot;headerlink&quot; title=&quot;为什么不是平衡二叉树呢？&quot;&gt;&lt;/a&gt;为什么不是平衡二叉树呢？&lt;/h3&gt;&lt;p&gt;我们知道，在内存比在磁盘的数据，查询效率快得多。如果树这种数据结构作为索引，那我们每查找一次数据就需要从磁盘中读取一个节点，也就是我们说的一个磁盘块，但是平衡二叉树可是每个节点只存储一个键值和数据的，如果是B树，可以存储更多的节点数据，树的高度也会降低，因此读取磁盘的次数就降下来啦，查询效率就快啦。&lt;/p&gt;
&lt;h3 id=&quot;那为什么不是B树而是B-树呢？&quot;&gt;&lt;a href=&quot;#那为什么不是B树而是B-树呢？&quot; class=&quot;headerlink&quot; title=&quot;那为什么不是B树而是B+树呢？&quot;&gt;&lt;/a&gt;那为什么不是B树而是B+树呢？&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;1）B+树非叶子节点上是不存储数据的，仅存储键值，而B树节点中不仅存储键值，也会存储数据。innodb中页的默认大小是16KB，如果不存储数据，那么就会存储更多的键值，相应的树的阶数（节点的子节点树）就会更大，树就会更矮更胖，如此一来我们查找数据进行磁盘的IO次数有会再次减少，数据查询的效率也会更快。&lt;/li&gt;
&lt;li&gt;2）B+树索引的所有数据均存储在叶子节点，而且数据是按照顺序排列的，链表连着的。那么B+树使得范围查找，排序查找，分组查找以及去重查找变得异常简单。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;7-聚集索引与非聚集索引的区别&quot;&gt;&lt;a href=&quot;#7-聚集索引与非聚集索引的区别&quot; class=&quot;headerlink&quot; title=&quot;7. 聚集索引与非聚集索引的区别&quot;&gt;&lt;/a&gt;7. 聚集索引与非聚集索引的区别&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;一个表中只能拥有一个聚集索引，而非聚集索引一个表可以存在多个。&lt;/li&gt;
&lt;li&gt;聚集索引，索引中键值的逻辑顺序决定了表中相应行的物理顺序；非聚集索引，索引中索引的逻辑顺序与磁盘上行的物理存储顺序不同。&lt;/li&gt;
&lt;li&gt;索引是通过二叉树的数据结构来描述的，我们可以这么理解聚簇索引：索引的叶节点就是数据节点。而非聚簇索引的叶节点仍然是索引节点，只不过有一个指针指向对应的数据块。&lt;/li&gt;
&lt;li&gt;聚集索引：物理存储按照索引排序；非聚集索引：物理存储不按照索引排序；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;何时使用聚集索引或非聚集索引？&lt;/p&gt;
&lt;h2 id=&quot;8-limit-1000000-加载很慢的话，你是怎么解决的呢？&quot;&gt;&lt;a href=&quot;#8-limit-1000000-加载很慢的话，你是怎么解决的呢？&quot; class=&quot;headerlink&quot; title=&quot;8. limit 1000000 加载很慢的话，你是怎么解决的呢？&quot;&gt;&lt;/a&gt;8. limit 1000000 加载很慢的话，你是怎么解决的呢？&lt;/h2&gt;&lt;p&gt;方案一：如果id是连续的，可以这样，返回上次查询的最大记录(偏移量)，再往下limit&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;select&lt;/span&gt; id，name &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; employee &lt;span class=&quot;keyword&quot;&gt;where&lt;/span&gt; id&lt;span class=&quot;operator&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;1000000&lt;/span&gt; limit &lt;span class=&quot;number&quot;&gt;10.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;方案二：在业务允许的情况下限制页数：&lt;/p&gt;
&lt;p&gt;建议跟业务讨论，有没有必要查这么后的分页啦。因为绝大多数用户都不会往后翻太多页。&lt;/p&gt;
&lt;p&gt;方案三：order by + 索引（id为索引）&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;select&lt;/span&gt; id，name &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; employee &lt;span class=&quot;keyword&quot;&gt;order&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;by&lt;/span&gt; id  limit &lt;span class=&quot;number&quot;&gt;1000000&lt;/span&gt;，&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;SELECT&lt;/span&gt; a.&lt;span class=&quot;operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;FROM&lt;/span&gt; employee a, (&lt;span class=&quot;keyword&quot;&gt;select&lt;/span&gt; id &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; employee &lt;span class=&quot;keyword&quot;&gt;where&lt;/span&gt; 条件 LIMIT &lt;span class=&quot;number&quot;&gt;1000000&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt; ) b &lt;span class=&quot;keyword&quot;&gt;where&lt;/span&gt; a.id&lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt;b.id&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;方案四：利用延迟关联或者子查询优化超多分页场景。（先快速定位需要获取的id段，然后再关联）&lt;/p&gt;
&lt;h2 id=&quot;9-如何选择合适的分布式主键方案呢？&quot;&gt;&lt;a href=&quot;#9-如何选择合适的分布式主键方案呢？&quot; class=&quot;headerlink&quot; title=&quot;9. 如何选择合适的分布式主键方案呢？&quot;&gt;&lt;/a&gt;9. 如何选择合适的分布式主键方案呢？&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;数据库自增长序列或字段。&lt;/li&gt;
&lt;li&gt;UUID。&lt;/li&gt;
&lt;li&gt;Redis生成ID&lt;/li&gt;
&lt;li&gt;Twitter的snowflake算法&lt;/li&gt;
&lt;li&gt;利用zookeeper生成唯一ID&lt;/li&gt;
&lt;li&gt;MongoDB的ObjectId&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;10-事务的隔离级别有哪些？MySQL的默认隔离级别是什么？&quot;&gt;&lt;a href=&quot;#10-事务的隔离级别有哪些？MySQL的默认隔离级别是什么？&quot; class=&quot;headerlink&quot; title=&quot;10. 事务的隔离级别有哪些？MySQL的默认隔离级别是什么？&quot;&gt;&lt;/a&gt;10. 事务的隔离级别有哪些？MySQL的默认隔离级别是什么？&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;读未提交（Read Uncommitted）&lt;/li&gt;
&lt;li&gt;读已提交（Read Committed）&lt;/li&gt;
&lt;li&gt;可重复读（Repeatable Read）&lt;/li&gt;
&lt;li&gt;串行化（Serializable）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Mysql默认的事务隔离级别是可重复读(Repeatable Read)&lt;/p&gt;
&lt;h2 id=&quot;11-什么是幻读，脏读，不可重复读呢？&quot;&gt;&lt;a href=&quot;#11-什么是幻读，脏读，不可重复读呢？&quot; class=&quot;headerlink&quot; title=&quot;11. 什么是幻读，脏读，不可重复读呢？&quot;&gt;&lt;/a&gt;11. 什么是幻读，脏读，不可重复读呢？&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;事务A、B交替执行，事务A被事务B干扰到了，因为事务A读取到事务B未提交的数据,这就是脏读&lt;/li&gt;
&lt;li&gt;在一个事务范围内，两个相同的查询，读取同一条记录，却返回了不同的数据，这就是不可重复读。&lt;/li&gt;
&lt;li&gt;事务A查询一个范围的结果集，另一个并发事务B往这个范围中插入&amp;#x2F;删除了数据，并静悄悄地提交，然后事务A再次查询相同的范围，两次读取得到的结果集不一样了，这就是幻读。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;12-在高并发情况下，如何做到安全的修改同一行数据？&quot;&gt;&lt;a href=&quot;#12-在高并发情况下，如何做到安全的修改同一行数据？&quot; class=&quot;headerlink&quot; title=&quot;12. 在高并发情况下，如何做到安全的修改同一行数据？&quot;&gt;&lt;/a&gt;12. 在高并发情况下，如何做到安全的修改同一行数据？&lt;/h2&gt;&lt;p&gt;要安全的修改同一行数据，就要保证一个线程在修改时其它线程无法更新这行记录。一般有悲观锁和乐观锁两种方案~&lt;/p&gt;
&lt;h3 id=&quot;使用悲观锁&quot;&gt;&lt;a href=&quot;#使用悲观锁&quot; class=&quot;headerlink&quot; title=&quot;使用悲观锁&quot;&gt;&lt;/a&gt;使用悲观锁&lt;/h3&gt;&lt;p&gt;悲观锁思想就是，当前线程要进来修改数据时，别的线程都得拒之门外~&lt;br&gt;比如，可以使用select…for update ~&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;where&lt;/span&gt; name&lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt;‘jay’ &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;update&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;以上这条sql语句会锁定了User表中所有符合检索条件（name&amp;#x3D;‘jay’）的记录。本次事务提交之前，别的线程都无法修改这些记录。&lt;/p&gt;
&lt;h3 id=&quot;使用乐观锁&quot;&gt;&lt;a href=&quot;#使用乐观锁&quot; class=&quot;headerlink&quot; title=&quot;使用乐观锁&quot;&gt;&lt;/a&gt;使用乐观锁&lt;/h3&gt;&lt;p&gt;乐观锁思想就是，有线程过来，先放过去修改，如果看到别的线程没修改过，就可以修改成功，如果别的线程修改过，就修改失败或者重试。实现方式：乐观锁一般会使用版本号机制或CAS算法实现。&lt;/p&gt;
&lt;h2 id=&quot;13-数据库的乐观锁和悲观锁。&quot;&gt;&lt;a href=&quot;#13-数据库的乐观锁和悲观锁。&quot; class=&quot;headerlink&quot; title=&quot;13. 数据库的乐观锁和悲观锁。&quot;&gt;&lt;/a&gt;13. 数据库的乐观锁和悲观锁。&lt;/h2&gt;&lt;h3 id=&quot;悲观锁：&quot;&gt;&lt;a href=&quot;#悲观锁：&quot; class=&quot;headerlink&quot; title=&quot;悲观锁：&quot;&gt;&lt;/a&gt;悲观锁：&lt;/h3&gt;&lt;p&gt;悲观锁她专一且缺乏安全感了，她的心只属于当前事务，每时每刻都担心着它心爱的数据可能被别的事务修改，所以一个事务拥有（获得）悲观锁后，其他任何事务都不能对数据进行修改啦，只能等待锁被释放才可以执行。&lt;/p&gt;
&lt;h3 id=&quot;乐观锁：&quot;&gt;&lt;a href=&quot;#乐观锁：&quot; class=&quot;headerlink&quot; title=&quot;乐观锁：&quot;&gt;&lt;/a&gt;乐观锁：&lt;/h3&gt;&lt;p&gt;乐观锁的“乐观情绪”体现在，它认为数据的变动不会太频繁。因此，它允许多个事务同时对数据进行变动。实现方式：乐观锁一般会使用版本号机制或CAS算法实现。&lt;/p&gt;
&lt;h2 id=&quot;14-SQL优化的一般步骤是什么，怎么看执行计划（explain），如何理解其中各个字段的含义。&quot;&gt;&lt;a href=&quot;#14-SQL优化的一般步骤是什么，怎么看执行计划（explain），如何理解其中各个字段的含义。&quot; class=&quot;headerlink&quot; title=&quot;14. SQL优化的一般步骤是什么，怎么看执行计划（explain），如何理解其中各个字段的含义。&quot;&gt;&lt;/a&gt;14. SQL优化的一般步骤是什么，怎么看执行计划（explain），如何理解其中各个字段的含义。&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;show status&lt;/code&gt; 命令了解各种 sql 的执行频率&lt;/li&gt;
&lt;li&gt;通过慢查询日志定位那些执行效率较低的 sql 语句&lt;/li&gt;
&lt;li&gt;&lt;code&gt;explain&lt;/code&gt; 分析低效 sql 的执行计划（这点非常重要，日常开发中用它分析Sql，会大大降低Sql导致的线上事故）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;15-select-for-update有什么含义，会锁表还是锁行还是其他。&quot;&gt;&lt;a href=&quot;#15-select-for-update有什么含义，会锁表还是锁行还是其他。&quot; class=&quot;headerlink&quot; title=&quot;15. select for update有什么含义，会锁表还是锁行还是其他。&quot;&gt;&lt;/a&gt;15. select for update有什么含义，会锁表还是锁行还是其他。&lt;/h2&gt;&lt;h3 id=&quot;select-for-update-含义&quot;&gt;&lt;a href=&quot;#select-for-update-含义&quot; class=&quot;headerlink&quot; title=&quot;select for update 含义&quot;&gt;&lt;/a&gt;select for update 含义&lt;/h3&gt;&lt;p&gt;select查询语句是不会加锁的，但是select for update除了有查询的作用外，还会加锁呢，而且它是悲观锁哦。至于加了是行锁还是表锁，这就要看是不是用了索引&amp;#x2F;主键啦。&lt;br&gt;没用索引&amp;#x2F;主键的话就是表锁，否则就是是行锁。&lt;/p&gt;
&lt;h2 id=&quot;16-MySQL事务得四大特性以及实现原理&quot;&gt;&lt;a href=&quot;#16-MySQL事务得四大特性以及实现原理&quot; class=&quot;headerlink&quot; title=&quot;16. MySQL事务得四大特性以及实现原理&quot;&gt;&lt;/a&gt;16. MySQL事务得四大特性以及实现原理&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;原子性： 事务作为一个整体被执行，包含在其中的对数据库的操作要么全部被执行，要么都不执行。&lt;/li&gt;
&lt;li&gt;一致性： 指在事务开始之前和事务结束以后，数据不会被破坏，假如A账户给B账户转10块钱，不管成功与否，A和B的总金额是不变的。&lt;/li&gt;
&lt;li&gt;隔离性： 多个事务并发访问时，事务之间是相互隔离的，即一个事务不影响其它事务运行效果。简言之，就是事务之间是进水不犯河水的。&lt;/li&gt;
&lt;li&gt;持久性： 表示事务完成以后，该事务对数据库所作的操作更改，将持久地保存在数据库之中。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;事务ACID特性的实现思想&quot;&gt;&lt;a href=&quot;#事务ACID特性的实现思想&quot; class=&quot;headerlink&quot; title=&quot;事务ACID特性的实现思想&quot;&gt;&lt;/a&gt;事务ACID特性的实现思想&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;原子性：是使用 undo log来实现的，如果事务执行过程中出错或者用户执行了rollback，系统通过undo log日志返回事务开始的状态。&lt;/li&gt;
&lt;li&gt;持久性：使用 redo log来实现，只要redo log日志持久化了，当系统崩溃，即可通过redo log把数据恢复。&lt;/li&gt;
&lt;li&gt;隔离性：通过锁以及MVCC,使事务相互隔离开。&lt;/li&gt;
&lt;li&gt;一致性：通过回滚、恢复，以及并发情况下的隔离性，从而实现一致性。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;17-如果某个表有近千万数据，CRUD比较慢，如何优化。&quot;&gt;&lt;a href=&quot;#17-如果某个表有近千万数据，CRUD比较慢，如何优化。&quot; class=&quot;headerlink&quot; title=&quot;17. 如果某个表有近千万数据，CRUD比较慢，如何优化。&quot;&gt;&lt;/a&gt;17. 如果某个表有近千万数据，CRUD比较慢，如何优化。&lt;/h2&gt;&lt;h3 id=&quot;什么时候进行分库&quot;&gt;&lt;a href=&quot;#什么时候进行分库&quot; class=&quot;headerlink&quot; title=&quot;什么时候进行分库&quot;&gt;&lt;/a&gt;什么时候进行分库&lt;/h3&gt;&lt;p&gt;MySQL 的高可用架构大多都是一主多从，所有写入操作都发生在 Master 上，随着业务的增长，数据量的增加，很多接口响应时间变得很长，经常出现 Timeout，而且通过升级 MySQL 实例配置已经无法解决问题了，这时候就要分库。&lt;/p&gt;
&lt;h3 id=&quot;什么时候进行分表&quot;&gt;&lt;a href=&quot;#什么时候进行分表&quot; class=&quot;headerlink&quot; title=&quot;什么时候进行分表&quot;&gt;&lt;/a&gt;什么时候进行分表&lt;/h3&gt;&lt;p&gt;分表的应用场景是&lt;strong&gt;单表&lt;/strong&gt;数据量增长速度过快，影响了业务接口的响应时间，但是 MySQL 实例的负载并不高，这时候只需要分表，不需要分库（拆分实例）。&lt;/p&gt;
&lt;h3 id=&quot;分库分表&quot;&gt;&lt;a href=&quot;#分库分表&quot; class=&quot;headerlink&quot; title=&quot;分库分表&quot;&gt;&lt;/a&gt;分库分表&lt;/h3&gt;&lt;p&gt;某个表有近千万数据，可以考虑优化表结构，分表（水平分表，垂直分表），当然，你这样回答，需要准备好面试官问你的分库分表相关问题呀，如&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;分表方案（水平分表 &amp;#x3D; 拆字段 &amp;#x3D; 需要注意拆分后 join 的问题 &amp;#x3D; 冗余关键字段，垂直分表 &amp;#x3D; 按时间切分 or 按照 uid 切分 &amp;#x3D; 规则 hash &amp;#x2F; mod 等）&lt;/li&gt;
&lt;li&gt;分库分表中间件（Mycat，sharding-jdbc等）&lt;/li&gt;
&lt;li&gt;分库分表一些问题（事务问题？跨节点Join的问题）&lt;/li&gt;
&lt;li&gt;解决方案（分布式事务等）or 分布式数据库 &amp;#x3D;  tidb&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;索引优化&quot;&gt;&lt;a href=&quot;#索引优化&quot; class=&quot;headerlink&quot; title=&quot;索引优化&quot;&gt;&lt;/a&gt;索引优化&lt;/h3&gt;&lt;p&gt;除了分库分表，优化表结构，当然还有所以索引优化等方案~&lt;/p&gt;
&lt;h2 id=&quot;18-如何写sql能够有效的使用到复合索引。&quot;&gt;&lt;a href=&quot;#18-如何写sql能够有效的使用到复合索引。&quot; class=&quot;headerlink&quot; title=&quot;18. 如何写sql能够有效的使用到复合索引。&quot;&gt;&lt;/a&gt;18. 如何写sql能够有效的使用到复合索引。&lt;/h2&gt;&lt;p&gt;复合索引，也叫组合索引，用户可以在多个列上建立索引,这种索引叫做复合索引。&lt;/p&gt;
&lt;p&gt;当我们创建一个组合索引的时候，如(k1,k2,k3)，相当于创建了（k1）、(k1,k2)和(k1,k2,k3)三个索引，这就是最左匹配原则。&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;table&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;where&lt;/span&gt; k1&lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt;A &lt;span class=&quot;keyword&quot;&gt;AND&lt;/span&gt; k2&lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt;B &lt;span class=&quot;keyword&quot;&gt;AND&lt;/span&gt; k3&lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt;D &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;有关于复合索引，我们需要关注查询Sql条件的顺序，确保最左匹配原则有效，同时可以删除不必要的冗余索引。&lt;/p&gt;
&lt;h2 id=&quot;19-mysql中in-和exists的区别。&quot;&gt;&lt;a href=&quot;#19-mysql中in-和exists的区别。&quot; class=&quot;headerlink&quot; title=&quot;19. mysql中in 和exists的区别。&quot;&gt;&lt;/a&gt;19. mysql中in 和exists的区别。&lt;/h2&gt;&lt;p&gt;这个，跟一下demo来看更刺激吧，啊哈哈&lt;/p&gt;
&lt;p&gt;假设表A表示某企业的员工表，表B表示部门表，查询所有部门的所有员工，很容易有以下SQL:&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; A &lt;span class=&quot;keyword&quot;&gt;where&lt;/span&gt; deptId &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;select&lt;/span&gt; deptId &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; B);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;这样写等价于：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;先查询部门表B&lt;br&gt;select deptId from B&lt;br&gt;再由部门deptId，查询A的员工&lt;br&gt;select * from A where A.deptId &amp;#x3D; B.deptId&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;可以抽象成这样的一个循环：&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;List&lt;span class=&quot;operator&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt; resultSet ;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; i&lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;i&lt;span class=&quot;operator&quot;&gt;&amp;lt;&lt;/span&gt;B.length;i&lt;span class=&quot;operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;+&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; j&lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;j&lt;span class=&quot;operator&quot;&gt;&amp;lt;&lt;/span&gt;A.length;j&lt;span class=&quot;operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;+&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       if(A[i].id&lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt;B[j].id) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          resultSet.add(A[i]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          break;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;显然，除了使用in，我们也可以用exists实现一样的查询功能，如下：&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; A &lt;span class=&quot;keyword&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;exists&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; B &lt;span class=&quot;keyword&quot;&gt;where&lt;/span&gt; A.deptId &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; B.deptId); &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;因为exists查询的理解就是，先执行主查询，获得数据后，再放到子查询中做条件验证，根据验证结果（true或者false），来决定主查询的数据结果是否得意保留。&lt;/p&gt;
&lt;p&gt;那么，这样写就等价于：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;select * from A,先从A表做循环&lt;br&gt;select * from B where A.deptId &amp;#x3D; B.deptId,再从B表做循环.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;同理，可以抽象成这样一个循环：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;List&amp;lt;&amp;gt; resultSet ;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; i=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;i&amp;lt;A.length;i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; j=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;j&amp;lt;B.length;j++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(A[i].deptId==B[j].deptId) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            resultSet.add(A[i]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;数据库最费劲的就是跟程序链接释放。假设链接了两次，每次做上百万次的数据集查询，查完就走，这样就只做了两次；相反建立了上百万次链接，申请链接释放反复重复，这样系统就受不了了。即mysql优化原则，就是小表驱动大表，小的数据集驱动大的数据集，从而让性能更优。&lt;br&gt;因此，我们要选择最外层循环小的，也就是，如果B的数据量小于A，适合使用in，如果B的数据量大于A，即适合选择exists，这就是in和exists的区别。&lt;/p&gt;
&lt;h2 id=&quot;20-数据库自增主键可能遇到什么问题。&quot;&gt;&lt;a href=&quot;#20-数据库自增主键可能遇到什么问题。&quot; class=&quot;headerlink&quot; title=&quot;20. 数据库自增主键可能遇到什么问题。&quot;&gt;&lt;/a&gt;20. 数据库自增主键可能遇到什么问题。&lt;/h2&gt;&lt;p&gt;使用自增主键对数据库做分库分表，可能出现诸如主键重复等的问题。解决方案的话，简单点的话可以考虑使用UUID哈&lt;br&gt;自增主键会产生表锁，从而引发问题&lt;br&gt;自增主键可能用完问题。&lt;/p&gt;
&lt;h2 id=&quot;21-MVCC熟悉吗，它的底层原理？&quot;&gt;&lt;a href=&quot;#21-MVCC熟悉吗，它的底层原理？&quot; class=&quot;headerlink&quot; title=&quot;21. MVCC熟悉吗，它的底层原理？&quot;&gt;&lt;/a&gt;21. MVCC熟悉吗，它的底层原理？&lt;/h2&gt;&lt;p&gt;MVCC,多版本并发控制,它是通过读取历史版本的数据，来降低并发事务冲突，从而提高并发性能的一种机制。&lt;/p&gt;
&lt;h3 id=&quot;MVCC需要关注这几个知识点：&quot;&gt;&lt;a href=&quot;#MVCC需要关注这几个知识点：&quot; class=&quot;headerlink&quot; title=&quot;MVCC需要关注这几个知识点：&quot;&gt;&lt;/a&gt;MVCC需要关注这几个知识点：&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;事务版本号&lt;/li&gt;
&lt;li&gt;表的隐藏列&lt;/li&gt;
&lt;li&gt;undo log&lt;/li&gt;
&lt;li&gt;read view&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;22-数据库中间件了解过吗，sharding-jdbc，mycat？&quot;&gt;&lt;a href=&quot;#22-数据库中间件了解过吗，sharding-jdbc，mycat？&quot; class=&quot;headerlink&quot; title=&quot;22. 数据库中间件了解过吗，sharding jdbc，mycat？&quot;&gt;&lt;/a&gt;22. 数据库中间件了解过吗，sharding jdbc，mycat？&lt;/h2&gt;&lt;p&gt;sharding-jdbc目前是基于jdbc驱动，无需额外的proxy，因此也无需关注proxy本身的高可用。&lt;br&gt;Mycat 是基于 Proxy，它复写了 MySQL 协议，将 Mycat Server 伪装成一个 MySQL 数据库，而 Sharding-JDBC 是基于 JDBC 接口的扩展，是以 jar 包的形式提供轻量级服务的。&lt;/p&gt;
&lt;h2 id=&quot;23-MYSQL的主从延迟，你怎么解决？&quot;&gt;&lt;a href=&quot;#23-MYSQL的主从延迟，你怎么解决？&quot; class=&quot;headerlink&quot; title=&quot;23. MYSQL的主从延迟，你怎么解决？&quot;&gt;&lt;/a&gt;23. MYSQL的主从延迟，你怎么解决？&lt;/h2&gt;&lt;p&gt;嘻嘻，先复习一下主从复制原理吧，如图：&lt;br&gt;主从复制分了五个步骤进行：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;步骤一：主库的更新事件(update、insert、delete)被写到binlog&lt;/li&gt;
&lt;li&gt;步骤二：从库发起连接，连接到主库。&lt;/li&gt;
&lt;li&gt;步骤三：此时主库创建一个binlog dump thread，把binlog的内容发送到从库。&lt;/li&gt;
&lt;li&gt;步骤四：从库启动之后，创建一个I&amp;#x2F;O线程，读取主库传过来的binlog内容并写入到relay log&lt;/li&gt;
&lt;li&gt;步骤五：还会创建一个SQL线程，从relay log里面读取内容，从Exec_Master_Log_Pos位置开始执行读取到的更新事件，将更新内容写入到slave的db&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;主从同步延迟的原因&quot;&gt;&lt;a href=&quot;#主从同步延迟的原因&quot; class=&quot;headerlink&quot; title=&quot;主从同步延迟的原因&quot;&gt;&lt;/a&gt;主从同步延迟的原因&lt;/h3&gt;&lt;p&gt;一个服务器开放Ｎ个链接给客户端来连接的，这样有会有大并发的更新操作, 但是从服务器的里面读取binlog的线程仅有一个，当某个SQL在从服务器上执行的时间稍长 或者由于某个SQL要进行锁表就会导致，主服务器的SQL大量积压，未被同步到从服务器里。这就导致了主从不一致， 也就是主从延迟。&lt;/p&gt;
&lt;h3 id=&quot;主从同步延迟的解决办法&quot;&gt;&lt;a href=&quot;#主从同步延迟的解决办法&quot; class=&quot;headerlink&quot; title=&quot;主从同步延迟的解决办法&quot;&gt;&lt;/a&gt;主从同步延迟的解决办法&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;主服务器要负责更新操作，对安全性的要求比从服务器要高，所以有些设置参数可以修改，比如sync_binlog&amp;#x3D;1，innodb_flush_log_at_trx_commit &amp;#x3D; 1 之类的设置等。&lt;/li&gt;
&lt;li&gt;选择更好的硬件设备作为slave。&lt;/li&gt;
&lt;li&gt;把一台从服务器当度作为备份使用， 而不提供查询， 那边他的负载下来了， 执行relay log 里面的SQL效率自然就高了。&lt;/li&gt;
&lt;li&gt;增加从服务器喽，这个目的还是分散读的压力，从而降低服务器负载。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;24-说一下大表查询的优化方案&quot;&gt;&lt;a href=&quot;#24-说一下大表查询的优化方案&quot; class=&quot;headerlink&quot; title=&quot;24. 说一下大表查询的优化方案&quot;&gt;&lt;/a&gt;24. 说一下大表查询的优化方案&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;优化shema、sql语句+索引；&lt;/li&gt;
&lt;li&gt;可以考虑加缓存，memcached, redis，或者JVM本地缓存；&lt;/li&gt;
&lt;li&gt;主从复制，读写分离；&lt;/li&gt;
&lt;li&gt;分库分表；&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;25-什么是数据库连接池-为什么需要数据库连接池呢&quot;&gt;&lt;a href=&quot;#25-什么是数据库连接池-为什么需要数据库连接池呢&quot; class=&quot;headerlink&quot; title=&quot;25. 什么是数据库连接池?为什么需要数据库连接池呢?&quot;&gt;&lt;/a&gt;25. 什么是数据库连接池?为什么需要数据库连接池呢?&lt;/h2&gt;&lt;h3 id=&quot;连接池基本原理：&quot;&gt;&lt;a href=&quot;#连接池基本原理：&quot; class=&quot;headerlink&quot; title=&quot;连接池基本原理：&quot;&gt;&lt;/a&gt;连接池基本原理：&lt;/h3&gt;&lt;p&gt;数据库连接池原理：在内部对象池中，维护一定数量的数据库连接，并对外暴露数据库连接的获取和返回方法。&lt;/p&gt;
&lt;h3 id=&quot;应用程序和数据库建立连接的过程：&quot;&gt;&lt;a href=&quot;#应用程序和数据库建立连接的过程：&quot; class=&quot;headerlink&quot; title=&quot;应用程序和数据库建立连接的过程：&quot;&gt;&lt;/a&gt;应用程序和数据库建立连接的过程：&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;通过TCP协议的三次握手和数据库服务器建立连接&lt;/li&gt;
&lt;li&gt;发送数据库用户账号密码，等待数据库验证用户身份&lt;/li&gt;
&lt;li&gt;完成身份验证后，系统可以提交SQL语句到数据库执行&lt;/li&gt;
&lt;li&gt;把连接关闭，TCP四次挥手告别。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;数据库连接池好处：&quot;&gt;&lt;a href=&quot;#数据库连接池好处：&quot; class=&quot;headerlink&quot; title=&quot;数据库连接池好处：&quot;&gt;&lt;/a&gt;数据库连接池好处：&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;资源重用 (连接复用)&lt;/li&gt;
&lt;li&gt;更快的系统响应速度&lt;/li&gt;
&lt;li&gt;新的资源分配手段&lt;br&gt; 统一的连接管理，避免数据库连接泄漏&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;26-一条SQL语句在MySQL中如何执行的？&quot;&gt;&lt;a href=&quot;#26-一条SQL语句在MySQL中如何执行的？&quot; class=&quot;headerlink&quot; title=&quot;26. 一条SQL语句在MySQL中如何执行的？&quot;&gt;&lt;/a&gt;26. 一条SQL语句在MySQL中如何执行的？&lt;/h2&gt;&lt;p&gt;先看一下Mysql的逻辑架构图吧~&lt;/p&gt;
&lt;h3 id=&quot;查询语句：&quot;&gt;&lt;a href=&quot;#查询语句：&quot; class=&quot;headerlink&quot; title=&quot;查询语句：&quot;&gt;&lt;/a&gt;查询语句：&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;先检查该语句是否有权限&lt;/li&gt;
&lt;li&gt;如果没有权限，直接返回错误信息&lt;/li&gt;
&lt;li&gt;如果有权限，在 MySQL8.0 版本以前，会先查询缓存。&lt;/li&gt;
&lt;li&gt;如果没有缓存，分析器进行词法分析，提取 sql 语句select等的关键元素。然后判断sql 语句是否有语法错误，比如关键词是否正确等等。&lt;/li&gt;
&lt;li&gt;优化器进行确定执行方案&lt;/li&gt;
&lt;li&gt;进行权限校验，如果没有权限就直接返回错误信息，如果有权限就会调用数据库引擎接口，返回执行结果。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;27-InnoDB引擎中的索引策略，了解过吗？&quot;&gt;&lt;a href=&quot;#27-InnoDB引擎中的索引策略，了解过吗？&quot; class=&quot;headerlink&quot; title=&quot;27. InnoDB引擎中的索引策略，了解过吗？&quot;&gt;&lt;/a&gt;27. InnoDB引擎中的索引策略，了解过吗？&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;覆盖索引&lt;/li&gt;
&lt;li&gt;最左前缀原则&lt;/li&gt;
&lt;li&gt;索引下推&lt;/li&gt;
&lt;li&gt;索引下推优化是 MySQL 5.6 引入的， 可以在索引遍历过程中，对索引中包含的字段先做判断，直接过滤掉不满足条件的记录，减少回表次数。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;28-数据库存储日期格式时，如何考虑时区转换问题？&quot;&gt;&lt;a href=&quot;#28-数据库存储日期格式时，如何考虑时区转换问题？&quot; class=&quot;headerlink&quot; title=&quot;28. 数据库存储日期格式时，如何考虑时区转换问题？&quot;&gt;&lt;/a&gt;28. 数据库存储日期格式时，如何考虑时区转换问题？&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;datetime类型适合用来记录数据的原始的创建时间，修改记录中其他字段的值，datetime字段的值不会改变，除非手动修改它。&lt;/li&gt;
&lt;li&gt;timestamp类型适合用来记录数据的最后修改时间，只要修改了记录中其他字段的值，timestamp字段的值都会被自动更新。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;29-一条sql执行过长的时间，你如何优化，从哪些方面入手？&quot;&gt;&lt;a href=&quot;#29-一条sql执行过长的时间，你如何优化，从哪些方面入手？&quot; class=&quot;headerlink&quot; title=&quot;29. 一条sql执行过长的时间，你如何优化，从哪些方面入手？&quot;&gt;&lt;/a&gt;29. 一条sql执行过长的时间，你如何优化，从哪些方面入手？&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;查看是否涉及多表和子查询，优化Sql结构，如去除冗余字段，是否可拆表等&lt;/li&gt;
&lt;li&gt;优化索引结构，看是否可以适当添加索引&lt;/li&gt;
&lt;li&gt;数量大的表，可以考虑进行分离&amp;#x2F;分表（如交易流水表）&lt;/li&gt;
&lt;li&gt;数据库主从分离，读写分离&lt;/li&gt;
&lt;li&gt;explain分析sql语句，查看执行计划，优化sql&lt;/li&gt;
&lt;li&gt;查看mysql执行日志，分析是否有其他方面的问题&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;30-MYSQL数据库服务器性能分析的方法命令有哪些&quot;&gt;&lt;a href=&quot;#30-MYSQL数据库服务器性能分析的方法命令有哪些&quot; class=&quot;headerlink&quot; title=&quot;30. MYSQL数据库服务器性能分析的方法命令有哪些?&quot;&gt;&lt;/a&gt;30. MYSQL数据库服务器性能分析的方法命令有哪些?&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Show status, 一些值得监控的变量值：&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Bytes_received和Bytes_sent 和服务器之间来往的流量。&lt;br&gt; Com_*服务器正在执行的命令。&lt;br&gt; Created_*在查询执行期限间创建的临时表和文件。&lt;br&gt; Handler_*存储引擎操作。&lt;br&gt; Select_*不同类型的联接执行计划。&lt;br&gt; Sort_*几种排序信息。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Show profiles 是MySql用来分析当前会话SQL语句执行的资源消耗情况&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;31-Blob和text有什么区别？&quot;&gt;&lt;a href=&quot;#31-Blob和text有什么区别？&quot; class=&quot;headerlink&quot; title=&quot;31. Blob和text有什么区别？&quot;&gt;&lt;/a&gt;31. Blob和text有什么区别？&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Blob用于存储二进制数据，而Text用于存储大字符串。&lt;/li&gt;
&lt;li&gt;Blob值被视为二进制字符串（字节字符串）,它们没有字符集，并且排序和比较基于列值中的字节的数值。&lt;/li&gt;
&lt;li&gt;text值被视为非二进制字符串（字符字符串）。它们有一个字符集，并根据字符集的排序规则对值进行排序和比较。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;32-mysql里记录货币用什么字段类型比较好？&quot;&gt;&lt;a href=&quot;#32-mysql里记录货币用什么字段类型比较好？&quot; class=&quot;headerlink&quot; title=&quot;32.  mysql里记录货币用什么字段类型比较好？&quot;&gt;&lt;/a&gt;32.  mysql里记录货币用什么字段类型比较好？&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;货币在数据库中MySQL常用Decimal和Numric类型表示，这两种类型被MySQL实现为同样的类型。他们被用于保存与金钱有关的数据。&lt;/li&gt;
&lt;li&gt;salary DECIMAL(9,2)，9(precision)代表将被用于存储值的总的小数位数，而2(scale)代表将被用于存储小数点后的位数。存储在salary列中的值的范围是从-9999999.99到9999999.99。&lt;/li&gt;
&lt;li&gt;DECIMAL和NUMERIC值作为字符串存储，而不是作为二进制浮点数，以便保存那些值的小数精度。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;33-Mysql中有哪几种锁，列举一下？&quot;&gt;&lt;a href=&quot;#33-Mysql中有哪几种锁，列举一下？&quot; class=&quot;headerlink&quot; title=&quot;33.  Mysql中有哪几种锁，列举一下？&quot;&gt;&lt;/a&gt;33.  Mysql中有哪几种锁，列举一下？&lt;/h2&gt;&lt;p&gt;如果按锁粒度划分，有以下3种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;表锁： 开销小，加锁快；锁定力度大，发生锁冲突概率高，并发度最低;不会出现死锁。&lt;/li&gt;
&lt;li&gt;行锁： 开销大，加锁慢；会出现死锁；锁定粒度小，发生锁冲突的概率低，并发度高。&lt;/li&gt;
&lt;li&gt;页锁： 开销和加锁速度介于表锁和行锁之间；会出现死锁；锁定粒度介于表锁和行锁之间，并发度一般&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;34-Hash索引和B-树区别是什么？你在设计索引是怎么抉择的？&quot;&gt;&lt;a href=&quot;#34-Hash索引和B-树区别是什么？你在设计索引是怎么抉择的？&quot; class=&quot;headerlink&quot; title=&quot;34.  Hash索引和B+树区别是什么？你在设计索引是怎么抉择的？&quot;&gt;&lt;/a&gt;34.  Hash索引和B+树区别是什么？你在设计索引是怎么抉择的？&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;B+树可以进行范围查询，Hash索引不能。&lt;/li&gt;
&lt;li&gt;B+树支持联合索引的最左侧原则，Hash索引不支持。&lt;/li&gt;
&lt;li&gt;B+树支持order by排序，Hash索引不支持。&lt;/li&gt;
&lt;li&gt;Hash索引在等值查询上比B+树效率更高。&lt;/li&gt;
&lt;li&gt;B+树使用like 进行模糊查询的时候，like后面（比如%开头）的话可以起到优化的作用，Hash索引根本无法进行模糊查询。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;35-mysql-的内连接、左连接、右连接有什么区别？&quot;&gt;&lt;a href=&quot;#35-mysql-的内连接、左连接、右连接有什么区别？&quot; class=&quot;headerlink&quot; title=&quot;35.  mysql 的内连接、左连接、右连接有什么区别？&quot;&gt;&lt;/a&gt;35.  mysql 的内连接、左连接、右连接有什么区别？&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Inner join 内连接，在两张表进行连接查询时，只保留两张表中完全匹配的结果集&lt;/li&gt;
&lt;li&gt;left join 在两张表进行连接查询时，会返回左表所有的行，即使在右表中没有匹配的记录。&lt;/li&gt;
&lt;li&gt;right join 在两张表进行连接查询时，会返回右表所有的行，即使在左表中没有匹配的记录。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;36-说说MySQL-的基础架构图&quot;&gt;&lt;a href=&quot;#36-说说MySQL-的基础架构图&quot; class=&quot;headerlink&quot; title=&quot;36.  说说MySQL 的基础架构图&quot;&gt;&lt;/a&gt;36.  说说MySQL 的基础架构图&lt;/h2&gt;&lt;p&gt;Mysql逻辑架构图主要分三层：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第一层负责连接处理，授权认证，安全等等&lt;/li&gt;
&lt;li&gt;第二层负责编译并优化SQL&lt;/li&gt;
&lt;li&gt;第三层是存储引擎。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;37-什么是内连接、外连接、交叉连接、笛卡尔积呢？&quot;&gt;&lt;a href=&quot;#37-什么是内连接、外连接、交叉连接、笛卡尔积呢？&quot; class=&quot;headerlink&quot; title=&quot;37.  什么是内连接、外连接、交叉连接、笛卡尔积呢？&quot;&gt;&lt;/a&gt;37.  什么是内连接、外连接、交叉连接、笛卡尔积呢？&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;内连接（inner join）：取得两张表中满足存在连接匹配关系的记录。&lt;/li&gt;
&lt;li&gt;外连接（outer join）：取得两张表中满足存在连接匹配关系的记录，以及某张表（或两张表）中不满足匹配关系的记录。&lt;/li&gt;
&lt;li&gt;交叉连接（cross join）：显示两张表所有记录一一对应，没有匹配关系进行筛选，也被称为：笛卡尔积。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;38-说一下数据库的三大范式&quot;&gt;&lt;a href=&quot;#38-说一下数据库的三大范式&quot; class=&quot;headerlink&quot; title=&quot;38.  说一下数据库的三大范式&quot;&gt;&lt;/a&gt;38.  说一下数据库的三大范式&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;第一范式：数据表中的每一列（每个字段）都不可以再拆分。&lt;/li&gt;
&lt;li&gt;第二范式：在第一范式的基础上，分主键列完全依赖于主键，而不能是依赖于主键的一部分。&lt;/li&gt;
&lt;li&gt;第三范式：在满足第二范式的基础上，表中的非主键只依赖于主键，而不依赖于其他非主键。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;39-mysql有关权限的表有哪几个呢？&quot;&gt;&lt;a href=&quot;#39-mysql有关权限的表有哪几个呢？&quot; class=&quot;headerlink&quot; title=&quot;39.  mysql有关权限的表有哪几个呢？&quot;&gt;&lt;/a&gt;39.  mysql有关权限的表有哪几个呢？&lt;/h2&gt;&lt;p&gt;MySQL服务器通过权限表来控制用户对数据库的访问，权限表存放在mysql数据库里，由mysql_install_db脚本初始化。这些权限表分别user，db，table_priv，columns_priv和host。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;user权限表：记录允许连接到服务器的用户帐号信息，里面的权限是全局级的。&lt;/li&gt;
&lt;li&gt;db权限表：记录各个帐号在各个数据库上的操作权限。&lt;/li&gt;
&lt;li&gt;table_priv权限表：记录数据表级的操作权限。&lt;/li&gt;
&lt;li&gt;columns_priv权限表：记录数据列级的操作权限。&lt;/li&gt;
&lt;li&gt;host权限表：配合db权限表对给定主机上数据库级操作权限作更细致的控制。这个权限表不受GRANT和REVOKE语句的影响。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;40-Mysql的binlog有几种录入格式？分别有什么区别？&quot;&gt;&lt;a href=&quot;#40-Mysql的binlog有几种录入格式？分别有什么区别？&quot; class=&quot;headerlink&quot; title=&quot;40.  Mysql的binlog有几种录入格式？分别有什么区别？&quot;&gt;&lt;/a&gt;40.  Mysql的binlog有几种录入格式？分别有什么区别？&lt;/h2&gt;&lt;p&gt;有三种格式哈，statement，row和mixed。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;statement，每一条会修改数据的sql都会记录在binlog中。不需要记录每一行的变化，减少了binlog日志量，节约了IO，提高性能。由于sql的执行是有上下文的，因此在保存的时候需要保存相关的信息，同时还有一些使用了函数之类的语句无法被记录复制。&lt;/li&gt;
&lt;li&gt;row，不记录sql语句上下文相关信息，仅保存哪条记录被修改。记录单元为每一行的改动，基本是可以全部记下来但是由于很多操作，会导致大量行的改动(比如alter table)，因此这种模式的文件保存的信息太多，日志量太大。&lt;/li&gt;
&lt;li&gt;mixed，一种折中的方案，普通操作使用statement记录，当无法使用statement的时候使用row。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;41-InnoDB引擎的4大特性，了解过吗&quot;&gt;&lt;a href=&quot;#41-InnoDB引擎的4大特性，了解过吗&quot; class=&quot;headerlink&quot; title=&quot;41.  InnoDB引擎的4大特性，了解过吗&quot;&gt;&lt;/a&gt;41.  InnoDB引擎的4大特性，了解过吗&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;插入缓冲（insert buffer)&lt;/li&gt;
&lt;li&gt;二次写(double write)&lt;/li&gt;
&lt;li&gt;自适应哈希索引(ahi)&lt;/li&gt;
&lt;li&gt;预读(read ahead)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;42-索引有哪些优缺点？&quot;&gt;&lt;a href=&quot;#42-索引有哪些优缺点？&quot; class=&quot;headerlink&quot; title=&quot;42.  索引有哪些优缺点？&quot;&gt;&lt;/a&gt;42.  索引有哪些优缺点？&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;优点：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;唯一索引可以保证数据库表中每一行的数据的唯一性&lt;/li&gt;
&lt;li&gt;索引可以加快数据查询速度，减少查询时间&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;缺点：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;创建索引和维护索引要耗费时间&lt;/li&gt;
&lt;li&gt;索引需要占物理空间，除了数据表占用数据空间之外，每一个索引还要占用一定的物理空间&lt;/li&gt;
&lt;li&gt;以表中的数据进行增、删、改的时候，索引也要动态的维护。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;43-索引有哪几种类型？&quot;&gt;&lt;a href=&quot;#43-索引有哪几种类型？&quot; class=&quot;headerlink&quot; title=&quot;43.  索引有哪几种类型？&quot;&gt;&lt;/a&gt;43.  索引有哪几种类型？&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;主键索引: 数据列不允许重复，不允许为NULL，一个表只能有一个主键。&lt;/li&gt;
&lt;li&gt;唯一索引: 数据列不允许重复，允许为NULL值，一个表允许多个列创建唯一索引。&lt;/li&gt;
&lt;li&gt;普通索引: 基本的索引类型，没有唯一性的限制，允许为NULL值。&lt;/li&gt;
&lt;li&gt;全文索引：是目前搜索引擎使用的一种关键技术，对文本的内容进行分词、搜索。&lt;/li&gt;
&lt;li&gt;覆盖索引：查询列要被所建的索引覆盖，不必读取数据行&lt;/li&gt;
&lt;li&gt;组合索引：多列值组成一个索引，用于组合搜索，效率大于索引合并&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;44-创建索引有什么原则呢？&quot;&gt;&lt;a href=&quot;#44-创建索引有什么原则呢？&quot; class=&quot;headerlink&quot; title=&quot;44.  创建索引有什么原则呢？&quot;&gt;&lt;/a&gt;44.  创建索引有什么原则呢？&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;最左前缀匹配原则&lt;/li&gt;
&lt;li&gt;频繁作为查询条件的字段才去创建索引&lt;/li&gt;
&lt;li&gt;频繁更新的字段不适合创建索引&lt;/li&gt;
&lt;li&gt;索引列不能参与计算，不能有函数操作&lt;/li&gt;
&lt;li&gt;优先考虑扩展索引，而不是新建索引，避免不必要的索引&lt;/li&gt;
&lt;li&gt;在order by或者group by子句中，创建索引需要注意顺序&lt;/li&gt;
&lt;li&gt;区分度低的数据列不适合做索引列(如性别）&lt;/li&gt;
&lt;li&gt;定义有外键的数据列一定要建立索引。&lt;/li&gt;
&lt;li&gt;对于定义为text、image数据类型的列不要建立索引。&lt;/li&gt;
&lt;li&gt;删除不再使用或者很少使用的索引&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;45-创建索引的三种方式&quot;&gt;&lt;a href=&quot;#45-创建索引的三种方式&quot; class=&quot;headerlink&quot; title=&quot;45.  创建索引的三种方式&quot;&gt;&lt;/a&gt;45.  创建索引的三种方式&lt;/h2&gt;&lt;p&gt;在执行CREATE TABLE时创建索引&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;TABLE&lt;/span&gt; `employee` (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  `id` &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;11&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;NULL&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  `name` &lt;span class=&quot;type&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;255&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;DEFAULT&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;NULL&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  `age` &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;11&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;DEFAULT&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;NULL&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  `&lt;span class=&quot;type&quot;&gt;date&lt;/span&gt;` datetime &lt;span class=&quot;keyword&quot;&gt;DEFAULT&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;NULL&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  `sex` &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;DEFAULT&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;NULL&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;PRIMARY&lt;/span&gt; KEY (`id`),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  KEY `idx_name` (`name`) &lt;span class=&quot;keyword&quot;&gt;USING&lt;/span&gt; BTREE&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;) ENGINE&lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt;InnoDB &lt;span class=&quot;keyword&quot;&gt;DEFAULT&lt;/span&gt; CHARSET&lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt;utf8;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;使用ALTER TABLE命令添加索引&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;ALTER&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;TABLE&lt;/span&gt; table_name &lt;span class=&quot;keyword&quot;&gt;ADD&lt;/span&gt; INDEX index_name (&lt;span class=&quot;keyword&quot;&gt;column&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;使用CREATE INDEX命令创建&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;CREATE&lt;/span&gt; INDEX index_name &lt;span class=&quot;keyword&quot;&gt;ON&lt;/span&gt; table_name (&lt;span class=&quot;keyword&quot;&gt;column&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&quot;46-百万级别或以上的数据，你是如何删除的？&quot;&gt;&lt;a href=&quot;#46-百万级别或以上的数据，你是如何删除的？&quot; class=&quot;headerlink&quot; title=&quot;46. 百万级别或以上的数据，你是如何删除的？&quot;&gt;&lt;/a&gt;46. 百万级别或以上的数据，你是如何删除的？&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;我们想要删除百万数据的时候可以先删除索引&lt;/li&gt;
&lt;li&gt;然后批量删除其中无用数据&lt;/li&gt;
&lt;li&gt;删除完成后重新创建索引。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;47-什么是最左前缀原则？什么是最左匹配原则？&quot;&gt;&lt;a href=&quot;#47-什么是最左前缀原则？什么是最左匹配原则？&quot; class=&quot;headerlink&quot; title=&quot;47. 什么是最左前缀原则？什么是最左匹配原则？&quot;&gt;&lt;/a&gt;47. 什么是最左前缀原则？什么是最左匹配原则？&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;最左前缀原则，就是最左优先，在创建多列索引时，要根据业务需求，where子句中使用最频繁的一列放在最左边。&lt;/li&gt;
&lt;li&gt;当我们创建一个组合索引的时候，如(k1,k2,k3)，相当于创建了（k1）、(k1,k2)和(k1,k2,k3)三个索引，这就是最左匹配原则。&lt;/li&gt;
&lt;li&gt;原理：B+树叶节点的数据是按照字段 k1， k2， k3 的顺序有序排列的，例：&lt;ul&gt;
&lt;li&gt;k1 &amp;#x3D; 1, k2 &amp;#x3D; 2, k3 &amp;#x3D; 3&lt;/li&gt;
&lt;li&gt;k1 &amp;#x3D; 1, k2 &amp;#x3D; 4, k3 &amp;#x3D; 6&lt;/li&gt;
&lt;li&gt;k1 &amp;#x3D; 11, k2 &amp;#x3D; 3, k3 &amp;#x3D; 1&lt;/li&gt;
&lt;li&gt;k1 &amp;#x3D; 11, k2 &amp;#x3D; 3, k3 &amp;#x3D; 2&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;因此要想使用联合索引，必须按照顺序才能找到对应的叶节点&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;48-B树和B-树的区别，数据库为什么使用B-树而不是B树？&quot;&gt;&lt;a href=&quot;#48-B树和B-树的区别，数据库为什么使用B-树而不是B树？&quot; class=&quot;headerlink&quot; title=&quot;48.  B树和B+树的区别，数据库为什么使用B+树而不是B树？&quot;&gt;&lt;/a&gt;48.  B树和B+树的区别，数据库为什么使用B+树而不是B树？&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;在B树中，键和值即存放在内部节点又存放在叶子节点；在B+树中，内部节点只存键，叶子节点则同时存放键和值。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;B+树的叶子节点有一条链相连，而B树的叶子节点各自独立的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;B+树索引的所有数据均存储在叶子节点，而且数据是按照顺序排列的，链表连着的。那么B+树使得范围查找，排序查找，分组查找以及去重查找变得异常简单。.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;B+树非叶子节点上是不存储数据的，仅存储键值，而B树节点中不仅存储键值，也会存储数据。innodb中页的默认大小是16KB，如果不存储数据，那么就会存储更多的键值，相应的树的阶数（节点的子节点树）就会更大，树就会更矮更胖，如此一来我们查找数据进行磁盘的IO次数有会再次减少，数据查询的效率也会更快.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;49-覆盖索引、回表等这些，了解过吗？&quot;&gt;&lt;a href=&quot;#49-覆盖索引、回表等这些，了解过吗？&quot; class=&quot;headerlink&quot; title=&quot;49.  覆盖索引、回表等这些，了解过吗？&quot;&gt;&lt;/a&gt;49.  覆盖索引、回表等这些，了解过吗？&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;覆盖索引： 查询列要被所建的索引覆盖，不必从数据表中读取，换句话说查询列要被所使用的索引覆盖。&lt;/li&gt;
&lt;li&gt;回表：二级索引无法直接查询所有列的数据，所以通过二级索引查询到聚簇索引后，再查询到想要的数据，这种通过二级索引查询出来的过程，就叫做回表。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;50-B-树在满足聚簇索引和覆盖索引的时候不需要回表查询数据？&quot;&gt;&lt;a href=&quot;#50-B-树在满足聚簇索引和覆盖索引的时候不需要回表查询数据？&quot; class=&quot;headerlink&quot; title=&quot;50.  B+树在满足聚簇索引和覆盖索引的时候不需要回表查询数据？&quot;&gt;&lt;/a&gt;50.  B+树在满足聚簇索引和覆盖索引的时候不需要回表查询数据？&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;在B+树的索引中，叶子节点可能存储了当前的key值，也可能存储了当前的key值以及整行的数据，这就是聚簇索引和非聚簇索引。 在InnoDB中，只有主键索引是聚簇索引，如果没有主键，则挑选一个唯一键建立聚簇索引。如果没有唯一键，则隐式的生成一个键来建立聚簇索引。&lt;/li&gt;
&lt;li&gt;当查询使用聚簇索引时，在对应的叶子节点，可以获取到整行数据，因此不用再次进行回表查询。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;51-何时使用聚簇索引与非聚簇索引&quot;&gt;&lt;a href=&quot;#51-何时使用聚簇索引与非聚簇索引&quot; class=&quot;headerlink&quot; title=&quot;51. 何时使用聚簇索引与非聚簇索引&quot;&gt;&lt;/a&gt;51. 何时使用聚簇索引与非聚簇索引&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;动作描述&lt;/th&gt;
&lt;th&gt;使用聚集索引&lt;/th&gt;
&lt;th&gt;使用非聚集索引&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;列经常被分组排序&lt;/td&gt;
&lt;td&gt;应&lt;/td&gt;
&lt;td&gt;应&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;返回某范围内的数据&lt;/td&gt;
&lt;td&gt;应&lt;/td&gt;
&lt;td&gt;不应&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;一个或极少不同值&lt;/td&gt;
&lt;td&gt;不应&lt;/td&gt;
&lt;td&gt;不应&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;小数目的不同值&lt;/td&gt;
&lt;td&gt;应&lt;/td&gt;
&lt;td&gt;不应&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;大数目的不同值&lt;/td&gt;
&lt;td&gt;不应&lt;/td&gt;
&lt;td&gt;应&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;频繁更新的列&lt;/td&gt;
&lt;td&gt;不应&lt;/td&gt;
&lt;td&gt;应&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;外键列&lt;/td&gt;
&lt;td&gt;应&lt;/td&gt;
&lt;td&gt;应&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;主键列&lt;/td&gt;
&lt;td&gt;应&lt;/td&gt;
&lt;td&gt;应&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;频繁修改索引列&lt;/td&gt;
&lt;td&gt;不应&lt;/td&gt;
&lt;td&gt;应&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h2 id=&quot;52-非聚簇索引一定会回表查询吗？&quot;&gt;&lt;a href=&quot;#52-非聚簇索引一定会回表查询吗？&quot; class=&quot;headerlink&quot; title=&quot;52.  非聚簇索引一定会回表查询吗？&quot;&gt;&lt;/a&gt;52.  非聚簇索引一定会回表查询吗？&lt;/h2&gt;&lt;p&gt;不一定，如果查询语句的字段全部命中了索引，那么就不必再进行回表查询（哈哈，覆盖索引就是这么回事）。&lt;/p&gt;
&lt;p&gt;举个简单的例子，假设我们在学生表的上建立了索引，那么当进行&lt;code&gt;select age from student where age &amp;lt; 20&lt;/code&gt;的查询时，在索引的叶子节点上，已经包含了age信息，不会再次进行回表查询。&lt;/p&gt;
&lt;h2 id=&quot;53-组合索引是什么？为什么需要注意组合索引中的顺序？&quot;&gt;&lt;a href=&quot;#53-组合索引是什么？为什么需要注意组合索引中的顺序？&quot; class=&quot;headerlink&quot; title=&quot;53. 组合索引是什么？为什么需要注意组合索引中的顺序？&quot;&gt;&lt;/a&gt;53. 组合索引是什么？为什么需要注意组合索引中的顺序？&lt;/h2&gt;&lt;p&gt;组合索引，用户可以在多个列上建立索引,这种索引叫做组合索引。&lt;br&gt;因为InnoDB引擎中的索引策略的最左原则，所以需要注意组合索引中的顺序。&lt;/p&gt;
&lt;h2 id=&quot;54-什么是数据库事务？&quot;&gt;&lt;a href=&quot;#54-什么是数据库事务？&quot; class=&quot;headerlink&quot; title=&quot;54.  什么是数据库事务？&quot;&gt;&lt;/a&gt;54.  什么是数据库事务？&lt;/h2&gt;&lt;p&gt;数据库事务（简称：事务），是数据库管理系统执行过程中的一个逻辑单位，由一个有限的数据库操作序列构成，这些操作要么全部执行,要么全部不执行，是一个不可分割的工作单位。&lt;/p&gt;
&lt;h2 id=&quot;55-隔离级别与锁的关系&quot;&gt;&lt;a href=&quot;#55-隔离级别与锁的关系&quot; class=&quot;headerlink&quot; title=&quot;55.  隔离级别与锁的关系&quot;&gt;&lt;/a&gt;55.  隔离级别与锁的关系&lt;/h2&gt;&lt;p&gt;回答这个问题，可以先阐述四种隔离级别，再阐述它们的实现原理。隔离级别就是依赖锁和MVCC实现的。&lt;/p&gt;
&lt;h2 id=&quot;56-按照锁的粒度分，数据库锁有哪些呢？锁机制与InnoDB锁算法&quot;&gt;&lt;a href=&quot;#56-按照锁的粒度分，数据库锁有哪些呢？锁机制与InnoDB锁算法&quot; class=&quot;headerlink&quot; title=&quot;56. 按照锁的粒度分，数据库锁有哪些呢？锁机制与InnoDB锁算法&quot;&gt;&lt;/a&gt;56. 按照锁的粒度分，数据库锁有哪些呢？锁机制与InnoDB锁算法&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;按锁粒度分有：表锁，页锁，行锁&lt;/li&gt;
&lt;li&gt;按锁机制分有：乐观锁，悲观锁&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;57-从锁的类别角度讲，MySQL都有哪些锁呢？&quot;&gt;&lt;a href=&quot;#57-从锁的类别角度讲，MySQL都有哪些锁呢？&quot; class=&quot;headerlink&quot; title=&quot;57.  从锁的类别角度讲，MySQL都有哪些锁呢？&quot;&gt;&lt;/a&gt;57.  从锁的类别角度讲，MySQL都有哪些锁呢？&lt;/h2&gt;&lt;p&gt;从锁的类别上来讲，有共享锁和排他锁。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;共享锁: 又叫做读锁。当用户要进行数据的读取时，对数据加上共享锁。共享锁可以同时加上多个。&lt;/li&gt;
&lt;li&gt;排他锁: 又叫做写锁。当用户要进行数据的写入时，对数据加上排他锁。排他锁只可以加一个，他和其他的排他锁，共享锁都相斥。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;58-MySQL中InnoDB引擎的行锁是怎么实现的？&quot;&gt;&lt;a href=&quot;#58-MySQL中InnoDB引擎的行锁是怎么实现的？&quot; class=&quot;headerlink&quot; title=&quot;58. MySQL中InnoDB引擎的行锁是怎么实现的？&quot;&gt;&lt;/a&gt;58. MySQL中InnoDB引擎的行锁是怎么实现的？&lt;/h2&gt;&lt;p&gt;基于索引来完成行锁的。&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; t &lt;span class=&quot;keyword&quot;&gt;where&lt;/span&gt; id &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;666&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;update&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;for update 可以根据条件来完成行锁锁定，并且 id 是有索引键的列，如果 id 不是索引键那么InnoDB将实行表锁。&lt;/p&gt;
&lt;h2 id=&quot;59-什么是死锁？怎么解决？&quot;&gt;&lt;a href=&quot;#59-什么是死锁？怎么解决？&quot; class=&quot;headerlink&quot; title=&quot;59.  什么是死锁？怎么解决？&quot;&gt;&lt;/a&gt;59.  什么是死锁？怎么解决？&lt;/h2&gt;&lt;p&gt;死锁是指两个或多个事务在同一资源上相互占用，并请求锁定对方的资源，从而导致恶性循环的现象。看图形象一点，如下：&lt;/p&gt;
&lt;p&gt;死锁有四个必要条件：互斥条件，请求和保持条件，环路等待条件，不剥夺条件。&lt;br&gt;解决死锁思路，一般就是切断环路，尽量避免并发形成环路。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果不同程序会并发存取多个表，尽量约定以相同的顺序访问表，可以大大降低死锁机会。&lt;/li&gt;
&lt;li&gt;在同一个事务中，尽可能做到一次锁定所需要的所有资源，减少死锁产生概率；&lt;/li&gt;
&lt;li&gt;对于非常容易产生死锁的业务部分，可以尝试使用升级锁定颗粒度，通过表级锁定来减少死锁产生的概率；&lt;/li&gt;
&lt;li&gt;如果业务处理不好可以用分布式事务锁或者使用乐观锁&lt;/li&gt;
&lt;li&gt;死锁与索引密不可分，解决索引问题，需要合理优化你的索引，&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;60-为什么要使用视图？什么是视图？&quot;&gt;&lt;a href=&quot;#60-为什么要使用视图？什么是视图？&quot; class=&quot;headerlink&quot; title=&quot;60.  为什么要使用视图？什么是视图？&quot;&gt;&lt;/a&gt;60.  为什么要使用视图？什么是视图？&lt;/h2&gt;&lt;h3 id=&quot;为什么要使用视图？&quot;&gt;&lt;a href=&quot;#为什么要使用视图？&quot; class=&quot;headerlink&quot; title=&quot;为什么要使用视图？&quot;&gt;&lt;/a&gt;为什么要使用视图？&lt;/h3&gt;&lt;p&gt;为了提高复杂SQL语句的复用性和表操作的安全性，MySQL数据库管理系统提供了视图特性。&lt;/p&gt;
&lt;h3 id=&quot;什么是视图？&quot;&gt;&lt;a href=&quot;#什么是视图？&quot; class=&quot;headerlink&quot; title=&quot;什么是视图？&quot;&gt;&lt;/a&gt;什么是视图？&lt;/h3&gt;&lt;p&gt;视图是一个虚拟的表，是一个表中的数据经过某种筛选后的显示方式，视图由一个预定义的查询select语句组成。&lt;/p&gt;
&lt;h2 id=&quot;61-视图有哪些特点？哪些使用场景？&quot;&gt;&lt;a href=&quot;#61-视图有哪些特点？哪些使用场景？&quot; class=&quot;headerlink&quot; title=&quot;61.  视图有哪些特点？哪些使用场景？&quot;&gt;&lt;/a&gt;61.  视图有哪些特点？哪些使用场景？&lt;/h2&gt;&lt;h3 id=&quot;视图特点：&quot;&gt;&lt;a href=&quot;#视图特点：&quot; class=&quot;headerlink&quot; title=&quot;视图特点：&quot;&gt;&lt;/a&gt;视图特点：&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;视图的列可以来自不同的表，是表的抽象和在逻辑意义上建立的新关系。&lt;/li&gt;
&lt;li&gt;视图是由基本表(实表)产生的表(虚表)。&lt;/li&gt;
&lt;li&gt;视图的建立和删除不影响基本表。&lt;/li&gt;
&lt;li&gt;对视图内容的更新(添加，删除和修改)直接影响基本表。&lt;/li&gt;
&lt;li&gt;当视图来自多个基本表时，不允许添加和删除数据。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;视图用途：&lt;/strong&gt; 简化sql查询，提高开发效率，兼容老的表结构。&lt;/p&gt;
&lt;h3 id=&quot;视图的常见使用场景：&quot;&gt;&lt;a href=&quot;#视图的常见使用场景：&quot; class=&quot;headerlink&quot; title=&quot;视图的常见使用场景：&quot;&gt;&lt;/a&gt;视图的常见使用场景：&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;重用SQL语句；&lt;/li&gt;
&lt;li&gt;简化复杂的SQL操作。&lt;/li&gt;
&lt;li&gt;使用表的组成部分而不是整个表；&lt;/li&gt;
&lt;li&gt;保护数据&lt;/li&gt;
&lt;li&gt;更改数据格式和表示。视图可返回与底层表的表示和格式不同的数据。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;62-视图的优点，缺点，讲一下？&quot;&gt;&lt;a href=&quot;#62-视图的优点，缺点，讲一下？&quot; class=&quot;headerlink&quot; title=&quot;62.  视图的优点，缺点，讲一下？&quot;&gt;&lt;/a&gt;62.  视图的优点，缺点，讲一下？&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;查询简单化。视图能简化用户的操作&lt;/li&gt;
&lt;li&gt;数据安全性。视图使用户能以多种角度看待同一数据，能够对机密数据提供安全保护&lt;/li&gt;
&lt;li&gt;逻辑数据独立性。视图对重构数据库提供了一定程度的逻辑独立性&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;63-count-1-、count-与-count-列名-的区别？&quot;&gt;&lt;a href=&quot;#63-count-1-、count-与-count-列名-的区别？&quot; class=&quot;headerlink&quot; title=&quot;63.  count(1)、count(*) 与 count(列名) 的区别？&quot;&gt;&lt;/a&gt;63.  count(1)、count(*) 与 count(列名) 的区别？&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;count(*)包括了所有的列，相当于行数，在统计结果的时候，不会忽略列值为NULL&lt;/li&gt;
&lt;li&gt;count(1)包括了忽略所有列，用1代表代码行，在统计结果的时候，不会忽略列值为NULL&lt;/li&gt;
&lt;li&gt;count(列名)只包括列名那一列，在统计结果的时候，会忽略列值为空（这里的空不是只空字符串或者0，而是表示null）的计数，即某个字段值为NULL时，不统计。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;64-什么是游标？&quot;&gt;&lt;a href=&quot;#64-什么是游标？&quot; class=&quot;headerlink&quot; title=&quot;64.  什么是游标？&quot;&gt;&lt;/a&gt;64.  什么是游标？&lt;/h2&gt;&lt;p&gt;游标提供了一种对从表中检索出的数据进行操作的灵活手段，就本质而言，游标实际上是一种能从包括多条数据记录的结果集中每次提取一条记录的机制。&lt;/p&gt;
&lt;h2 id=&quot;65-什么是存储过程？有哪些优缺点？&quot;&gt;&lt;a href=&quot;#65-什么是存储过程？有哪些优缺点？&quot; class=&quot;headerlink&quot; title=&quot;65.  什么是存储过程？有哪些优缺点？&quot;&gt;&lt;/a&gt;65.  什么是存储过程？有哪些优缺点？&lt;/h2&gt;&lt;p&gt;存储过程，就是一些编译好了的SQL语句，这些SQL语句代码像一个方法一样实现一些功能（对单表或多表的增删改查），然后给这些代码块取一个名字，在用到这个功能的时候调用即可。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;优点：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;存储过程是一个预编译的代码块，执行效率比较高&lt;/li&gt;
&lt;li&gt;存储过程在服务器端运行，减少客户端的压力&lt;/li&gt;
&lt;li&gt;允许模块化程序设计，只需要创建一次过程，以后在程序中就可以调用该过程任意次，类似方法的复用&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;-一个存储过程替代大量T_SQL语句 ，可以降低网络通信量，提高通信速率&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可以一定程度上确保数据安全&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;缺点：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;调试麻烦&lt;/li&gt;
&lt;li&gt;可移植性不灵活&lt;/li&gt;
&lt;li&gt;重新编译问题&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;66-什么是触发器？触发器的使用场景有哪些？&quot;&gt;&lt;a href=&quot;#66-什么是触发器？触发器的使用场景有哪些？&quot; class=&quot;headerlink&quot; title=&quot;66.  什么是触发器？触发器的使用场景有哪些？&quot;&gt;&lt;/a&gt;66.  什么是触发器？触发器的使用场景有哪些？&lt;/h2&gt;&lt;p&gt;触发器，指一段代码，当触发某个事件时，自动执行这些代码。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;使用场景：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可以通过数据库中的相关表实现级联更改。&lt;/li&gt;
&lt;li&gt;实时监控某张表中的某个字段的更改而需要做出相应的处理。&lt;/li&gt;
&lt;li&gt;例如可以生成某些业务的编号。&lt;/li&gt;
&lt;li&gt;注意不要滥用，否则会造成数据库及应用程序的维护困难。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;67-MySQL中都有哪些触发器？&quot;&gt;&lt;a href=&quot;#67-MySQL中都有哪些触发器？&quot; class=&quot;headerlink&quot; title=&quot;67.   MySQL中都有哪些触发器？&quot;&gt;&lt;/a&gt;67.   MySQL中都有哪些触发器？&lt;/h2&gt;&lt;p&gt;MySQL 数据库中有六种触发器：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Before Insert&lt;/li&gt;
&lt;li&gt;After Insert&lt;/li&gt;
&lt;li&gt;Before Update&lt;/li&gt;
&lt;li&gt;After Update&lt;/li&gt;
&lt;li&gt;Before Delete&lt;/li&gt;
&lt;li&gt;After Delete&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;68-超键、候选键、主键、外键分别是什么？&quot;&gt;&lt;a href=&quot;#68-超键、候选键、主键、外键分别是什么？&quot; class=&quot;headerlink&quot; title=&quot;68.   超键、候选键、主键、外键分别是什么？&quot;&gt;&lt;/a&gt;68.   超键、候选键、主键、外键分别是什么？&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;超键：在关系模式中，能唯一知标识元组的属性集称为超键。&lt;/li&gt;
&lt;li&gt;候选键：是最小超键，即没有冗余元素的超键。&lt;/li&gt;
&lt;li&gt;主键：数据库表中对储存数据对象予以唯一和完整标识的数据列或属性的组合。一个数据列只能有一个主键，且主键的取值不能缺失，即不能为空值（Null）。&lt;/li&gt;
&lt;li&gt;外键：在一个表中存在的另一个表的主键称此表的外键。。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;69-SQL-约束有哪几种呢？&quot;&gt;&lt;a href=&quot;#69-SQL-约束有哪几种呢？&quot; class=&quot;headerlink&quot; title=&quot;69.   SQL 约束有哪几种呢？&quot;&gt;&lt;/a&gt;69.   SQL 约束有哪几种呢？&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;NOT NULL: 约束字段的内容一定不能为NULL。&lt;/li&gt;
&lt;li&gt;UNIQUE: 约束字段唯一性，一个表允许有多个 Unique 约束。&lt;/li&gt;
&lt;li&gt;PRIMARY KEY: 约束字段唯一，不可重复，一个表只允许存在一个。&lt;/li&gt;
&lt;li&gt;FOREIGN KEY: 用于预防破坏表之间连接的动作，也能防止非法数据插入外键。&lt;/li&gt;
&lt;li&gt;CHECK: 用于控制字段的值范围。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;70-谈谈六种关联查询，使用场景。&quot;&gt;&lt;a href=&quot;#70-谈谈六种关联查询，使用场景。&quot; class=&quot;headerlink&quot; title=&quot;70.   谈谈六种关联查询，使用场景。&quot;&gt;&lt;/a&gt;70.   谈谈六种关联查询，使用场景。&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;交叉连接&lt;/li&gt;
&lt;li&gt;内连接&lt;/li&gt;
&lt;li&gt;外连接&lt;/li&gt;
&lt;li&gt;联合查询&lt;/li&gt;
&lt;li&gt;全连接&lt;/li&gt;
&lt;li&gt;交叉连接&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;71-varchar-50-中50的涵义&quot;&gt;&lt;a href=&quot;#71-varchar-50-中50的涵义&quot; class=&quot;headerlink&quot; title=&quot;71.  varchar(50)中50的涵义&quot;&gt;&lt;/a&gt;71.  varchar(50)中50的涵义&lt;/h2&gt;&lt;p&gt;字段最多存放 50 个字符&lt;br&gt;如 varchar(50) 和 varchar(200) 存储 “jay” 字符串所占空间是一样的，后者在排序时会消耗更多内存&lt;/p&gt;
&lt;h2 id=&quot;72-mysql中int-20-和char-20-以及varchar-20-的区别&quot;&gt;&lt;a href=&quot;#72-mysql中int-20-和char-20-以及varchar-20-的区别&quot; class=&quot;headerlink&quot; title=&quot;72.   mysql中int(20)和char(20)以及varchar(20)的区别&quot;&gt;&lt;/a&gt;72.   mysql中int(20)和char(20)以及varchar(20)的区别&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;int(20) 表示字段是int类型，显示长度是 20&lt;/li&gt;
&lt;li&gt;char(20)表示字段是固定长度字符串，长度为 20&lt;/li&gt;
&lt;li&gt;varchar(20) 表示字段是可变长度字符串，长度为 20&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;73-drop、delete与truncate的区别&quot;&gt;&lt;a href=&quot;#73-drop、delete与truncate的区别&quot; class=&quot;headerlink&quot; title=&quot;73.   drop、delete与truncate的区别&quot;&gt;&lt;/a&gt;73.   drop、delete与truncate的区别&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;delete&lt;/th&gt;
&lt;th&gt;truncate&lt;/th&gt;
&lt;th&gt;drop&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;类型&lt;/td&gt;
&lt;td&gt;DML&lt;/td&gt;
&lt;td&gt;DDL&lt;/td&gt;
&lt;td&gt;DDL&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;回滚&lt;/td&gt;
&lt;td&gt;可回滚&lt;/td&gt;
&lt;td&gt;不可回滚&lt;/td&gt;
&lt;td&gt;不可回滚&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;删除内容&lt;/td&gt;
&lt;td&gt;表结构还在，删除表的全部或者一部分数据行&lt;/td&gt;
&lt;td&gt;表结构还在，删除表中的所有数据&lt;/td&gt;
&lt;td&gt;从数据库中删除表，所有的数据行，索引和权限也会被删除&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;删除速度&lt;/td&gt;
&lt;td&gt;删除速度慢，逐行删除&lt;/td&gt;
&lt;td&gt;删除速度快&lt;/td&gt;
&lt;td&gt;删除速度最快&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h2 id=&quot;74-UNION与UNION-ALL的区别？&quot;&gt;&lt;a href=&quot;#74-UNION与UNION-ALL的区别？&quot; class=&quot;headerlink&quot; title=&quot;74.   UNION与UNION ALL的区别？&quot;&gt;&lt;/a&gt;74.   UNION与UNION ALL的区别？&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Union：对两个结果集进行并集操作，不包括重复行，同时进行默认规则的排序；&lt;/li&gt;
&lt;li&gt;Union All：对两个结果集进行并集操作，包括重复行，不进行排序；&lt;/li&gt;
&lt;li&gt;UNION的效率高于 UNION ALL&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;75-SQL的生命周期？&quot;&gt;&lt;a href=&quot;#75-SQL的生命周期？&quot; class=&quot;headerlink&quot; title=&quot;75.  SQL的生命周期？&quot;&gt;&lt;/a&gt;75.  SQL的生命周期？&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;服务器与数据库建立连接&lt;/li&gt;
&lt;li&gt;数据库进程拿到请求sql&lt;/li&gt;
&lt;li&gt;解析并生成执行计划，执行&lt;/li&gt;
&lt;li&gt;读取数据到内存，并进行逻辑处理&lt;/li&gt;
&lt;li&gt;通过步骤一的连接，发送结果到客户端&lt;/li&gt;
&lt;li&gt;关掉连接，释放资源&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;76-一条Sql的执行顺序？&quot;&gt;&lt;a href=&quot;#76-一条Sql的执行顺序？&quot; class=&quot;headerlink&quot; title=&quot;76.  一条Sql的执行顺序？&quot;&gt;&lt;/a&gt;76.  一条Sql的执行顺序？&lt;/h2&gt;&lt;h2 id=&quot;77-列值为NULL时，查询是否会用到索引？&quot;&gt;&lt;a href=&quot;#77-列值为NULL时，查询是否会用到索引？&quot; class=&quot;headerlink&quot; title=&quot;77.  列值为NULL时，查询是否会用到索引？&quot;&gt;&lt;/a&gt;77.  列值为NULL时，查询是否会用到索引？&lt;/h2&gt;&lt;p&gt;列值为NULL也是可以走索引的&lt;br&gt;计划对列进行索引，应尽量避免把它设置为可空，因为这会让 MySQL 难以优化引用了可空列的查询，同时增加了引擎的复杂度&lt;/p&gt;
&lt;h2 id=&quot;78-关心过业务系统里面的sql耗时吗？统计过慢查询吗？对慢查询都怎么优化过？&quot;&gt;&lt;a href=&quot;#78-关心过业务系统里面的sql耗时吗？统计过慢查询吗？对慢查询都怎么优化过？&quot; class=&quot;headerlink&quot; title=&quot;78.   关心过业务系统里面的sql耗时吗？统计过慢查询吗？对慢查询都怎么优化过？&quot;&gt;&lt;/a&gt;78.   关心过业务系统里面的sql耗时吗？统计过慢查询吗？对慢查询都怎么优化过？&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;我们平时写Sql时，都要养成用explain分析的习惯。&lt;/li&gt;
&lt;li&gt;慢查询的统计，运维会定期统计给我们&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;优化慢查询：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;分析语句，是否加载了不必要的字段&amp;#x2F;数据。&lt;/li&gt;
&lt;li&gt;分析SQl执行句话，是否命中索引等。&lt;/li&gt;
&lt;li&gt;如果SQL很复杂，优化SQL结构&lt;/li&gt;
&lt;li&gt;如果表数据量太大，考虑分表&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;79-主键使用自增ID还是UUID，为什么？&quot;&gt;&lt;a href=&quot;#79-主键使用自增ID还是UUID，为什么？&quot; class=&quot;headerlink&quot; title=&quot;79.  主键使用自增ID还是UUID，为什么？&quot;&gt;&lt;/a&gt;79.  主键使用自增ID还是UUID，为什么？&lt;/h2&gt;&lt;p&gt;如果是单机的话，选择自增ID；如果是分布式系统，优先考虑UUID吧，但还是最好自己公司有一套分布式唯一ID生产方案吧。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;自增ID：数据存储空间小，查询效率高。但是如果数据量过大,会超出自增长的值范围，多库合并，也有可能有问题。&lt;/li&gt;
&lt;li&gt;uuid：适合大量数据的插入和更新操作，但是它无序的，插入数据效率慢，占用空间大。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;80-mysql自增主键用完了怎么办？&quot;&gt;&lt;a href=&quot;#80-mysql自增主键用完了怎么办？&quot; class=&quot;headerlink&quot; title=&quot;80. mysql自增主键用完了怎么办？&quot;&gt;&lt;/a&gt;80. mysql自增主键用完了怎么办？&lt;/h2&gt;&lt;p&gt;自增主键一般用int类型，一般达不到最大值，可以考虑提前分库分表的。&lt;/p&gt;
&lt;p&gt;自增ID用完后 一直都是最大值 如果标识了主键 则主键冲突&lt;/p&gt;
&lt;h2 id=&quot;81-字段为什么要求定义为not-null？&quot;&gt;&lt;a href=&quot;#81-字段为什么要求定义为not-null？&quot; class=&quot;headerlink&quot; title=&quot;81. 字段为什么要求定义为not null？&quot;&gt;&lt;/a&gt;81. 字段为什么要求定义为not null？&lt;/h2&gt;&lt;p&gt;null值会占用更多的字节，并且null有很多坑的。&lt;/p&gt;
&lt;h2 id=&quot;82-如果要存储用户的密码散列，应该使用什么字段进行存储？&quot;&gt;&lt;a href=&quot;#82-如果要存储用户的密码散列，应该使用什么字段进行存储？&quot; class=&quot;headerlink&quot; title=&quot;82.  如果要存储用户的密码散列，应该使用什么字段进行存储？&quot;&gt;&lt;/a&gt;82.  如果要存储用户的密码散列，应该使用什么字段进行存储？&lt;/h2&gt;&lt;p&gt;密码散列，盐，用户身份证号等固定长度的字符串，应该使用char而不是varchar来存储，这样可以节省空间且提高检索效率。&lt;/p&gt;
&lt;h2 id=&quot;83-Mysql驱动程序是什么？&quot;&gt;&lt;a href=&quot;#83-Mysql驱动程序是什么？&quot; class=&quot;headerlink&quot; title=&quot;83. Mysql驱动程序是什么？&quot;&gt;&lt;/a&gt;83. Mysql驱动程序是什么？&lt;/h2&gt;&lt;p&gt;这个jar包： mysql-connector-java-5.1.18.jar&lt;br&gt;Mysql驱动程序主要帮助编程语言与 MySQL服务端进行通信，如连接、传输数据、关闭等。&lt;/p&gt;
&lt;h2 id=&quot;84-如何优化长难的查询语句？有实战过吗？&quot;&gt;&lt;a href=&quot;#84-如何优化长难的查询语句？有实战过吗？&quot; class=&quot;headerlink&quot; title=&quot;84.   如何优化长难的查询语句？有实战过吗？&quot;&gt;&lt;/a&gt;84.   如何优化长难的查询语句？有实战过吗？&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;将一个大的查询分为多个小的相同的查询&lt;/li&gt;
&lt;li&gt;减少冗余记录的查询。&lt;/li&gt;
&lt;li&gt;一个复杂查询可以考虑拆成多个简单查询&lt;/li&gt;
&lt;li&gt;分解关联查询，让缓存的效率更高。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;85-优化特定类型的查询语句&quot;&gt;&lt;a href=&quot;#85-优化特定类型的查询语句&quot; class=&quot;headerlink&quot; title=&quot;85.  优化特定类型的查询语句&quot;&gt;&lt;/a&gt;85.  优化特定类型的查询语句&lt;/h2&gt;&lt;p&gt;平时积累吧：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;比如使用select 具体字段代替 select *&lt;/li&gt;
&lt;li&gt;使用count(*) 而不是count(列名)&lt;/li&gt;
&lt;li&gt;在不影响业务的情况，使用缓存&lt;/li&gt;
&lt;li&gt;explain 分析你的SQL&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;86-MySQL数据库cpu飙升的话，要怎么处理呢？&quot;&gt;&lt;a href=&quot;#86-MySQL数据库cpu飙升的话，要怎么处理呢？&quot; class=&quot;headerlink&quot; title=&quot;86. MySQL数据库cpu飙升的话，要怎么处理呢？&quot;&gt;&lt;/a&gt;86. MySQL数据库cpu飙升的话，要怎么处理呢？&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;排查过程：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用top 命令观察，确定是mysqld导致还是其他原因。&lt;/li&gt;
&lt;li&gt;如果是mysqld导致的，show processlist，查看session情况，确定是不是有消耗资源的sql在运行。&lt;/li&gt;
&lt;li&gt;找出消耗高的 sql，看看执行计划是否准确， 索引是否缺失，数据量是否太大。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;处理：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;kill 掉这些线程(同时观察 cpu 使用率是否下降)，&lt;/li&gt;
&lt;li&gt;进行相应的调整(比如说加索引、改 sql、改内存参数)&lt;/li&gt;
&lt;li&gt;重新跑这些 SQL。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;其他情况：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;也有可能是每个 sql 消耗资源并不多，但是突然之间，有大量的 session 连进来导致 cpu 飙升，这种情况就需要跟应用一起来分析为何连接数会激增，再做出相应的调整，比如说限制连接数等&lt;/p&gt;
&lt;h2 id=&quot;87-读写分离常见方案？&quot;&gt;&lt;a href=&quot;#87-读写分离常见方案？&quot; class=&quot;headerlink&quot; title=&quot;87.   读写分离常见方案？&quot;&gt;&lt;/a&gt;87.   读写分离常见方案？&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;应用程序根据业务逻辑来判断，增删改等写操作命令发给主库，查询命令发给备库。&lt;/li&gt;
&lt;li&gt;利用中间件来做代理，负责对数据库的请求识别出读还是写，并分发到不同的数据库中。（如：amoeba，mysql-proxy）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;88-MySQL的复制原理以及流程&quot;&gt;&lt;a href=&quot;#88-MySQL的复制原理以及流程&quot; class=&quot;headerlink&quot; title=&quot;88. MySQL的复制原理以及流程&quot;&gt;&lt;/a&gt;88. MySQL的复制原理以及流程&lt;/h2&gt;&lt;p&gt;主从复制原理，简言之，就三步曲，如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;主数据库有个bin-log二进制文件，纪录了所有增删改Sql语句。（binlog线程）&lt;/li&gt;
&lt;li&gt;从数据库把主数据库的bin-log文件的sql语句复制过来。（io线程）&lt;/li&gt;
&lt;li&gt;从数据库的relay-log重做日志文件中再执行一次这些sql语句。（Sql执行线程）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;主从复制分了五个步骤进行：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;步骤一：主库的更新事件(update、insert、delete)被写到binlog&lt;/li&gt;
&lt;li&gt;步骤二：从库发起连接，连接到主库。&lt;/li&gt;
&lt;li&gt;步骤三：此时主库创建一个binlog dump thread，把binlog的内容发送到从库。&lt;/li&gt;
&lt;li&gt;步骤四：从库启动之后，创建一个I&amp;#x2F;O线程，读取主库传过来的binlog内容并写入到relay log&lt;/li&gt;
&lt;li&gt;步骤五：还会创建一个SQL线程，从relay log里面读取内容，从Exec_Master_Log_Pos位置开始执行读取到的更新事件，将更新内容写入到slave的db&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;89-MySQL中DATETIME和TIMESTAMP的区别&quot;&gt;&lt;a href=&quot;#89-MySQL中DATETIME和TIMESTAMP的区别&quot; class=&quot;headerlink&quot; title=&quot;89.  MySQL中DATETIME和TIMESTAMP的区别&quot;&gt;&lt;/a&gt;89.  MySQL中DATETIME和TIMESTAMP的区别&lt;/h2&gt;&lt;p&gt;存储精度都为秒&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;区别：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;DATETIME 的日期范围是 1001——9999 年；TIMESTAMP 的时间范围是 1970——2038 年&lt;/li&gt;
&lt;li&gt;DATETIME 存储时间与时区无关；TIMESTAMP 存储时间与时区有关，显示的值也依赖于时区&lt;/li&gt;
&lt;li&gt;DATETIME 的存储空间为 8 字节；TIMESTAMP 的存储空间为 4 字节&lt;/li&gt;
&lt;li&gt;DATETIME 的默认值为 null；TIMESTAMP 的字段默认不为空(not null)，默认值为当前时间(CURRENT_TIMESTAMP)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;90-Innodb的事务实现原理？&quot;&gt;&lt;a href=&quot;#90-Innodb的事务实现原理？&quot; class=&quot;headerlink&quot; title=&quot;90.   Innodb的事务实现原理？&quot;&gt;&lt;/a&gt;90.   Innodb的事务实现原理？&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;原子性：是使用 undo log来实现的，如果事务执行过程中出错或者用户执行了rollback，系统通过undo log日志返回事务开始的状态。&lt;/li&gt;
&lt;li&gt;持久性：使用 redo log来实现，只要redo log日志持久化了，当系统崩溃，即可通过redo log把数据恢复。&lt;/li&gt;
&lt;li&gt;隔离性：通过锁以及MVCC,使事务相互隔离开。&lt;/li&gt;
&lt;li&gt;一致性：通过回滚、恢复，以及并发情况下的隔离性，从而实现一致性。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;91-谈谈MySQL的Explain&quot;&gt;&lt;a href=&quot;#91-谈谈MySQL的Explain&quot; class=&quot;headerlink&quot; title=&quot;91. 谈谈MySQL的Explain&quot;&gt;&lt;/a&gt;91. 谈谈MySQL的Explain&lt;/h2&gt;&lt;p&gt;Explain 执行计划包含字段信息如下：分别是 id、select_type、table、partitions、type、possible_keys、key、key_len、ref、rows、filtered、Extra 等12个字段。&lt;br&gt;我们重点关注的是type，它的属性排序如下：&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;system&lt;/span&gt;  &lt;span class=&quot;operator&quot;&gt;&amp;gt;&lt;/span&gt; const &lt;span class=&quot;operator&quot;&gt;&amp;gt;&lt;/span&gt; eq_ref &lt;span class=&quot;operator&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;ref&lt;/span&gt;  &lt;span class=&quot;operator&quot;&gt;&amp;gt;&lt;/span&gt; ref_or_null &lt;span class=&quot;operator&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;index_merge &lt;span class=&quot;operator&quot;&gt;&amp;gt;&lt;/span&gt; unique_subquery &lt;span class=&quot;operator&quot;&gt;&amp;gt;&lt;/span&gt; index_subquery &lt;span class=&quot;operator&quot;&gt;&amp;gt;&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;range&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;&amp;gt;&lt;/span&gt; index &lt;span class=&quot;operator&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;ALL&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&quot;92-Innodb的事务与日志的实现方式&quot;&gt;&lt;a href=&quot;#92-Innodb的事务与日志的实现方式&quot; class=&quot;headerlink&quot; title=&quot;92. Innodb的事务与日志的实现方式&quot;&gt;&lt;/a&gt;92. Innodb的事务与日志的实现方式&lt;/h2&gt;&lt;h3 id=&quot;有多少种日志&quot;&gt;&lt;a href=&quot;#有多少种日志&quot; class=&quot;headerlink&quot; title=&quot;有多少种日志&quot;&gt;&lt;/a&gt;有多少种日志&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;innodb两种日志redo和undo。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;日志的存放形式&quot;&gt;&lt;a href=&quot;#日志的存放形式&quot; class=&quot;headerlink&quot; title=&quot;日志的存放形式&quot;&gt;&lt;/a&gt;日志的存放形式&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;redo：在页修改的时候，先写到 redo log buffer 里面， 然后写到 redo log 的文件系统缓存里面(fwrite)，然后再同步到磁盘文件（ fsync）。&lt;/li&gt;
&lt;li&gt;Undo：在 MySQL5.5 之前， undo 只能存放在 ibdata文件里面， 5.6 之后，可以通过设置 innodb_undo_tablespaces 参数把 undo log 存放在 ibdata之外。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;事务是如何通过日志来实现的&quot;&gt;&lt;a href=&quot;#事务是如何通过日志来实现的&quot; class=&quot;headerlink&quot; title=&quot;事务是如何通过日志来实现的&quot;&gt;&lt;/a&gt;事务是如何通过日志来实现的&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;因为事务在修改页时，要先记 undo，在记 undo 之前要记 undo 的 redo， 然后修改数据页，再记数据页修改的 redo。 Redo（里面包括 undo 的修改） 一定要比数据页先持久化到磁盘。&lt;/li&gt;
&lt;li&gt;当事务需要回滚时，因为有 undo，可以把数据页回滚到前镜像的 状态，崩溃恢复时，如果 redo log 中事务没有对应的 commit 记录，那么需要用 undo把该事务的修改回滚到事务开始之前。&lt;/li&gt;
&lt;li&gt;如果有 commit 记录，就用 redo 前滚到该事务完成时并提交掉。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;93-MySQL中TEXT数据类型的最大长度&quot;&gt;&lt;a href=&quot;#93-MySQL中TEXT数据类型的最大长度&quot; class=&quot;headerlink&quot; title=&quot;93.  MySQL中TEXT数据类型的最大长度&quot;&gt;&lt;/a&gt;93.  MySQL中TEXT数据类型的最大长度&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;TINYTEXT：256 bytes&lt;/li&gt;
&lt;li&gt;TEXT：65,535 bytes(64kb)&lt;/li&gt;
&lt;li&gt;MEDIUMTEXT：16,777,215 bytes(16MB)&lt;/li&gt;
&lt;li&gt;LONGTEXT：4,294,967,295 bytes(4GB)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;94-500台db，在最快时间之内重启。&quot;&gt;&lt;a href=&quot;#94-500台db，在最快时间之内重启。&quot; class=&quot;headerlink&quot; title=&quot;94.  500台db，在最快时间之内重启。&quot;&gt;&lt;/a&gt;94.  500台db，在最快时间之内重启。&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;可以使用批量 ssh 工具 pssh 来对需要重启的机器执行重启命令。&lt;/li&gt;
&lt;li&gt;也可以使用 salt（前提是客户端有安装 salt）或者 ansible（ ansible 只需要 ssh 免登通了就行）等多线程工具同时操作多台服务&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;95-你是如何监控你们的数据库的？你们的慢日志都是怎么查询的？&quot;&gt;&lt;a href=&quot;#95-你是如何监控你们的数据库的？你们的慢日志都是怎么查询的？&quot; class=&quot;headerlink&quot; title=&quot;95. 你是如何监控你们的数据库的？你们的慢日志都是怎么查询的？&quot;&gt;&lt;/a&gt;95. 你是如何监控你们的数据库的？你们的慢日志都是怎么查询的？&lt;/h2&gt;&lt;p&gt;监控的工具有很多，例如zabbix，lepus，我这里用的是lepus&lt;/p&gt;
&lt;h2 id=&quot;96-你是否做过主从一致性校验，如果有，怎么做的，如果没有，你打算怎么做？&quot;&gt;&lt;a href=&quot;#96-你是否做过主从一致性校验，如果有，怎么做的，如果没有，你打算怎么做？&quot; class=&quot;headerlink&quot; title=&quot;96. 你是否做过主从一致性校验，如果有，怎么做的，如果没有，你打算怎么做？&quot;&gt;&lt;/a&gt;96. 你是否做过主从一致性校验，如果有，怎么做的，如果没有，你打算怎么做？&lt;/h2&gt;&lt;p&gt;主从一致性校验有多种工具 例如checksum、mysqldiff、pt-table-checksum等&lt;/p&gt;
&lt;h2 id=&quot;97-你们数据库是否支持emoji表情存储，如果不支持，如何操作？&quot;&gt;&lt;a href=&quot;#97-你们数据库是否支持emoji表情存储，如果不支持，如何操作？&quot; class=&quot;headerlink&quot; title=&quot;97. 你们数据库是否支持emoji表情存储，如果不支持，如何操作？&quot;&gt;&lt;/a&gt;97. 你们数据库是否支持emoji表情存储，如果不支持，如何操作？&lt;/h2&gt;&lt;p&gt;更换字符集utf8–&amp;gt;utf8mb4&lt;/p&gt;
&lt;h2 id=&quot;98-MySQL如何获取当前日期？&quot;&gt;&lt;a href=&quot;#98-MySQL如何获取当前日期？&quot; class=&quot;headerlink&quot; title=&quot;98.  MySQL如何获取当前日期？&quot;&gt;&lt;/a&gt;98.  MySQL如何获取当前日期？&lt;/h2&gt;&lt;p&gt;SELECT CURRENT_DATE();&lt;/p&gt;
&lt;h2 id=&quot;99-一个6亿的表a，一个3亿的表b，通过外间tid关联，你如何最快的查询出满足条件的第50000到第50200中的这200条数据记录。&quot;&gt;&lt;a href=&quot;#99-一个6亿的表a，一个3亿的表b，通过外间tid关联，你如何最快的查询出满足条件的第50000到第50200中的这200条数据记录。&quot; class=&quot;headerlink&quot; title=&quot;99. 一个6亿的表a，一个3亿的表b，通过外间tid关联，你如何最快的查询出满足条件的第50000到第50200中的这200条数据记录。&quot;&gt;&lt;/a&gt;99. 一个6亿的表a，一个3亿的表b，通过外间tid关联，你如何最快的查询出满足条件的第50000到第50200中的这200条数据记录。&lt;/h2&gt;&lt;p&gt;1、如果A表TID是自增长,并且是连续的,B表的ID为索引&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; a,b &lt;span class=&quot;keyword&quot;&gt;where&lt;/span&gt; a.tid &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; b.id &lt;span class=&quot;keyword&quot;&gt;and&lt;/span&gt; a.tid&lt;span class=&quot;operator&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;500000&lt;/span&gt; limit &lt;span class=&quot;number&quot;&gt;200&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;2、如果A表的TID不是连续的,那么就需要使用覆盖索引.TID要么是主键,要么是辅助索引,B表ID也需要有索引。&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; b , (&lt;span class=&quot;keyword&quot;&gt;select&lt;/span&gt; tid &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; a limit &lt;span class=&quot;number&quot;&gt;50000&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;200&lt;/span&gt;) a &lt;span class=&quot;keyword&quot;&gt;where&lt;/span&gt; b.id &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; a .tid;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&quot;100-Mysql一条SQL加锁分析&quot;&gt;&lt;a href=&quot;#100-Mysql一条SQL加锁分析&quot; class=&quot;headerlink&quot; title=&quot;100. Mysql一条SQL加锁分析&quot;&gt;&lt;/a&gt;100.</summary>
        
      
    
    
    
    <category term="面试" scheme="https://bishoptylaor.github.io/categories/interview/"/>
    
    <category term="面试100题" scheme="https://bishoptylaor.github.io/categories/interview/100prob/"/>
    
    
    <category term="必看必会" scheme="https://bishoptylaor.github.io/tags/%E5%BF%85%E7%9C%8B%E5%BF%85%E4%BC%9A/"/>
    
    <category term="面试" scheme="https://bishoptylaor.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="mysql" scheme="https://bishoptylaor.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>Redis 面试必备 X 题</title>
    <link href="https://bishoptylaor.github.io/interview/redis-interview/"/>
    <id>https://bishoptylaor.github.io/interview/redis-interview/</id>
    <published>2022-02-25T04:03:14.000Z</published>
    <updated>2024-05-25T13:54:38.343Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h2 id=&quot;常见面试问题&quot;&gt;&lt;a href=&quot;#常见面试问题&quot; class=&quot;headerlink&quot; title=&quot;常见面试问题&quot;&gt;&lt;/a&gt;常见面试问题&lt;/h2&gt;&lt;h3 id=&quot;1-分布式系统中常用的缓存方案有哪些？&quot;&gt;&lt;a href=&quot;#1-分布式系统中常用的缓存方案有哪些？&quot; class=&quot;headerlink&quot; title=&quot;1. 分布式系统中常用的缓存方案有哪些？&quot;&gt;&lt;/a&gt;1. 分布式系统中常用的缓存方案有哪些？&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;客户端缓存：页面和浏览器缓存，app 缓存，h5 缓存，localStorage，sessionStorage&lt;/li&gt;
&lt;li&gt;CDN：内容存储&amp;#x3D;数据存储，内容分发&amp;#x3D;负载均衡&lt;/li&gt;
&lt;li&gt;Nginx 缓存： 静态资源&lt;/li&gt;
&lt;li&gt;服务端缓存：本地缓存，外部缓存&lt;/li&gt;
&lt;li&gt;数据库缓存：持久缓存（mybatis，hibernate 多级缓存），mysql 查询缓存&lt;/li&gt;
&lt;li&gt;操作系统缓存：page cache，buffer cache&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;2-常见的缓存淘汰算法&quot;&gt;&lt;a href=&quot;#2-常见的缓存淘汰算法&quot; class=&quot;headerlink&quot; title=&quot;2. 常见的缓存淘汰算法&quot;&gt;&lt;/a&gt;2. 常见的缓存淘汰算法&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;FIFO - 先进先出&lt;/li&gt;
&lt;li&gt;LRU - 最近最少使用&lt;/li&gt;
&lt;li&gt;LFU - 最不经常使用&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;3-Redis-如何配置-Key-的过期时间？他的实现原理是什么？&quot;&gt;&lt;a href=&quot;#3-Redis-如何配置-Key-的过期时间？他的实现原理是什么？&quot; class=&quot;headerlink&quot; title=&quot;3. Redis 如何配置 Key 的过期时间？他的实现原理是什么？&quot;&gt;&lt;/a&gt;3. Redis 如何配置 Key 的过期时间？他的实现原理是什么？&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Expire or SETNX&lt;/li&gt;
&lt;li&gt;原理：&lt;ul&gt;
&lt;li&gt;定期删除：每隔一段时间，执行一次删除过期 Key 的操作（批量脚本）&lt;/li&gt;
&lt;li&gt;懒汉式删除：每当使用 get，getset 等指令去获取数据时，判断 key 是否过期，过期的话就先删除再操作&lt;/li&gt;
&lt;li&gt;redis 同时使用两者，平衡执行频率和执行时长&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;4-Redis-线程模型，单线程为什么快？&quot;&gt;&lt;a href=&quot;#4-Redis-线程模型，单线程为什么快？&quot; class=&quot;headerlink&quot; title=&quot;4. Redis 线程模型，单线程为什么快？&quot;&gt;&lt;/a&gt;4. Redis 线程模型，单线程为什么快？&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;基于 Reactor 开发了网络时间处理器 - 文件事件处理器，采用 IO 多路复用监听多个 Socket&lt;/li&gt;
&lt;li&gt;纯内存操作、核心基于非阻塞的 IO 多路复用机制、单线程避免了多线程反复上下文切换的性能问题&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;5-redis-的常见结构及应用场景&quot;&gt;&lt;a href=&quot;#5-redis-的常见结构及应用场景&quot; class=&quot;headerlink&quot; title=&quot;5. redis 的常见结构及应用场景&quot;&gt;&lt;/a&gt;5. redis 的常见结构及应用场景&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;string&lt;ul&gt;
&lt;li&gt;id&amp;#x2F;id_info 缓存  &lt;/li&gt;
&lt;li&gt;计数器  &lt;/li&gt;
&lt;li&gt;setnx 分布式锁 &lt;ul&gt;
&lt;li&gt;setnx 的时候会传入一个随机值&lt;/li&gt;
&lt;li&gt;解锁：‘if redis.call(‘get’, KEYS[1]) &amp;#x3D;&amp;#x3D; ARGV[1] then return redis.call(‘del’, KEYS[1]) else return 0 end’&lt;/li&gt;
&lt;li&gt;lua脚本&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;分布式ID &lt;/li&gt;
&lt;li&gt;sds（动态简单字符串）&lt;ul&gt;
&lt;li&gt;读取时间复杂度为 O(1)&lt;/li&gt;
&lt;li&gt;惰性删除，留待下次使用&lt;/li&gt;
&lt;li&gt;一次分配最大为 128kb&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;list&lt;ul&gt;
&lt;li&gt;当队列用，最近100个购买用户信息  &lt;/li&gt;
&lt;li&gt;当栈用  &lt;/li&gt;
&lt;li&gt;非实时分页列表，比如小时榜，日榜，周榜&lt;/li&gt;
&lt;li&gt;存储微博、微信公众号等消息流数据&lt;/li&gt;
&lt;li&gt;等于链表，插入删除 O(1)，查找 O(n)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;hash&lt;ul&gt;
&lt;li&gt;相比string获取单个字段节省 序列化与反序列化操作&lt;/li&gt;
&lt;li&gt;相当于 HashMap ，由数组加链表组合而成，当一维的 hash 数组碰撞时，用链表串起来&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;set&lt;ul&gt;
&lt;li&gt;取交、并、差集  &lt;/li&gt;
&lt;li&gt;点赞、收藏、关注等…  &lt;/li&gt;
&lt;li&gt;kv 模式&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;sorted set&lt;ul&gt;
&lt;li&gt;排行榜功能，实时分页列表，实时榜单等&lt;/li&gt;
&lt;li&gt;set 基础上增加了分数&lt;/li&gt;
&lt;li&gt;结构上是由一个 dict 和一个跳表组成，dict 保证 key 唯一性&lt;/li&gt;
&lt;li&gt;插入删除都是 O(log n)，查找 O(logn)&lt;/li&gt;
&lt;li&gt;一大优点是可以对分数进行范围查找&lt;/li&gt;
&lt;li&gt;少量数据按照 ziplist 存储，大量数据按照跳表存储&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;redis-大key-问题是什么？怎么查出来？一般怎么解决？&quot;&gt;&lt;a href=&quot;#redis-大key-问题是什么？怎么查出来？一般怎么解决？&quot; class=&quot;headerlink&quot; title=&quot;redis 大key 问题是什么？怎么查出来？一般怎么解决？&quot;&gt;&lt;/a&gt;redis 大key 问题是什么？怎么查出来？一般怎么解决？&lt;/h4&gt;&lt;p&gt;大key问题呢是说 redis 的 kv 存储中，value值过大，一般超过10kb，我们就会认为这是一个大 key 了。&lt;br&gt;有执行命令，但是没有专门准备这个内容&lt;br&gt;大 key 的危害主要是：在redis内存中分布不均；操作耗时；取结果的数据量大，容易造成网络io堵塞&lt;br&gt;解决方式呢：可以逻辑上对于大 key 的 value 进行拆分和重组。其中 string 类型的大 key 一般不建议存到redis。另外的可以采用 hash 将大 key 拆分&lt;/p&gt;
&lt;h3 id=&quot;6-redis-集群方案&quot;&gt;&lt;a href=&quot;#6-redis-集群方案&quot; class=&quot;headerlink&quot; title=&quot;6. redis 集群方案&quot;&gt;&lt;/a&gt;6. redis 集群方案&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;主从模式&lt;/li&gt;
&lt;li&gt;哨兵模式&lt;ul&gt;
&lt;li&gt;概念&lt;ul&gt;
&lt;li&gt;集群监控：监控主从是否正常&lt;/li&gt;
&lt;li&gt;消息通知：故障通知&lt;/li&gt;
&lt;li&gt;故障转移：主挂了，移到从身上&lt;/li&gt;
&lt;li&gt;配置中心：通知 client 新的 master 地址&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;本身也是分布式的，具体方案：&lt;ul&gt;
&lt;li&gt;通常3个哨兵实例来保证健壮性&lt;/li&gt;
&lt;li&gt;即使哨兵自己挂了，还是可以正常工作&lt;/li&gt;
&lt;li&gt;不保证数据领丢失，可以说主从结构就不保证&lt;/li&gt;
&lt;li&gt;判断故障需要用&lt;code&gt;分布式选举&lt;/code&gt;获得大部分哨兵统一才行&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Redis cluster：服务端 Sharding 计数。采用槽的概念，一共16384个槽，请求发送至任意节点&lt;ul&gt;
&lt;li&gt;方案说明&lt;ul&gt;
&lt;li&gt;通过哈希的方式，将数据分片，每个节点均分存储一定哈希槽（哈希值）区间的数据&lt;/li&gt;
&lt;li&gt;每份数据分片会存储在多个互为主从的多节点上&lt;/li&gt;
&lt;li&gt;数据先写入主节点，再&lt;code&gt;阻塞&lt;/code&gt;同步至从节点&lt;/li&gt;
&lt;li&gt;同一分片之间不保证强一致性&lt;/li&gt;
&lt;li&gt;扩容时需要把旧节点数据也迁移一部分至新节点&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;gossip 协议，多主多从&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;sorted set  &lt;ul&gt;
&lt;li&gt;实时分页列表，如实时榜单&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;一般就是当缓存用&lt;/li&gt;
&lt;li&gt;单线程模型&lt;/li&gt;
&lt;li&gt;目的是服务无状态：session，token等；分布式锁&lt;/li&gt;
&lt;li&gt;无锁化？&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;2-单线程还是多线程？&quot;&gt;&lt;a href=&quot;#2-单线程还是多线程？&quot; class=&quot;headerlink&quot; title=&quot;2. 单线程还是多线程？&quot;&gt;&lt;/a&gt;2. 单线程还是多线程？&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;工作线程都是单线程：&lt;ul&gt;
&lt;li&gt;操作是原子的单指令 pipeline&lt;/li&gt;
&lt;li&gt;事务 vs pipeline ：事务执行期间是原子的；执行失败就是失败，其他指令继续执行，没有回滚 –&amp;gt; redis 少使用事务 &amp;amp;&amp;amp; 事务内的指令少 + 快&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;6.x+版本出现了 io 多线程&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;详细理解 io 多线程 ：内核，网络通信（懂了再说）&lt;/li&gt;
&lt;li&gt;单线程，满足 redis 的串行原子；io 多线程以后，把输入&amp;#x2F;输出放到线程中并行，好处是：执行时间快；更好的压榨系统及硬件的资源&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;3-redis-存在线程安全的问题么？为什么？&quot;&gt;&lt;a href=&quot;#3-redis-存在线程安全的问题么？为什么？&quot; class=&quot;headerlink&quot; title=&quot;3. redis 存在线程安全的问题么？为什么？&quot;&gt;&lt;/a&gt;3. redis 存在线程安全的问题么？为什么？&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;参考问题2，redis核心是单线程串行，业务使用的时候需要自行保障线程安全&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;4&quot;&gt;&lt;a href=&quot;#4&quot; class=&quot;headerlink&quot; title=&quot;4.&quot;&gt;&lt;/a&gt;4.&lt;/h3&gt;&lt;h3 id=&quot;6-缓存如何淘汰的？&quot;&gt;&lt;a href=&quot;#6-缓存如何淘汰的？&quot; class=&quot;headerlink&quot; title=&quot;6. 缓存如何淘汰的？&quot;&gt;&lt;/a&gt;6. 缓存如何淘汰的？&lt;/h3&gt;&lt;p&gt;内存空间不足&lt;br&gt;淘汰机制&lt;br&gt;lru，lfu，random，ttl&lt;br&gt;全空间&lt;br&gt;设置了过期时间的key的集合中&lt;/p&gt;
&lt;h3 id=&quot;7-如何进行缓存预热？&quot;&gt;&lt;a href=&quot;#7-如何进行缓存预热？&quot; class=&quot;headerlink&quot; title=&quot;7. 如何进行缓存预热？&quot;&gt;&lt;/a&gt;7. 如何进行缓存预热？&lt;/h3&gt;&lt;p&gt;提前加载数据（很难判断哪些是真正的热数据，常常会出现缓存失败的情况）&lt;br&gt;开发逻辑上要应对差集数据造成的 击穿，穿透，雪崩&lt;/p&gt;
&lt;h3 id=&quot;8-数据库和缓存不一致如何解决？&quot;&gt;&lt;a href=&quot;#8-数据库和缓存不一致如何解决？&quot; class=&quot;headerlink&quot; title=&quot;8. 数据库和缓存不一致如何解决？&quot;&gt;&lt;/a&gt;8. 数据库和缓存不一致如何解决？&lt;/h3&gt;&lt;p&gt;恶心点的使用事务，但是意义不大，场景多为读多写极少，仅仅在秀肌肉&lt;br&gt;业务写db，然后redis更新缓存&lt;br&gt;业务写到消息队列中，redis和db同时消费数据，同时更新&lt;br&gt;redis缓存，更倾向于允许稍微的时差&lt;br&gt;总思路是减少db操作&lt;/p&gt;
&lt;h3 id=&quot;9-redis-主从不一致如何解决？&quot;&gt;&lt;a href=&quot;#9-redis-主从不一致如何解决？&quot; class=&quot;headerlink&quot; title=&quot;9. redis 主从不一致如何解决？&quot;&gt;&lt;/a&gt;9. redis 主从不一致如何解决？&lt;/h3&gt;&lt;p&gt;redis 默认弱一致性，主从异步同步&lt;br&gt;分布式锁不能用主从，可以用单实例、分片集群、redlock –&amp;gt; redisson&lt;br&gt;配置中可以配置同步因子，总趋向于强一致性&lt;/p&gt;
&lt;h3 id=&quot;10-redis-持久化原理&quot;&gt;&lt;a href=&quot;#10-redis-持久化原理&quot; class=&quot;headerlink&quot; title=&quot;10. redis 持久化原理&quot;&gt;&lt;/a&gt;10. redis 持久化原理&lt;/h3&gt;&lt;p&gt;当前线程阻塞服务&lt;br&gt;后台异步进程完成持久化&lt;/p&gt;
&lt;h3 id=&quot;11-并发超量，redis-崩溃后如何处理？&quot;&gt;&lt;a href=&quot;#11-并发超量，redis-崩溃后如何处理？&quot; class=&quot;headerlink&quot; title=&quot;11. 并发超量，redis 崩溃后如何处理？&quot;&gt;&lt;/a&gt;11. 并发超量，redis 崩溃后如何处理？&lt;/h3&gt;&lt;p&gt;雪崩击穿穿透处理方案&lt;/p&gt;
&lt;h3 id=&quot;12-为啥使用setnx&quot;&gt;&lt;a href=&quot;#12-为啥使用setnx&quot; class=&quot;headerlink&quot; title=&quot;12. 为啥使用setnx&quot;&gt;&lt;/a&gt;12. 为啥使用setnx&lt;/h3&gt;&lt;p&gt;原子，不存在即创建&lt;br&gt;分布式锁，用 set k v nx ex 不存在，过期时间，避免死锁&lt;/p&gt;
&lt;p&gt;设计短链&lt;br&gt;base64加密解密。&lt;br&gt;热url，满了怎么办？对内部？对外部？双方隔离？布隆判存在性？&lt;/p&gt;
&lt;p&gt;qps</summary>
        
      
    
    
    
    <category term="面试" scheme="https://bishoptylaor.github.io/categories/interview/"/>
    
    
    <category term="必看必会" scheme="https://bishoptylaor.github.io/tags/%E5%BF%85%E7%9C%8B%E5%BF%85%E4%BC%9A/"/>
    
    <category term="面试" scheme="https://bishoptylaor.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="nosql" scheme="https://bishoptylaor.github.io/tags/nosql/"/>
    
    <category term="redis" scheme="https://bishoptylaor.github.io/tags/redis/"/>
    
    <category term="哨兵" scheme="https://bishoptylaor.github.io/tags/%E5%93%A8%E5%85%B5/"/>
    
    <category term="缓存" scheme="https://bishoptylaor.github.io/tags/%E7%BC%93%E5%AD%98/"/>
    
    <category term="分布式" scheme="https://bishoptylaor.github.io/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
    <category term="raft" scheme="https://bishoptylaor.github.io/tags/raft/"/>
    
    <category term="并发" scheme="https://bishoptylaor.github.io/tags/%E5%B9%B6%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>Golang Context 详解</title>
    <link href="https://bishoptylaor.github.io/library/Golang/concurrency/go-context/"/>
    <id>https://bishoptylaor.github.io/library/Golang/concurrency/go-context/</id>
    <published>2022-02-23T05:02:12.000Z</published>
    <updated>2024-05-22T10:45:53.963Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h3 id=&quot;go-并发控制&quot;&gt;&lt;a href=&quot;#go-并发控制&quot; class=&quot;headerlink&quot; title=&quot;go 并发控制&quot;&gt;&lt;/a&gt;go 并发控制&lt;/h3&gt;&lt;p&gt;实际生产中，WaitGroup 和 Channel 是常见的 2 种并发控制的方式。&lt;br&gt;如果有一系列任务，需要这些任务全部完成以后才能继续执行，WaitGroup 非常适合于这类场景，例如下面的例子：&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; wg sync.WaitGroup  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;doTask&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(n &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  time.Sleep(time.Duration(n))  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  fmt.Printf(&lt;span class=&quot;string&quot;&gt;&amp;quot;Task %d Done&#92;n&amp;quot;&lt;/span&gt;, n)  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  wg.Done()  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i := &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;; i++ &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    wg.Add(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;go&lt;/span&gt; doTask(i + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  wg.Wait()  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  fmt.Println(&lt;span class=&quot;string&quot;&gt;&amp;quot;All Task Done&amp;quot;&lt;/span&gt;)  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Task 3 Done  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Task 1 Done  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Task 2 Done  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// All Task Done  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;wg.Wait()&lt;/code&gt; 会等待所有的子任务全部完成，所有子协程结束后，才会执行 &lt;code&gt;wg.Wait()&lt;/code&gt; 后面的代码。&lt;br&gt;WaitGroup 只能等待子任务全部完成才能执行下一步，那么如果我们想要在主进程中通知子协程退出呢？这种场景下，可以使用 &lt;code&gt;select + chan&lt;/code&gt; 机制。&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; stop &lt;span class=&quot;keyword&quot;&gt;chan&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;bool&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;reqTask&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(name &lt;span class=&quot;type&quot;&gt;string&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;select&lt;/span&gt; &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &amp;lt;-stop:  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      fmt.Println(&lt;span class=&quot;string&quot;&gt;&amp;quot;stop&amp;quot;&lt;/span&gt;, name)  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt;:  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      fmt.Println(name, &lt;span class=&quot;string&quot;&gt;&amp;quot;send request&amp;quot;&lt;/span&gt;)  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      time.Sleep(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; * time.Second)  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  stop = &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;chan&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;bool&lt;/span&gt;)  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;go&lt;/span&gt; reqTask(&lt;span class=&quot;string&quot;&gt;&amp;quot;worker&amp;quot;&lt;/span&gt;)  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  time.Sleep(&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; * time.Second)  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  stop &amp;lt;- &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  time.Sleep(&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; * time.Second)  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// worker send request  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// worker send request  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// worker send request  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// stop worker  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;更复杂的场景如何做并发控制呢？Go 语言提供了 Context 标准库可以解决这类场景的问题，Context 的作用和它的名字很像，上下文，即子协程的下上文。Context 有两个主要的功能：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通知子协程退出（正常退出，超时退出等）；&lt;/li&gt;
&lt;li&gt;传递必要的参数。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Context&quot;&gt;&lt;a href=&quot;#Context&quot; class=&quot;headerlink&quot; title=&quot;Context&quot;&gt;&lt;/a&gt;Context&lt;/h3&gt;&lt;p&gt;&lt;code&gt;context.WithCancel()&lt;/code&gt; 创建可取消的 Context 对象，即可以主动通知子协程退出。&lt;/p&gt;
&lt;h3 id=&quot;2-1-控制单个协程&quot;&gt;&lt;a href=&quot;#2-1-控制单个协程&quot; class=&quot;headerlink&quot; title=&quot;2.1 控制单个协程&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://geektutu.com/post/quick-go-context.html#2-1-%E6%8E%A7%E5%88%B6%E5%8D%95%E4%B8%AA%E5%8D%8F%E7%A8%8B&quot; title=&quot;2.1 控制单个协程&quot;&gt;&lt;/a&gt;2.1 控制单个协程&lt;/h3&gt;&lt;p&gt;使用 Context 改写上述的例子，效果与 &lt;code&gt;select+chan&lt;/code&gt; 相同。&lt;/p&gt;
&lt;p&gt;1&lt;br&gt;2&lt;br&gt;3&lt;br&gt;4&lt;br&gt;5&lt;br&gt;6&lt;br&gt;7&lt;br&gt;8&lt;br&gt;9&lt;br&gt;10&lt;br&gt;11&lt;br&gt;12&lt;br&gt;13&lt;br&gt;14&lt;br&gt;15&lt;br&gt;16&lt;br&gt;17&lt;br&gt;18&lt;br&gt;19&lt;br&gt;20  &lt;/p&gt;
&lt;p&gt;func reqTask(ctx context.Context, name string) {&lt;br&gt; for {&lt;br&gt; select {&lt;br&gt; case &amp;lt;-ctx.Done():&lt;br&gt; fmt.Println(“stop”, name)&lt;br&gt; return&lt;br&gt; default:&lt;br&gt; fmt.Println(name, “send request”)&lt;br&gt; time.Sleep(1 * time.Second)&lt;br&gt; }&lt;br&gt; }&lt;br&gt;}  &lt;/p&gt;
&lt;p&gt;func main() {&lt;br&gt; ctx, cancel :&amp;#x3D; context.WithCancel(context.Background())&lt;br&gt; go reqTask(ctx, “worker1”)&lt;br&gt; time.Sleep(3 * time.Second)&lt;br&gt; cancel()&lt;br&gt; time.Sleep(3 * time.Second)&lt;br&gt;}  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;context.Backgroud()&lt;/code&gt; 创建根 Context，通常在 main 函数、初始化和测试代码中创建，作为顶层 Context。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;context.WithCancel(parent)&lt;/code&gt; 创建可取消的子 Context，同时返回函数 &lt;code&gt;cancel&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;在子协程中，使用 select 调用 &lt;code&gt;&amp;lt;-ctx.Done()&lt;/code&gt; 判断是否需要退出。&lt;/li&gt;
&lt;li&gt;主协程中，调用 &lt;code&gt;cancel()&lt;/code&gt; 函数通知子协程退出。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;2-2-控制多个协程&quot;&gt;&lt;a href=&quot;#2-2-控制多个协程&quot; class=&quot;headerlink&quot; title=&quot;2.2 控制多个协程&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://geektutu.com/post/quick-go-context.html#2-2-%E6%8E%A7%E5%88%B6%E5%A4%9A%E4%B8%AA%E5%8D%8F%E7%A8%8B&quot; title=&quot;2.2 控制多个协程&quot;&gt;&lt;/a&gt;2.2 控制多个协程&lt;/h3&gt;&lt;p&gt;1&lt;br&gt;2&lt;br&gt;3&lt;br&gt;4&lt;br&gt;5&lt;br&gt;6&lt;br&gt;7&lt;br&gt;8&lt;br&gt;9&lt;br&gt;10  &lt;/p&gt;
&lt;p&gt;func main() {&lt;br&gt; ctx, cancel :&amp;#x3D; context.WithCancel(context.Background())  &lt;/p&gt;
&lt;p&gt; go reqTask(ctx, “worker1”)&lt;br&gt; go reqTask(ctx, “worker2”)  &lt;/p&gt;
&lt;p&gt; time.Sleep(3 * time.Second)&lt;br&gt; cancel()&lt;br&gt; time.Sleep(3 * time.Second)&lt;br&gt;}  &lt;/p&gt;
&lt;p&gt;为每个子协程传递相同的上下文 &lt;code&gt;ctx&lt;/code&gt; 即可，调用 &lt;code&gt;cancel()&lt;/code&gt; 函数后该 Context 控制的所有子协程都会退出。&lt;/p&gt;
&lt;p&gt;1&lt;br&gt;2&lt;br&gt;3&lt;br&gt;4&lt;br&gt;5&lt;br&gt;6&lt;br&gt;7&lt;br&gt;8  &lt;/p&gt;
&lt;p&gt;worker1 send request&lt;br&gt;worker2 send request&lt;br&gt;worker1 send request&lt;br&gt;worker2 send request&lt;br&gt;worker1 send request&lt;br&gt;worker2 send request&lt;br&gt;stop worker1&lt;br&gt;stop worker2  &lt;/p&gt;
&lt;h2 id=&quot;3-context-WithValue&quot;&gt;&lt;a href=&quot;#3-context-WithValue&quot; class=&quot;headerlink&quot; title=&quot;3 context.WithValue&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://geektutu.com/post/quick-go-context.html#3-context-WithValue&quot; title=&quot;3 context.WithValue&quot;&gt;&lt;/a&gt;3 context.WithValue&lt;/h2&gt;&lt;p&gt;如果需要往子协程中传递参数，可以使用 &lt;code&gt;context.WithValue()&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;1&lt;br&gt;2&lt;br&gt;3&lt;br&gt;4&lt;br&gt;5&lt;br&gt;6&lt;br&gt;7&lt;br&gt;8&lt;br&gt;9&lt;br&gt;10&lt;br&gt;11&lt;br&gt;12&lt;br&gt;13&lt;br&gt;14&lt;br&gt;15&lt;br&gt;16&lt;br&gt;17&lt;br&gt;18&lt;br&gt;19&lt;br&gt;20&lt;br&gt;21&lt;br&gt;22&lt;br&gt;23&lt;br&gt;24&lt;br&gt;25&lt;br&gt;26&lt;br&gt;27  &lt;/p&gt;
&lt;p&gt;type Options struct{ Interval time.Duration }  &lt;/p&gt;
&lt;p&gt;func reqTask(ctx context.Context, name string) {&lt;br&gt; for {&lt;br&gt; select {&lt;br&gt; case &amp;lt;-ctx.Done():&lt;br&gt; fmt.Println(“stop”, name)&lt;br&gt; return&lt;br&gt; default:&lt;br&gt; fmt.Println(name, “send request”)&lt;br&gt; op :&amp;#x3D; ctx.Value(“options”).(*Options)&lt;br&gt; time.Sleep(op.Interval * time.Second)&lt;br&gt; }&lt;br&gt; }&lt;br&gt;}  &lt;/p&gt;
&lt;p&gt;func main() {&lt;br&gt; ctx, cancel :&amp;#x3D; context.WithCancel(context.Background())&lt;br&gt; vCtx :&amp;#x3D; context.WithValue(ctx, “options”, &amp;amp;Options{1})  &lt;/p&gt;
&lt;p&gt; go reqTask(vCtx, “worker1”)&lt;br&gt; go reqTask(vCtx, “worker2”)  &lt;/p&gt;
&lt;p&gt; time.Sleep(3 * time.Second)&lt;br&gt; cancel()&lt;br&gt; time.Sleep(3 * time.Second)&lt;br&gt;}  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;context.WithValue()&lt;/code&gt; 创建了一个基于 &lt;code&gt;ctx&lt;/code&gt; 的子 Context，并携带了值 &lt;code&gt;options&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;在子协程中，使用 &lt;code&gt;ctx.Value(&amp;quot;options&amp;quot;)&lt;/code&gt; 获取到传递的值，读取&amp;#x2F;修改该值。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;4-context-WithTimeout&quot;&gt;&lt;a href=&quot;#4-context-WithTimeout&quot; class=&quot;headerlink&quot; title=&quot;4 context.WithTimeout&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://geektutu.com/post/quick-go-context.html#4-context-WithTimeout&quot; title=&quot;4 context.WithTimeout&quot;&gt;&lt;/a&gt;4 context.WithTimeout&lt;/h2&gt;&lt;p&gt;如果需要控制子协程的执行时间，可以使用 &lt;code&gt;context.WithTimeout&lt;/code&gt; 创建具有超时通知机制的 Context 对象。&lt;/p&gt;
&lt;p&gt;1&lt;br&gt;2&lt;br&gt;3&lt;br&gt;4&lt;br&gt;5&lt;br&gt;6&lt;br&gt;7&lt;br&gt;8&lt;br&gt;9&lt;br&gt;10  &lt;/p&gt;
&lt;p&gt;func main() {&lt;br&gt; ctx, cancel :&amp;#x3D; context.WithTimeout(context.Background(), 2*time.Second)&lt;br&gt; go reqTask(ctx, “worker1”)&lt;br&gt; go reqTask(ctx, “worker2”)  &lt;/p&gt;
&lt;p&gt; time.Sleep(3 * time.Second)&lt;br&gt; fmt.Println(“before cancel”)&lt;br&gt; cancel()&lt;br&gt; time.Sleep(3 * time.Second)&lt;br&gt;}  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;WithTimeout()&lt;/code&gt;的使用与 &lt;code&gt;WithCancel()&lt;/code&gt; 类似，多了一个参数，用于设置超时时间。执行结果如下：&lt;/p&gt;
&lt;p&gt;1&lt;br&gt;2&lt;br&gt;3&lt;br&gt;4&lt;br&gt;5&lt;br&gt;6&lt;br&gt;7  &lt;/p&gt;
&lt;p&gt;worker2 send request&lt;br&gt;worker1 send request&lt;br&gt;worker1 send request&lt;br&gt;worker2 send request&lt;br&gt;stop worker2&lt;br&gt;stop worker1&lt;br&gt;before cancel  &lt;/p&gt;
&lt;p&gt;因为超时时间设置为 2s，但是 main 函数中，3s 后才会调用 &lt;code&gt;cancel()&lt;/code&gt;，因此，在调用 &lt;code&gt;cancel()&lt;/code&gt; 函数前，子协程因为超时已经退出了。&lt;/p&gt;
&lt;h2 id=&quot;5-context-WithDeadline&quot;&gt;&lt;a href=&quot;#5-context-WithDeadline&quot; class=&quot;headerlink&quot; title=&quot;5 context.WithDeadline&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://geektutu.com/post/quick-go-context.html#5-context-WithDeadline&quot; title=&quot;5 context.WithDeadline&quot;&gt;&lt;/a&gt;5 context.WithDeadline&lt;/h2&gt;&lt;p&gt;超时退出可以控制子协程的最长执行时间，那 &lt;code&gt;context.WithDeadline()&lt;/code&gt; 则可以控制子协程的最迟退出时间。&lt;/p&gt;
&lt;p&gt;1&lt;br&gt;2&lt;br&gt;3&lt;br&gt;4&lt;br&gt;5&lt;br&gt;6&lt;br&gt;7&lt;br&gt;8&lt;br&gt;9&lt;br&gt;10&lt;br&gt;11&lt;br&gt;12&lt;br&gt;13&lt;br&gt;14&lt;br&gt;15&lt;br&gt;16&lt;br&gt;17&lt;br&gt;18&lt;br&gt;19&lt;br&gt;20&lt;br&gt;21&lt;br&gt;22&lt;br&gt;23  &lt;/p&gt;
&lt;p&gt;func reqTask(ctx context.Context, name string) {&lt;br&gt; for {&lt;br&gt; select {&lt;br&gt; case &amp;lt;-ctx.Done():&lt;br&gt; fmt.Println(“stop”, name, ctx.Err())&lt;br&gt; return&lt;br&gt; default:&lt;br&gt; fmt.Println(name, “send request”)&lt;br&gt; time.Sleep(1 * time.Second)&lt;br&gt; }&lt;br&gt; }&lt;br&gt;}  &lt;/p&gt;
&lt;p&gt;func main() {&lt;br&gt; ctx, cancel :&amp;#x3D; context.WithDeadline(context.Background(), time.Now().Add(1*time.Second))&lt;br&gt; go reqTask(ctx, “worker1”)&lt;br&gt; go reqTask(ctx, “worker2”)  &lt;/p&gt;
&lt;p&gt; time.Sleep(3 * time.Second)&lt;br&gt; fmt.Println(“before cancel”)&lt;br&gt; cancel()&lt;br&gt; time.Sleep(3 * time.Second)&lt;br&gt;}  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;WithDeadline&lt;/code&gt; 用于设置截止时间。在这个例子中，将截止时间设置为1s后，&lt;code&gt;cancel()&lt;/code&gt; 函数在 3s 后调用，因此子协程将在调用 &lt;code&gt;cancel()&lt;/code&gt; 函数前结束。&lt;/li&gt;
&lt;li&gt;在子协程中，可以通过 &lt;code&gt;ctx.Err()&lt;/code&gt; 获取到子协程退出的错误原因。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;运行结果如下：&lt;/p&gt;
&lt;p&gt;1&lt;br&gt;2&lt;br&gt;3&lt;br&gt;4&lt;br&gt;5  &lt;/p&gt;
&lt;p&gt;worker2 send request&lt;br&gt;worker1 send request&lt;br&gt;stop worker2 context deadline exceeded&lt;br&gt;stop worker1 context deadline exceeded&lt;br&gt;before cancel  &lt;/p&gt;
&lt;p&gt;可以看到，子协程 &lt;code&gt;worker1&lt;/code&gt; 和 &lt;code&gt;worker2&lt;/code&gt;</summary>
        
      
    
    
    
    <category term="知识库" scheme="https://bishoptylaor.github.io/categories/library/"/>
    
    <category term="Golang" scheme="https://bishoptylaor.github.io/categories/library/Golang/"/>
    
    <category term="并发" scheme="https://bishoptylaor.github.io/categories/library/Golang/concurrency/"/>
    
    
    <category term="必看必会" scheme="https://bishoptylaor.github.io/tags/%E5%BF%85%E7%9C%8B%E5%BF%85%E4%BC%9A/"/>
    
    <category term="并发" scheme="https://bishoptylaor.github.io/tags/%E5%B9%B6%E5%8F%91/"/>
    
    <category term="go" scheme="https://bishoptylaor.github.io/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>Golang语言面试题 - 基本原理</title>
    <link href="https://bishoptylaor.github.io/interview/go/golang101-2/"/>
    <id>https://bishoptylaor.github.io/interview/go/golang101-2/</id>
    <published>2022-02-22T08:21:06.000Z</published>
    <updated>2024-05-21T08:42:51.667Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h4 id=&quot;1-golang-文件初始化的顺序&quot;&gt;&lt;a href=&quot;#1-golang-文件初始化的顺序&quot; class=&quot;headerlink&quot; title=&quot;1. golang 文件初始化的顺序&quot;&gt;&lt;/a&gt;1. golang 文件初始化的顺序&lt;/h4&gt;&lt;p&gt;init() 函数是 Go 程序初始化的一部分。由 runtime 初始化每个导入的包，初始化顺序不是按照从上到下的导入顺序，而是按照解析的依赖关系，没有依赖的包最先初始化。&lt;br&gt;总结顺序如下：&lt;br&gt;&lt;strong&gt;import –&amp;gt; const –&amp;gt; var –&amp;gt; init() &amp;#x2F; init2() –&amp;gt; main()&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; main  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;quot;fmt&amp;quot;&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;  &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; fmt.Println(&lt;span class=&quot;string&quot;&gt;&amp;quot;init1:&amp;quot;&lt;/span&gt;, a)  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;  &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; fmt.Println(&lt;span class=&quot;string&quot;&gt;&amp;quot;init2:&amp;quot;&lt;/span&gt;, a)  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; a = &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; b = &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; fmt.Println(&lt;span class=&quot;string&quot;&gt;&amp;quot;main:&amp;quot;&lt;/span&gt;, a)  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 执行结果  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// init1: 10  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// init2: 10  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// main: 10&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// or&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// init2: 10  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// init1: 10  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// main: 10&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&quot;2-interface-如何比较&quot;&gt;&lt;a href=&quot;#2-interface-如何比较&quot; class=&quot;headerlink&quot; title=&quot;2. interface 如何比较&quot;&gt;&lt;/a&gt;2. interface 如何比较&lt;/h4&gt;&lt;p&gt;Golang 中， interface 内部包含了两个字段，类型 T 和值 V ，interface 之间可以用 &amp;#x3D;&amp;#x3D; 或 !&amp;#x3D; 进行比较。两个 interface 之间可能包含以下两种情况：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;两个都是 nil （对应的 T 和 V 都为 unset 的状态）&lt;/li&gt;
&lt;li&gt;T 相同，且 V 相同&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; User &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  UserName &lt;span class=&quot;type&quot;&gt;string&lt;/span&gt;  &lt;span class=&quot;string&quot;&gt;`json:user_name`&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; UserFace &lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt;&amp;#123;&amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 实际比较的是两个结构体的地址&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; u1, u2 UserFace = &amp;amp;User&amp;#123;&lt;span class=&quot;string&quot;&gt;&amp;quot;Tom&amp;quot;&lt;/span&gt;&amp;#125;, &amp;amp;User&amp;#123;&lt;span class=&quot;string&quot;&gt;&amp;quot;Tom&amp;quot;&lt;/span&gt;&amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 比较两个结构体&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; u3, u4 UserFace = User&amp;#123;&lt;span class=&quot;string&quot;&gt;&amp;quot;Tom&amp;quot;&lt;/span&gt;&amp;#125;, User&amp;#123;&lt;span class=&quot;string&quot;&gt;&amp;quot;Tom&amp;quot;&lt;/span&gt;&amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  fmt.Println(u1 == u2) &lt;span class=&quot;comment&quot;&gt;// false  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  fmt.Println(u3 == u4) &lt;span class=&quot;comment&quot;&gt;// true  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&quot;3-interface-和-nil&quot;&gt;&lt;a href=&quot;#3-interface-和-nil&quot; class=&quot;headerlink&quot; title=&quot;3. interface 和 nil&quot;&gt;&lt;/a&gt;3. interface 和 nil&lt;/h4&gt;&lt;p&gt;上边讲了 interface 包含两个字段，那么一个 nil 的空结构体和 nil 是否真的相等呢？可以看下面这个例子：&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; p *&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; = &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i &lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt;&amp;#123;&amp;#125; = p  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  fmt.Println(i == p) &lt;span class=&quot;comment&quot;&gt;// true  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  fmt.Println(p == &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;// true  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  fmt.Println(i == &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;// false  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;将 nil 非 interface 的值 p 赋给 i 的时候，i 实际上是 (T&amp;#x3D;*int, V&amp;#x3D;nil)。当二者相比较时，Go 会将 p 先转换成 interface 类型的再去比较，此时二者等价。&lt;br&gt;p 与 nil 是直接比较的值，因此二者也等价。&lt;br&gt;i 与 nil  比较时，会将 nil 转换为接口 (T&amp;#x3D;nil, V&amp;#x3D;nil)，与 i (T&amp;#x3D;*int, V&amp;#x3D;nil) 不相等，因此  i !&amp;#x3D; nil&lt;/p&gt;
&lt;h4 id=&quot;4-GC-初步理解&quot;&gt;&lt;a href=&quot;#4-GC-初步理解&quot; class=&quot;headerlink&quot; title=&quot;4. GC 初步理解&quot;&gt;&lt;/a&gt;4. GC 初步理解&lt;/h4&gt;&lt;h4 id=&quot;6-Gin-框架简介&quot;&gt;&lt;a href=&quot;#6-Gin-框架简介&quot; class=&quot;headerlink&quot; title=&quot;6. Gin 框架简介&quot;&gt;&lt;/a&gt;6. Gin 框架简介&lt;/h4&gt;&lt;h4 id=&quot;7-反射的原理&quot;&gt;&lt;a href=&quot;#7-反射的原理&quot; class=&quot;headerlink&quot; title=&quot;7. 反射的原理&quot;&gt;&lt;/a&gt;7. 反射的原理&lt;/h4&gt;&lt;h4 id=&quot;10-oom-？&quot;&gt;&lt;a href=&quot;#10-oom-？&quot; class=&quot;headerlink&quot; title=&quot;10. oom ？&quot;&gt;&lt;/a&gt;10. oom ？&lt;/h4&gt;&lt;h4 id=&quot;11-内存管理方式&quot;&gt;&lt;a href=&quot;#11-内存管理方式&quot; class=&quot;headerlink&quot; title=&quot;11. 内存管理方式&quot;&gt;&lt;/a&gt;11. 内存管理方式&lt;/h4&gt;&lt;h4 id=&quot;13-GRPC-以及-protobuf-协议优化&quot;&gt;&lt;a href=&quot;#13-GRPC-以及-protobuf-协议优化&quot; class=&quot;headerlink&quot; title=&quot;13. GRPC 以及 protobuf 协议优化&quot;&gt;&lt;/a&gt;13. GRPC 以及 protobuf 协议优化&lt;/h4&gt;&lt;p&gt;gRPC的核心概念包括：&lt;/p&gt;
&lt;p&gt;RPC(Remote Procedure Call，远程过程调用)：gRPC提供了一种简单的RPC机制，允许客户端和服务器之间无缝通信。客户端通过调用本地方法，实际上是在远程服务器上执行方法，并将结果返回给客户端。&lt;br&gt;Protocol Buffers：gRPC使用Protocol Buffers作为数据序列化和传输格式。Protocol Buffers是一种轻量级、高效的数据结构序列化库，可以在多种编程语言之间实现无缝通信。&lt;br&gt;HTTP&amp;#x2F;2：gRPC使用HTTP&amp;#x2F;2作为传输协议，利用HTTP&amp;#x2F;2的多路复用、流控制、压缩等特性，实现低延迟、高吞吐量的通信。&lt;/p&gt;
&lt;p&gt;RPC调用：gRPC的RPC调用过程可以分为以下步骤：&lt;/p&gt;
&lt;p&gt;客户端通过Protocol Buffers序列化请求数据，并使用HTTP&amp;#x2F;2发送请求。&lt;br&gt;服务器接收请求，使用Protocol Buffers反序列化请求数据。&lt;br&gt;服务器执行RPC方法，并将结果序列化为Protocol Buffers格式。&lt;br&gt;服务器使用HTTP&amp;#x2F;2发送响应给客户端。&lt;br&gt;客户端使用Protocol Buffers反序列化响应数据，并处理结果。&lt;/p&gt;
&lt;h4 id=&quot;14-golang-压测-pprof，火焰图&quot;&gt;&lt;a href=&quot;#14-golang-压测-pprof，火焰图&quot; class=&quot;headerlink&quot; title=&quot;14. golang 压测 pprof，火焰图&quot;&gt;&lt;/a&gt;14. golang 压测</summary>
        
      
    
    
    
    <category term="面试" scheme="https://bishoptylaor.github.io/categories/interview/"/>
    
    <category term="go" scheme="https://bishoptylaor.github.io/categories/interview/go/"/>
    
    
    <category term="面试" scheme="https://bishoptylaor.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="go" scheme="https://bishoptylaor.github.io/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>Golang语言面试题 - 常见题</title>
    <link href="https://bishoptylaor.github.io/interview/go/golang101-3/"/>
    <id>https://bishoptylaor.github.io/interview/go/golang101-3/</id>
    <published>2022-02-22T08:21:06.000Z</published>
    <updated>2024-06-03T16:33:19.308Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;下面会给出网上收集的字节系 Golang 语言常见的面试题，按照热度排序哦&lt;/p&gt;
&lt;h4 id=&quot;简述-slice-的底层原理，slice-和数组的区别是什么？&quot;&gt;&lt;a href=&quot;#简述-slice-的底层原理，slice-和数组的区别是什么？&quot; class=&quot;headerlink&quot; title=&quot;简述 slice 的底层原理，slice 和数组的区别是什么？&quot;&gt;&lt;/a&gt;简述 slice 的底层原理，slice 和数组的区别是什么？&lt;/h4&gt;&lt;p&gt;slice 是数组的引用，额外包括两个字段，长度 len 和容量 cap&lt;br&gt;slice支持扩容，本质上是再申请一块内存，将老数据复制过去，更新引用地址&lt;/p&gt;
&lt;h4 id=&quot;简单介绍-GMP-模型以及该模型的优点-困难&quot;&gt;&lt;a href=&quot;#简单介绍-GMP-模型以及该模型的优点-困难&quot; class=&quot;headerlink&quot; title=&quot;简单介绍 GMP 模型以及该模型的优点  困难&quot;&gt;&lt;/a&gt;简单介绍 GMP 模型以及该模型的优点  困难&lt;/h4&gt;&lt;h4 id=&quot;简述-Golang-垃圾回收的机制-中等&quot;&gt;&lt;a href=&quot;#简述-Golang-垃圾回收的机制-中等&quot; class=&quot;headerlink&quot; title=&quot;简述 Golang 垃圾回收的机制  中等&quot;&gt;&lt;/a&gt;简述 Golang 垃圾回收的机制  中等&lt;/h4&gt;&lt;p&gt;Golang 采用的垃圾回收机制是三色标记法，分为白色（未标记）、灰色（标记中）、黑色（已标记）。&lt;br&gt;回收流程为：&lt;br&gt;    1. STW，从根节点出发，将根节点标记为黑色，将能达到的所有节点标记为灰色，然后将所有能达到的子节点加入队列&lt;br&gt;    2. 并发遍历队列中的节点，标记为黑色，且继续寻找其子节点标记为灰色并加入队列&lt;br&gt;    3. 直到队列中所有可达节点均遍历完毕，那么剩下的白色节点就是不可达的节点，可以回收掉&lt;br&gt;在实际使用过程中，如果在标记过程中，节点指针被用户操作改变，可能会标记失败被错误的清除掉，因此 Go 又引入了写屏障&lt;/p&gt;
&lt;p&gt;一次完整的 GC 分为四个阶段：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;标记准备(Mark Setup，需 STW)，打开写屏障(Write Barrier)，开启辅助 GC （mutator assist），统计 root 对象的任务数量&lt;/li&gt;
&lt;li&gt;使用三色标记法标记（Marking, 并发）&lt;/li&gt;
&lt;li&gt;标记结束(Mark Termination，需 STW)，关闭写屏障。&lt;/li&gt;
&lt;li&gt;清理(Sweeping, 并发)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;GC 调优&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;减少使用string类型中的 ‘+’（此种方式每次拼接都会申请一段新的内存空间），推荐使用 strings.Builder （类似切片的扩容机制）&lt;/li&gt;
&lt;li&gt;小对象复用，尽量减少声明局部变量，小对象可以加入结构体来复用，方便 GC 扫描&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;协程与进程，线程的区别是什么？协程有什么优势？&quot;&gt;&lt;a href=&quot;#协程与进程，线程的区别是什么？协程有什么优势？&quot; class=&quot;headerlink&quot; title=&quot;协程与进程，线程的区别是什么？协程有什么优势？&quot;&gt;&lt;/a&gt;协程与进程，线程的区别是什么？协程有什么优势？&lt;/h4&gt;&lt;p&gt;Goroutines是可以同时运行的函数与方法。Goroutines 可以被认为是轻量级的线程。 与线程相比，创建 Goroutine 的开销很小。 Go应用程序同时运行数千个 Goroutine 是非常常见的做法。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;进程: 进程是具有一定独立功能的程序，进程是系统资源分配和调度的最小单位。每个进程都有自己的独立内存空间，不同进程通过进程间通信来通信。由于进程比较重量，占据独立的内存，所以上下文进程间的切换开销（栈、寄存器、虚拟内存、文件句柄等）比较大，但相对比较稳定安全。&lt;/li&gt;
&lt;li&gt;线程: 线程是进程的一个实体,线程是内核态,而且是CPU调度和分派的基本单位,它是比进程更小的能独立运行的基本单位。线程间通信主要通过共享内存，上下文切换很快，资源开销较少，但相比进程不够稳定容易丢失数据。&lt;/li&gt;
&lt;li&gt;协程: 协程是一种用户态的轻量级线程，协程的调度完全是由用户来控制的。协程拥有自己的寄存器上下文和栈。协程调度切换时，将寄存器上下文和栈保存到其他地方，在切回来的时候，恢复先前保存的寄存器上下文和栈，直接操作栈则基本没有内核切换的开销，可以不加锁的访问全局变量，所以上下文的切换非常快。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;简述-defer-的执行顺序-中等&quot;&gt;&lt;a href=&quot;#简述-defer-的执行顺序-中等&quot; class=&quot;headerlink&quot; title=&quot;简述 defer 的执行顺序  中等&quot;&gt;&lt;/a&gt;简述 defer 的执行顺序  中等&lt;/h4&gt;&lt;p&gt;1. &lt;/p&gt;
&lt;h4 id=&quot;Golang-有哪些优缺点、错误处理有什么优缺点？&quot;&gt;&lt;a href=&quot;#Golang-有哪些优缺点、错误处理有什么优缺点？&quot; class=&quot;headerlink&quot; title=&quot;Golang 有哪些优缺点、错误处理有什么优缺点？&quot;&gt;&lt;/a&gt;Golang 有哪些优缺点、错误处理有什么优缺点？&lt;/h4&gt;&lt;p&gt;优点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;简洁、高效、安全&lt;/li&gt;
&lt;li&gt;并发处理能力强&lt;/li&gt;
&lt;li&gt;静态类型和编译型&lt;/li&gt;
&lt;li&gt;丰富的标准库&lt;/li&gt;
&lt;li&gt;跨平台和可移植性&lt;/li&gt;
&lt;li&gt;强大的性能&lt;/li&gt;
&lt;li&gt;垃圾回收机制&lt;br&gt;劣势:&lt;/li&gt;
&lt;li&gt;泛型编程支持不足&lt;/li&gt;
&lt;li&gt;错误处理方式可能不同&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;采用错误返回方式，错误是一种内置类型，可以使用 error 类型来定义。而异常（panic）也可以通过 recover() 函数转换为 error来处理。优点是简单直观，一般与主体程序分离。可能的缺点是，需要在调用链中做好收集和处理，如果漏处理可能会有问题。&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;defer&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;panic&lt;/span&gt; := &lt;span class=&quot;built_in&quot;&gt;recover&lt;/span&gt;(); &lt;span class=&quot;built_in&quot;&gt;panic&lt;/span&gt; != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      err = DumpStack(&lt;span class=&quot;built_in&quot;&gt;panic&lt;/span&gt;)  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;


&lt;p&gt;两次 GC 周期重叠会引发什么问题，GC 触发机制是什么样的？  简单&lt;/p&gt;
&lt;p&gt;Golang 的协程通信方式有哪些？  中等&lt;br&gt;channel 分为有缓冲和无缓冲，有缓冲的满不能存空不能取，都会阻塞；无缓冲的不存就不能取，阻塞&lt;br&gt;sync.waitgroup 控制协程完成时间，多用于等待一批协程完成&lt;br&gt;context 可以传值 context.withvalue；控制多个协程的生命周期，超时控制，取消信号等&lt;/p&gt;
&lt;p&gt;△ 4次&lt;/p&gt;
&lt;p&gt;简述 Golang 的伪抢占式调度  中等&lt;/p&gt;
&lt;p&gt;△ 4次&lt;/p&gt;
&lt;p&gt;什么是 goroutine 泄漏  简单&lt;/p&gt;
&lt;p&gt;△ 4次&lt;/p&gt;
&lt;p&gt;groutinue</summary>
        
      
    
    
    
    <category term="面试" scheme="https://bishoptylaor.github.io/categories/interview/"/>
    
    <category term="go" scheme="https://bishoptylaor.github.io/categories/interview/go/"/>
    
    
    <category term="面试" scheme="https://bishoptylaor.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="go" scheme="https://bishoptylaor.github.io/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>Golang语言面试题 - 基础语法</title>
    <link href="https://bishoptylaor.github.io/interview/go/golang101-1/"/>
    <id>https://bishoptylaor.github.io/interview/go/golang101-1/</id>
    <published>2022-02-21T08:20:39.000Z</published>
    <updated>2024-05-22T04:35:17.782Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h4 id=&quot;1-和-的区别？&quot;&gt;&lt;a href=&quot;#1-和-的区别？&quot; class=&quot;headerlink&quot; title=&quot;1.  = 和 := 的区别？&quot;&gt;&lt;/a&gt;1.  &lt;code&gt;=&lt;/code&gt; 和 &lt;code&gt;:=&lt;/code&gt; 的区别？&lt;/h4&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; foo &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;foo = &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 等价于  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;foo := &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;


&lt;h4 id=&quot;2-指针的作用&quot;&gt;&lt;a href=&quot;#2-指针的作用&quot; class=&quot;headerlink&quot; title=&quot;2. 指针的作用&quot;&gt;&lt;/a&gt;2. 指针的作用&lt;/h4&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; x =  &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; p *&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; = &amp;amp;x  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;fmt.Printf(&lt;span class=&quot;string&quot;&gt;&amp;quot;x = %d&amp;quot;&lt;/span&gt;,  *p) &lt;span class=&quot;comment&quot;&gt;// x 可以用 *p 访问&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//  `*` 运算符，也称为解引用运算符，用于访问地址中的值。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//  `＆`运算符，也称为地址运算符，用于返回变量的地址。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;


&lt;h4 id=&quot;3-Go-有异常类型么？&quot;&gt;&lt;a href=&quot;#3-Go-有异常类型么？&quot; class=&quot;headerlink&quot; title=&quot;3. Go 有异常类型么？&quot;&gt;&lt;/a&gt;3. Go 有异常类型么？&lt;/h4&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// go 只有错误类型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;f, err := os.Open(&lt;span class=&quot;string&quot;&gt;&amp;quot;test.txt&amp;quot;&lt;/span&gt;)  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  log.Fatal(err)  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&quot;4-协程和线程和进程的区别？&quot;&gt;&lt;a href=&quot;#4-协程和线程和进程的区别？&quot; class=&quot;headerlink&quot; title=&quot;4. 协程和线程和进程的区别？&quot;&gt;&lt;/a&gt;4. 协程和线程和进程的区别？&lt;/h4&gt;&lt;p&gt;Goroutines是可以同时运行的函数与方法。Goroutines 可以被认为是轻量级的线程。 与线程相比，创建 Goroutine 的开销很小。 Go应用程序同时运行数千个 Goroutine 是非常常见的做法。&lt;br&gt;并发掌握，goroutine和channel声明与使用！&lt;/p&gt;
&lt;h4 id=&quot;5-拼接字符串&quot;&gt;&lt;a href=&quot;#5-拼接字符串&quot; class=&quot;headerlink&quot; title=&quot;5. 拼接字符串&quot;&gt;&lt;/a&gt;5. 拼接字符串&lt;/h4&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 字符串是只读的，也就意味着每次修改操作都会创建一个新的字符串&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;a := &lt;span class=&quot;string&quot;&gt;&amp;quot;a&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;b := &lt;span class=&quot;string&quot;&gt;&amp;quot;b&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; str1 &lt;span class=&quot;type&quot;&gt;string&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;str1 += a&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;str1 += b&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 推荐使用 `strings.Builder`，最小化内存拷贝次数。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; str strings.Builder  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i := &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;; i++ &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  str.WriteString(&lt;span class=&quot;string&quot;&gt;&amp;quot;a&amp;quot;&lt;/span&gt;)  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;fmt.Println(str.String())&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&quot;6-什么是-rune-类型&quot;&gt;&lt;a href=&quot;#6-什么是-rune-类型&quot; class=&quot;headerlink&quot; title=&quot;6. 什么是 rune 类型&quot;&gt;&lt;/a&gt;6. 什么是 rune 类型&lt;/h4&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/*&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;Go 语言中，字符串的底层表示是 byte (8 bit) 序列，而非 rune (32 bit) 序列。例如下面的例子中 `语` 和 `言` 使用 UTF-8 编码后各占 3 个 byte，因此 `len(&amp;quot;Go语言&amp;quot;)` 等于 8，当然我们也可以将字符串转换为 rune 序列。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;fmt.Println(&lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;Go语言&amp;quot;&lt;/span&gt;)) &lt;span class=&quot;comment&quot;&gt;// 8  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;fmt.Println(&lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;([]&lt;span class=&quot;type&quot;&gt;rune&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;Go语言&amp;quot;&lt;/span&gt;))) &lt;span class=&quot;comment&quot;&gt;// 4&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&quot;7-判断-map-结构中是否包含某个-key-的方法&quot;&gt;&lt;a href=&quot;#7-判断-map-结构中是否包含某个-key-的方法&quot; class=&quot;headerlink&quot; title=&quot;7. 判断 map 结构中是否包含某个 key 的方法&quot;&gt;&lt;/a&gt;7. 判断 map 结构中是否包含某个 key 的方法&lt;/h4&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// ok 为 true 代表有这个 key，且 val 是这个 key 的值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; val, ok := map_[&lt;span class=&quot;string&quot;&gt;&amp;quot;key&amp;quot;&lt;/span&gt;]; ok &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;//do something  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&quot;8-defer-的执行顺序&quot;&gt;&lt;a href=&quot;#8-defer-的执行顺序&quot; class=&quot;headerlink&quot; title=&quot;8. defer 的执行顺序&quot;&gt;&lt;/a&gt;8. defer 的执行顺序&lt;/h4&gt;&lt;p&gt;多个 defer 语句，遵从后进先出(Last In First Out，LIFO)的原则，最后声明的 defer 语句，最先得到执行。&lt;br&gt;panic 需要等defer 结束后才会向上传递。出现panic恐慌时候，会先按照defer的后入先出的顺序执行，最后才会执行panic。&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  i := &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;defer&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    fmt.Println(&lt;span class=&quot;string&quot;&gt;&amp;quot;defer1&amp;quot;&lt;/span&gt;)  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;()  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;defer&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    i += &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    fmt.Println(&lt;span class=&quot;string&quot;&gt;&amp;quot;defer2&amp;quot;&lt;/span&gt;)  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;()  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; i  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  fmt.Println(&lt;span class=&quot;string&quot;&gt;&amp;quot;return&amp;quot;&lt;/span&gt;, test())  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// defer2  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// defer1  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// return 0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;defer 在 return 语句之后执行，但在函数真正退出之前，defer 可以修改返回值。我们可以注意到前一个例子的返回值并没有被修改（注意：只有被预先定义的返回值才能被 defer 语句修改）&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; (i &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;) &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;defer&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    i += &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    fmt.Println(&lt;span class=&quot;string&quot;&gt;&amp;quot;defer2&amp;quot;&lt;/span&gt;)  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;()  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; i  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  fmt.Println(&lt;span class=&quot;string&quot;&gt;&amp;quot;return&amp;quot;&lt;/span&gt;, test())  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// defer2  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// return 1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&quot;9-tag的用法？&quot;&gt;&lt;a href=&quot;#9-tag的用法？&quot; class=&quot;headerlink&quot; title=&quot;9. tag的用法？&quot;&gt;&lt;/a&gt;9. tag的用法？&lt;/h4&gt;&lt;p&gt;tag 是 struct 结构的注解，不同的框架或者工具可以通过反射获取到某个字段的属性，增加语义&lt;br&gt;例如下方例子定义了 struct 结构字段和 json 结构的映射关系&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; main  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;quot;fmt&amp;quot;&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;quot;encoding/json&amp;quot;&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; Stu &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Name &lt;span class=&quot;type&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;`json:&amp;quot;user_name&amp;quot;`&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Id   &lt;span class=&quot;type&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;`json:&amp;quot;user_id&amp;quot;`&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Age  &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;    &lt;span class=&quot;string&quot;&gt;`json:&amp;quot;-&amp;quot;`&lt;/span&gt;  &lt;span class=&quot;comment&quot;&gt;// json 忽略&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  buf, _ := json.Marshal(Stu&amp;#123;&lt;span class=&quot;string&quot;&gt;&amp;quot;Bishop&amp;quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;1001&amp;quot;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;18&lt;/span&gt;&amp;#125;)  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  fmt.Printf(&lt;span class=&quot;string&quot;&gt;&amp;quot;%s&#92;n&amp;quot;&lt;/span&gt;, buf)  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;


&lt;h4 id=&quot;10-Golang-如何判断两个列表（slice）结构等价&quot;&gt;&lt;a href=&quot;#10-Golang-如何判断两个列表（slice）结构等价&quot; class=&quot;headerlink&quot; title=&quot;10. Golang 如何判断两个列表（slice）结构等价&quot;&gt;&lt;/a&gt;10. Golang 如何判断两个列表（slice）结构等价&lt;/h4&gt;&lt;p&gt;可以使用反射 reflect.DeepEqual(a, b) 来判断，但是此种方法比较影响性能，我们这里还是通过基础遍历的方法来完成&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;SliceAEqurlSliceB&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(a, b []&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;bool&lt;/span&gt; &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 等长&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(a) != &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(b) &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 判空&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (a == &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;) != (b == &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;) &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  b = b[:&lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(a)]  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i, v := &lt;span class=&quot;keyword&quot;&gt;range&lt;/span&gt; a &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; v != b[i] &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&quot;11-如何标识枚举值（enums）&quot;&gt;&lt;a href=&quot;#11-如何标识枚举值（enums）&quot; class=&quot;headerlink&quot; title=&quot;11. 如何标识枚举值（enums）&quot;&gt;&lt;/a&gt;11. 如何标识枚举值（enums）&lt;/h4&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; Level &lt;span class=&quot;type&quot;&gt;int32&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; (  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Level1 Level = &lt;span class=&quot;literal&quot;&gt;iota&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Level2  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Level3 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Level4 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;)  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  fmt.Println(Level1, Level2, Level3, Level4) &lt;span class=&quot;comment&quot;&gt;// 0, 1, 2, 3  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&quot;12-空-struct-结构的一些用法&quot;&gt;&lt;a href=&quot;#12-空-struct-结构的一些用法&quot; class=&quot;headerlink&quot; title=&quot;12. 空 struct{} 结构的一些用法&quot;&gt;&lt;/a&gt;12. 空 struct{} 结构的一些用法&lt;/h4&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 本体是一个空结构体&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;fmt.Println(unsafe.Sizeof(&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt;&amp;#123;&amp;#125;&amp;#123;&amp;#125;)) &lt;span class=&quot;comment&quot;&gt;// 0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 可以用作占位符使用&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; Set &lt;span class=&quot;keyword&quot;&gt;map&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;string&lt;/span&gt;]&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt;&amp;#123;&amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  set := &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;(Set)  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; _, item := &lt;span class=&quot;keyword&quot;&gt;range&lt;/span&gt; []&lt;span class=&quot;type&quot;&gt;string&lt;/span&gt;&amp;#123;&lt;span class=&quot;string&quot;&gt;&amp;quot;A&amp;quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;A&amp;quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;B&amp;quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;C&amp;quot;&lt;/span&gt;&amp;#125; &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	set[item] = &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt;&amp;#123;&amp;#125;&amp;#123;&amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  fmt.Println(&lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(set)) &lt;span class=&quot;comment&quot;&gt;// 3  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; _, ok := set[&lt;span class=&quot;string&quot;&gt;&amp;quot;A&amp;quot;&lt;/span&gt;]; ok &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	fmt.Println(&lt;span class=&quot;string&quot;&gt;&amp;quot;A exists&amp;quot;&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;// A exists  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 用作传递信号&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ch := &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;chan&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt;&amp;#123;&amp;#125;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;-ch  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// do something  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;()  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ch &amp;lt;- &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt;&amp;#123;&amp;#125;&amp;#123;&amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// ...  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&quot;13-声明结构体方法&quot;&gt;&lt;a href=&quot;#13-声明结构体方法&quot; class=&quot;headerlink&quot; title=&quot;13. 声明结构体方法&quot;&gt;&lt;/a&gt;13. 声明结构体方法&lt;/h4&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; Lamp &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt;&amp;#123;&amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(l Lamp)&lt;/span&gt;&lt;/span&gt; On() &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;built_in&quot;&gt;println&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;On&amp;quot;&lt;/span&gt;)  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(l Lamp)&lt;/span&gt;&lt;/span&gt; Off() &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;built_in&quot;&gt;println&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;Off&amp;quot;&lt;/span&gt;)  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&quot;14-make-和-new&quot;&gt;&lt;a href=&quot;#14-make-和-new&quot; class=&quot;headerlink&quot; title=&quot;14. make 和 new&quot;&gt;&lt;/a&gt;14. make 和 new&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;make 仅用来分配及初始化类型为 slice、map、chan 的数据。new 可分配任意类型的数据.&lt;/li&gt;
&lt;li&gt;new 分配返回的是指针，即类型 *Type。make 返回引用，即 Type.&lt;/li&gt;
&lt;li&gt;new 分配的空间被清零, make 分配空间后，会进行初始化.&lt;br&gt;一个例子&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i *&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	i = &lt;span class=&quot;built_in&quot;&gt;new&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;// 分配内存地址并返回指向改地址的指针，同时置为类型的0值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	*i = &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	fmt.Println(*i) &lt;span class=&quot;comment&quot;&gt;// 10&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;15-代码输出啥相关题&quot;&gt;&lt;a href=&quot;#15-代码输出啥相关题&quot; class=&quot;headerlink&quot; title=&quot;15. 代码输出啥相关题&quot;&gt;&lt;/a&gt;15. 代码输出啥相关题&lt;/h4&gt;&lt;h5 id=&quot;1&quot;&gt;&lt;a href=&quot;#1&quot; class=&quot;headerlink&quot; title=&quot;(1)&quot;&gt;&lt;/a&gt;(1)&lt;/h5&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; a &lt;span class=&quot;type&quot;&gt;uint&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; b &lt;span class=&quot;type&quot;&gt;uint&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    fmt.Println(a-b)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 2^32-1 or 2^64-1 根据操作系统位数有不同结果&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;强类型语言，计算结果也是 uint 类型，1-2 可以转换为 0-1 ，计算机中按照 0 + -1 来计算，-1 通常表示为补码，即所有位数都是1的一个数，即当前系统可表示的最大数&lt;/p&gt;
&lt;h5 id=&quot;2&quot;&gt;&lt;a href=&quot;#2&quot; class=&quot;headerlink&quot; title=&quot;(2)&quot;&gt;&lt;/a&gt;(2)&lt;/h5&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    runtime.GOMAXPROCS(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    wg := sync.WaitGroup&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    wg.Add(&lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i := &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;; i++ &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            fmt.Println(&lt;span class=&quot;string&quot;&gt;&amp;quot;A: &amp;quot;&lt;/span&gt;, i)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            wg.Done()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i := &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;; i++ &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(i &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            fmt.Println(&lt;span class=&quot;string&quot;&gt;&amp;quot;B: &amp;quot;&lt;/span&gt;, i)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            wg.Done()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;(i)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    wg.Wait()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;考点：&lt;strong&gt;go执行的随机性和闭包&lt;/strong&gt;&lt;br&gt;解答：谁也不知道执行后打印的顺序是什么样的，所以只能说是随机数字。但是&lt;code&gt;A:&lt;/code&gt;均为输出10，&lt;code&gt;B:&lt;/code&gt;从0~9输出(顺序不定)。第一个go func中i是外部for的一个变量，地址不变化。遍历完成后，最终i&amp;#x3D;10。故go func执行时，i的值始终是10。&lt;br&gt;第二个go func中i是函数参数，与外部for中的i完全是两个变量。尾部(i)将发生值拷贝，go func内部指向值拷贝地址。&lt;/p&gt;
&lt;h5 id=&quot;3&quot;&gt;&lt;a href=&quot;#3&quot; class=&quot;headerlink&quot; title=&quot;(3)&quot;&gt;&lt;/a&gt;(3)&lt;/h5&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; People &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt;&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(p *People)&lt;/span&gt;&lt;/span&gt; ShowA() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    fmt.Println(&lt;span class=&quot;string&quot;&gt;&amp;quot;showA&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    p.ShowB()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(p *People)&lt;/span&gt;&lt;/span&gt; ShowB() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    fmt.Println(&lt;span class=&quot;string&quot;&gt;&amp;quot;showB&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; Teacher &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    People&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(t *Teacher)&lt;/span&gt;&lt;/span&gt; ShowB() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    fmt.Println(&lt;span class=&quot;string&quot;&gt;&amp;quot;teacher showB&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    t := Teacher&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    t.ShowA()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// shwoA&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// showB&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;考点：&lt;strong&gt;go的组合继承&lt;/strong&gt;&lt;br&gt;解答：这是Golang的组合模式，可以实现OOP的继承。被组合的类型People所包含的方法虽然升级成了外部类型Teacher这个组合类型的方法（一定要是匿名字段），但它们的方法(ShowA())调用时接受者并没有发生变化。此时People类型并不知道自己会被什么类型组合，当然也就无法调用方法时去使用未知的组合者Teacher类型的功能。&lt;/p&gt;
&lt;h5 id=&quot;4&quot;&gt;&lt;a href=&quot;#4&quot; class=&quot;headerlink&quot; title=&quot;(4)&quot;&gt;&lt;/a&gt;(4)&lt;/h5&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    runtime.GOMAXPROCS(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    int_chan := &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;chan&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    string_chan := &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;chan&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;string&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    int_chan &amp;lt;- &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    string_chan &amp;lt;- &lt;span class=&quot;string&quot;&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;select&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; value := &amp;lt;-int_chan:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        fmt.Println(value)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; value := &amp;lt;-string_chan:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;panic&lt;/span&gt;(value)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;考点：&lt;strong&gt;select随机性&lt;/strong&gt;&lt;br&gt;解答： select会随机选择一个可用通用做收发操作。所以代码是有肯触发异常，也有可能不会。单个chan如果无缓冲时，将会阻塞。但结合 select可以在多个chan间等待执行。有三点原则： &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;select 中只要有一个case能return，则立刻执行。 &lt;/li&gt;
&lt;li&gt;当如果同一时间有多个case均能return则伪随机方式抽取任意一个执行。&lt;/li&gt;
&lt;li&gt;如果没有一个case能return则可以执行”default”块。&lt;h5 id=&quot;5&quot;&gt;&lt;a href=&quot;#5&quot; class=&quot;headerlink&quot; title=&quot;(5)&quot;&gt;&lt;/a&gt;(5)&lt;/h5&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    s := &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;([]&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;)  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    s = &lt;span class=&quot;built_in&quot;&gt;append&lt;/span&gt;(s, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;)  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    fmt.Println(s) &lt;span class=&quot;comment&quot;&gt;// [0,0,0,0,0,1,2,3] &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    s2 := &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;([]&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    s2 = &lt;span class=&quot;built_in&quot;&gt;append&lt;/span&gt;(s2, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;)  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    fmt.Println(s2)  &lt;span class=&quot;comment&quot;&gt;// [1,2,3]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
注意 make 会给定义的长度分配初值&lt;h5 id=&quot;6&quot;&gt;&lt;a href=&quot;#6&quot; class=&quot;headerlink&quot; title=&quot;(6)&quot;&gt;&lt;/a&gt;(6)&lt;/h5&gt;map线程安全&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;16-如何理解go语言中的interface&quot;&gt;&lt;a href=&quot;#16-如何理解go语言中的interface&quot; class=&quot;headerlink&quot; title=&quot;16. 如何理解go语言中的interface?&quot;&gt;&lt;/a&gt;16. 如何理解go语言中的interface?&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;interface是方法申明的集合&lt;/li&gt;
&lt;li&gt;任何类型的对象实现了在interface接口中声明的全部方法，则表明该类型实现了该接口&lt;/li&gt;
&lt;li&gt;interface可以作为一种数据类型，实现了该接口的任何对象都可以给对应的接口类型变量赋值&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; main&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;string&quot;&gt;&amp;quot;fmt&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 定义一个数据写入器&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; DataWriter &lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	WriteData(data &lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt;&amp;#123;&amp;#125;) &lt;span class=&quot;type&quot;&gt;error&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 定义文件结构，用于实现DataWriter&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; file &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 实现DataWriter接口的WriteData方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(d *file)&lt;/span&gt;&lt;/span&gt; WriteData(data &lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt;&amp;#123;&amp;#125;) &lt;span class=&quot;type&quot;&gt;error&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// 模拟写入数据&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	fmt.Println(&lt;span class=&quot;string&quot;&gt;&amp;quot;WriteData:&amp;quot;&lt;/span&gt;, data)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 接口可以作为数据类型传递，体现2，3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Cprint&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(writer DataWriter)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	fmt.Println(&lt;span class=&quot;string&quot;&gt;&amp;quot;Cprint&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// 实例化file&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	f := &lt;span class=&quot;built_in&quot;&gt;new&lt;/span&gt;(file)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// 声明一个DataWriter的接口&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; writer DataWriter&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// 将接口赋值f，也就是*file类型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	writer = f&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// 使用DataWriter接口进行数据写入&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	err := writer.WriteData(&lt;span class=&quot;string&quot;&gt;&amp;quot;data&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		fmt.Println(&lt;span class=&quot;string&quot;&gt;&amp;quot;writeData err!&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	Cprint(f)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;17-Go-语言是如何实现切片扩容的？&quot;&gt;&lt;a href=&quot;#17-Go-语言是如何实现切片扩容的？&quot; class=&quot;headerlink&quot; title=&quot;17. Go 语言是如何实现切片扩容的？&quot;&gt;&lt;/a&gt;17. Go 语言是如何实现切片扩容的？&lt;/h4&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  arr := &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;([]&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i := &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;number&quot;&gt;2000&lt;/span&gt;; i++ &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    fmt.Println(&lt;span class=&quot;string&quot;&gt;&amp;quot;len为&amp;quot;&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(arr), &lt;span class=&quot;string&quot;&gt;&amp;quot;cap为&amp;quot;&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;cap&lt;/span&gt;(arr)) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    arr = &lt;span class=&quot;built_in&quot;&gt;append&lt;/span&gt;(arr, i) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我们可以看下结果&lt;br&gt;依次是 0,1,2,4,8,16,32,64,128,256,512,1024&lt;br&gt;但到了1024之后,就变成了 1024,1280,1696,2304&lt;br&gt;每次都是扩容了四分之一左右&lt;/p&gt;
&lt;h4 id=&quot;18-数组和切片&quot;&gt;&lt;a href=&quot;#18-数组和切片&quot; class=&quot;headerlink&quot; title=&quot;18. 数组和切片&quot;&gt;&lt;/a&gt;18. 数组和切片&lt;/h4&gt;&lt;p&gt;golang 中存在两种函数传入方式：值类型和引用类型&lt;br&gt;值类型只改变当前作用域的值，在该作用域外部不会生效；引用类型改变当前地址对应的值，在作用域外部生效。可以参考下边的例子&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 数组 值类型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 切片 引用类型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;changeArray&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(x [3]&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &amp;#123;x[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;] = &lt;span class=&quot;number&quot;&gt;123&lt;/span&gt;&amp;#125; &lt;span class=&quot;comment&quot;&gt;// 定义为数组&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;changeSlice&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(x []&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &amp;#123;x[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;] = &lt;span class=&quot;number&quot;&gt;123&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  x1 := []&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;&amp;#123;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  fmt.Println(&lt;span class=&quot;string&quot;&gt;&amp;quot;x1 original-&amp;gt;&amp;quot;&lt;/span&gt;, x1)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  changeArray(x)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  fmt.Println(&lt;span class=&quot;string&quot;&gt;&amp;quot;x1 current-&amp;gt;&amp;quot;&lt;/span&gt;. x1)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  x := []&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;&amp;#123;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  fmt.Println(&lt;span class=&quot;string&quot;&gt;&amp;quot;x2 -&amp;gt;&amp;quot;&lt;/span&gt;, x)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  changeSlice(x)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  fmt.Println(&lt;span class=&quot;string&quot;&gt;&amp;quot;x2 -&amp;gt;&amp;quot;&lt;/span&gt;. x)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// x1 -&amp;gt; [1,2,3]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// x2 -&amp;gt; [1,2,3]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&quot;19-go-通过切片模拟栈和队列&quot;&gt;&lt;a href=&quot;#19-go-通过切片模拟栈和队列&quot; class=&quot;headerlink&quot; title=&quot;19. go 通过切片模拟栈和队列&quot;&gt;&lt;/a&gt;19. go 通过切片模拟栈和队列&lt;/h4&gt;&lt;p&gt;栈&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 创建栈&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;stack:=&lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;([]&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// push压入&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;stack=&lt;span class=&quot;built_in&quot;&gt;append&lt;/span&gt;(stack,&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// pop弹出&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;v:=stack[&lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(stack)&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;stack=stack[:&lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(stack)&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 检查栈空&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(stack)==&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;队列&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 创建队列&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;queue:=&lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;([]&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// enqueue入队&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;queue=&lt;span class=&quot;built_in&quot;&gt;append&lt;/span&gt;(queue,&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// dequeue出队&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;v:=queue[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;queue=queue[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;:]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 长度0为空&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(queue)==&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;注意点&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;参数传递，只能修改，不能新增或者删除原始数据&lt;/li&gt;
&lt;li&gt;默认 s&amp;#x3D;s[0:len(s)]，取下限不取上限，数学表示为：[&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;20-字典&quot;&gt;&lt;a href=&quot;#20-字典&quot; class=&quot;headerlink&quot; title=&quot;20.字典&quot;&gt;&lt;/a&gt;20.字典&lt;/h4&gt;&lt;p&gt;基本用法&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 创建&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;m:=&lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;map&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;string&lt;/span&gt;]&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 设置kv&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;m[&lt;span class=&quot;string&quot;&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;]=&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 删除k&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;delete&lt;/span&gt;(m,&lt;span class=&quot;string&quot;&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 遍历&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; k,v:=&lt;span class=&quot;keyword&quot;&gt;range&lt;/span&gt; m&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;println&lt;/span&gt;(k,v)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;注意点&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;map 键需要可比较，不能为 slice、map、function&lt;/li&gt;
&lt;li&gt;map 值都有默认值，可以直接操作默认值，如：m[age]++ 值由 0 变为 1&lt;/li&gt;
&lt;li&gt;比较两个 map 需要遍历，其中的 kv 是否相同，因为有默认值关系，所以需要检查 val 和 ok 两个值&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;21-标准库&quot;&gt;&lt;a href=&quot;#21-标准库&quot; class=&quot;headerlink&quot; title=&quot;21.标准库&quot;&gt;&lt;/a&gt;21.标准库&lt;/h4&gt;&lt;p&gt;sort&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// int排序&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sort.Ints([]&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;&amp;#123;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 字符串排序&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sort.Strings([]&lt;span class=&quot;type&quot;&gt;string&lt;/span&gt;&amp;#123;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 自定义排序&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sort.Slice(s,&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(i,j &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;type&quot;&gt;bool&lt;/span&gt;&amp;#123;&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; s[i]&amp;lt;s[j]&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;math&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// int32 最大最小值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;math.MaxInt32 &lt;span class=&quot;comment&quot;&gt;// 实际值：1&amp;lt;&amp;lt;31-1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;math.MinInt32 &lt;span class=&quot;comment&quot;&gt;// 实际值：-1&amp;lt;&amp;lt;31&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// int64 最大最小值（int默认是int64）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;math.MaxInt64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;math.MinInt64&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;copy&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 删除a[i]，可以用 copy 将i+1到末尾的值覆盖到i,然后末尾-1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;copy&lt;/span&gt;(a[i:],a[i+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;:])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;a=a[:&lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(a)&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// make创建长度，则通过索引赋值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;a:=&lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;([]&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;,n)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;a[n]=x&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// make长度为0，则通过append()赋值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;a:=&lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;([]&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;a=&lt;span class=&quot;built_in&quot;&gt;append&lt;/span&gt;(a,x)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&quot;22-常用技巧&quot;&gt;&lt;a href=&quot;#22-常用技巧&quot; class=&quot;headerlink&quot; title=&quot;22.常用技巧&quot;&gt;&lt;/a&gt;22.常用技巧&lt;/h4&gt;&lt;p&gt;类型转换&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// byte转数字&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;s=&lt;span class=&quot;string&quot;&gt;&amp;quot;12345&amp;quot;&lt;/span&gt;  &lt;span class=&quot;comment&quot;&gt;// s[0] 类型是byte&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;num:=&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;(s[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]-&lt;span class=&quot;string&quot;&gt;&amp;#x27;0&amp;#x27;&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;// 1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;str:=&lt;span class=&quot;type&quot;&gt;string&lt;/span&gt;(s[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]) &lt;span class=&quot;comment&quot;&gt;// &amp;quot;1&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;b:=&lt;span class=&quot;type&quot;&gt;byte&lt;/span&gt;(num+&lt;span class=&quot;string&quot;&gt;&amp;#x27;0&amp;#x27;&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;// &amp;#x27;1&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;fmt.Printf(&lt;span class=&quot;string&quot;&gt;&amp;quot;%d%s%c&#92;n&amp;quot;&lt;/span&gt;, num, str, b) &lt;span class=&quot;comment&quot;&gt;// 111&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 字符串转数字&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;num,_:=strconv.Atoi()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;str:=strconv.Itoa()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;读取标准输入&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;断言&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; f, ok := w.(*os.File); ok &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// ...use f...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;互斥锁常用语法&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    mu      sync.Mutex &lt;span class=&quot;comment&quot;&gt;// guards balance&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    balance &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Deposit&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(amount &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    mu.Lock()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    balance = balance + amount&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    mu.Unlock()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Balance&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    mu.Lock()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    b := balance&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    mu.Unlock()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; b&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;读写锁 “多读单写”锁（multiple readers, single writer lock）&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; mu sync.RWMutex&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; balance &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Balance&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    mu.RLock() &lt;span class=&quot;comment&quot;&gt;// readers lock&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;defer&lt;/span&gt; mu.RUnlock()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; balance&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;sync.Once 惰性初始化&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; loadIconsOnce sync.Once&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; icons &lt;span class=&quot;keyword&quot;&gt;map&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;string&lt;/span&gt;]image.Image&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Concurrency-safe.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Icon&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(name &lt;span class=&quot;type&quot;&gt;string&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; image.Image &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    loadIconsOnce.Do(loadIcons)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; icons[name]&lt;/span&gt;&lt;br&gt;&lt;span</summary>
        
      
    
    
    
    <category term="面试" scheme="https://bishoptylaor.github.io/categories/interview/"/>
    
    <category term="go" scheme="https://bishoptylaor.github.io/categories/interview/go/"/>
    
    
    <category term="面试" scheme="https://bishoptylaor.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="go" scheme="https://bishoptylaor.github.io/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>hexo建站（三）GitHub</title>
    <link href="https://bishoptylaor.github.io/blog/build-blog/hexo101-3/"/>
    <id>https://bishoptylaor.github.io/blog/build-blog/hexo101-3/</id>
    <published>2022-02-21T05:05:37.000Z</published>
    <updated>2024-04-25T12:00:57.262Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;欢迎来到建站记录的第二部分：部署到 github page&lt;/p&gt;
&lt;h2 id=&quot;GitHub页面&quot;&gt;&lt;a href=&quot;#GitHub页面&quot; class=&quot;headerlink&quot; title=&quot;GitHub页面&quot;&gt;&lt;/a&gt;GitHub页面&lt;/h2&gt;&lt;p&gt;这里假设已经注册过了Github帐户，如果没有，可以去&lt;a href=&quot;https://github.com/&quot;&gt;Github&lt;/a&gt;注册。&lt;/p&gt;
&lt;p&gt;注册好了后，登录Github,创建仓库：点击右上角的+号，选择new repository:&lt;br&gt;&lt;img src=&quot;https://t2.picb.cc/2022/02/21/fpUdSF.jpg&quot;</summary>
        
      
    
    
    
    <category term="博客" scheme="https://bishoptylaor.github.io/categories/blog/"/>
    
    <category term="建站" scheme="https://bishoptylaor.github.io/categories/blog/build-blog/"/>
    
    
    <category term="hexo" scheme="https://bishoptylaor.github.io/tags/hexo/"/>
    
    <category term="butterfly" scheme="https://bishoptylaor.github.io/tags/butterfly/"/>
    
    <category term="github" scheme="https://bishoptylaor.github.io/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>hexo建站（二）butterfly</title>
    <link href="https://bishoptylaor.github.io/blog/build-blog/hexo101-2/"/>
    <id>https://bishoptylaor.github.io/blog/build-blog/hexo101-2/</id>
    <published>2022-02-20T16:36:59.000Z</published>
    <updated>2022-02-21T13:58:30.087Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;欢迎来到建站记录的第二部分：butterfly 主题的安装与初始化&lt;/p&gt;
&lt;h2 id=&quot;主题安装与使用&quot;&gt;&lt;a href=&quot;#主题安装与使用&quot; class=&quot;headerlink&quot; title=&quot;主题安装与使用&quot;&gt;&lt;/a&gt;主题安装与使用&lt;/h2&gt;&lt;p&gt;下载主题&lt;/p&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git &lt;span class=&quot;built_in&quot;&gt;clone&lt;/span&gt; -b master https://github.com/jerryc127/hexo-theme-butterfly.git themes/Butterfly&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# or&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git &lt;span class=&quot;built_in&quot;&gt;clone&lt;/span&gt; -b master https://gitee.com/immyw/hexo-theme-butterfly.git themes/butterfly&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;修改站点配置文件 _config.yml ,把主题修改为 Butterfly&lt;/p&gt;
&lt;figure class=&quot;highlight yaml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;theme:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;Butterfly&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;为了后续方便配置，需要在当前目录 blog&amp;#x2F; 创建 _config.butterfly.yml 文件，并将根目录下的 _config.yml 文件内容复制进去。更多的主题配置信息可以等待之后的文章~&lt;/p&gt;
&lt;p&gt;尝试执行以下指令,以查看应用主题后的效果&lt;/p&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;hexo clean &lt;span class=&quot;comment&quot;&gt;#清除旧的内容&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;hexo g &lt;span class=&quot;comment&quot;&gt;#生成发布用的静态页面&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;本地查看&lt;/p&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;hexo s &lt;span class=&quot;comment&quot;&gt;# hexo server&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;执行完该命令可以去 &lt;a href=&quot;localhost:4000&quot;&gt;localhost:4000&lt;/a&gt; 查看效果&lt;/p&gt;
&lt;h5 id=&quot;异常处理&quot;&gt;&lt;a href=&quot;#异常处理&quot; class=&quot;headerlink&quot; title=&quot;异常处理&quot;&gt;&lt;/a&gt;异常处理&lt;/h5&gt;&lt;h4 id=&quot;case1-：&quot;&gt;&lt;a href=&quot;#case1-：&quot; class=&quot;headerlink&quot; title=&quot;case1 ：&quot;&gt;&lt;/a&gt;case1 ：&lt;/h4&gt;&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ERROR TypeError: /data/blog/themes/butterfly/layout/includes/head.pug:40  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38|  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39| !=favicon_tag(theme.favicon || config.favicon)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; 40| &lt;span class=&quot;built_in&quot;&gt;link&lt;/span&gt;(rel=&lt;span class=&quot;string&quot;&gt;&amp;quot;canonical&amp;quot;&lt;/span&gt; href=urlNoIndex())  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; 41|  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; 42| //- 預解析  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; 43| !=partial(&lt;span class=&quot;string&quot;&gt;&amp;#x27;includes/head/preconnect&amp;#x27;&lt;/span&gt;, &amp;#123;&amp;#125;, &amp;#123;cache:theme.fragment_cache&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;prettyUrls is not a &lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;at Object. (/data/blog/themes/butterfly/scripts/helpers/page.js:58:10)  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;at &lt;span class=&quot;built_in&quot;&gt;eval&lt;/span&gt; (&lt;span class=&quot;built_in&quot;&gt;eval&lt;/span&gt; at wrap (/data/blog/node_modules/pug-runtime/wrap.js:6:10), :89:77)  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;at template (&lt;span class=&quot;built_in&quot;&gt;eval&lt;/span&gt; at wrap (/data/blog/node_modules/pug-runtime/wrap.js:6:10), :4603:215)  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;at _View._compiled (/data/blog/node_modules/hexo/lib/theme/view.js:136:50)  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;at _View.render (/data/blog/node_modules/hexo/lib/theme/view.js:39:17)  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;at /data/blog/node_modules/hexo/lib/hexo/index.js:64:21  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;at tryCatcher (/data/blog/node_modules/bluebird/js/release/util.js:16:23)  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;at /data/blog/node_modules/bluebird/js/release/method.js:15:34  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;at RouteStream._read (/data/blog/node_modules/hexo/lib/hexo/router.js:47:5)  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;at RouteStream.Readable.&lt;span class=&quot;built_in&quot;&gt;read&lt;/span&gt; (_stream_readable.js:479:10)  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;at resume_ (_stream_readable.js:966:12)  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;at processTicksAndRejections (internal/process/task_queues.js:80:21) &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;path: &lt;span class=&quot;string&quot;&gt;&amp;#x27;/data/blog/themes/butterfly/layout/includes/head.pug&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;解决方案&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;优先确认 themes&amp;#x2F;butterfly 中有相关的文件内容&lt;/li&gt;
&lt;li&gt;尝试执行如下命令： &lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;npm cache clean --force&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;rm&lt;/span&gt; -rf node_modules&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;rm&lt;/span&gt; -rf package-lock.json&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;npm install&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;hexo clean&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;hexo g&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;case2：&quot;&gt;&lt;a href=&quot;#case2：&quot; class=&quot;headerlink&quot; title=&quot;case2：&quot;&gt;&lt;/a&gt;case2：&lt;/h4&gt;&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;TypeError: /Users/blog/themes/butterfly/layout/includes/widget/index.pug:33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    31|       !=partial(&lt;span class=&quot;string&quot;&gt;&amp;#x27;includes/widget/card_tags&amp;#x27;&lt;/span&gt;, &amp;#123;&amp;#125;, &amp;#123;cache: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    32|       !=partial(&lt;span class=&quot;string&quot;&gt;&amp;#x27;includes/widget/card_archives&amp;#x27;&lt;/span&gt;, &amp;#123;&amp;#125;, &amp;#123;cache: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;gt; 33|       !=partial(&lt;span class=&quot;string&quot;&gt;&amp;#x27;includes/widget/card_webinfo&amp;#x27;&lt;/span&gt;, &amp;#123;&amp;#125;, &amp;#123;cache: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    34|       !=partial(&lt;span class=&quot;string&quot;&gt;&amp;#x27;includes/widget/card_bottom_self&amp;#x27;&lt;/span&gt;, &amp;#123;&amp;#125;, &amp;#123;cache: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/Users/blog/themes/butterfly/layout/includes/widget/card_webinfo.pug:18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    16|         .webinfo-item&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    17|           .item-name=_p(&lt;span class=&quot;string&quot;&gt;&amp;#x27;aside.card_webinfo.site_wordcount&amp;#x27;&lt;/span&gt;) + &lt;span class=&quot;string&quot;&gt;&amp;quot; :&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;gt; 18|           .item-count=totalcount(site)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    19|       &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; theme.busuanzi.site_uv&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    20|         .webinfo-item&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    21|           .item-name= _p(&lt;span class=&quot;string&quot;&gt;&amp;#x27;aside.card_webinfo.site_uv_name&amp;#x27;&lt;/span&gt;) + &lt;span class=&quot;string&quot;&gt;&amp;quot; :&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;totalcount is not a &lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;请检查是否安裝了wordcount插件&lt;/p&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;npm i --save hexo-wordcount&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&quot;case3：&quot;&gt;&lt;a href=&quot;#case3：&quot; class=&quot;headerlink&quot; title=&quot;case3：&quot;&gt;&lt;/a&gt;case3：&lt;/h4&gt;&lt;p&gt;如果你沒有 pug 以及 stylus 的渲染器会报错&lt;/p&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;extends includes/layout.pug block content include ./includes/mixins/post-ui&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.pug &lt;span class=&quot;comment&quot;&gt;#recent-posts.recent-posts +postUI include includes/pagination.pug&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;解决方案&lt;/p&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;npm install hexo-renderer-pug hexo-renderer-stylus --save&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;hexo clean&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;hexo g&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;hexo s&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&quot;case4：&quot;&gt;&lt;a href=&quot;#case4：&quot; class=&quot;headerlink&quot; title=&quot;case4：&quot;&gt;&lt;/a&gt;case4：&lt;/h4&gt;&lt;p&gt;hexo本地测试运行重启后页面空白，且提示 : &lt;/p&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;WARN No layout: index.html&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;可以参考 case1 &amp;amp; case2 ，即 hexo generate 没有成功&lt;/p&gt;
&lt;h4 id=&quot;case5：&quot;&gt;&lt;a href=&quot;#case5：&quot; class=&quot;headerlink&quot; title=&quot;case5：&quot;&gt;&lt;/a&gt;case5：&lt;/h4&gt;&lt;p&gt;尝试 hexo deploy 发布的时候失败，显示如下，没有反应&lt;/p&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;INFO  Validating config&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;INFO&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ===================================================================&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;#####  #    # ##### ##### ###### #####  ###### #      #   #&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;#    # #    #   #     #   #      #    # #      #       # #&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;#####  #    #   #     #   #####  #    # #####  #        #&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;#    # #    #   #     #   #      #####  #      #        #&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;#    # #    #   #     #   #      #   #  #      #        #&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;#####   ####    #     #   ###### #    # #      ######   #&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            4.1.0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ===================================================================&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;解决方案：deploy 参数需要配置到 _config.yml 文件中。&lt;br&gt;&lt;strong&gt;注意：冒号后面需要一个空格&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight yaml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;deploy:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;attr&quot;&gt;type:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;git&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;attr&quot;&gt;repo:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;git@github.com:yourname/yourname.github.io.git&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;# 推荐使用Git链接，使用http模式还会存在需要填写 用户名和邮箱的情况&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;attr&quot;&gt;branch:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;main&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;


&lt;p&gt;更多问题请参考 &lt;a href=&quot;https://butterfly.js.org/posts/98d20436/&quot;&gt;butterfly&lt;/a&gt;</summary>
        
      
    
    
    
    <category term="博客" scheme="https://bishoptylaor.github.io/categories/blog/"/>
    
    <category term="建站" scheme="https://bishoptylaor.github.io/categories/blog/build-blog/"/>
    
    
    <category term="butterfly" scheme="https://bishoptylaor.github.io/tags/butterfly/"/>
    
  </entry>
  
  <entry>
    <title>hexo建站（一）hexo</title>
    <link href="https://bishoptylaor.github.io/blog/build-blog/hexo101-1/"/>
    <id>https://bishoptylaor.github.io/blog/build-blog/hexo101-1/</id>
    <published>2022-02-20T10:34:53.000Z</published>
    <updated>2024-04-25T12:00:26.186Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h5 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h5&gt;&lt;p&gt;终于俺也有自己的 blog 了，下面就整个 hexo 建站和主题 butterfly 的配置分几个部分给大家做个小小的总结&lt;/p&gt;
&lt;p&gt;欢迎来到建站记录的第一部分：hexo 的安装&lt;/p&gt;
&lt;h2 id=&quot;Hexo-安装&quot;&gt;&lt;a href=&quot;#Hexo-安装&quot; class=&quot;headerlink&quot; title=&quot;Hexo 安装&quot;&gt;&lt;/a&gt;Hexo 安装&lt;/h2&gt;&lt;p&gt;官网地址：&lt;a href=&quot;https://hexo.io/zh-cn/&quot;&gt;https://hexo.io/zh-cn/&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;基础环境&quot;&gt;&lt;a href=&quot;#基础环境&quot; class=&quot;headerlink&quot; title=&quot;基础环境&quot;&gt;&lt;/a&gt;基础环境&lt;/h4&gt;&lt;p&gt;1.node&lt;br&gt;    首先去 &lt;a href=&quot;http://nodejs.cn/download/&quot;&gt;node.js&lt;/a&gt; 的官网下载最新的稳定版本，我这里选择的是 mac 版本的&lt;br&gt;2.npm&lt;br&gt;    包管理工具&lt;/p&gt;
&lt;h4 id=&quot;安装-hexo&quot;&gt;&lt;a href=&quot;#安装-hexo&quot; class=&quot;headerlink&quot; title=&quot;安装 hexo&quot;&gt;&lt;/a&gt;安装 hexo&lt;/h4&gt;&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;sudo&lt;/span&gt; npm install hexo&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;记得这里需要使用管理员权限安装&lt;/p&gt;
&lt;p&gt;初始化 hexo 至某个文件夹&lt;/p&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;hexo init blog&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这个文件夹就是自己将来管理文章的地方&lt;/p&gt;
&lt;p&gt;工程配置&lt;/p&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; blog&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;npm install&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;进入刚才初始化的 blog 文件夹&lt;/p&gt;
&lt;p&gt;浏览器调试&lt;/p&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;hexo generage&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;hexo server&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;也可以如下简写&lt;/p&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;hexo g&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;hexo s&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;


&lt;p&gt;必备插件&lt;/p&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;npm install hexo-renderer-pug hexo-renderer-stylus --save &lt;span class=&quot;comment&quot;&gt;# hexo 渲染必备&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;npm install hexo-server --save &lt;span class=&quot;comment&quot;&gt;# hexo 本地启动&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;npm install hexo-deployer-git --save&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;npm install --save hexo-wordcount &lt;span class=&quot;comment&quot;&gt;# wordcount 插件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;npm install hexo-butterfly-artitalk --save &lt;span class=&quot;comment&quot;&gt;# artitalk 插件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;npm install hexo-generator-feed --save &lt;span class=&quot;comment&quot;&gt;# RSS 插件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;npm install hexo-auto-category --save &lt;span class=&quot;comment&quot;&gt;# 自动根据目录生成categories&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;自动生成 categories 详情和配置方法具体可以参考 &lt;a</summary>
        
      
    
    
    
    <category term="博客" scheme="https://bishoptylaor.github.io/categories/blog/"/>
    
    <category term="建站" scheme="https://bishoptylaor.github.io/categories/blog/build-blog/"/>
    
    
    <category term="hexo" scheme="https://bishoptylaor.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://bishoptylaor.github.io/uncategorized/hello-world/"/>
    <id>https://bishoptylaor.github.io/uncategorized/hello-world/</id>
    <published>2022-02-19T10:08:13.883Z</published>
    <updated>2022-02-27T05:34:46.556Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;&lt;h3 id=&quot;Create-a-new-post&quot;&gt;&lt;a href=&quot;#Create-a-new-post&quot; class=&quot;headerlink&quot; title=&quot;Create a new post&quot;&gt;&lt;/a&gt;Create a new post&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo new &lt;span class=&quot;string&quot;&gt;&amp;quot;My New Post&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/writing.html&quot;&gt;Writing&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Run-server&quot;&gt;&lt;a href=&quot;#Run-server&quot; class=&quot;headerlink&quot; title=&quot;Run server&quot;&gt;&lt;/a&gt;Run server&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo server&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/server.html&quot;&gt;Server&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Generate-static-files&quot;&gt;&lt;a href=&quot;#Generate-static-files&quot; class=&quot;headerlink&quot; title=&quot;Generate static files&quot;&gt;&lt;/a&gt;Generate static files&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo generate&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/generating.html&quot;&gt;Generating&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Deploy-to-remote-sites&quot;&gt;&lt;a href=&quot;#Deploy-to-remote-sites&quot; class=&quot;headerlink&quot; title=&quot;Deploy to remote sites&quot;&gt;&lt;/a&gt;Deploy to remote sites&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo deploy&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;More info: &lt;a</summary>
        
      
    
    
    
    
  </entry>
  
</feed>
